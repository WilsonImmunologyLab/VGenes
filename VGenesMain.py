__author__ = 'wilsonp, lei li'
import os
import sys
import sqlite3 as db
import time
import re
#import sip
import shutil
import math
import numpy
import pandas as pd
import traceback
import csv

#import asyncio
#from aiohttp import TCPConnector, ClientSession

from PyQt5.QtCore import pyqtSlot, QTimer, Qt, QSortFilterProxyModel, pyqtSignal, QUrl, QObject, QThread, QEventLoop, QThreadPool, QRunnable, QEvent, QCoreApplication
from PyQt5 import QtWidgets
from PyQt5.QtPrintSupport import QPrintDialog, QPrinter
from PyQt5.QtGui import QTextCursor, QFont, QPixmap, QTextCharFormat, QBrush, QColor, QTextCursor, QCursor, QIcon, QPalette
from PyQt5.QtWidgets import QApplication, QTableView, QGridLayout, QTableWidgetItem, QCheckBox, QAbstractItemView, QLabel, QLineEdit, QComboBox, QCompleter, QListWidget, QHeaderView
from PyQt5.QtSql import QSqlQuery, QSqlQueryModel
from PyQt5.QtChart import QChart, QChartView, QScatterSeries, QLogValueAxis, QValueAxis
from operator import itemgetter
from PyQt5.QtWebEngine import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtWebChannel import *
from pyecharts.charts import *
from pyecharts import options as opts
from pyecharts.globals import SymbolType
from pyecharts.commons.utils import JsCode
from weblogo import read_seq_data, LogoData, LogoOptions, LogoFormat, eps_formatter, svg_formatter, SymbolColor, Alphabet, ColorScheme
from PIL import Image
import statistics
import itertools
from itertools import chain, groupby, zip_longest
from platform import system
import threading as thd
import seaborn as sns
import matplotlib
import random
matplotlib.use("Qt5Agg")
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

# import PyQtGraph
import pyqtgraph as pg
import pyqtgraph.exporters
# custimized plotitem and viewbox
from PyQtGraphPlotItem import PlotItem
from PyQtGraphViewBox import ViewBox

import VReports
from ui_VGenesMain import Ui_MainWindow
import IgBLASTer
from VgenesTextEdit import VGenesTextMain
import VGenesSQL
import VGenesSeq
import VGenesDialogues
from htmldialog import Ui_htmlDialog
from PyQt5.QtWidgets import QMainWindow

import tarfile
import zipfile
from tempfile import TemporaryDirectory

import VGenesCloneCaller
import MakeDb
from ui_Import_Dialogue import Ui_DialogImport

# Import pairwise2 module
from Bio import pairwise2
from Bio.SubsMat import MatrixInfo as matlist
#from Bio.Align import substitution_matrices

global OldName
global UpdateSpecific
UpdateSpecific = True
global from_table
from_table = False
import csv
import copy
from VGenesDialogues import openFile, openFiles, newFile, saveFile, questionMessage, informationMessage, setItem, \
    setText, openfastq, getItemDial
from ui_VGenesStartUpDialogue import Ui_VGenesStartUpDialog
from ui_import_data_dialog import Ui_ImportDataDialog
from ui_VGenesTextEdit import ui_TextEditor
from ui_alter_dialog import Ui_AlterDialog
from ui_annotatedialog import Ui_AnnoDialog
from ui_batch_dialog import Ui_BatchDialog
from ui_copydialog import Ui_CopyDialog
from ui_newfielddialog import Ui_NewFieldDialog
from ui_barcode_dialog import Ui_BarcodeDialog
from ui_table_dialog import Ui_TableDialog
from ui_statcheck_dislog import Ui_StatCheckDialog
from ui_translate_dialo import Ui_Translate_Dialog
from ui_gibson_dialog import Ui_GibsonDialog
from ui_patentdialog import Ui_PatentDialog
from ui_SHMtabledialog import Ui_SHMtableDialog
from ui_samplingdialog import Ui_SamplingDialog
from ui_deletedialog import Ui_deleteDialog
from ui_hclctabledialog import Ui_HCLCDialog
from ui_rename_dialog import Ui_RenameDialog
from ui_export_option_dialog import Ui_ExportOptionDialog
from ui_ProteinSimilarDialog import Ui_ProteinSimilarDialog
from ui_ProteinSimilarResultDialog import Ui_ProteinSimilarResultDialog
from ui_Qchart_dialog import Ui_QchartDialog
from ui_CloneOptiondialog import Ui_CloneOptionDialog
from ui_ChangeOdialog import Ui_ChangeODialog
from ui_UserListDialog import Ui_UserListDialog
from ui_MarkRecordsDialog import Ui_MarkRecordsDialog
from ui_AdvanceSelectiondialog import Ui_AdvanceSelectioDialog
from ui_TableDialog import Ui_ColorTableDialog
from ui_PatternSearchDialog import Ui_PatternSearchDialog
from ui_PatternSearchResultDialog import Ui_PatternSearchResultDialog
from ui_VDBMergeDialog import Ui_VDBMergeDialog
from ui_HistGramdialog import Ui_HistGramDialog
from ui_BeesWarmPlotdialog import Ui_BeesWarmPlotDialog
from ui_HeatmapViewerdialog import Ui_HeatmapViewerDialog
from VGenesProgressBar import ui_ProgressBar
# from VGenesPYQTSqL import EditableSqlModel, initializeModel , createConnection

global VGenesTextWindows
VGenesTextWindows = {}

from itertools import combinations
from collections import Counter
from subprocess import call, Popen, PIPE


from PyQt5.QtWidgets import QMessageBox, QInputDialog
from PyQt5.QtSql import QSqlDatabase, QSqlQuery

global LastPushed
LastPushed = ''

global RememberUserSelection
RememberUserSelection = []

global working_prefix
global temp_folder
global js_folder
global clustal_path
global muscle_path
global raxml_path
global igblast_path

# path setting
working_prefix = os.path.dirname(os.path.realpath(sys.argv[0]))
if system() == 'Darwin':
    temp_folder = os.path.join(working_prefix, 'Temp')
    js_folder = os.path.join(working_prefix, 'JS')
    clustal_path = os.path.join(working_prefix, 'Tools', 'clustalo')
    muscle_path = os.path.join(working_prefix, 'Tools', 'muscle')
    raxml_path = os.path.join(working_prefix, 'Tools', 'raxml')
    igblast_path = os.path.join(working_prefix, 'IgBlast', 'igblastn')
elif system() == 'Windows':
    temp_folder = os.path.join(working_prefix, 'Temp')
    js_folder = os.path.join(working_prefix, 'JS')
    clustal_path = os.path.join(working_prefix, 'Tools', 'clustalo.exe')
    muscle_path = os.path.join(working_prefix, 'Tools', 'muscle.exe')
    raxml_path = os.path.join(working_prefix, 'Tools', 'raxml.exe')
    igblast_path = os.path.join(working_prefix, 'IgBlast', 'igblastn.exe')
else:
    temp_folder = os.path.join(working_prefix, 'Temp')
    js_folder = os.path.join(working_prefix, 'JS')
    clustal_path = os.path.join(working_prefix, 'Tools', 'clustalo')
    muscle_path = os.path.join(working_prefix, 'Tools', 'muscle')
    raxml_path = os.path.join(working_prefix, 'Tools', 'raxml')
    igblast_path = os.path.join(working_prefix, 'IgBlast', 'igblastn')

ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
r = open(ErlogFile,'w')
r.write('')
r.close()
r = open(ErlogFile2, 'w')
r.write('')
r.close()

global IgBLASTAnalysis
IgBLASTAnalysis = []

global IMGTAnalysis
Analysis = []

global timer
global data
global LastSelected
global DBFilename
global wasClicked
global LineLen
LastSelected = ()
global updateMarker
updateMarker = False
global DontFindTwice
DontFindTwice = False
wasClicked = False
data = []
global MoveNotChange
MoveNotChange = False
global PreviewHTExp
PreviewHTExp = []
global PreviewHTcurrent
PreviewHTcurrent = 0
global PreviewCurrentType
PreviewCurrentType = 'H'
global JustMovedIt
JustMovedIt = True
global JustMoved
JustMoved = False


global RefreshSQL
RefreshSQL = 'select * from vgenesdb ORDER BY Project, Grouping, SubGroup, SeqName'
# global data
global FieldList
FieldList = ['SeqName', 'SeqLen', 'GeneType', 'V1', 'V2', 'V3', 'D1', 'D2', 'D3', 'J1', 'J2', 'J3', 'StopCodon',
             'ReadingFrame', 'productive', 'Strand', 'VSeqend', 'VDJunction', 'Dregion', 'DJJunction', 'begJ',
             'VJunction', 'FR1From', 'FR1To', 'FR1length', 'FR1matches', 'FR1mis', 'FR1gaps', 'FR1PercentIdentity',
             'CDR1From', 'CDR1to', 'CDR1length', 'CDR1matches', 'CDR1mis', 'CDR1gaps', 'CDR1PercentIdentity', 'FR2From',
             'FR2To', 'FR2length', 'FR2matches', 'FR2mis', 'FR2gaps', 'FR2PercentIdentity', 'CDR2From', 'CDR2to',
             'CDR2length', 'CDR2matches', 'CDR2mis', 'CDR2gaps', 'CDR2PercentIdentity', 'FR3From', 'FR3To', 'FR3length',
             'FR3matches', 'FR3mis', 'FR3gaps', 'FR3PercentIdentity', 'TotMut', 'SeqAlignment', 'GVbeg', 'GVend',
             'GD1beg', 'GD1end', 'GD2beg', 'GD2end', 'GJbeg', 'GJend', 'Vbeg', 'Vend', 'D1beg', 'D1end', 'D2beg',
             'D2end', 'Jbeg', 'Jend', 'Project', 'Grouping', 'SubGroup', 'Species', 'Sequence', 'GermlineSequence',
             'CDR3DNA', 'CDR3AA', 'CDR3Length', 'CDR3beg', 'CDR3end', 'Specificity', 'Subspecificity', 'ClonalPool',
             'ClonalRank', 'VLocus', 'JLocus', 'DLocus', 'DateEntered', 'Comments', 'Quality', 'TotalMuts', 'Mutations',
             'IDEvent', 'CDR3MW', 'CDR3pI', 'Isotype', 'GCDR3beg', 'GCDR3end', 'Blank6', 'Blank7', 'Blank8', 'Blank9',
             'Blank10', 'Blank11', 'Blank12', 'Blank13', 'Blank14', 'Blank15', 'Blank16', 'Blank17', 'Blank18',
             'Blank19', 'Blank20', 'ID']
global RealNameList
RealNameList = ["Name", "Length", "Type", "V gene", "V gene 2nd choice", "V gene 3rd choice", "D gene",
                " D gene 2nd choice", "D gene 3rd choice", "J gene", " J gene 2nd choice", "J gene 3rd choice",
                "Stop codons?", "Reading frame", "Productive?", "Strand", "End of V gene", "V to D Junction",
                "D region", "D to J junction", "Beginning of J", "V to J junction", "FWR1 first base", "FWR1 last base",
                "FWR1 length", "FWR1 matches", "FWR1 mismatches", "FWR1 gaps", "FWR1 percent identity",
                "CDR1 first base", "CDR1 last base", "CDR1 length", "CDR1 matches", "CDR1 mismatches", "CDR1 gaps",
                "CDR1 percent identity", "FWR2 first base", "FWR2 last base", "FWR2 length", "FWR2 matches",
                "FWR2 mismatches", "FWR2 gaps", "FWR2 percent identity", "CDR2 first base", "CDR2 last base",
                "CDR2 length", "CDR2 matches", "CDR2 mismatches", "CDR2 gaps", "CDR2 percent identity",
                "FWR3 first base", "FWR3 last base", "FWR3 length", "FWR3 matches", "FWR3 mismatches", "FWR3 gaps",
                "FWR3 percent identity", "IgBLAST mutation count", "IgBLAST Sequence Alignment", "Germline V begin",
                "Germline V end", "Germline D1 begin", "Germline D1 end", "Germline D2 begin", "Germline D2 end",
                "Germline J begin", "Germline J end", " V begin", " V end", " D1 begin", " D1 end", " D2 begin",
                " D2 end", " J begin", " J end", "Project", "Grouping", "Subgroup", "Species", "Sequence",
                " Germline sequence", "CDR3 DNA", "CDR3 peptide", "CDR3 length", "CDR3 first base", "CDR3 last base",
                "Specificity", "Subspecificity", "Clonal Pool", "Clonal Rank", "V locus", "J locus", "D locus",
                "Date and time entered", "Comments", "Quality", "Total Mutations", "Mutation list",
                "Insertions & deletions", "CDR3 molecular weight", "CDR3 isoelectric point", "Isotype",
                "Germlne CDR3 begin", "Germline CDR3 end", "Autoreactivity", "ORF", "10xCluster", "Seuret_Cluster", "10xBarCode", "Population",
                "Label", "Status", "Blank14", "Blank15", "Blank16", "Blank17", "Blank18", "Blank19", "Blank20", "ID"]

global FieldTypeList
FieldTypeList = ["Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed",
                 "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed", "Fixed"]
global FieldCommentList
FieldCommentList = ["", "", "", "", "", "", "", "", "", "", "","", "", "", "", "", "", "", "", "", "", "","", "", "",
                    "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "","", "", "", "", "", "",
                    "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "","", "", "", "", "", "", "", "", "",
                    "", "", "", "", "", "", "", "", "", "", "", "", "","", "", "", "", "", "", "", "", "", "", "", "",
                    "", "", "", "", "", "", "", "","", "", "", "", "", "", "", "", "", "", "", ""]

global NameIndex
NameIndex = {}
global FieldsChanged
FieldsChanged = []
# global ChangesBuffer
# ChangesBuffer = []
global FieldChanged
FieldChanged = False
global FirstupdateF
FirstupdateF = True

global GLMsg
GLMsg = True

# code adopted from https://www.learnpyqt.com/courses/concurrent-execution/multithreading-pyqt-applications-qthreadpool/
class WorkerSignals(QObject):
    '''
    Defines the signals available from a running worker thread.

    Supported signals are:

    finished
        No data

    error
        `tuple` (exctype, value, traceback.format_exc() )

    result
        `object` data returned from processing, anything

    progress
        `int` indicating % progress

    '''
    finished = pyqtSignal()
    error = pyqtSignal(tuple)
    result = pyqtSignal(object)
    progress = pyqtSignal(int)

# code adopted from https://www.learnpyqt.com/courses/concurrent-execution/multithreading-pyqt-applications-qthreadpool/
class Worker(QRunnable):
    '''
    Worker thread

    Inherits from QRunnable to handler worker thread setup, signals and wrap-up.

    :param callback: The function callback to run on this worker thread. Supplied args and
                     kwargs will be passed through to the runner.
    :type callback: function
    :param args: Arguments to pass to the callback function
    :param kwargs: Keywords to pass to the callback function

    '''

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()

        # Store constructor arguments (re-used for processing)
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
        self.signals = WorkerSignals()

        # Add the callback to our kwargs
        self.kwargs['progress_callback'] = self.signals.progress

    @pyqtSlot()
    def run(self):
        '''
        Initialise the runner function with passed args, kwargs.
        '''

        # Retrieve args/kwargs here; and fire processing using them
        try:
            result = self.fn(*self.args, **self.kwargs)
        except:
            traceback.print_exc()
            exctype, value = sys.exc_info()[:2]
            self.signals.error.emit((exctype, value, traceback.format_exc()))
        else:
            self.signals.result.emit(result)  # Return the result of the processing
        finally:
            self.signals.finished.emit()  # Done

class MyQList(QListWidget):
    def __init__(self):
        super().__init__()
        self.setAcceptDrops(True)
        self.cur_list = []
        self.old_list = []
        self.new_list = []
        self.hide = True

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls:
            try:
                event.setDropAction(Qt.CopyAction)
            except Exception as e:
                print(e)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        try:
            if event.mimeData().hasUrls:
                event.setDropAction(Qt.CopyAction)
                event.accept()
                links = []
                for url in event.mimeData().urls():
                    cur_file = str(url.toLocalFile())
                    if cur_file in self.cur_list:
                        pass
                    else:
                        self.cur_list.append(cur_file)
                        if self.hide == True:
                            my_path, my_file = os.path.split(cur_file)
                            links.append(my_file)
                        else:
                            links.append(cur_file)
                self.addItems(links)
            else:
                event.ignore()
        except Exception as e:
            print(e)

class Alignment_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list)

    def __int__(self):
        super(Alignment_thread, self).__init__()
        self.DBFilename = ''
        self.checkRecords = []

    def run(self):
        # Step 1: Fetch data
        self.HCLC_progress.emit(1, 2, 30)
        WhereState = 'SeqName IN ("' + '","'.join(self.checkRecords) + '")'
        field = 'SeqName,Sequence,FR1From,FR1To,CDR1From,CDR1To,FR2From,FR2To,CDR2From,CDR2To,FR3From,FR3To,CDR3beg,CDR3end,Jend,GermlineSequence,Blank7'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
        DataSet = []
        for item in DataIn:
            SeqName = item[0]
            Sequence = item[1]
            SeqFrom = int(item[2])
            SeqTo = int(item[14])
            Sequence = Sequence[SeqFrom - 1:SeqTo]  # only keep V(D)J section
            Sequence = Sequence.upper()
            EachIn = (
                SeqName, Sequence, item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10],
                item[11], item[12], item[13], item[14], item[15], item[16])
            DataSet.append(EachIn)

        # Step 2: make HTML
        self.HCLC_progress.emit(2, 2, 70)
        ErrMsg, html_file = AlignSequencesHTMLBCR(DataSet, '')

        # Step 4: send signal to VGenes
        self.HCLC_finish.emit([ErrMsg, html_file])

class Tree_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list)

    def __int__(self):
        super(Tree_thread, self).__init__()
        self.DBFilename = ''
        self.checkRecords = []

    def run(self):
        # Step 1: Fetch data
        self.HCLC_progress.emit(1, 6, 10)
        WhereState = 'SeqName IN ("' + '","'.join(self.checkRecords) + '")'
        field = 'SeqName,Sequence,GermlineSequence,Vbeg,Jend'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        # Step 2: write sequences into file
        self.HCLC_progress.emit(2, 6, 30)
        time_stamp = str(int(time.time() * 100))
        this_folder = os.path.join(temp_folder, time_stamp)
        cmd = 'mkdir ' + this_folder
        try:
            os.system(cmd)
        except:
            Msg = 'Fail to make temp folder!'
            self.HCLC_finish.emit([Msg, ''])
            return

        # Step 3: alignment
        self.HCLC_progress.emit(3, 6, 40)
        aafilename = this_folder + "/input.fas"
        outfilename = this_folder + "/alignment.fas"
        treefilename = 'tree'
        out_handle = open(aafilename, 'w')

        ## make a consensus germline seq and write to file
        GermSequences = [item[2] for item in DataIn]
        GermConsensusSeq = CalConsensus(GermSequences)
        ## if the length of those germline sequences are not same, which is unlikely
        if GermConsensusSeq == 'bad':
            print('align germline seq...')
            ConRawfilename = this_folder + "/con_raw_input.fas"
            Conoutfilename = this_folder + "/con_alignment.fas"
            with open(ConRawfilename, 'w') as f:
                for item in DataIn:
                    f.write('>' + item[0] + '\n')
                    f.write(item[2] + '\n')

            # align all consensus seqs
            cmd = muscle_path
            cmd += " -in " + ConRawfilename + " -out " + Conoutfilename
            try:
                os.system(cmd)
            except:
                Msg = 'Fail to run muscle! Check your muscle path!'
                self.HCLC_finish.emit([Msg, ''])
                return

            if os.path.exists(Conoutfilename) == False:
                Msg = 'Fail to run muscle! Check your muscle path!'
                self.HCLC_finish.emit([Msg, ''])
                return

            ConAli = ReadFasta(Conoutfilename)
            GermSequences = [item[1] for item in ConAli]
            GermConsensusSeq = CalConsensus(GermSequences)

        out_handle.write('>Germline_consensus\n')
        out_handle.write(GermConsensusSeq + '\n')
        ## write sequences into file
        for item in DataIn:
            SeqName = item[0]
            Sequence = item[1]
            try:
                Vbeg = int(item[3]) - 1
            except:
                Vbeg = 0

            try:
                Jend = int(item[4])
            except:
                Jend = len(Sequence)

            VDJSequence = Sequence[Vbeg:Jend]

            # parse seq name
            SeqName = re.sub(r'[^\w\d\/\>]', '_', SeqName)
            SeqName = re.sub(r'_+', '_', SeqName)
            SeqName = SeqName.strip('_')

            out_handle.write('>' + SeqName + '\n')
            out_handle.write(VDJSequence + '\n')
        out_handle.close()

        # Step 4: alignment aiagn
        self.HCLC_progress.emit(4, 6, 50)
        cmd = muscle_path
        cmd += " -in " + aafilename + " -out " + outfilename
        try:
            os.system(cmd)
        except:
            Msg = 'Fail to run muscle! Check your muscle path!'
            self.HCLC_finish.emit([Msg, ''])
            return

        # Step 5: generate tree
        self.HCLC_progress.emit(4, 6, 70)
        # cmd = 'cd ' + this_folder + ';'
        # cmd += raxml_path
        # cmd += ' -m GTRGAMMA -p 12345 -T 2 -s ' + outfilename + ' -n ' + treefilename
        if system() == 'Windows':
            cmd = 'cd ' + this_folder + ' & '
            cmd += raxml_path
            cmd += ' -m GTRGAMMA -p 12345 -T 2 -s ' + outfilename + ' -n ' + treefilename
        elif system() == 'Darwin':
            cmd = 'cd ' + this_folder + ';'
            cmd += raxml_path
            cmd += ' -m GTRGAMMA -p 12345 -T 2 -s ' + outfilename + ' -n ' + treefilename
        elif system() == 'Linux':
            cmd = 'cd ' + this_folder + ';'
            cmd += raxml_path
            cmd += ' -m GTRGAMMA -p 12345 -T 2 -s ' + outfilename + ' -n ' + treefilename
        else:
            cmd = ''
        os.system(cmd)
        print("tree done!")

        # Step 6: generate html page
        self.HCLC_progress.emit(6, 6, 90)
        treefile = os.path.join(this_folder, 'RAxML_bestTree.tree')
        if os.path.exists(treefile):
            pass
        else:
            Msg = 'Fail to generate tree!'
            self.HCLC_finish.emit([Msg, ''])
            return

        f = open(treefile, 'r')
        tree_str = f.readline()
        f.close()
        tree_str = 'var test_string = "' + tree_str.rstrip("\n") + '";\n'

        out_html_file = os.path.join(this_folder, 'tree.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_raxml_tree.html')
        shutil.copyfile(header_file, out_html_file)

        foot = 'var container_id = "#tree_container";\nvar svg = d3.select(container_id).append("svg")' \
               '.attr("width", width).attr("height", height);\n$( document ).ready( function () {' \
               'default_tree_settings();tree(test_string).svg (svg).layout();update_selection_names();' \
               '});\n</script>\n</body>\n</html>'
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(tree_str)
        out_file_handle.write(foot)
        out_file_handle.close()

        # Step 5: send signal to VGenes
        self.HCLC_finish.emit(['OK', out_html_file])

class SeqLogo_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list)

    def __int__(self):
        super(Tree_thread, self).__init__()
        self.DBFilename = ''
        self.checkRecords = []
        self.type = ''
        self.field = ''
        self.color = ''

    def run(self):
        # Step 1: Fetch data
        self.HCLC_progress.emit(1, 3, 30)
        WhereState = 'SeqName IN ("' + '","'.join(self.checkRecords) + '")'
        DataSet = []

        field = self.field
        if field in FieldList:
            SQLStatement = 'SELECT SeqName, ' + field + ' FROM vgenesDB WHERE ' + WhereState
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            for item in DataIn:
                SeqName = item[0]
                Sequence = item[1]
                if self.type == 'AA':
                    AAseq, msg = VGenesSeq.Translator(Sequence, 0)
                    AAseq = AAseq.upper()
                    EachIn = (SeqName, AAseq)
                else:
                    Sequence = Sequence.upper()
                    EachIn = (SeqName, Sequence)
                DataSet.append(EachIn)
        else:
            # determine gene region
            if field == 'V gene':
                field = 'Sequence,Vbeg,Vend'
            elif field == 'V(D)J':
                field = 'Sequence,Vbeg,Jend'
            elif field == 'J gene':
                field = 'Sequence,Jbeg,Jend'
            elif field == 'FWR1':
                field = 'Sequence,FR1From,FR1To'
            elif field == 'CDR1':
                field = 'Sequence,CDR1From,CDR1To'
            elif field == 'FWR2':
                field = 'Sequence,FR2From,FR2To'
            elif field == 'CDR2':
                field = 'Sequence,CDR2From,CDR2To'
            elif field == 'FWR3':
                field = 'Sequence,FR3From,FR3To'

            # make sequences
            SQLStatement = 'SELECT SeqName, ' + field + ' FROM vgenesDB WHERE ' + WhereState
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            for item in DataIn:
                SeqName = item[0]
                Sequence = item[1]
                SeqFrom = int(item[2])
                SeqTo = int(item[3])
                Sequence = Sequence[SeqFrom - 1:SeqTo]
                if self.type == 'AA':
                    AAseq, msg = VGenesSeq.Translator(Sequence, 0)
                    AAseq = AAseq.upper()
                    EachIn = (SeqName, AAseq)
                else:
                    Sequence = Sequence.upper()
                    EachIn = (SeqName, Sequence)
                DataSet.append(EachIn)

        # Step 2: align selected sequences using muscle
        self.HCLC_progress.emit(2, 3, 60)
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        outfilename = os.path.join(temp_folder, "out-" + time_stamp + ".fas")
        aafilename = os.path.join(temp_folder, "in-" + time_stamp + ".fas")
        if len(DataSet) == 1:
            SeqName = DataSet[0][0].replace('\n', '').replace('\r', '')
            SeqName = SeqName.strip()
            AAseq = DataSet[0][1]

            out_handle = open(outfilename, 'w')
            out_handle.write('>' + SeqName + '\n')
            out_handle.write(AAseq)
            out_handle.close()
        else:
            aa_handle = open(aafilename, 'w')
            for record in DataSet:
                SeqName = record[0].replace('\n', '').replace('\r', '')
                SeqName = SeqName.strip()
                AAseq = record[1]
                aa_handle.write('>' + SeqName + '\n')
                aa_handle.write(AAseq + '\n')
            aa_handle.close()

            if system() == 'Windows':
                cmd = muscle_path
                cmd += " -in " + aafilename + " -out " + outfilename
            elif system() == 'Darwin':
                cmd = muscle_path
                cmd += " -in " + aafilename + " -out " + outfilename
            elif system() == 'Linux':
                cmd = muscle_path
                cmd += " -in " + aafilename + " -out " + outfilename
            else:
                cmd = ''
            try:
                os.system(cmd)
            except:
                Msg = 'Fail to run muscle! Check your muscle path!'
                self.HCLC_finish.emit([Msg, ''])
                return

        # Step 3: start web logo
        self.HCLC_progress.emit(2, 3, 60)
        f = open(outfilename)
        seqs = read_seq_data(f)
        f.close()
        data = LogoData.from_seqs(seqs)

        options = LogoOptions()
        options.resolution = 300
        options.fineprint = 'VGene Generated by WebLogo 3.7'
        colorscheme = logoColorSchemeAA(self.color)
        if colorscheme != "default":
            options.color_scheme = colorscheme
        options.fineprint = 'VGene Generated by WebLogo 3.7'
        format = LogoFormat(data, options)

        # Step 4: send signal to VGenes
        self.HCLC_finish.emit(['OK', data, format])

class SeqSimilarity_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list)

    def __int__(self):
        super(SeqSimilarity_thread, self).__init__()
        self.DBFilename = ''
        self.checkRecords = []

    def run(self):
        # Step 1: Fetch data
        self.HCLC_progress.emit(1, 4, 30)
        WhereState = 'SeqName IN ("' + '","'.join(self.checkRecords) + '")'
        field = 'SeqName,Sequence,FR1From,Jend,Blank7'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        AAseqArray = []
        NTseqArray = []
        for item in DataIn:
            SeqName = item[0]
            Sequence = item[1]
            SeqFrom = int(item[2])
            SeqTo = int(item[3])
            Sequence = Sequence[SeqFrom - 1:SeqTo]  # only keep V(D)J section
            Sequence = Sequence.upper()
            try:
                ORF = int(item[4])
            except:
                ORF = 0

            AASequence, msg = Translator(Sequence, ORF)
            EachIn = (SeqName, Sequence)
            AAEachIn = (SeqName, AASequence)
            NTseqArray.append(EachIn)
            AAseqArray.append(AAEachIn)

        # Step 2: align sequenmce
        self.HCLC_progress.emit(2, 4, 50)
        NTseqArrayAlign = AlignSeqMuscle(NTseqArray, muscle_path, temp_folder)
        AAseqArrayAlign = AlignSeqMuscle(AAseqArray, muscle_path, temp_folder)

        # Step 3: calculate similar percent matrix
        self.HCLC_progress.emit(3, 4, 70)
        min_value = 80
        NTdata = []
        seq_names = []
        for i in range(len(NTseqArrayAlign)):
            seq_names.append(NTseqArrayAlign[i][0])
            unit = [i, i, 100.00]
            NTdata.append(unit)
            for j in range(i + 1, len(NTseqArrayAlign)):
                identPct = SequenceIdentity(NTseqArrayAlign[i][1], NTseqArrayAlign[j][1])
                if identPct < min_value:
                    min_value = identPct
                unit = [i, j, round(identPct, 2)]
                NTdata.append(unit)
                unit = [j, i, round(identPct, 2)]
                NTdata.append(unit)

        AAdata = []
        for i in range(len(AAseqArrayAlign)):
            unit = [i, i, 100.00]
            AAdata.append(unit)
            for j in range(i + 1, len(AAseqArrayAlign)):
                identPct = SequenceIdentity(AAseqArrayAlign[i][1], AAseqArrayAlign[j][1])
                if identPct < min_value:
                    min_value = identPct
                unit = [i, j, round(identPct, 2)]
                AAdata.append(unit)
                unit = [j, i, round(identPct, 2)]
                AAdata.append(unit)

        xaxis_data = seq_names
        yaxis_data = seq_names

        # Step 4: render HTML NT
        self.HCLC_progress.emit(4, 4, 90)
        my_pyecharts = HeatMap(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
        my_pyecharts.add_xaxis(xaxis_data)
        my_pyecharts.add_yaxis(
            "Sequence identity(%)",
            yaxis_data,
            NTdata,
            label_opts=opts.LabelOpts(
                is_show=True,
                position="inside",
                color='black',
                font_weight=2,
                formatter=JsCode("""
                            function(params) {
                                mydata = params.data;
                                return mydata[2] + '%';
                            }					
                        """)
            )
        )
        my_pyecharts.set_series_opts()
        my_pyecharts.set_global_opts(
            title_opts=opts.TitleOpts(title="Sequence similarity HeatMap\nLeft: NT, Right: AA"),
            visualmap_opts=opts.VisualMapOpts(min_=min_value, max_=100, range_color=['#ffffcc', '#006699']),
            tooltip_opts=opts.TooltipOpts(
                formatter=JsCode("""
                            function(params) {
                                mydata = params.data;
                                return 'Seq1: ' + Seqdata[mydata[0]] + '<br>' + 'Seq2: ' + Seqdata[mydata[1]] + '<br>' + 'Similarity: ' + mydata[2] + '%';
                            }	
                        """)
            ),
            xaxis_opts=opts.AxisOpts(
                type_="category",
                axislabel_opts=opts.LabelOpts(rotate=-45, interval=0),
                splitarea_opts=opts.SplitAreaOpts(is_show=True, areastyle_opts=opts.AreaStyleOpts(opacity=1))
            )
        )

        # render HTML AA
        my_pyechartsAA = HeatMap(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
        my_pyechartsAA.add_xaxis(xaxis_data)
        my_pyechartsAA.add_yaxis(
            "Sequence identity(%)",
            yaxis_data,
            AAdata,
            label_opts=opts.LabelOpts(
                is_show=True,
                position="inside",
                color='black',
                font_weight=2,
                formatter=JsCode("""
                            function(params) {
                                mydata = params.data;
                                return mydata[2] + '%';
                            }					
                        """)
            )
        )
        my_pyechartsAA.set_series_opts()
        my_pyechartsAA.set_global_opts(
            visualmap_opts=opts.VisualMapOpts(min_=min_value, max_=100, range_color=['#ffffcc', '#006699']),
            tooltip_opts=opts.TooltipOpts(
                formatter=JsCode("""
                                        function(params) {
                                            mydata = params.data;
                                            return 'Seq1: ' + Seqdata[mydata[0]] + '<br>' + 'Seq2: ' + Seqdata[mydata[1]] + '<br>' + 'Similarity: ' + mydata[2] + '%';
                                        }	
                                    """)
            ),
            xaxis_opts=opts.AxisOpts(
                type_="category",
                axislabel_opts=opts.LabelOpts(rotate=-45, interval=0),
                splitarea_opts=opts.SplitAreaOpts(is_show=True, areastyle_opts=opts.AreaStyleOpts(opacity=1))
            )
        )

        grid = Grid()
        grid.add(my_pyecharts, grid_opts=opts.GridOpts(pos_bottom="20%", pos_left="20%", pos_right="50%"))
        grid.add(my_pyechartsAA, grid_opts=opts.GridOpts(pos_bottom="20%", pos_left="65%", pos_right="5%"))
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        html_path = os.path.join(temp_folder, time_stamp + '.html')
        grid.render(path=html_path)

        # modify HTML
        file_handle = open(html_path, 'r')
        lines = file_handle.readlines()
        file_handle.close()
        ## edit js line
        js_line = '<script type="text/javascript" src="' + \
                  os.path.join(working_prefix, 'Js', 'echarts.js') + '"></script>' + \
                  '<script src="' + os.path.join(working_prefix, 'Js', 'jquery.js') + '"></script>'
        SeqdataLine = '<script>Seqdata=["'
        SeqdataLine += '","'.join(seq_names)
        SeqdataLine += '"]</script>'
        lines[5] = js_line + "\n" + SeqdataLine
        ## edit style line
        style_line = lines[9]
        style_pos = style_line.find('style')
        style_line = style_line[0:style_pos] + \
                     'style="position: fixed; top: 0px; left: 5%;width:95%; height:600px;"></div>'
        lines[9] = style_line
        content = '\n'.join(lines)
        file_handle = open(html_path, 'w')
        file_handle.write(content)
        file_handle.close()

        # Step 5: send signal to VGenes
        self.HCLC_finish.emit(['OK', html_path])

class HCLC_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list)

    def __int__(self):
        super(HCLC_thread, self).__init__()
        self.DBFilename = ''
        self.Pathname = ''
        self.checkRecords = []

    def run(self):
        Msg = ''
        sign = 0
        # Step 1: Copy current DB to new DB
        self.HCLC_progress.emit(0, 1000, 1)
        try:
            shutil.copy(self.DBFilename, self.Pathname)
        except:
            Msg = 'Can not save file in this path! You do not have write permission!'
            sign = 1
            self.HCLC_finish.emit([sign, Msg, self.Pathname])
        # Step 2: search on new DB
        Good_list = []
        if len(self.checkRecords) == 0:
            SQLStatement = 'SELECT DISTINCT(Blank10) FROM vgenesdb WHERE GeneType = "Heavy"'
            DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
        else:
            list_str = '("' + '","'.join(self.checkRecords) + '")'
            SQLStatement = 'SELECT DISTINCT(Blank10) FROM vgenesdb WHERE SeqName IN ' + list_str
            DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

        if len(DataIn) < 2:
            Msg = 'Your VGene DB do not have any barcode information!'
            sign = 1
        else:
            seq_num = 0
            progress = 0
            for record in DataIn:
                barcode = record[0]
                if barcode == 'Blank10' or barcode == '':
                    pass
                else:
                    SQLStatement1 = 'SELECT SeqName FROM vgenesdb WHERE Blank10 = "' + barcode + '" AND GeneType IN ("Heavy","Beta","Delta")'
                    DataIn1 = VGenesSQL.RunSQL(self.DBFilename, SQLStatement1)
                    SQLStatement2 = 'SELECT SeqName FROM vgenesdb WHERE Blank10 = "' + barcode + '" AND GeneType NOT IN ("Heavy","Beta","Delta")'
                    DataIn2 = VGenesSQL.RunSQL(self.DBFilename, SQLStatement2)
                    if len(DataIn1) == 1 and len(DataIn2) == 1:
                        Good_list.append(barcode)

                self.HCLC_progress.emit(progress, len(DataIn), int(progress / len(DataIn) * 100))
                progress += 1

        # Step 3: delete all incomplete BCR and duplicate BCRs
        seq_num = len(Good_list)
        if seq_num > 0:
            # edit on new DB
            list_str = '("' + '","'.join(Good_list) + '")'
            SQLStatement = 'DELETE FROM vgenesdb WHERE Blank10 NOT IN ' + list_str
            VGenesSQL.RunUpdateSQL(self.Pathname, SQLStatement)

            Msg = 'Total ' + str(seq_num) + ' HC/LC pairs were found!'
            sign = 0
        else:
            Msg = 'Did not find any HC/LC pair in your current DB!'
            sign = 1

        # Step 4: send signal to VGenes
        self.HCLC_finish.emit([sign, Msg, self.Pathname])

class HCLC_pair_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list, list, str)

    def __int__(self):
        super(HCLC_pair_thread, self).__init__()
        self.DBFilename = ''
        self.checkRecords = []

    def run(self):
        progress = 1
        new_checks = []
        
        # if users checked any records, will search paired HC/LC for all checked records
        if len(self.checkRecords) > 0:
            ErrMsgType1 = ''
            ErrMsgType2 = ''
            ErrMsgType3 = ''
            for item in self.checkRecords:
                SQLStatement = 'SELECT SeqName,Blank10 FROM vgenesDB WHERE SeqName = "' + item + '"'
                DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                barcode = DataIn[0][1]
                if barcode == 'Blank10' or barcode == '':
                    ErrMsgType1 += "Sequence " + item + "does not have barcode information!\n"
                    continue
                else:
                    SQLStatement = 'SELECT SeqName,Blank10 FROM vgenesDB WHERE Blank10 = "' + barcode + '"'
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    i = len(DataIn) - 1
                    if i == 0:
                        ErrMsgType2 += "For " + item + ", did not find any Heavy/Light chain using same barcode!\n"
                        continue
                    else:
                        ErrMsgType3 += "For " + item + ", find " + str(i) + " Heavy/Light chain using same barcode!\n"
                        for record in DataIn:
                            Seqname = record[0]
                            if Seqname in self.checkRecords:
                                pass
                            else:
                                new_checks.append(Seqname)

                self.HCLC_progress.emit(progress, len(self.checkRecords), int(progress / len(self.checkRecords) * 100))
                progress += 1
                print(item)

            ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
            with open(ErlogFile, 'w') as currentFile:
                currentFile.write('Running finished!\n')
                currentFile.write('\nThe following records have paired HC/LC:\n')
                currentFile.write(ErrMsgType3)
                currentFile.write('\nThe following records do not have barcode information:\n')
                currentFile.write(ErrMsgType1)
                currentFile.write('\nThe following records do not have any paired HC/LC:\n')
                currentFile.write(ErrMsgType2)

        # send signal to VGenes
        self.HCLC_finish.emit(self.checkRecords, new_checks, ErlogFile)

class CopyRecord_thread(QThread):
    HCLC_progress = pyqtSignal(int, int, int)
    HCLC_finish = pyqtSignal(list)

    def __int__(self):
        super(CopyRecord_thread, self).__init__()
        self.DBFilename = ''
        self.Pathname = ''
        self.checkRecords = []

    def run(self):
        Msg = ''
        sign = 0
        # Step 1: Copy current DB to new DB
        self.HCLC_progress.emit(1, len(self.checkRecords), 1)
        try:
            shutil.copy(self.DBFilename, self.Pathname)
        except:
            Msg = 'Can not save file in this path! You do not have write permission!'
            sign = 1
            self.HCLC_finish.emit([sign, Msg, self.Pathname])

        # Step 2: delete unchecked records from new DB
        list_str = '("' + '","'.join(self.checkRecords) + '")'
        SQLStatement = 'DELETE FROM vgenesdb WHERE SeqName NOT IN ' + list_str
        VGenesSQL.RunUpdateSQL(self.Pathname, SQLStatement)

        Msg = 'New DB with selected records have been created!'
        sign = 0

        # Step 3: send signal to VGenes
        self.HCLC_finish.emit([sign, Msg, self.Pathname])

class AdvanceSelectioDialog(QtWidgets.QDialog):
    BatchSignal = pyqtSignal(list)

    def __init__(self):
        super(AdvanceSelectioDialog, self).__init__()
        self.ui = Ui_AdvanceSelectioDialog()
        self.ui.setupUi(self)

        self.initial = 0
        
        self.ui.comboBox1.row = 1
        self.ui.radioButton1.row = 1
        self.ui.plainTextEdit1.row = 1
        self.ui.comboBox2.row = 2
        self.ui.radioButton2.row = 2
        self.ui.plainTextEdit2.row = 2
        self.ui.comboBox3.row = 3
        self.ui.radioButton3.row = 3
        self.ui.plainTextEdit3.row = 3
        self.ui.comboBox4.row = 4
        self.ui.radioButton4.row = 4
        self.ui.plainTextEdit4.row = 4
        self.ui.comboBox5.row = 5
        self.ui.radioButton5.row = 5
        self.ui.plainTextEdit5.row = 5
        self.ui.comboBox6.row = 6
        self.ui.radioButton6.row = 6
        self.ui.plainTextEdit6.row = 6

        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.comboBox1.currentTextChanged.connect(self.StatFig)
        self.ui.comboBox2.currentTextChanged.connect(self.StatFig)
        self.ui.comboBox3.currentTextChanged.connect(self.StatFig)
        self.ui.comboBox4.currentTextChanged.connect(self.StatFig)
        self.ui.comboBox5.currentTextChanged.connect(self.StatFig)
        self.ui.comboBox6.currentTextChanged.connect(self.StatFig)

        self.ui.radioButton1.clicked.connect(self.StatFig)
        self.ui.radioButton2.clicked.connect(self.StatFig)
        self.ui.radioButton3.clicked.connect(self.StatFig)
        self.ui.radioButton4.clicked.connect(self.StatFig)
        self.ui.radioButton5.clicked.connect(self.StatFig)
        self.ui.radioButton6.clicked.connect(self.StatFig)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")
    
    def updateInfo(self, DataIn):
        data = [row[0] for row in DataIn]
        result = Counter(data)

        text = ''
        for ele in result.most_common():
            text += str(ele[0]) + '\t' + str(ele[1]) + '\n'
        self.ui.plainTextEditRange.setPlainText(text)
    
    def StatFig(self):
        if self.initial == 0:
            return

        # check if redudant
        filed_names = []
        filed_names.append(self.ui.comboBox1.currentText())
        filed_names.append(self.ui.comboBox2.currentText())
        filed_names.append(self.ui.comboBox3.currentText())
        filed_names.append(self.ui.comboBox4.currentText())
        filed_names.append(self.ui.comboBox5.currentText())
        filed_names.append(self.ui.comboBox6.currentText())
        unique_value_dict = Counter(filed_names)
        redudant_sign = 0
        for value in unique_value_dict:
            if unique_value_dict[value] > 1:
                if value != '':
                    redudant_sign = 1

        # determine row of sender
        sender_widget = self.sender()
        if sender_widget.row == 1:
            filed_name = self.ui.comboBox1.currentText()
            figure_type = self.ui.radioButton1.isChecked()
            data_range = self.ui.plainTextEdit1.toPlainText()
            if redudant_sign == 1:
                self.initial = 0
                self.ui.comboBox1.setCurrentText('')
                self.initial = 2
        elif sender_widget.row == 2:
            filed_name = self.ui.comboBox2.currentText()
            figure_type = self.ui.radioButton2.isChecked()
            data_range = self.ui.plainTextEdit2.toPlainText()
            if redudant_sign == 1:
                self.initial = 0
                self.ui.comboBox2.setCurrentText('')
                self.initial = 2
        elif sender_widget.row == 3:
            filed_name = self.ui.comboBox3.currentText()
            figure_type = self.ui.radioButton3.isChecked()
            data_range = self.ui.plainTextEdit3.toPlainText()
            if redudant_sign == 1:
                self.initial = 0
                self.ui.comboBox3.setCurrentText('')
                self.initial = 2
        elif sender_widget.row == 4:
            filed_name = self.ui.comboBox4.currentText()
            figure_type = self.ui.radioButton4.isChecked()
            data_range = self.ui.plainTextEdit4.toPlainText()
            if redudant_sign == 1:
                self.initial = 0
                self.ui.comboBox4.setCurrentText('')
                self.initial = 2
        elif sender_widget.row == 5:
            filed_name = self.ui.comboBox5.currentText()
            figure_type = self.ui.radioButton5.isChecked()
            data_range = self.ui.plainTextEdit5.toPlainText()
            if redudant_sign == 1:
                self.initial = 0
                self.ui.comboBox5.setCurrentText('')
                self.initial = 2
        elif sender_widget.row == 6:
            filed_name = self.ui.comboBox6.currentText()
            figure_type = self.ui.radioButton6.isChecked()
            data_range = self.ui.plainTextEdit6.toPlainText()
            if redudant_sign == 1:
                self.initial = 0
                self.ui.comboBox6.setCurrentText('')
                self.initial = 2

        if redudant_sign == 1:
            Msg = 'You already have filter on this field:\n' + filed_name
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        if filed_name == '':
            return
        
        # delete old figure
        if self.ui.gridLayoutFig.count() > 0:
            for i in range(self.ui.gridLayoutFig.count()):
                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()

        # numeric value
        if figure_type == True:
            field = re.sub(r'\(.+', '', filed_name)
            SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            self.updateInfo(DataIn)

            value_list = []
            char_list = []
            non_number_count = 0
            for row in DataIn:
                try:
                    value_list.append(float(row[0]))
                except:
                    char_list.append(row[0])
                    non_number_count += 1

            if len(value_list) == 0:
                Msg = 'No value can be converted to number!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                if sender_widget.row == 1:
                    self.ui.radioButton1.setChecked(False)
                elif sender_widget.row == 2:
                    self.ui.radioButton2.setChecked(False)
                elif sender_widget.row == 3:
                    self.ui.radioButton3.setChecked(False)
                elif sender_widget.row == 4:
                    self.ui.radioButton4.setChecked(False)
                elif sender_widget.row == 5:
                    self.ui.radioButton5.setChecked(False)
                elif sender_widget.row == 6:
                    self.ui.radioButton6.setChecked(False)
                self.StatFig()
                return

            # do it later
            ## number list
            #self.ui.LineEditCutoff.min = min(value_list)
            #self.ui.LineEditCutoff.max = max(value_list)
            #self.updateNum()

            ## char list
            #char_list = list(set(char_list))
            #for i in range(len(char_list)):
            #    if char_list[i] == None:
            #        char_list[i] = 'NULL'
            #self.load_data_char(char_list)

            #num_list = []
            #error = False
            #if self.ui.LineEditCutoff.text() != '':
            #    temp_data = self.ui.LineEditCutoff.text().split(',')
            #    if len(temp_data) > 0:
            #        for ele in temp_data:
            #            try:
            #                num = float(ele)
            #                if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
             #                   num_list.append(num)
             #           except:
             #               error = True
             #       # remove redudant and sort
            #        num_list = list(set(num_list))
            #        num_list.sort()

            # update figure
            SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            F = MyFigure(width=3, height=3, dpi=300)
            F.axes.hist(value_list, bins=30)

            #if error == False:
            #    ymin, ymax = F.axes.get_ylim()
            #    for num in num_list:
            #        F.axes.plot([num,num], [ymin, ymax], color='r', linewidth = 1, label="Cutoff")

            F.axes.tick_params(labelsize=7)
            F.fig.subplots_adjust(bottom=0.1)

            self.ui.gridLayoutFig.addWidget(F, 0, 1)
        # character value
        else:
            if self.initial == 0:
                return
            elif self.initial == 1:
                return
            elif self.initial == 2:
                field = re.sub(r'\(.+', '', filed_name)
                SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = [row[0] for row in DataIn]

                if len(value_list) > 30:
                    question = 'Distinct values of this field seems too many (number =  ' + str(
                        len(value_list)) + ')\nAre you sure?'
                    buttons = 'YN'
                    answer = questionMessage(self, question, buttons)
                    if answer == 'No':
                        return

            for i in range(len(value_list)):
                if value_list[i] == None:
                    value_list[i] = 'NULL'

            # update figure
            SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            self.updateInfo(DataIn)

            data = []
            for element in DataIn:
                data.append(element[0])
            result = Counter(data)
            labels = result.keys()
            values = result.values()
            colors = sns.color_palette("hls", len(values))

            # replace None by 'No record'
            labels = list(labels)
            values = list(values)
            for i in range(len(labels)):
                if labels[i] == None:
                    labels[i] = 'NULL'

            F = MyFigure(width=3, height=3, dpi=300)
            F.axes.bar(labels, values, color=colors)
            F.axes.set_xticklabels(labels, rotation=-90)
            F.axes.tick_params(labelsize=7)

            # determine spacing
            lens = [len(lab) for lab in labels]
            max_len = max(lens)
            if max_len < 20:
                my_adjust = 0.1 + max_len/50
                F.fig.subplots_adjust(bottom=my_adjust)

            self.ui.gridLayoutFig.addWidget(F, 0, 1)
        
        self.ui.labelField.setText('Data distribution of '+ filed_name)
        
    def accept(self):
        numerical_filters = []
        char_filters = []
        # process each field
        field_name = self.ui.comboBox1.currentText()
        field_name = re.sub(r'\(.+', '', field_name)
        if field_name == '':
            pass
        else:
            if self.ui.plainTextEdit1.toPlainText() == '':
                pass
            else:
                if self.ui.radioButton1.isChecked():
                    numerical_filters.append([field_name, self.ui.plainTextEdit1.toPlainText()])
                else:
                    char_filters.append([field_name, self.ui.plainTextEdit1.toPlainText()])

        field_name = self.ui.comboBox2.currentText()
        field_name = re.sub(r'\(.+', '', field_name)
        if field_name == '':
            pass
        else:
            if self.ui.plainTextEdit2.toPlainText() == '':
                pass
            else:
                if self.ui.radioButton2.isChecked():
                    numerical_filters.append([field_name, self.ui.plainTextEdit2.toPlainText()])
                else:
                    char_filters.append([field_name, self.ui.plainTextEdit2.toPlainText()])

        field_name = self.ui.comboBox3.currentText()
        field_name = re.sub(r'\(.+', '', field_name)
        if field_name == '':
            pass
        else:
            if self.ui.plainTextEdit3.toPlainText() == '':
                pass
            else:
                if self.ui.radioButton3.isChecked():
                    numerical_filters.append([field_name, self.ui.plainTextEdit3.toPlainText()])
                else:
                    char_filters.append([field_name, self.ui.plainTextEdit3.toPlainText()])

        field_name = self.ui.comboBox4.currentText()
        field_name = re.sub(r'\(.+', '', field_name)
        if field_name == '':
            pass
        else:
            if self.ui.plainTextEdit4.toPlainText() == '':
                pass
            else:
                if self.ui.radioButton4.isChecked():
                    numerical_filters.append([field_name, self.ui.plainTextEdit4.toPlainText()])
                else:
                    char_filters.append([field_name, self.ui.plainTextEdit4.toPlainText()])

        field_name = self.ui.comboBox5.currentText()
        field_name = re.sub(r'\(.+', '', field_name)
        if field_name == '':
            pass
        else:
            if self.ui.plainTextEdit5.toPlainText() == '':
                pass
            else:
                if self.ui.radioButton5.isChecked():
                    numerical_filters.append([field_name, self.ui.plainTextEdit5.toPlainText()])
                else:
                    char_filters.append([field_name, self.ui.plainTextEdit5.toPlainText()])

        field_name = self.ui.comboBox6.currentText()
        field_name = re.sub(r'\(.+', '', field_name)
        if field_name == '':
            pass
        else:
            if self.ui.plainTextEdit6.toPlainText() == '':
                pass
            else:
                if self.ui.radioButton6.isChecked():
                    numerical_filters.append([field_name, self.ui.plainTextEdit6.toPlainText()])
                else:
                    char_filters.append([field_name, self.ui.plainTextEdit6.toPlainText()])
        # filter text
        applied_filters_text = 'Records that fit in the following criteria have been selected/checked:\n'
        # apply filters
        if len(char_filters) > 0:
            WhereStatement = ' WHERE '
            for filter in char_filters:
                temp_list = filter[1].split(',')
                WhereStatement += filter[0] + ' IN ("' + '","'.join(temp_list) + '") AND '
                applied_filters_text += 'Field name: ' + filter[0] + '\tSelected values: ' + ','.join(temp_list) + '\n'
            WhereStatement += '1'
        else:
            WhereStatement = ' WHERE 1'

        if len(numerical_filters) > 0:
            filed_list = [i[0] for i in numerical_filters]
            name_fields = ','.join(filed_list)
            SQLStatement = 'SELECT SeqName,' + name_fields + ' FROM vgenesDB' + WhereStatement
        else:
            SQLStatement = 'SELECT SeqName FROM vgenesDB' + WhereStatement
        
        # fetch records
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        data_index = list(range(len(DataIn)))

        # filter records using numerical_filters
        if len(numerical_filters) > 0:
            filter_index = 1
            for filter in numerical_filters:
                bad_index = []
                # read numerical filters
                filter_list = []
                temp_filter = filter[1].split('\n')
                temp_filters_text = ''
                for ele in temp_filter:
                    temp_filter_sub = ele.split(',')
                    if len(temp_filter_sub) < 2:
                        pass
                    else:
                        try:
                            min_value = float(temp_filter_sub[0])
                            max_value = float(temp_filter_sub[1])
                            filter_list.append([min_value, max_value])
                            temp_filters_text += temp_filter_sub[0] + ' <= selected value <=' + temp_filter_sub[1] + '; '
                        except:
                            pass
                if temp_filters_text != '':
                    applied_filters_text += 'Field name: ' + filter[0] + '\tSelected values: ' + temp_filters_text + '\n'

                # apply numerical filters
                for cur_index in data_index:
                    data_point = DataIn[cur_index][filter_index]
                    try:
                        data_point = float(data_point)
                        in_range = 0
                        for cur_filter in filter_list:
                            if data_point >= cur_filter[0] and data_point <= cur_filter[1]:
                                in_range = 1
                                continue
                        if in_range == 0:
                            bad_index.append(cur_index)
                    except:
                        bad_index.append(cur_index)
                # remove all bad index
                data_index = [item for item in data_index if item not in set(bad_index)]
                filter_index += 1
        
        # make selected SeqNames
        Selected_names = []
        for cur_index in data_index:
            Selected_names.append(DataIn[cur_index][0])
        
        # show log
        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        with open(ErlogFile, 'w') as currentFile:
            currentFile.write(applied_filters_text)
        Vgenes.ShowVGenesText(ErlogFile)
        
        # send result out
        self.BatchSignal.emit(Selected_names)

class MarkRecordsDialog(QtWidgets.QDialog):
    BatchSignal = pyqtSignal(str, str)

    def __init__(self):
        super(MarkRecordsDialog, self).__init__()
        self.ui = Ui_MarkRecordsDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def accept(self):
        # process the field names
        field_name = self.ui.comboBox.currentText()
        if field_name == '':
            Msg = 'Please specify the field!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        field_name = re.sub(r'\(.+','',field_name)
        # process the values
        bigText = self.ui.lineEdit.text()
        bigText = re.sub(r'[\r\n\s\t]$','',bigText)
        if bigText == '':
            Msg = 'The Value is empty!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        # send result out
        self.BatchSignal.emit(field_name, bigText)

class HeatmapViewerDialog(QtWidgets.QDialog):
    BatchSignal = pyqtSignal(str, str)

    def __init__(self):
        super(HeatmapViewerDialog, self).__init__()
        self.ui = Ui_HeatmapViewerDialog()
        self.ui.setupUi(self)
        self.fields_name = []
        self.features = []
        self.vgenes = ''
        self.sign = False

        self.view = pg.GraphicsLayoutWidget()
        self.ui.PlotVerticalLayout.addWidget(self.view)

        self.ui.pushButtonExport.clicked.connect(self.exportFigure)
        self.ui.pushButtonDraw.clicked.connect(self.Draw)
        self.ui.radioButtonHC.clicked.connect(self.updateHC)
        self.ui.radioButtonLC.clicked.connect(self.updateLC)
        self.ui.radioButtonChecked.clicked.connect(self.updateCheck)
        self.ui.lineEditFeature.textChanged.connect(self.addToList)
        self.ui.listWidget.doubleClicked.connect(self.removeFeature)
        
        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def removeFeature(self):
        feature = self.ui.listWidget.currentItem().text()
        self.ui.listWidget.takeItem(self.ui.listWidget.currentRow())
        self.features.remove(feature)
        Msg = 'Feature ' + feature + ' removed!'
        self.ui.labelInfo.setText(Msg)

    def addToList(self):
        if self.ui.lineEditFeature.text() == '':
            return
        if self.sign == True:
            self.sign = False
            return

        if self.ui.lineEditFeature.text() in self.fields_name:
            if self.ui.lineEditFeature.text() not in self.features:
                self.ui.listWidget.addItem(self.ui.lineEditFeature.text())
                self.features.append(self.ui.lineEditFeature.text())
                Msg = 'Feature ' + self.ui.lineEditFeature.text() + ' added!'
                self.ui.labelInfo.setText(Msg)
                self.sign = True
            else:
                Msg = 'Feature ' + self.ui.lineEditFeature.text() + ' exists!'
                self.ui.labelInfo.setText(Msg)

    def updateCheck(self):
        if self.ui.radioButtonChecked.isChecked():
            self.ui.radioButtonHC.setChecked(False)
            self.ui.radioButtonHC.setEnabled(False)
            self.ui.radioButtonLC.setChecked(False)
            self.ui.radioButtonLC.setEnabled(False)
        else:
            self.ui.radioButtonHC.setEnabled(True)
            self.ui.radioButtonLC.setEnabled(True)
            self.ui.radioButtonHC.setChecked(True)

    def updateHC(self):
        if self.ui.radioButtonHC.isChecked():
            pass
        else:
            if self.ui.radioButtonLC.isChecked():
                pass
            else:
                self.ui.radioButtonLC.setChecked(True)

    def updateLC(self):
        if self.ui.radioButtonLC.isChecked():
            pass
        else:
            if self.ui.radioButtonHC.isChecked():
                pass
            else:
                self.ui.radioButtonHC.setChecked(True)

    def updateText(self):
        sender_widget = self.sender()
        if sender_widget.isChecked():
            self.ui.tableWidget.item(sender_widget.row, 0).setData(Qt.DisplayRole, 1)
        else:
            self.ui.tableWidget.item(sender_widget.row, 0).setData(Qt.DisplayRole, 0)

    def checkAll(self):
        rowCount = self.ui.tableWidget.rowCount()
        for row in range(rowCount):
            if self.ui.checkBoxAll.isChecked():
                self.ui.tableWidget.cellWidget(row, 0).setChecked(True)
                self.ui.tableWidget.item(row, 0).setText('1')
            else:
                self.ui.tableWidget.cellWidget(row, 0).setChecked(False)
                self.ui.tableWidget.item(row, 0).setText('0')

    def sortTable(self, index):
        self.ui.tableWidget.sortByColumn(index, self.ui.tableWidget.horizontalHeader().sortIndicatorOrder())

    def exportFigure(self):
        if self.ui.radioButtonPNG.isChecked():
            Pathname = saveFile(self.parent(), 'png')
            if Pathname == None:
                return
            exporter = pg.exporters.ImageExporter(self.view.scene())
            exporter.export(Pathname)

        if self.ui.radioButtonSVG.isChecked():
            Pathname = saveFile(self.parent(), 'svg')
            if Pathname == None:
                return
            exporter = pg.exporters.SVGExporter(self.view.scene())
            exporter.export(Pathname)

        Msg = 'You figure has been exported to ' + Pathname + '!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def Draw(self):
        self.view.clear()
        # plot all or selected
        if self.ui.radioButtonChecked.isChecked():
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.vgenes.CheckedRecords) + '")'
        else:
            if self.ui.radioButtonHC.isChecked() and self.ui.radioButtonLC.isChecked():
                WHEREStatement = ' WHERE 1'
            elif self.ui.radioButtonHC.isChecked():
                WHEREStatement = ' WHERE GeneType IN ("Heavy","Beta","Delta")'
            elif self.ui.radioButtonLC.isChecked():
                WHEREStatement = ' WHERE GeneType NOT IN ("Heavy","Beta","Delta")'
            else:
                WHEREStatement = ' WHERE 1'

        # get selected feature names
        checkedFeatures = []
        for feature in self.features:
            feature = re.sub(r'\(.+', '', feature)
            checkedFeatures.append(feature)

        # cell group/order by:
        group_split_flag = 0
        ORDERStatement = ' ORDER BY SeqName'
        xLabel = 'Cells'
        if self.ui.lineEditGroup.text() != '':
            if self.ui.lineEditGroup.text() not in self.fields_name:
                Msg = 'Your order factor is not in VGenes DB! Will order cells by their names!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                SQLStatement = 'SELECT SeqName,' + ','.join(checkedFeatures) + ' FROM vgenesDB' + WHEREStatement + ORDERStatement
            else:
                if self.ui.checkBoxNum.isChecked():
                    group_split_flag = 1
                    group_name = re.sub(r'\(.+', '', self.ui.lineEditGroup.text())
                    xLabel = 'Cells, ordered by ' + group_name
                    if group_name in checkedFeatures:
                        checkedFeatures.remove(group_name)
                    SQLStatement = 'SELECT SeqName,' + group_name + ',' + ','.join(checkedFeatures) + ' FROM vgenesDB' + WHEREStatement
                else:
                    group_split_flag = 2
                    group_name = re.sub(r'\(.+', '', self.ui.lineEditGroup.text())
                    ORDERStatement = ' ORDER BY ' + group_name
                    xLabel = 'Cells, ordered by ' + group_name
                    SQLStatement = 'SELECT SeqName,' + group_name + ',' + ','.join(checkedFeatures) + ' FROM vgenesDB' + WHEREStatement + ORDERStatement
        else:
            SQLStatement = 'SELECT SeqName,' + ','.join(checkedFeatures) + ' FROM vgenesDB' + WHEREStatement + ORDERStatement

        # fetch data
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        original_num = len(DataIn)

        # clean data
        if group_split_flag == 0: # no group
            # make data
            dataMatrix = []
            for ele in DataIn:
                try:
                    myArray = numpy.array(ele[1:])
                    myArray = myArray.astype(float)
                    if numpy.isnan(myArray).any():
                        pass
                    else:
                        dataMatrix.append(myArray)
                except:
                    pass

            if len(dataMatrix) < original_num/2:
                Msg = 'Less than half of your selected records can not be numericalized and plotted, ' \
                      'you might have some bad features in your selected feature list!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

            # DRAW HEATMAP
            if len(dataMatrix) > 0: 
                # add plot item
                dataMatrix = numpy.array(dataMatrix)
                myplot = PlotItem()
                myplot.setTitle('Heatmap')
                self.view.addItem(myplot)
                imgItem = pg.ImageItem(image=dataMatrix)
                myplot.addItem(imgItem)

                # color bar
                try:
                    cmap = pg.colormap.get(self.ui.comboBoxColor.currentText())
                except:
                    cmap = pg.colormap.get(self.ui.comboBoxColor.currentText(), source='matplotlib', skipCache=True)
                bar = pg.ColorBarItem(
                    values=(dataMatrix.min(), dataMatrix.max()),
                    colorMap=cmap,
                    label='horizontal color bar',
                    limits=(0, None),
                    orientation='h',
                    pen='#8888FF', hoverPen='#EEEEFF', hoverBrush='#EEEEFF80'
                )
                bar.setImageItem(imgItem, insert_in=myplot)

                # annotate Y axis label
                ticks_name = [[(v, checkedFeatures[v]) for v in range(len(checkedFeatures))]]
                myplot.getAxis('left').setTicks(ticks_name)
                myplot.getAxis('left').setLabel('Features')
                myplot.getAxis('bottom').setLabel(xLabel)

            else:
                Msg = 'There is no records lefe after remove all non-numerical values!\n' \
                      'Some of your features maybe non-numerical! Removed them and try again!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        elif group_split_flag == 1: # Number group
            # make data
            dataMatrix = []
            for ele in DataIn:
                try:
                    myArray = numpy.array(ele[1:])
                    myArray = myArray.astype(float)
                    if numpy.isnan(myArray).any():
                        pass
                    else:
                        dataMatrix.append(myArray)
                except:
                    pass

            if len(dataMatrix) < original_num/2:
                Msg = 'Less than half of your selected records can not be numericalized and plotted, ' \
                      'you might have some bad features in your selected feature list!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

            # DRAW HEATMAP
            if len(dataMatrix) > 0:
                # add plot item
                dataMatrix = numpy.array(dataMatrix)
                dataMatrix = dataMatrix[dataMatrix[:, 0].argsort()]
                
                #heatmapData = dataMatrix[:,1:]
                #lineData = dataMatrix[:,0]
                
                # plot heatmap
                myplot = PlotItem()
                myplot.setTitle('Heatmap')
                self.view.addItem(myplot)
                imgItem = pg.ImageItem(image=dataMatrix)
                myplot.addItem(imgItem)

                # color bar
                try:
                    cmap = pg.colormap.get(self.ui.comboBoxColor.currentText())
                except:
                    cmap = pg.colormap.get(self.ui.comboBoxColor.currentText(), source='matplotlib',
                                           skipCache=True)
                bar = pg.ColorBarItem(
                    values=(dataMatrix.min(), dataMatrix.max()),
                    colorMap=cmap,
                    label='horizontal color bar',
                    limits=(0, None),
                    orientation='h',
                    pen='#8888FF', hoverPen='#EEEEFF', hoverBrush='#EEEEFF80'
                )
                bar.setImageItem(imgItem, insert_in=myplot)

                # annotate Y axis label
                order_name = 'Order by ' + re.sub(r'\(.+', '', self.ui.lineEditGroup.text())
                ticks_name = [(0, order_name)]
                for v in range(len(checkedFeatures)):
                    ticks_name.append((v+1, checkedFeatures[v]))
                myplot.getAxis('left').setTicks([ticks_name])
                myplot.getAxis('left').setLabel('Features')
                myplot.getAxis('bottom').setLabel(xLabel)

                # plot line
                #myline = PlotItem()
                #myline.setTitle(re.sub(r'\(.+', '', self.ui.lineEditGroup.text()))
                #myline.plot(numpy.array(range(0,len(lineData))), lineData, pen=(1, 3))
                #self.view.addItem(myline, 1, 0, 1, 1)
            else:
                Msg = 'There is no records lefe after remove all non-numerical values!\n' \
                      'Some of your features maybe non-numerical! Removed them and try again!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        elif group_split_flag == 2: # level group
            # make data
            data_dict = {}
            group_names = []
            for ele in DataIn:
                cur_group = ele[1]
                try:
                    myArray = numpy.array(ele[2:])
                    myArray = myArray.astype(float)
                    if numpy.isnan(myArray).any():
                        pass
                    else:
                        if cur_group in data_dict:
                            data_dict[cur_group].append(myArray)
                        else:
                            data_dict[cur_group] = [myArray]
                            group_names.append(cur_group)
                except:
                    pass

            if len(group_names) > 15:
                question = 'Your group has ' + str(len(group_names)) + \
                           ' different levels, do you want to continue anyway?\n' \
                           'If it is a numerical factor, please click No and check "Numerical" checkbox!'
                buttons = 'YN'
                answer = questionMessage(self, question, buttons)
                if answer == 'Yes':
                    pass
                else:
                    return
            new_num = 0
            for group in group_names:
                new_num += len(data_dict[group])
            if new_num < original_num/2:
                Msg = 'Less than half of your selected records can not be numericalized and plotted, ' \
                      'you might have some bad features in your selected feature list!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

            # DRAW HEATMAP
            if len(group_names) > 0:
                plot_items = []
                First = True
                for group in group_names:
                    # add plot item
                    dataMatrix = numpy.array(data_dict[group])
                    myplot = PlotItem()
                    myplot.setTitle(group)
                    self.view.addItem(myplot)
                    imgItem = pg.ImageItem(image=dataMatrix)
                    myplot.addItem(imgItem)

                    # annotate Y axis label
                    if First == True:
                        myplot.getAxis('left').setTicks([[(v, checkedFeatures[v]) for v in range(len(checkedFeatures))]])
                        myplot.getAxis('left').setLabel('Features')
                        First = False
                    else:
                        myplot.getAxis('left').setTicks([])
                    #myplot.getAxis('bottom').setLabel(group)
                    plot_items.append(imgItem)

                # color bar
                try:
                    cmap = pg.colormap.get(self.ui.comboBoxColor.currentText())
                except:
                    cmap = pg.colormap.get(self.ui.comboBoxColor.currentText(), source='matplotlib',
                                           skipCache=True)
                bar = pg.ColorBarItem(
                    values=(dataMatrix.min(), dataMatrix.max()),
                    colorMap=cmap,
                    label='horizontal color bar',
                    limits=(0, None),
                    orientation='h',
                    pen='#8888FF', hoverPen='#EEEEFF', hoverBrush='#EEEEFF80'
                )
                bar.setImageItem(plot_items)
                self.view.addItem(bar, 1, 0, 1, len(group_names))
            else:
                Msg = 'There is no records lefe after remove all non-numerical values!\n' \
                      'Some of your features maybe non-numerical! Removed them and try again!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def initLineedit(self, lineEdit, items_list):
        # add auto complete
        self.completer = QCompleter(items_list)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        # set match mode
        self.completer.setFilterMode(Qt.MatchContains)
        # set complete mode
        self.completer.setCompletionMode(QCompleter.PopupCompletion)
        # set QCompleter for lineEdit
        lineEdit.setCompleter(self.completer)

class BeesWarmPlotDialog(QtWidgets.QDialog):
    BatchSignal = pyqtSignal(str, str)

    def __init__(self):
        super(BeesWarmPlotDialog, self).__init__()
        self.ui = Ui_BeesWarmPlotDialog()
        self.ui.setupUi(self)
        self.fields_name = []
        self.vgenes = ''

        self.view = pg.GraphicsLayoutWidget()
        self.ui.PlotVerticalLayout.addWidget(self.view)
        self.ui.pushButtonExport_2.clicked.connect(self.exportFigure)

        self.ui.pushButtonDraw.clicked.connect(self.Draw)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def exportFigure(self):
        if self.ui.radioButtonPNG_2.isChecked():
            Pathname = saveFile(self.parent(), 'png')
            if Pathname == None:
                return
            exporter = pg.exporters.ImageExporter(self.view.scene())
            exporter.export(Pathname)

        if self.ui.radioButtonSVG_2.isChecked():
            Pathname = saveFile(self.parent(), 'svg')
            if Pathname == None:
                return
            exporter = pg.exporters.SVGExporter(self.view.scene())
            exporter.export(Pathname)

        Msg = 'You figure has been exported to ' + Pathname + '!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def makeColors(self, n_color, plate_name):
        try:    # continuous colors
            colors = sns.color_palette(plate_name, n_color)
        except: # discrete colors
            if plate_name == 'ManyColor1':
                colors = sns.color_palette('Dark2', 8)
                colors += sns.color_palette('Paired', n_color - 8)
            if plate_name == 'ManyColor2':
                colors = sns.color_palette('Set2', 8)
                colors += sns.color_palette('Paired', n_color - 8)
            else:
                colors = sns.color_palette('Paired', n_color)

        return colors

    def Draw(self):
        self.view.clear()
        # plot all or selected
        if self.ui.radioButtonChecked.isChecked():
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.vgenes.CheckedRecords) + '")'
        else:
            WHEREStatement = ' WHERE 1'

        # check input (field names)
        if self.ui.lineEditData.text() not in self.fields_name:
            Msg = 'The data field name is not exist in your VGenes DB! Check your input!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        if self.ui.lineEditGroup.text() not in self.fields_name:
            Msg = 'The group field name is not exist in your VGenes DB! Check your input!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # clean feature name
        currentData = re.sub(r'\(.+', '', self.ui.lineEditData.text())
        currentGroup = re.sub(r'\(.+', '', self.ui.lineEditGroup.text())

        # fetch data
        SQLStatement = 'SELECT ' + currentData + ',' + currentGroup + ' FROM vgenesDB' + WHEREStatement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        # clean data
        data = {}
        for ele in DataIn:
            try:
                vals = float(ele[0])
                if ele[1] in data.keys():
                    data[ele[1]].append(vals)
                else:
                    data[ele[1]] = [vals]
            except:
                pass
        ordered_group = list(data.keys())
        ordered_group.sort()

        # check group levels
        if len(data.keys()) > 20:
            question = 'Your group has ' + str(len(data.keys())) +  ' different levels, do you want to continue anyway?\n'
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)
            if answer == 'Yes':
                pass
            else:
                return

        # add plot item
        myplot = PlotItem()
        myplot.setTitle('Distribution of ' + currentData)
        self.view.addItem(myplot)

        ## Make bar graph
        Q1 = []
        Q3 = []
        IQR = []
        halfErrorBarLen = []
        meanMM = []
        median = []
        meanData = []
        STD = []

        for group in ordered_group:
            my_Q1 = numpy.percentile(numpy.array(data[group]), 25)
            my_median = numpy.percentile(numpy.array(data[group]), 50)
            my_Q3 = numpy.percentile(numpy.array(data[group]), 75)
            my_IQR = my_Q3 - my_Q1
            my_min = my_Q1 - 1.5 * my_IQR
            my_max = my_Q3 + 1.5 * my_IQR
            if my_min < min(numpy.array(data[group])):
                my_min = min(numpy.array(data[group]))
            if my_max > max(numpy.array(data[group])):
                my_max = max(numpy.array(data[group]))
            my_meanMM = (my_max + my_min) / 2
            my_halfBarLen = my_max - my_min
            my_mean = numpy.mean(data[group])
            my_STD = numpy.std(data[group])

            Q1.append(my_Q1)
            median.append(my_median)
            Q3.append(my_Q3)
            IQR.append(my_IQR)
            halfErrorBarLen.append(my_halfBarLen)
            meanMM.append(my_meanMM)
            meanData.append(my_mean)
            STD.append(my_STD)

        if self.ui.radioButtonBox.isChecked():
            # error bar
            err = pg.ErrorBarItem(x=numpy.array(range(len(ordered_group))), y=numpy.array(meanMM),height=numpy.array(halfErrorBarLen), beam=0.5, pen={'color': 'w', 'width': 2})
            myplot.addItem(err)
            # box
            bar = pg.BarGraphItem(x=numpy.array(range(len(ordered_group))), y0=numpy.array(Q1), height=numpy.array(IQR),width=0.5, brush=0.2)
            myplot.addItem(bar)
            # madian value
            for i in range(len(ordered_group)):
                myplot.plot(x=[i - 0.25, i + 0.25], y=[median[i], median[i]], pen={'color': 'r', 'width': 4})
        elif self.ui.radioButtonMean.isChecked():
            # error bar (SD)
            err = pg.ErrorBarItem(x=numpy.array(range(len(ordered_group))), y=numpy.array(meanData),
                                  height=numpy.array(STD), beam=0.3, pen={'color': 'w', 'width': 2})
            myplot.addItem(err)
            # mean value
            for i in range(len(ordered_group)):
                myplot.plot(x=[i - 0.25, i + 0.25], y=[meanData[i], meanData[i]], pen={'color': 'r', 'width': 4})
        else:
            pass

        ## add scatter plots on top
        if self.ui.checkBoxDisplayScatter.isChecked():
            n_color = len(ordered_group)
            colors = self.makeColors(n_color, self.ui.comboBoxColor.currentText())
            color_dict = {}
            for i in range(len(ordered_group)):
                cur_color = [x * 255 for x in colors[i]]
                color_dict[ordered_group[i]] = cur_color

            i = 0
            for group in ordered_group:
                xvals = (numpy.random.random(len(data[group])) - 0.5) * self.ui.horizontalSliderRange.value() * 0.1
                myplot.plot(x=xvals + i, y=data[group], pen=None, symbolSize = self.ui.horizontalSliderSize.value()*2, symbol='o', symbolBrush=pg.mkBrush(color_dict[group]))
                i += 1
        
        # assign group label on X axis, and limit the X range
        myplot.getAxis('bottom').setTicks([[(v, ordered_group[v]) for v in range(len(ordered_group)) ]])
        myplot.getAxis('bottom').setLabel(self.ui.lineEditGroup.text())
        myplot.getAxis('left').setLabel(self.ui.lineEditData.text())

    def initLineedit(self, lineEdit, items_list):
        # add auto complete
        self.completer = QCompleter(items_list)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        # set match mode
        self.completer.setFilterMode(Qt.MatchContains)
        # set complete mode
        self.completer.setCompletionMode(QCompleter.PopupCompletion)
        # set QCompleter for lineEdit
        lineEdit.setCompleter(self.completer)

class HistGramDialog(QtWidgets.QDialog):
    BatchSignal = pyqtSignal(str, str)

    def __init__(self):
        super(HistGramDialog, self).__init__()
        self.ui = Ui_HistGramDialog()
        self.ui.setupUi(self)
        self.fields_name = []
        self.vgenes = ''

        self.view = pg.GraphicsLayoutWidget()
        self.ui.PlotVerticalLayout.addWidget(self.view)
        
        self.ui.lineEdit.setFixedHeight(25)
        self.ui.pushButtonAddMore.clicked.connect(self.addLineEdit)
        self.ui.pushButtonExport.clicked.connect(self.exportFigure)
        self.ui.pushButtonDraw.clicked.connect(self.Draw)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def exportFigure(self):
        if self.ui.radioButtonPNG.isChecked():
            Pathname = saveFile(self.parent(), 'png')
            if Pathname == None:
                return
            exporter = pg.exporters.ImageExporter(self.view.scene())
            exporter.export(Pathname)

        if self.ui.radioButtonSVG.isChecked():
            Pathname = saveFile(self.parent(), 'svg')
            if Pathname == None:
                return
            exporter = pg.exporters.SVGExporter(self.view.scene())
            exporter.export(Pathname)

        Msg = 'You figure has been exported to ' + Pathname + '!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def addLineEdit(self):
        widgetCount = self.ui.FeatureLayout.count()
        if widgetCount > 11:
            Msg = 'Up to 12 features are allowed at a time for better visualization!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        item = QLineEdit()
        item.setFixedHeight(25)
        # link value list to lineEdit
        self.initLineedit(item, self.fields_name)
        self.ui.FeatureLayout.addWidget(item)
    
    def Draw(self):
        self.view.clear()
        widgetCount = self.ui.FeatureLayout.count()

        # count feature numbers for layout
        featureNum = 0
        for i in range(widgetCount):
            cuttentItem = self.ui.FeatureLayout.itemAt(i).widget()
            currentFeature = cuttentItem.text()
            if currentFeature != '':
                featureNum += 1
        
        # determine column number for layouts
        colSize = 2
        if featureNum > 4:
            colSize = 3

        # plot all or selected
        if self.ui.radioButtonChecked.isChecked():
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.vgenes.CheckedRecords) + '")'
        else:
            WHEREStatement = ' WHERE 1'

        # draw
        curCol = 0
        curRow = 0
        for i in range(widgetCount):
            cuttentItem = self.ui.FeatureLayout.itemAt(i).widget()
            currentFeature = cuttentItem.text()

            if currentFeature not in self.fields_name:
                myplot = PlotItem()
                myplot.setTitle('Distribution of ' + currentFeature)
                text = pg.TextItem(
                    html='<div style="text-align: center"><span style="color: #FFF;font-size: 16pt;">This feature does not exists</span><br><span style="color: #FF0; font-size: 16pt;">' + currentFeature + '</span></div>',
                    anchor=(-0.3, 0.5), angle=0, border='w', fill=(0, 0, 255, 100))
                myplot.addItem(text)
                text.setPos(-4, 0)
                myplot.autoRange()
                self.view.addItem(myplot, row = curRow, col = curCol)
            else:
                if currentFeature == '':
                    pass
                else:
                    # clean feature name
                    currentFeature = re.sub(r'\(.+', '', currentFeature)
                    # fetch data
                    SQLStatement = 'SELECT ' + currentFeature + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    # clean data
                    vals = []
                    for ele in DataIn:
                        try:
                            vals.append(float(ele[0]))
                        except:
                            pass
                    if len(vals) > 0:
                        # add plot item
                        myplot = PlotItem()
                        myplot.setTitle('Distribution of ' + currentFeature)
                        self.view.addItem(myplot, row = curRow, col = curCol)
                        y, x = numpy.histogram(vals)
                        myplot.plot(x, y, stepMode="center", fillLevel=0, fillOutline=True, brush=(0,0,255,150))
                    else:
                        myplot = PlotItem()
                        myplot.setTitle('Distribution of ' + currentFeature)
                        text = pg.TextItem(
                            html='<div style="text-align: center"><span style="color: #FFF;font-size: 16pt;">No numbers found in this feature</span><br><span style="color: #FF0; font-size: 16pt;">' + currentFeature + '</span></div>',
                            anchor=(-0.3, 0.5), angle=0, border='w', fill=(0, 0, 255, 100))
                        myplot.addItem(text)
                        text.setPos(-4, 0)
                        myplot.autoRange()
                        self.view.addItem(myplot, row = curRow, col = curCol)
            # update col and row
            curCol += 1
            if curCol == colSize:
                curRow += 1
                curCol = 0
            

    def initLineedit(self, lineEdit, items_list):
        # add auto complete
        self.completer = QCompleter(items_list)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        # set match mode
        self.completer.setFilterMode(Qt.MatchContains)
        # set complete mode
        self.completer.setCompletionMode(QCompleter.PopupCompletion)
        # set QCompleter for lineEdit
        lineEdit.setCompleter(self.completer)

class UserListDialog(QtWidgets.QDialog):
    BatchSignal = pyqtSignal(list)

    def __init__(self):
        super(UserListDialog, self).__init__()
        self.ui = Ui_UserListDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonLocate.clicked.connect(self.locate)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def locate(self):
        # process the field names
        field_name = self.ui.comboBox.currentText()
        if field_name == '':
            Msg = 'Please specify the field!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        field_name = re.sub(r'\(.+','',field_name)
        # process the values
        bigText = self.ui.textEdit.toPlainText()
        bigText = re.sub(r'[\r\n\s\t]$','',bigText)
        tmp_list = bigText.split('\n')
        # search from SQL DB
        WHEREStatement = 'WHERE ' + field_name + ' IN ("' + '","'.join(tmp_list) + '")'
        SQLStatement = 'SELECT SeqName FROM vgenesDB ' + WHEREStatement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) == 0:
            Msg = 'No records found in your list! Check values in your list, or the field name!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        # send result out
        selected_list = [i[0] for i in DataIn]
        self.BatchSignal.emit(selected_list)

class ChangeODialog(QtWidgets.QDialog):
    changeOSignal = pyqtSignal(int)

    def __init__(self):
        super(ChangeODialog, self).__init__()
        self.ui = Ui_ChangeODialog()
        self.ui.setupUi(self)

        self.ui.pushButtonStep1.clicked.connect(self.changeOsetp1)
        self.ui.pushButtonStep3.clicked.connect(self.changeOsetp3)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def changeOsetp1(self):
        self.changeOSignal.emit(1)

    def changeOsetp3(self):
        res_file = openFile(self, 'Tsv')
        if res_file == '' or res_file == None:
            return

        if os.path.isfile(res_file):
            Err, parseRes = parseChangeOoutput(res_file)
            if Err == 1:
                QMessageBox.warning(self, 'Warning', parseRes, QMessageBox.Ok, QMessageBox.Ok)
                return
            else:
                # update the VGenes DB
                resDict = {}
                for record in parseRes:
                    if record[1] in resDict:
                        resDict[record[1]].append(record[0])
                    else:
                        resDict[record[1]] = [record[0]]
                
                for key,value in resDict.items():
                    SQLStatement = 'UPDATE vgenesDB SET ClonalPool= "' + str(key) + '" WHERE SeqName IN ("' + '","'.join(value) + '")'
                    print(SQLStatement)
                    VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                
                Msg = 'ChangeO result has been imported!'
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                self.close()

    def changeOrun(self):
        self.changeOSignal.emit(2)

class CloneOptionDialog(QtWidgets.QDialog):
    optionSignal = pyqtSignal(int)
    def __init__(self):
        super(CloneOptionDialog, self).__init__()
        self.ui = Ui_CloneOptionDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonCloneMethod1.clicked.connect(self.option1)
        self.ui.pushButtonCloneMethod2.clicked.connect(self.option2)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def option1(self):
        self.optionSignal.emit(1)
        self.close()
    
    def option2(self):
        self.optionSignal.emit(2)
        self.close()

class RenameDialog(QtWidgets.QDialog):
    def __init__(self):
        super(RenameDialog, self).__init__()
        self.ui = Ui_RenameDialog()
        self.ui.setupUi(self)
        self.FileList = MyQList()
        self.ui.gridLayoutRename.addWidget(self.FileList)
        self.FileList.hide = True

        self.FileList.itemDoubleClicked.connect(self.removeSel)
        self.ui.pushButtonEdit.clicked.connect(self.editFun)
        self.ui.radioButtonHidePath.clicked.connect(self.changeHide)
        self.ui.pushButtonClearList.clicked.connect(self.clearList)
        self.ui.pushButtonUndo.clicked.connect(self.undoEdit)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def undoEdit(self):
        # change each file back to old name
        for index in range(len(self.FileList.new_list)):
            name_from = self.FileList.new_list[index]
            name_to = self.FileList.old_list[index]
            try:
                os.rename(name_from, name_to)
                ele_index = self.FileList.cur_list.index(name_from)
                self.FileList.cur_list[ele_index] = name_to
            except:
                pass

        # update display
        self.FileList.new_list.clear()
        self.FileList.old_list.clear()
        self.changeHide()

        # refresh UI
        self.ui.pushButtonUndo.setEnabled(False)
        size_w = self.size().width()
        size_h = self.size().height()
        offset_pool = [-1, 1]
        offset = offset_pool[random.randint(0, 1)]
        self.resize(size_w + offset, size_h + offset)


    def clearList(self):
        self.FileList.clear()
        self.FileList.cur_list.clear()

    def changeHide(self):
        if self.ui.radioButtonHidePath.isChecked():
            self.FileList.hide = True
        else:
            self.FileList.hide = False

        self.FileList.clear()
        file_names = []
        for cur_file in self.FileList.cur_list:
            if self.FileList.hide == True:
                cur_path, cur_name = os.path.split(cur_file)
                file_names.append(cur_name)
            else:
                file_names.append(cur_file)
        self.FileList.addItems(file_names)

    def removeSel(self):
        listRow = self.FileList.currentRow()
        if listRow > -1:
            self.FileList.takeItem(listRow)
            del self.FileList.cur_list[listRow]
            
    def editFun(self):
        if self.FileList.count() > 0:
            new_file_list = []
            fail_list = []
            offset = self.ui.spinBox.value()
            if offset > 0:
                self.FileList.old_list.clear()
                self.FileList.new_list.clear()

                for cur_file in self.FileList.cur_list:
                    file_path, original_name = os.path.split(cur_file)
                    tmp_list = original_name.split('.')
                    if len(tmp_list) > 1:
                        original_name = tmp_list[0]
                        filetype = tmp_list[1]

                    if len(original_name) > offset:
                        if self.ui.radioButtonFront.isChecked():
                            modified_name = original_name[offset:]
                        else:
                            modified_name = original_name[:-offset]
                        if len(tmp_list) > 1:
                            new_file = os.path.join(file_path, modified_name + '.' + filetype)
                        else:
                            new_file = os.path.join(file_path, modified_name)

                        if os.path.exists(new_file):
                            new_file_list.append(cur_file)
                            fail_list.append(cur_file)
                        else:
                            if os.path.exists(cur_file):
                                os.rename(cur_file, new_file)
                                new_file_list.append(new_file)

                                self.FileList.old_list.append(cur_file)
                                self.FileList.new_list.append(new_file)
                    else:
                        new_file_list.append(cur_file)
                        fail_list.append(cur_file)

                self.FileList.cur_list = new_file_list
                self.FileList.clear()
                #self.FileList.addItems(new_file_list)
                self.changeHide()
                self.ui.pushButtonUndo.setEnabled(True)

                Msg = 'File names updated!'
                if len(fail_list) > 0:
                    Msg += '\n\nThe following files can not be renamed because the name already exist:\n' + '\n'.join(fail_list)
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            else:
                Msg = 'Offset can not be 0!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
        else:
            Msg = 'Please drap and drop some files in the list first!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

class HCLCDialog(QtWidgets.QDialog):
    deleteSignal = pyqtSignal(list)
    def __init__(self):
        super(HCLCDialog, self).__init__()
        self.ui = Ui_HCLCDialog()
        self.ui.setupUi(self)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

class deleteDialog(QtWidgets.QDialog):
    deleteSignal = pyqtSignal(list, str)
    def __init__(self):
        super(deleteDialog, self).__init__()
        self.ui = Ui_deleteDialog()
        self.ui.setupUi(self)
        
        self.table = ''

        self.ui.deleteButton.clicked.connect(self.accept)
        self.ui.cancelButton.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")
        else:
            pass

    def accept(self):
        selItems = self.ui.listWidget.selectedItems()
        if len(selItems) > 0:
            del_list = []
            for item in selItems:
                del_list.append(item.text())
            self.deleteSignal.emit(del_list, self.table)
            self.close()
        else:
            self.reject()

class SamplingDialog(QtWidgets.QDialog, Ui_SamplingDialog):
    cookieSignal = pyqtSignal(str, list)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(Ui_SamplingDialog, self).__init__()
        self.ui = Ui_SamplingDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonClose.clicked.connect(self.closeDialog)
        self.ui.pushButtonSampling.clicked.connect(self.Sampling)
        self.ui.pushButtonSelect.clicked.connect(self.select)
        self.ui.radioButtonPrime.clicked.connect(self.clickPrime)
        self.ui.checkBoxPro.clicked.connect(self.clickGroup)
        self.ui.checkBoxFix.clicked.connect(self.clickGroup)
        self.ui.comboBoxGroupField.currentTextChanged.connect(self.groupChange)
        self.ui.comboBoxPrime.currentTextChanged.connect(self.primeChange)

        self.DBFilename = ''
        self.NewSampRes = False

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass
    def groupChange(self):
        field_name = self.ui.comboBoxGroupField.currentText()
        if self.ui.lineEditMode.text() == 'Individual sequences':
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")'
        else:
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") AND `GeneType` == "Heavy"'
        SQLStatement = 'SELECT DISTINCT(' + field_name + ') FROM vgenesDB' + WHEREStatement
        DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
        self.ui.lineEditLevel.setText(str(len(DataIn)))

    def primeChange(self):
        field_name = self.ui.comboBoxPrime.currentText()
        if self.ui.lineEditMode.text() == 'Individual sequences':
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")'
        else:
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") AND `GeneType` == "Heavy"'
        SQLStatement = 'SELECT DISTINCT(' + field_name + ') FROM vgenesDB' + WHEREStatement
        DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
        self.ui.lineEditLevel2.setText(str(len(DataIn)))

    def closeDialog(self):
        if self.NewSampRes == True:
            question = 'You have un-saved sampleing results, do you want to close this dialog anyway?\n'
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)

            if answer == 'Yes':
                self.reject()
            else:
                return
        else:
            self.reject()

    def Sampling(self):
        # random sampling
        if self.ui.toolBox.currentIndex() == 0:
            # validate size
            try:
                size = int(self.ui.lineEditSampSize.text())
            except:
                Msg = 'Please type a valid sample size (integers only)'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            if self.ui.lineEditMode.text() == 'Individual sequences':
                if size >= len(self.inputData):
                    Msg = 'Sample size must be smaller than original population size!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return

                Res = random.sample(self.inputData, size)

                # result
                self.ui.tableWidgetResult.setRowCount(0)
                self.ui.tableWidgetResult.setColumnCount(0)
                Header = ['Name']
                self.ui.tableWidgetResult.setRowCount(len(Res))
                self.ui.tableWidgetResult.setColumnCount(len(Header))
                self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
                for row_index in range(len(Res)):
                    unit = QTableWidgetItem(Res[row_index])
                    self.ui.tableWidgetResult.setItem(row_index, 0, unit)
                self.ui.tableWidgetResult.resizeColumnsToContents()
                self.ui.tableWidgetResult.horizontalHeader().sectionClicked.connect(self.sortTable)
            else:
                if size >= len(self.inputData)/2:
                    Msg = 'Sample size must be smaller than original population size!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return

                WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") AND `GeneType` == "Heavy"'
                SQLStatement = 'SELECT Blank10 FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                barcodes = [ele[0] for ele in DataIn]
                Res_barcode = random.sample(barcodes, size)
                # make res
                WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(Res_barcode) + '") AND `GeneType` == "Heavy" ORDER BY Blank10'
                SQLStatement = 'SELECT Blank10,SeqName FROM vgenesdb' + WHEREStatement
                DataInHC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(Res_barcode) + '") AND `GeneType` <> "Heavy" ORDER BY Blank10'
                SQLStatement = 'SELECT Blank10,SeqName FROM vgenesdb' + WHEREStatement
                DataInLC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                Res = []
                for index in range(len(DataInHC)):
                    element = (DataInHC[index][0], DataInHC[index][1], DataInLC[index][1])
                    Res.append(element)

                # result
                self.ui.tableWidgetResult.setRowCount(0)
                self.ui.tableWidgetResult.setColumnCount(0)
                Header = ['barcode','HC name','LC name']
                self.ui.tableWidgetResult.setRowCount(len(Res))
                self.ui.tableWidgetResult.setColumnCount(len(Header))
                self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
                for row_index in range(len(Res)):
                    unit1 = QTableWidgetItem(Res[row_index][0])
                    self.ui.tableWidgetResult.setItem(row_index, 0, unit1)
                    unit2 = QTableWidgetItem(Res[row_index][1])
                    self.ui.tableWidgetResult.setItem(row_index, 1, unit2)
                    unit3 = QTableWidgetItem(Res[row_index][2])
                    self.ui.tableWidgetResult.setItem(row_index, 2, unit3)
                self.ui.tableWidgetResult.resizeColumnsToContents()
                self.ui.tableWidgetResult.horizontalHeader().sectionClicked.connect(self.sortTable)
        # Stratified sampling
        elif self.ui.toolBox.currentIndex() == 1:
            # validate size
            try:
                size = int(self.ui.lineEditGroupSize.text())
            except:
                Msg = 'Please type a valid sample size (integers only)'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            # validate there is a group
            if self.ui.comboBoxGroupField.currentText() == '':
                Msg = 'Please choose a group!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            # Proportionable mode
            if self.ui.checkBoxPro.isChecked():
                if self.ui.lineEditMode.text() == 'Individual sequences':
                    Res = []
                    if size >= len(self.inputData):
                        Msg = 'Sample size must be smaller than original population size!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return
                    SamplingRatio = size/len(self.inputData)
                    # get all levels
                    field_name = self.ui.comboBoxGroupField.currentText()
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") GROUP BY ' + field_name
                    SQLStatement = 'SELECT DISTINCT(' + field_name + '),COUNT(*) FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    # CALCULATE Proportionable size
                    Levels = []
                    for record in DataIn:
                        new_size = int(round(record[1]*SamplingRatio))
                        if new_size == 0:
                            new_size = 1
                        Levels.append([record[0],new_size])
                    # sampling in each level
                    for level in Levels:
                        # get all records in this level
                        WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")' \
                                         + ' AND ' + field_name + ' = "' + level[0] + '"'
                        SQLStatement = 'SELECT SeqName,' + field_name + ' FROM vgenesDB' + WHEREStatement
                        SubDataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                        SubName = [i[0] for i in SubDataIn]
                        if level[1] >= len(SubName):
                            Res = Res + SubName
                        else:
                            Res = Res + random.sample(SubName, level[1])

                    # result
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(Res) + '") ORDER BY ' + field_name
                    SQLStatement = 'SELECT SeqName,' + field_name + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

                    self.ui.tableWidgetResult.setRowCount(0)
                    self.ui.tableWidgetResult.setColumnCount(0)
                    Header = ['Name', field_name]
                    self.ui.tableWidgetResult.setRowCount(len(Res))
                    self.ui.tableWidgetResult.setColumnCount(len(Header))
                    self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
                    for row_index in range(len(DataIn)):
                        unit = QTableWidgetItem(DataIn[row_index][0])
                        self.ui.tableWidgetResult.setItem(row_index, 0, unit)
                        unit = QTableWidgetItem(DataIn[row_index][1])
                        self.ui.tableWidgetResult.setItem(row_index, 1, unit)
                    self.ui.tableWidgetResult.resizeColumnsToContents()
                else:
                    Res_barcode = []
                    if size >= len(self.inputData)/2:
                        Msg = 'Sample size must be smaller than original population size!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return
                    SamplingRatio = size * 2 / len(self.inputData)
                    # get all levels
                    field_name = self.ui.comboBoxGroupField.currentText()
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(
                        self.inputData) + '") AND `GeneType` == "Heavy" GROUP BY ' + field_name
                    SQLStatement = 'SELECT DISTINCT(' + field_name + '),COUNT(*) FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    # CALCULATE Proportionable size
                    Levels = []
                    for record in DataIn:
                        new_size = int(round(record[1] * SamplingRatio))
                        if new_size == 0:
                            new_size = 1
                        Levels.append([record[0], new_size])
                    # sampling in each level
                    for level in Levels:
                        # get all records in this level
                        WHEREStatement = ' WHERE `SeqName` IN ("' + '","'.join(self.inputData) + '")' \
                                         + ' AND `' + field_name + '` = "' + level[0] + '" AND `GeneType` == "Heavy"'
                        SQLStatement = 'SELECT Blank10,SeqName,' + field_name + ' FROM vgenesDB' + WHEREStatement
                        SubDataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                        SubName = [i[0] for i in SubDataIn]
                        if level[1] >= len(SubName):
                            Res_barcode = Res_barcode + SubName
                        else:
                            Res_barcode = Res_barcode + random.sample(SubName,  level[1])

                    # make res
                    WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(
                        Res_barcode) + '") AND `GeneType` == "Heavy" ORDER BY Blank10'
                    SQLStatement = 'SELECT Blank10,SeqName,' + field_name + ' FROM vgenesdb' + WHEREStatement
                    DataInHC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(
                        Res_barcode) + '") AND `GeneType` <> "Heavy" ORDER BY Blank10'
                    SQLStatement = 'SELECT Blank10,SeqName FROM vgenesdb' + WHEREStatement
                    DataInLC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    Res = []
                    for index in range(len(DataInHC)):
                        element = (DataInHC[index][0], DataInHC[index][1], DataInLC[index][1], DataInHC[index][2])
                        Res.append(element)

                    # result
                    self.ui.tableWidgetResult.setRowCount(0)
                    self.ui.tableWidgetResult.setColumnCount(0)
                    Header = ['barcode', 'HC name', 'LC name', field_name]
                    self.ui.tableWidgetResult.setRowCount(len(Res))
                    self.ui.tableWidgetResult.setColumnCount(len(Header))
                    self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
                    for row_index in range(len(Res)):
                        unit1 = QTableWidgetItem(Res[row_index][0])
                        self.ui.tableWidgetResult.setItem(row_index, 0, unit1)
                        unit2 = QTableWidgetItem(Res[row_index][1])
                        self.ui.tableWidgetResult.setItem(row_index, 1, unit2)
                        unit3 = QTableWidgetItem(Res[row_index][2])
                        self.ui.tableWidgetResult.setItem(row_index, 2, unit3)
                        unit4 = QTableWidgetItem(Res[row_index][3])
                        self.ui.tableWidgetResult.setItem(row_index, 3, unit4)
                    self.ui.tableWidgetResult.resizeColumnsToContents()
                    
            # Fixed size mode
            elif self.ui.checkBoxFix.isChecked():
                if self.ui.lineEditMode.text() == 'Individual sequences':
                    Res = []
                    # get all levels
                    field_name = self.ui.comboBoxGroupField.currentText()
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")'
                    SQLStatement = 'SELECT DISTINCT(' + field_name + ') FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    # sampling in each level
                    for level in DataIn:
                        # get all records in this level
                        WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")' \
                                         + ' AND ' + field_name + ' = "' + level[0] + '"'
                        SQLStatement = 'SELECT SeqName,' + field_name + ' FROM vgenesDB' + WHEREStatement
                        SubDataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                        SubName = [i[0] for i in SubDataIn]
                        if size >= len(SubName):
                            Res = Res + SubName
                        else:
                            Res = Res + random.sample(SubName, size)

                    # result
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(Res) + '") ORDER BY ' + field_name
                    SQLStatement = 'SELECT SeqName,' + field_name + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

                    self.ui.tableWidgetResult.setRowCount(0)
                    self.ui.tableWidgetResult.setColumnCount(0)
                    Header = ['Name',field_name]
                    self.ui.tableWidgetResult.setRowCount(len(Res))
                    self.ui.tableWidgetResult.setColumnCount(len(Header))
                    self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
                    for row_index in range(len(DataIn)):
                        unit = QTableWidgetItem(DataIn[row_index][0])
                        self.ui.tableWidgetResult.setItem(row_index, 0, unit)
                        unit = QTableWidgetItem(DataIn[row_index][1])
                        self.ui.tableWidgetResult.setItem(row_index, 1, unit)
                    self.ui.tableWidgetResult.resizeColumnsToContents()
                    self.ui.tableWidgetResult.horizontalHeader().sectionClicked.connect(self.sortTable)
                # pair mode
                else:
                    Res_barcode = []
                    # get all levels
                    field_name = self.ui.comboBoxGroupField.currentText()
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") AND `GeneType` == "Heavy"'
                    SQLStatement = 'SELECT DISTINCT(' + field_name + ') FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    # sampling in each level
                    for level in DataIn:
                        # get all records in this level
                        WHEREStatement = ' WHERE `SeqName` IN ("' + '","'.join(self.inputData) + '")' \
                                         + ' AND `' + field_name + '` = "' + level[0] + '" AND `GeneType` == "Heavy"'
                        SQLStatement = 'SELECT Blank10,SeqName,' + field_name + ' FROM vgenesDB' + WHEREStatement
                        SubDataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                        SubName = [i[0] for i in SubDataIn]
                        if size >= len(SubName):
                            Res_barcode = Res_barcode + SubName
                        else:
                            Res_barcode = Res_barcode + random.sample(SubName, size)

                    # make res
                    WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(
                        Res_barcode) + '") AND `GeneType` == "Heavy" ORDER BY Blank10'
                    SQLStatement = 'SELECT Blank10,SeqName,' + field_name + ' FROM vgenesdb' + WHEREStatement
                    DataInHC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(
                        Res_barcode) + '") AND `GeneType` <> "Heavy" ORDER BY Blank10'
                    SQLStatement = 'SELECT Blank10,SeqName FROM vgenesdb' + WHEREStatement
                    DataInLC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    Res = []
                    for index in range(len(DataInHC)):
                        element = (DataInHC[index][0], DataInHC[index][1], DataInLC[index][1], DataInHC[index][2])
                        Res.append(element)

                    # result
                    self.ui.tableWidgetResult.setRowCount(0)
                    self.ui.tableWidgetResult.setColumnCount(0)
                    Header = ['barcode', 'HC name', 'LC name', field_name]
                    self.ui.tableWidgetResult.setRowCount(len(Res))
                    self.ui.tableWidgetResult.setColumnCount(len(Header))
                    self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
                    for row_index in range(len(Res)):
                        unit1 = QTableWidgetItem(Res[row_index][0])
                        self.ui.tableWidgetResult.setItem(row_index, 0, unit1)
                        unit2 = QTableWidgetItem(Res[row_index][1])
                        self.ui.tableWidgetResult.setItem(row_index, 1, unit2)
                        unit3 = QTableWidgetItem(Res[row_index][2])
                        self.ui.tableWidgetResult.setItem(row_index, 2, unit3)
                        unit4 = QTableWidgetItem(Res[row_index][3])
                        self.ui.tableWidgetResult.setItem(row_index, 3, unit4)
                    self.ui.tableWidgetResult.resizeColumnsToContents()
                    self.ui.tableWidgetResult.horizontalHeader().sectionClicked.connect(self.sortTable)
            else:
                Msg = 'Please choose a group size plan!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
        # Representative sampling(Cookie)
        elif self.ui.toolBox.currentIndex() == 2:
            # validate size
            try:
                size = int(self.ui.lineEditSampleSize.text())
            except:
                Msg = 'Please type a valid sample size (integers only)'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            # PF mode
            if self.ui.radioButtonPrime.isChecked():
                PF_field_name = self.ui.comboBoxPrime.currentText()
                # single mode
                if self.ui.lineEditMode.text() == 'Individual sequences':
                    if size >= len(self.inputData):
                        Msg = 'Sample size must be smaller than original population size!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    if len(self.inputData) > 1000:
                        question = 'Your sample size > 1000, sampling without prime factor will be slow, still want to continue?'
                        buttons = 'YN'
                        answer = questionMessage(self, question, buttons)
                        if answer == 'No':
                            return

                    # fetch data cols
                    data_cols = []
                    field_names = []
                    row_count = self.ui.tableWidgetCookie.rowCount()
                    for index in range(row_count):
                        fieldName = self.ui.tableWidgetCookie.item(index, 0).text()
                        typeCombo = self.ui.tableWidgetCookie.cellWidget(index, 1)
                        selectCheck = self.ui.tableWidgetCookie.cellWidget(index, 2)
                        importCheck = self.ui.tableWidgetCookie.cellWidget(index, 3)

                        if fieldName == PF_field_name:
                            continue

                        if selectCheck.isChecked():
                            field_names.append(fieldName)
                            data_cols.append([fieldName, typeCombo.currentText(), importCheck.isChecked()])
                    if len(data_cols) == 0:
                        Msg = 'Please check some fields first!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # fetch data
                    
                    field_names_str = ','.join(field_names)
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") ORDER BY ' + PF_field_name
                    SQLStatement = 'SELECT SeqName,' + PF_field_name + ',' + field_names_str + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

                    # get all levels
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")'
                    SQLStatement = 'SELECT DISTINCT(' + PF_field_name + ') FROM vgenesDB' + WHEREStatement
                    DataInLevel = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

                    # get data index in each level
                    LevelIndex = dict()
                    data_rows = [i[0] for i in DataIn]
                    indexlist = [i[1] for i in DataIn]
                    Data = [i[2:] for i in DataIn]
                    for level in DataInLevel:
                        LevelIndex[level] = find_value_location(indexlist, level[0])
                    mode = 'single'
                    pf = [PF_field_name, LevelIndex]

                    self.CookieworkThread = CookieThread(self)
                    self.CookieworkThread.mode = mode
                    self.CookieworkThread.pf = pf
                    self.CookieworkThread.size = size
                    self.CookieworkThread.data = Data
                    self.CookieworkThread.cols = data_cols
                    self.CookieworkThread.rows = data_rows
                    self.CookieworkThread.start()

                    self.CookieworkThread.trigger.connect(self.cookieRes)
                    self.CookieworkThread.loadProgress.connect(self.progressLabel)
                    self.CookieworkThread.badNews.connect(self.errorMsgFun)

                    self.progress = ProgressBar(self)
                    self.progress.setLabel('Cookie sampling running ...')
                    self.progress.show()
                # pair mode
                else:
                    if size >= len(self.inputData) / 2:
                        Msg = 'Sample size must be smaller than original population size!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    if len(self.inputData) > 2000:
                        question = 'Your sample size > 1000, sampling without prime factor will be slow, still want to continue?'
                        buttons = 'YN'
                        answer = questionMessage(self, question, buttons)
                        if answer == 'No':
                            return

                    # fetch data cols
                    data_cols = []
                    field_names = []
                    row_count = self.ui.tableWidgetCookie.rowCount()
                    for index in range(row_count):
                        fieldName = self.ui.tableWidgetCookie.item(index, 0).text()
                        typeCombo = self.ui.tableWidgetCookie.cellWidget(index, 1)
                        selectCheck = self.ui.tableWidgetCookie.cellWidget(index, 2)
                        importCheck = self.ui.tableWidgetCookie.cellWidget(index, 3)

                        if fieldName == PF_field_name:
                            continue

                        if selectCheck.isChecked():
                            field_names.append(fieldName)
                            data_cols.append([fieldName, typeCombo.currentText(), importCheck.isChecked()])
                    if len(data_cols) == 0:
                        Msg = 'Please check some fields first!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # fetch data
                    field_name = self.ui.comboBoxPrime.currentText()
                    field_names_str = ','.join(field_names)
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") ORDER BY ' + PF_field_name
                    SQLStatement = 'SELECT Blank10,' + PF_field_name + ',' + field_names_str + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

                    # get all levels
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")' \
                                         + ' AND `GeneType` == "Heavy"'
                    SQLStatement = 'SELECT DISTINCT(' + PF_field_name + ') FROM vgenesDB' + WHEREStatement
                    DataInLevel = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

                    # get data index in each level
                    LevelIndex = dict()
                    data_rows = [i[0] for i in DataIn]
                    indexlist = [i[1] for i in DataIn]
                    Data = [i[2:] for i in DataIn]
                    for level in DataInLevel:
                        LevelIndex[level] = find_value_location(indexlist, level[0])
                    mode = 'pair'
                    pf = [PF_field_name, LevelIndex]
                    # self.cookieSignal.emit(mode, pf, data_cols, DataIn)
                    self.CookieworkThread = CookieThread(self)
                    self.CookieworkThread.mode = mode
                    self.CookieworkThread.pf = pf
                    self.CookieworkThread.size = size
                    self.CookieworkThread.data = Data
                    self.CookieworkThread.cols = data_cols
                    self.CookieworkThread.rows = data_rows
                    self.CookieworkThread.start()

                    self.CookieworkThread.trigger.connect(self.cookieRes)
                    self.CookieworkThread.loadProgress.connect(self.progressLabel)
                    self.CookieworkThread.badNews.connect(self.errorMsgFun)

                    self.progress = ProgressBar(self)
                    self.progress.setLabel('Cookie sampling running ...')
                    self.progress.show()
            # none-PF mode
            else:
                # single mode
                if self.ui.lineEditMode.text() == 'Individual sequences':
                    if size >= len(self.inputData):
                        Msg = 'Sample size must be smaller than original population size!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    if len(self.inputData) > 1000:
                        question = 'Your sample size > 1000, sampling without prime factor will be slow, still want to continue?'
                        buttons = 'YN'
                        answer = questionMessage(self, question, buttons)
                        if answer == 'No':
                            return

                    # fetch data cols
                    data_cols = []
                    field_names = []
                    row_count = self.ui.tableWidgetCookie.rowCount()
                    for index in range(row_count):
                        fieldName = self.ui.tableWidgetCookie.item(index, 0).text()
                        typeCombo = self.ui.tableWidgetCookie.cellWidget(index, 1)
                        selectCheck = self.ui.tableWidgetCookie.cellWidget(index, 2)
                        importCheck = self.ui.tableWidgetCookie.cellWidget(index, 3)

                        if selectCheck.isChecked():
                            field_names.append(fieldName)
                            data_cols.append([fieldName, typeCombo.currentText(), importCheck.isChecked()])
                    if len(data_cols) == 0:
                        Msg = 'Please check some fields first!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # fetch data
                    field_names_str = ','.join(field_names)
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '")'
                    SQLStatement = 'SELECT SeqName,' + field_names_str + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    mode = 'single'
                    pf = ''
                    #self.cookieSignal.emit(mode, pf, data_cols, DataIn)
                    self.CookieworkThread = CookieThread(self)
                    self.CookieworkThread.mode = mode
                    self.CookieworkThread.pf = pf
                    self.CookieworkThread.size = size
                    self.CookieworkThread.data = [i[1:] for i in DataIn]
                    self.CookieworkThread.cols = data_cols
                    self.CookieworkThread.rows = [i[0] for i in DataIn]
                    self.CookieworkThread.start()

                    self.CookieworkThread.trigger.connect(self.cookieRes)
                    self.CookieworkThread.loadProgress.connect(self.progressLabel)
                    self.CookieworkThread.badNews.connect(self.errorMsgFun)

                    self.progress = ProgressBar(self)
                    self.progress.setLabel('Cookie sampling running ...')
                    self.progress.show()
                # pair mode
                else:
                    if size >= len(self.inputData)/2:
                        Msg = 'Sample size must be smaller than original population size!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    if len(self.inputData) > 2000:
                        question = 'Your sample size > 1000, sampling without prime factor will be slow, still want to continue?'
                        buttons = 'YN'
                        answer = questionMessage(self, question, buttons)
                        if answer == 'No':
                            return

                    # fetch data cols
                    data_cols = []
                    field_names = []
                    row_count = self.ui.tableWidgetCookie.rowCount()
                    for index in range(row_count):
                        fieldName = self.ui.tableWidgetCookie.item(index, 0).text()
                        typeCombo = self.ui.tableWidgetCookie.cellWidget(index, 1)
                        selectCheck = self.ui.tableWidgetCookie.cellWidget(index, 2)
                        importCheck = self.ui.tableWidgetCookie.cellWidget(index, 3)

                        if selectCheck.isChecked():
                            field_names.append(fieldName)
                            data_cols.append([fieldName, typeCombo.currentText(), importCheck.isChecked()])
                    if len(data_cols) == 0:
                        Msg = 'Please check some fields first!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # fetch data
                    field_names_str = ','.join(field_names)
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.inputData) + '") AND `GeneType` == "Heavy" '
                    SQLStatement = 'SELECT Blank10,' + field_names_str + ' FROM vgenesDB' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
                    mode = 'pair'
                    pf = ''
                    # self.cookieSignal.emit(mode, pf, data_cols, DataIn)
                    self.CookieworkThread = CookieThread(self)
                    self.CookieworkThread.mode = mode
                    self.CookieworkThread.pf = pf
                    self.CookieworkThread.size = size
                    self.CookieworkThread.data = [i[1:] for i in DataIn]
                    self.CookieworkThread.cols = data_cols
                    self.CookieworkThread.rows = [i[0] for i in DataIn]
                    self.CookieworkThread.start()

                    self.CookieworkThread.trigger.connect(self.cookieRes)
                    self.CookieworkThread.loadProgress.connect(self.progressLabel)
                    self.CookieworkThread.badNews.connect(self.errorMsgFun)

                    self.progress = ProgressBar(self)
                    self.progress.setLabel('Cookie sampling running ...')
                    self.progress.show()
        else:
            pass

        self.NewSampRes = True

    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def errorMsgFun(self, Msg):
        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def select(self):
        if self.ui.tableWidgetResult.rowCount() == 0:
            Msg = 'No sampling result found!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        names = []
        for index in range(self.ui.tableWidgetResult.rowCount()):
            name = self.ui.tableWidgetResult.item(index, 0).text()
            names.append(name)

        if self.ui.lineEditMode.text() == 'Individual sequences':
            self.cookieSignal.emit('single', names)
        else:
            self.cookieSignal.emit('pair', names)

        self.NewSampRes = False

    def clickPrime(self):
        if self.ui.radioButtonPrime.isChecked():
            self.ui.comboBoxPrime.setEnabled(True)
            self.ui.labelSample.setText('per PF level')
        else:
            self.ui.comboBoxPrime.setEnabled(False)
            self.ui.labelSample.setText('total')

    def clickGroup(self):
        if self.ui.checkBoxPro.isChecked():
            self.ui.label_Stratified.setText('Total')
        else:
            self.ui.label_Stratified.setText('per level')

    def sortTable(self, index):
        self.ui.tableWidgetResult.sortByColumn(index, self.ui.tableWidgetResult.horizontalHeader().sortIndicatorOrder())

    def cookieRes(self, mode, res, cols, pf):
        # close progress bar
        self.progress.FeatProgressBar.setValue(100)
        self.progress.close()
        # make res
        col_names = [i[0] for i in cols]
        field_names_str = ','.join(col_names)
        if pf != '':
            field_names_str = pf + ',' + field_names_str

        if mode == 'single':
            # fetch data
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(res) + '")'
            if pf != '':
                WHEREStatement += ' ORDER BY ' + pf
            SQLStatement = 'SELECT SeqName,' + field_names_str + ' FROM vgenesdb' + WHEREStatement
            Res = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)

            # show result on table
            self.ui.tableWidgetResult.setRowCount(0)
            self.ui.tableWidgetResult.setColumnCount(0)
            if pf != '':
                Header = ['SeqName', pf] + col_names
            else:
                Header = ['SeqName'] + col_names
            self.ui.tableWidgetResult.setRowCount(len(Res))
            self.ui.tableWidgetResult.setColumnCount(len(Header))
            self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
            for row_index in range(len(Res)):
                for col_index in range(len(Header)):
                    unit = QTableWidgetItem(Res[row_index][col_index])
                    self.ui.tableWidgetResult.setItem(row_index, col_index, unit)
            self.ui.tableWidgetResult.resizeColumnsToContents()
            self.ui.tableWidgetResult.horizontalHeader().sectionClicked.connect(self.sortTable)
        elif mode == 'pair':
            # fetch data
            WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(res) + '") AND `GeneType` == "Heavy" ORDER BY Blank10'
            #if pf != '':
            #	WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(res) + '") AND `GeneType` == "Heavy" ORDER BY ' + pf +',Blank10'
            SQLStatement = 'SELECT Blank10,SeqName,' + field_names_str + ' FROM vgenesdb' + WHEREStatement
            DataInHC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
            WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(res) + '") AND `GeneType` <> "Heavy" ORDER BY Blank10'
            #if pf != '':
            #	WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(res) + '") AND `GeneType` <> "Heavy" ORDER BY ' + pf +',Blank10'
            SQLStatement = 'SELECT Blank10,SeqName FROM vgenesdb' + WHEREStatement
            DataInLC = VGenesSQL.RunSQL(self.DBFilename, SQLStatement)
            Res = []
            for index in range(len(DataInHC)):
                element = [DataInHC[index][0], DataInHC[index][1], DataInLC[index][1]] + list(DataInHC[index][2:])
                Res.append(element)

            # show result on table
            self.ui.tableWidgetResult.setRowCount(0)
            self.ui.tableWidgetResult.setColumnCount(0)

            if pf != '':
                Header = ['barcode', 'HC name', 'LC name', pf] + col_names
            else:
                Header = ['barcode', 'HC name', 'LC name'] + col_names
            self.ui.tableWidgetResult.setRowCount(len(Res))
            self.ui.tableWidgetResult.setColumnCount(len(Header))
            self.ui.tableWidgetResult.setHorizontalHeaderLabels(Header)
            for row_index in range(len(Res)):
                for col_index in range(len(Header)):
                    unit = QTableWidgetItem(Res[row_index][col_index])
                    self.ui.tableWidgetResult.setItem(row_index, col_index, unit)
            self.ui.tableWidgetResult.resizeColumnsToContents()
            self.ui.tableWidgetResult.horizontalHeader().sectionClicked.connect(self.sortTable)
        else:
            pass

class SHMtableDialog(QtWidgets.QDialog, Ui_SHMtableDialog):
    SHMUpdateSelectionSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(SHMtableDialog, self).__init__()
        self.ui = Ui_SHMtableDialog()
        self.ui.setupUi(self)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def updateSelection(self, currentRow, currentColumn, previousRow, previousColumn):
        SeqName = self.ui.tableWidget.item(currentRow, 0).text()
        self.SHMUpdateSelectionSignal.emit(SeqName)

class PatentDialog(QtWidgets.QDialog, Ui_PatentDialog):

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(PatentDialog, self).__init__()
        self.ui = Ui_PatentDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""

        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def accept(self):
        # collect data and make sure all antibody names are non-redundant
        Data = []
        mAb_names = []
        for index in range(self.ui.tableWidget.rowCount()):
            mAb_name = self.ui.tableWidget.cellWidget(index, 0).text()
            hc_name = self.ui.tableWidget.item(index, 2).text()
            lc_name = self.ui.tableWidget.item(index, 3).text()
            if mAb_name in mAb_names:
                Msg = 'Redundant mAb name found!\n' + mAb_name
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            mAb_names.append(mAb_name)
            Data.append((mAb_name, hc_name, lc_name))
        # get out file
        Pathname = saveFile(self.parent(), 'csv')
        if Pathname == None:
            return
        # fetch sequenc information from DB for HC and LC
        hc_list = [record[1] for record in Data]
        lc_list = [record[2] for record in Data]
        WHEREStatementHC = ' WHERE SeqName IN ("' + '","'.join(hc_list) + '")'
        SQLStatementHC = 'SELECT SeqName,Sequence FROM vgenesdb' + WHEREStatementHC
        WHEREStatementLC = ' WHERE SeqName IN ("' + '","'.join(lc_list) + '")'
        SQLStatementLC = 'SELECT SeqName,Sequence FROM vgenesdb' + WHEREStatementLC
        DataInHC = VGenesSQL.RunSQL(self.DBFilename, SQLStatementHC)
        DataInLC = VGenesSQL.RunSQL(self.DBFilename, SQLStatementLC)
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        hc_fasta_file = os.path.join(temp_folder, time_stamp+'_HC.fasta')
        lc_fasta_file = os.path.join(temp_folder, time_stamp+'_LC.fasta')
        with open(hc_fasta_file, 'w') as currentFile:
            for record in DataInHC:
                currentFile.write('>' + record[0] + '\n')
                currentFile.write(record[1] + '\n')
        with open(lc_fasta_file, 'w') as currentFile:
            for record in DataInLC:
                currentFile.write('>' + record[0] + '\n')
                currentFile.write(record[1] + '\n')

        species = 'Human'
        # run IgBlast
        workingdir = os.path.join(working_prefix, 'IgBlast')
        os.chdir(workingdir)
        if species == 'Human':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query " + hc_fasta_file + " -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19"
            IgBlastOut_HC = os.popen(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query " + lc_fasta_file + " -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19"
            IgBlastOut_LC = os.popen(BLASTCommandLine)
        elif species == 'Mouse':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query " + hc_fasta_file + " -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19"
            IgBlastOut_HC = os.popen(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query " + hc_fasta_file + " -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19"
            IgBlastOut_LC = os.popen(BLASTCommandLine)
        
        Final_data = []
        index = -1
        for HCLine in IgBlastOut_HC:
            if index >= 0:
                tmp = HCLine.split('\t')
                ele = [Data[index][0]]
                ele = ele + [tmp[11], tmp[13], tmp[22], tmp[36], tmp[40], tmp[46], tmp[34], tmp[38], tmp[42], tmp[44]]
                Final_data.append(ele)
            index += 1
        index = -1
        for LCLine in IgBlastOut_LC:
            if index >= 0:
                tmp = LCLine.split('\t')
                Final_data[index] += [tmp[2], tmp[11], tmp[13], tmp[22], tmp[36], tmp[40], tmp[46], tmp[34], tmp[38], tmp[42], tmp[44]]
            index += 1
        
        # output to file
        with open(Pathname, 'w') as currentfile:
            header = "mAb ID,HC_Sequence,HC_Seq_peptide,HC_V_region_peptide,HC CDR1_peptide,HC_CDR2_peptide," \
                     "HC_CDR3_peptide,HC_FRW1_peptide,HC_FRW2_peptide,HC_FRW3_peptide,HC_FRW4_peptide,LC_Type," \
                     "LC_Sequence,LC_Seq_peptide,LC_V_region_peptide,LC CDR1_peptide,LC_CDR2_peptide,LC_CDR3_peptide," \
                     "LC_FRW1_peptide,LC_FRW2_peptide,LC_FRW3_peptide,LC_FRW4_peptide\n"
            currentfile.write(header)
            for record in Final_data:
                line = ','.join(record) + '\n'
                currentfile.write(line)

        Msg = 'Report is saved as\n' + Pathname + '!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        self.close()

class ExportOptionDialog(QtWidgets.QDialog, Ui_ExportOptionDialog):
    GibsonUpdateSelectionSignal = pyqtSignal(str)
    LogFileSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(ExportOptionDialog, self).__init__()
        self.ui = Ui_ExportOptionDialog()
        self.ui.setupUi(self)

        self.WHEREStatement = ''
        self.DBFilename = ''
        self.preDefineConfig = {}

        self.ui.pushButtonExport.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.checkBox.clicked.connect(self.checkAll)
        self.ui.pushButtonRemember.clicked.connect(self.remember)
        self.ui.comboBox.currentTextChanged.connect(self.setConfig)
        self.ui.pushButtonDelete.clicked.connect(self.deleteConfig)

        self.readConfig()

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def deleteConfig(self):
        cutSet = self.ui.comboBox.currentText()
        if cutSet != '':
            config_file = os.path.join(working_prefix, 'Conf', 'pre_defined_export_option.txt')
            if os.path.exists(config_file):
                with open(config_file, 'w') as currentfile:
                    for config_name in self.preDefineConfig.keys():
                        if config_name != cutSet:
                            res_str = config_name + "#" + self.preDefineConfig[config_name] + "\n"
                            currentfile.write(res_str)
            self.readConfig()
            Msg = 'Your configuration "' + cutSet + '" has been removed!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def readConfig(self):
        config_file = os.path.join(working_prefix, 'Conf', 'pre_defined_export_option.txt')
        ConfigNames = ['']
        self.preDefineConfig.clear()
        if os.path.exists(config_file):
            with open(config_file, 'r') as currentfile:
                lines = currentfile.readlines()
                for line in lines:
                    temp = line.split('#')
                    if len(temp) == 2:
                        self.preDefineConfig[temp[0]] = temp[1]
                        ConfigNames.append(temp[0])
        self.ui.comboBox.clear()
        self.ui.comboBox.addItems(ConfigNames)

    def setConfig(self):
        cutSet = self.ui.comboBox.currentText()
        if cutSet in self.preDefineConfig.keys():
            FieldIDs = self.preDefineConfig[cutSet]
            FieldIDs = FieldIDs.split(',')
            FieldIDs = [int(i) for i in FieldIDs]

            rows = self.ui.tableWidget.rowCount()
            for row in range(0, rows):
                if row in FieldIDs:
                    self.ui.tableWidget.cellWidget(row, 0).setChecked(True)
                else:
                    self.ui.tableWidget.cellWidget(row, 0).setChecked(False)
            
            for IDs in FieldIDs:
                if IDs > rows:
                    Msg = 'Some fields in your config are not exist in current database!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def accept(self):
        # step 1: get file name
        Pathname = saveFile(self.parent(), 'csv')
        if Pathname == None:
            return
        tmp_path, tmp_file = os.path.split(Pathname)
        if os.access(tmp_path, os.W_OK):
            pass
        else:
            Msg = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # step 2: export records
        fields = []
        rows = self.ui.tableWidget.rowCount()
        for row in range(0, rows):
            if self.ui.tableWidget.cellWidget(row, 0).isChecked():
                fields.append(self.ui.tableWidget.item(row,1).text())

        if len(fields) == 0:
            Msg = 'Your did not select any field!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        field_str = ','.join(fields)
        SQLSTATEMENT = 'SELECT ' + field_str + ' from vgenesDB' + self.WHEREStatement
        DataIn = VGenesSQL.RunSQL(self.DBFilename, SQLSTATEMENT)

        CSVOut = field_str + '\n'
        mode = 0
        try:
            index_seqalignment = fields.index("SeqAlignment")
            mode += 1
        except:
            index_seqalignment = None
        try:
            index_Mutations = fields.index("Mutations")
            mode += 2
        except:
            index_Mutations = None

        if mode == 0:
            for record in DataIn:
                CSVOut += ','.join(record) + '\n'
        elif mode == 1:
            for record in DataIn:
                record_new = [str(x) for x in record]
                record_new[index_seqalignment] = re.sub(r'\n', '#', record_new[index_seqalignment])
                CSVOut += ','.join(record_new) + '\n'
        elif mode == 2:
            for record in DataIn:
                record_new = [str(x) for x in record]
                record_new[index_Mutations] = re.sub(',', '|', record_new[index_Mutations])
                CSVOut += ','.join(record_new) + '\n'
        elif mode == 3:
            for record in DataIn:
                record_new = [str(x) for x in record]
                record_new[index_seqalignment] = re.sub(r'\n', '#', record_new[index_seqalignment])
                record_new[index_Mutations] = re.sub(',', '|', record_new[index_Mutations])
                CSVOut += ','.join(record_new) + '\n'

        with open(Pathname, 'w') as currentfile:
            currentfile.write(CSVOut)

        Msg = 'Your records have been saved to ' + Pathname + '!\n Total ' + str(len(DataIn)) + \
              ' sequences were exported!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)

        self.close()

    def checkAll(self):
        rows = self.ui.tableWidget.rowCount()
        if self.ui.checkBox.isChecked():
            for row in range(0, rows):
                self.ui.tableWidget.cellWidget(row, 0).setChecked(True)
        else:
            for row in range(0, rows):
                self.ui.tableWidget.cellWidget(row, 0).setChecked(False)

    def remember(self):
        fields = []
        rows = self.ui.tableWidget.rowCount()
        for row in range(0, rows):
            if self.ui.tableWidget.cellWidget(row, 0).isChecked():
                fields.append(str(row))
        if len(fields) == 0:
            Msg = 'You did not check any field!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        fields_str = ','.join(fields)
        config_name = ''
        config_name = VGenesDialogues.setText(self, 'Please name your config (do not use "#" in your name)','Config1')
        if config_name == 'Cancelled Action':
            return
        if config_name in self.preDefineConfig:
            GoodName = 0
            while GoodName == 0:
                config_name = VGenesDialogues.setText(self, 'The name is taken! Please name your config (do not use "#" in your name)',
                                                      'Config1')
                if config_name == 'Cancelled Action':
                    return
                if config_name not in self.preDefineConfig:
                    GoodName = 1
        
        res_str = config_name + "#" + fields_str + "\n"
        config_file = os.path.join(working_prefix, 'Conf', 'pre_defined_export_option.txt')
        if os.path.exists(config_file):
            with open(config_file, 'a') as currentfile:
                currentfile.write(res_str)
        else:
            with open(config_file, 'w') as currentfile:
                currentfile.write(res_str)

        self.readConfig()
        Msg = 'Your configuration has been saved as ' + config_name + '!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok,QMessageBox.Ok)
        
class GibsonDialog(QtWidgets.QDialog, Ui_GibsonDialog):
    GibsonUpdateSelectionSignal = pyqtSignal(str)
    LogFileSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(GibsonDialog, self).__init__()
        self.ui = Ui_GibsonDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.pushButtonSave.clicked.connect(self.save)
        self.ui.pushButtonOK.clicked.connect(self.OK)
        self.ui.pushButtonUp.clicked.connect(self.up)
        self.ui.pushButtonDown.clicked.connect(self.down)
        self.ui.pushButtonIgnore.clicked.connect(self.ignore)
        self.ui.comboBox.currentTextChanged.connect(self.update)

        self.previousRow = 0

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

        GibsonFile = os.path.join(working_prefix, 'Data', 'GibsonConnectors.txt')
        if os.path.isfile(GibsonFile):
            f = open(GibsonFile, "r")
            for line in f:
                line = re.sub('\n','', line)
                tmp = line.split(',')
                if tmp[0] == 'GibsonStart':
                    self.ui.GibsonStart.setText(tmp[1])
                elif tmp[0] == 'GibsonHend':
                    self.ui.GibsonHEnd.setText(tmp[1])
                elif tmp[0] == 'GibsonKend':
                    self.ui.GibsonKEnd.setText(tmp[1])
                elif tmp[0] == 'GibsonLend':
                    self.ui.GibsonLEnd.setText(tmp[1])

    def update(self):
        GibsonFile = os.path.join(working_prefix, 'Data', 'GibsonConnectors.txt')
        if self.ui.comboBox.currentText() == 'Gibson AbVec':
            GibsonFile = os.path.join(working_prefix, 'Data', 'GibsonConnectors.txt')
        elif self.ui.comboBox.currentText() == 'HT-AbVec':
            GibsonFile = os.path.join(working_prefix, 'Data', 'HtConnectors.txt')
        elif self.ui.comboBox.currentText() == 'AbVec classic':
            GibsonFile = os.path.join(working_prefix, 'Data', 'AbVecConnectors.txt')
        try:
            if os.path.isfile(GibsonFile):
                f = open(GibsonFile, "r")
                for line in f:
                    line = re.sub('\n','', line)
                    tmp = line.split(',')
                    if tmp[0] == 'GibsonStart':
                        self.ui.GibsonStart.setText(tmp[1])
                    elif tmp[0] == 'GibsonHend':
                        self.ui.GibsonHEnd.setText(tmp[1])
                    elif tmp[0] == 'GibsonKend':
                        self.ui.GibsonKEnd.setText(tmp[1])
                    elif tmp[0] == 'GibsonLend':
                        self.ui.GibsonLEnd.setText(tmp[1])
        except:
            Msg = 'Something wrong with your connector file!\n' + GibsonFile
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)

    def ignore(self):
        global FieldChanged
        currentRow = self.ui.tableWidget.currentRow()
        if currentRow < 0:
            return
        # update
        FieldChanged = True
        self.ui.tableWidget.item(currentRow, 0).setText('Ignore')
        self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.red)
        FieldChanged = False

        size_w = self.size().width()
        size_h = self.size().height()
        offset_pool = [-1, 1]
        offset = offset_pool[random.randint(0, 1)]
        self.resize(size_w + offset, size_h + offset)

    def up(self):
        num_row = self.ui.tableWidget.rowCount()
        cur_height = self.ui.tableWidget.rowHeight(0)
        for index in range(num_row):
            self.ui.tableWidget.setRowHeight(index, cur_height + 20)

    def down(self):
        num_row = self.ui.tableWidget.rowCount()
        cur_height = self.ui.tableWidget.rowHeight(0)
        for index in range(num_row):
            self.ui.tableWidget.setRowHeight(index, cur_height - 20)

    def OK(self):
        global FieldChanged
        currentRow = self.ui.tableWidget.currentRow()
        if currentRow < 0:
            return
        # update
        FieldChanged = True
        self.ui.tableWidget.item(currentRow, 0).setText('Good *')
        self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.green)
        FieldChanged = False

        size_w = self.size().width()
        size_h = self.size().height()
        offset_pool = [-1, 1]
        offset = offset_pool[random.randint(0, 1)]
        self.resize(size_w + offset, size_h + offset)


    def updateSelection(self, currentRow, currentColumn, previousRow, previousColumn):
        SeqName = self.ui.tableWidget.item(currentRow, 1).text()
        self.ui.tableWidget.item(self.previousRow, 1).setBackground(Qt.white)
        self.ui.tableWidget.item(self.previousRow, 2).setBackground(Qt.white)
        self.ui.tableWidget.item(self.previousRow, 3).setBackground(Qt.white)
        self.ui.tableWidget.item(currentRow, 1).setBackground(Qt.gray)
        self.ui.tableWidget.item(currentRow, 2).setBackground(Qt.gray)
        self.ui.tableWidget.item(currentRow, 3).setBackground(Qt.gray)
        self.previousRow = currentRow
        self.GibsonUpdateSelectionSignal.emit(SeqName)

    def updateData(self):
        global FieldChanged
        if FieldChanged == True:
            return

        sender_widget = self.sender()
        currentRowName = sender_widget.rowindex
        currentRow = 0
        for index in range(self.ui.tableWidget.rowCount()):
            if self.ui.tableWidget.item(index, 1).text() == currentRowName:
                currentRow = index
                break

        updatedVDJSeq = self.ui.tableWidget.cellWidget(currentRow,4).toPlainText().upper()
        updatedJend = updatedVDJSeq[-6:]
        Genetype = self.ui.tableWidget.item(currentRow, 2).text()
        checkRes = VReports.checkJend(Genetype, updatedJend)
        AAseq, msg = VGenesSeq.Translator(updatedVDJSeq, 0)
        if "*" in AAseq:
            if checkRes == 'Good':
                checkRes = 'ORF error'
            else:
                checkRes += ',ORF error'

        # update
        FieldChanged = True
        self.ui.tableWidget.item(currentRow, 0).setText(checkRes)
        if checkRes[0:4] == "Good":
            self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.green)
        elif checkRes == "Check ORF":
            self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.yellow)
        elif checkRes == "Jend Mut":
            self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.yellow)
        else:
            self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.red)
        self.ui.tableWidget.item(currentRow, 3).setText(updatedJend)
        self.ui.tableWidget.cellWidget(currentRow,5).setPlainText(AAseq)
        FieldChanged = False

    def updateDataOld(self, currentRow, currentColumn):
        global FieldChanged
        if FieldChanged == True:
            return

        updatedVDJSeq = self.ui.tableWidget.item(currentRow, currentColumn).text()
        updatedJend = updatedVDJSeq[-6:]
        Genetype = self.ui.tableWidget.item(currentRow, 2).text()
        checkRes = VReports.checkJend(Genetype, updatedJend)
        
        # update
        FieldChanged = True
        self.ui.tableWidget.item(currentRow, 0).setText(checkRes)
        if checkRes[0:4] == "Good":
            self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.green)
        else:
            self.ui.tableWidget.item(currentRow, 0).setBackground(Qt.red)
        self.ui.tableWidget.item(currentRow, 3).setText(updatedJend)
        FieldChanged = False

    def sort(self, index):
        self.ui.tableWidget.sortByColumn(index, self.ui.tableWidget.horizontalHeader().sortIndicatorOrder())

    def save(self):
        if self.ui.GibsonStart == "" or self.ui.GibsonHEnd == "" or self.ui.GibsonKEnd == "" or self.ui.GibsonLEnd == "":
            Msg = 'Please fill all information before save!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)
        else:
            GibsonFile = os.path.join(working_prefix, 'Data', 'GibsonConnectors.txt')
            if self.ui.comboBox.currentText() == 'Gibson AbVec':
                GibsonFile = os.path.join(working_prefix, 'Data', 'GibsonConnectors.txt')
            elif self.ui.comboBox.currentText() == 'HT-AbVec':
                GibsonFile = os.path.join(working_prefix, 'Data', 'HtConnectors.txt')
            elif self.ui.comboBox.currentText() == 'AbVec classic':
                GibsonFile = os.path.join(working_prefix, 'Data', 'AbVecConnectors.txt')

            with open(GibsonFile, 'w') as currentFile:
                currentFile.write('GibsonStart' + ',' + self.ui.GibsonStart.text() + '\n')
                currentFile.write('GibsonHend' + ',' + self.ui.GibsonHEnd.text() + '\n')
                currentFile.write('GibsonKend' + ',' + self.ui.GibsonKEnd.text() + '\n')
                currentFile.write('GibsonLend' + ',' + self.ui.GibsonLEnd.text())

            Msg = 'Gibson connectors saved!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)

    def accept(self):
        question = 'Only "Good" sequences will be exported, confirm?'
        buttons = 'YN'
        answer = questionMessage(self, question, buttons)
        if answer == 'No':
            return

        if self.ui.GibsonStart == "" or self.ui.GibsonHEnd == "" or self.ui.GibsonKEnd == "" or self.ui.GibsonLEnd == "":
            Msg = 'Please fill all GibsonStart connector information before proceed!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        GibsonStart = self.ui.GibsonStart.text()
        GibsonHend = self.ui.GibsonHEnd.text()
        GibsonKend = self.ui.GibsonKEnd.text()
        GibsonLend = self.ui.GibsonLEnd.text()

        if self.ui.checkBoxCSV.isChecked():
            Pathname = saveFile(self.parent(), 'csv')
        elif self.ui.checkBoxFASTA.isChecked():
            Pathname = saveFile(self.parent(), 'FASTA')

        if Pathname == None:
            return
        tmp_path, tmp_file = os.path.split(Pathname)
        if os.access(tmp_path, os.W_OK):
            Error_seq_names = 'All sequences have not been exported due to errors were listed here:\n'
        else:
            Error_seq_names = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', Error_seq_names, QMessageBox.Ok, QMessageBox.Ok)
            return

        if self.ui.radioButtonSep.isChecked():
            if self.ui.checkBoxCSV.isChecked():
                HC_name = Pathname.replace('.csv','_HC.csv')
                KC_name = Pathname.replace('.csv','_KC.csv')
                LC_name = Pathname.replace('.csv','_LC.csv')
            elif self.ui.checkBoxFASTA.isChecked():
                HC_name = Pathname.replace('.fasta', '_HC.fasta')
                KC_name = Pathname.replace('.fasta', '_KC.fasta')
                LC_name = Pathname.replace('.fasta', '_LC.fasta')

            with open(HC_name, 'w') as hc_file, open(KC_name, 'w') as kc_file, open(LC_name, 'w') as lc_file:
                if self.ui.checkBoxCSV.isChecked():
                    out_str = 'SeqName,V(D)J sequence\n'
                    hc_file.write(out_str)
                    kc_file.write(out_str)
                    lc_file.write(out_str)
                elif self.ui.checkBoxFASTA.isChecked():
                    pass

                total_out = 0
                total_rows = self.ui.tableWidget.rowCount()
                for index in range(total_rows):
                    checkRes = self.ui.tableWidget.item(index, 0).text()
                    if checkRes[0:4] == "Good":
                        SeqName = self.ui.tableWidget.item(index, 1).text()
                        GeneType = self.ui.tableWidget.item(index, 2).text()
                        VDJSeq = self.ui.tableWidget.cellWidget(index,4).toPlainText()

                        if GeneType == "Heavy":
                            GibsonEnd = GibsonHend
                        elif GeneType == "Kappa":
                            GibsonEnd = GibsonKend
                        elif GeneType == "Lambda":
                            GibsonEnd = GibsonLend
                        else:
                            continue
                        if self.ui.checkBoxCSV.isChecked():
                            out_str = SeqName + ',' + GibsonStart.lower() + VDJSeq.upper() + GibsonEnd.lower() + '\n'
                        elif self.ui.checkBoxFASTA.isChecked():
                            out_str = '>' + SeqName + '\n' + GibsonStart.lower() + VDJSeq.upper() + GibsonEnd.lower() + '\n'

                        if GeneType == "Heavy":
                            hc_file.write(out_str)
                        elif GeneType == "Kappa":
                            kc_file.write(out_str)
                        elif GeneType == "Lambda":
                            lc_file.write(out_str)

                        total_out += 1
                    else:
                        Error_seq_names += self.ui.tableWidget.item(index, 1).text() + '\t' + checkRes + '\n'
            Msg = 'Your sequences have been saved to:\n' + HC_name + '\n' + KC_name + '\n' + LC_name + '!\n Total ' + str(total_out) + \
                  ' sequences were exported!'
        else:
            with open(Pathname, 'w') as currentfile:
                if self.ui.checkBoxCSV.isChecked():
                    out_str = 'SeqName,V(D)J sequence\n'
                    currentfile.write(out_str)
                elif self.ui.checkBoxFASTA.isChecked():
                    pass


                total_out = 0
                total_rows = self.ui.tableWidget.rowCount()
                for index in range(total_rows):
                    checkRes = self.ui.tableWidget.item(index, 0).text()
                    if checkRes[0:4] == "Good":
                        SeqName = self.ui.tableWidget.item(index, 1).text()
                        GeneType = self.ui.tableWidget.item(index, 2).text()
                        VDJSeq = self.ui.tableWidget.cellWidget(index,4).toPlainText()

                        if GeneType == "Heavy":
                            GibsonEnd = GibsonHend
                        elif GeneType == "Kappa":
                            GibsonEnd = GibsonKend
                        elif GeneType == "Lambda":
                            GibsonEnd = GibsonLend
                        else:
                            continue
                        if self.ui.checkBoxCSV.isChecked():
                            out_str = SeqName + ',' + GibsonStart.lower() + VDJSeq.upper() + GibsonEnd.lower() + '\n'
                        elif self.ui.checkBoxFASTA.isChecked():
                            out_str = '>' + SeqName + '\n' + GibsonStart.lower() + VDJSeq.upper() + GibsonEnd.lower() + '\n'
                        currentfile.write(out_str)
                        total_out += 1
                    else:
                        Error_seq_names += self.ui.tableWidget.item(index, 1).text() + '\t' + checkRes + '\n'
            Msg = 'Your sequences have been saved to:\n' + Pathname + '!\n Total ' + str(total_out) + \
                  ' sequences were exported!'

        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok,QMessageBox.Ok)
        self.close()

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        with open(ErlogFile, 'w') as currentFile:
            currentFile.write(Error_seq_names)

        self.LogFileSignal.emit(ErlogFile)

class TranslateDialog(QtWidgets.QDialog, Ui_Translate_Dialog):

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(TranslateDialog, self).__init__()
        self.ui = Ui_Translate_Dialog()
        self.ui.setupUi(self)

        self.ui.pushButton.clicked.connect(self.accept)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def accept(self):
        sequence = self.ui.textEditNT.toPlainText().upper()
        if len(sequence) > 0:
            # check sequence
            #pattern = re.compile(r'[^ATCUG]')
            #strange_residues = re.findall(pattern, sequence)
            #if len(strange_residues) > 0:
            #	Msg = ','.join(strange_residues)
            #	return

            # RNA to DNA
            sequence = re.sub(r'\W', '', sequence)
            sequence = re.sub("U", 'T', sequence)
            # translate
            AA1, msg = Translator(sequence, 0)
            AA2, msg = Translator(sequence, 1)
            AA3, msg = Translator(sequence, 2)

            self.ui.textEdit1.setText(AA1)
            self.ui.textEdit2.setText(AA2)
            self.ui.textEdit3.setText(AA3)
            # reverse translate
            sequence = ReverseDNA(sequence)
            AA1, msg = Translator(sequence, 0)
            AA2, msg = Translator(sequence, 1)
            AA3, msg = Translator(sequence, 2)

            self.ui.textEdit4.setText(AA1)
            self.ui.textEdit5.setText(AA2)
            self.ui.textEdit6.setText(AA3)

            size_w = self.size().width()
            size_h = self.size().height()
            offset_pool = [-1, 1]
            offset = offset_pool[random.randint(0, 1)]
            self.resize(size_w + offset, size_h + offset)

class StatCheckDialog(QtWidgets.QDialog, Ui_StatCheckDialog):
    BatchSignal = pyqtSignal(list)

    def __init__(self):
        super(StatCheckDialog, self).__init__()
        self.ui = Ui_StatCheckDialog()
        self.ui.setupUi(self)
        self.initial = 0
        self.ui.LineEditCutoff.setHidden(True)
        self.ui.labelTip.setHidden(True)
        self.ui.DisplayTip.setHidden(True)
        self.ui.LineEditCutoff.min = 0
        self.ui.LineEditCutoff.max = 0
        self.ui.gridLayout.num_widget = 0
        self.ui.gridLayoutChar.num_widget = 0
        self.checkList = []

        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.pushButtonOK.clicked.connect(self.accept)
        self.ui.comboBox.currentTextChanged.connect(self.StatFig)
        self.ui.radioButtonAll.clicked.connect(self.StatFig)
        self.ui.radioButtonChecked.clicked.connect(self.StatFig)
        self.ui.radioButton.clicked.connect(self.StatFig)
        self.ui.LineEditCutoff.textChanged.connect(self.StatFig)
        self.ui.DisplayTip.clicked.connect(self.StatFig)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def updateNum(self):
        if self.ui.radioButton.isChecked():
            num_list = []

            if self.ui.LineEditCutoff.text() == '':
                self.load_data_num([], self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max)
            elif self.ui.LineEditCutoff.text()[0] == 'T':
                self.load_data_num([], self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max)
            else:
                temp_data = self.ui.LineEditCutoff.text().split(',')
                if len(temp_data) > 0:
                    for ele in temp_data:
                        try:
                            num = float(ele)
                            if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
                                num_list.append(num)
                        except:
                            return
                    # remove redudant and sort
                    num_list = list(set(num_list))
                    num_list.sort()

                    self.load_data_num(num_list, self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max)
        else:
            self.ui.LineEditCutoff.setHidden(True)

    def StatFig(self):
        if self.initial == 0:
            return
        sender_widget = self.sender()

        if self.ui.gridLayoutFig.count() > 0:
            for i in range(self.ui.gridLayoutFig.count()):
                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()

        # where statement
        if self.ui.radioButtonAll.isChecked():
            WHEREStatement = ' WHERE 1'
        else:
            if len(self.checkList) > 0:
                WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.checkList) + '")'
            else:
                WHEREStatement = ' WHERE 1'

        try:
            # numeric value
            if self.ui.radioButton.isChecked():
                try:
                    sender = self.sender()
                    if sender.objectName() == 'comboBox':
                        self.ui.LineEditCutoff.setText('Type cutoff here, seprate by ,  (e.g.  500,600,700)')
                    elif sender.objectName() == 'radioButton':
                        self.ui.LineEditCutoff.setText('Type cutoff here, seprate by ,  (e.g.  500,600,700)')
                except:
                    pass

                self.ui.LineEditCutoff.setHidden(False)
                field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = []
                char_list = []
                non_number_count = 0
                for row in DataIn:
                    try:
                        value_list.append(float(row[0]))
                    except:
                        char_list.append(row[0])
                        non_number_count += 1

                if len(value_list) == 0:
                    Msg = 'No value can be converted to number!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    self.ui.radioButton.setChecked(False)
                    self.StatFig()
                    return

                # do it later
                ## number list
                self.ui.LineEditCutoff.min = min(value_list)
                self.ui.LineEditCutoff.max = max(value_list)
                self.updateNum()

                ## char list
                char_list = list(set(char_list))
                for i in range(len(char_list)):
                    if char_list[i] == None:
                        char_list[i] = 'NULL'
                self.load_data_char(char_list)

                num_list = []
                error = False
                if self.ui.LineEditCutoff.text() != '':
                    temp_data = self.ui.LineEditCutoff.text().split(',')
                    if len(temp_data) > 0:
                        for ele in temp_data:
                            try:
                                num = float(ele)
                                if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
                                    num_list.append(num)
                            except:
                                error = True
                        # remove redudant and sort
                        num_list = list(set(num_list))
                        num_list.sort()

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.hist(value_list, bins=30)

                if error == False:
                    ymin, ymax = F.axes.get_ylim()
                    for num in num_list:
                        F.axes.plot([num, num], [ymin, ymax], color='r', linewidth=1, label="Cutoff")

                F.axes.tick_params(labelsize=7)
                F.fig.subplots_adjust(bottom=0.1)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)

                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
            # character value
            else:
                self.ui.LineEditCutoff.setHidden(True)
                if self.initial == 0:
                    return
                elif self.initial == 1:
                    field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                    SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    value_list = [row[0] for row in DataIn]
                elif self.initial == 2:
                    field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                    SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    value_list = [row[0] for row in DataIn]

                    if sender_widget.objectName() == 'DisplayTip':
                        pass
                    else:
                        if len(value_list) > 30:
                            question = 'Distinct values of this field seems too many (number =  ' + str(
                                len(value_list)) + ')\nAre you sure?'
                            buttons = 'YN'
                            answer = questionMessage(self, question, buttons)
                            if answer == 'No':
                                self.ui.labelTip.setHidden(False)
                                self.ui.DisplayTip.setHidden(False)
                                return

                for i in range(len(value_list)):
                    if value_list[i] == None:
                        value_list[i] = 'NULL'
                self.load_data(value_list)

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                data = []
                for element in DataIn:
                    data.append(element[0])
                result = Counter(data)
                labels = result.keys()
                values = result.values()
                colors = sns.color_palette("hls", len(values))

                # replace None by 'No record'
                labels = list(labels)
                values = list(values)
                for i in range(len(labels)):
                    if labels[i] == None:
                        labels[i] = 'NULL'

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.bar(labels, values, color=colors)
                F.axes.set_xticklabels(labels, rotation=-90)
                F.axes.tick_params(labelsize=7)

                # determine spacing
                lens = [len(lab) for lab in labels]
                max_len = max(lens)
                my_adjust = 0.1 + max_len / 50
                F.fig.subplots_adjust(bottom=my_adjust)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)

                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
        except:
            return

    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def ShowMessageBox(self, data):
        global DontFindTwice
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if data[0] == 0:
            DontFindTwice = True
            Vgenes.refreshDB()
            value = Vgenes.ui.dial.value()
            Vgenes.updateF(value)
            DontFindTwice = False

            self.ui.radioButton.setChecked(False)
            self.StatFig()

            QMessageBox.information(self, 'Information', data[1], QMessageBox.Ok, QMessageBox.Ok)
        else:
            QMessageBox.warning(self, 'Warning', data[1], QMessageBox.Ok, QMessageBox.Ok)

    def accept(self):
        # where statement
        if self.ui.radioButtonAll.isChecked():
            WHEREStatement = ' WHERE 1'
        else:
            if len(self.checkList) > 0:
                WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.checkList) + '")'
            else:
                WHEREStatement = ' WHERE 1'

        To_check_list = []

        try:
            # for number fields
            if self.ui.radioButton.isChecked():
                # process num part
                layout = self.ui.gridLayout
                i = 1
                new_values = []
                while i < layout.num_widget:
                    if layout.itemAtPosition(i, 0).widget().isChecked():
                        new_values.append(True)
                    else:
                        new_values.append(False)
                    i += 1

                num_list = [self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max]
                if self.ui.LineEditCutoff.text() == '':
                    pass
                else:
                    temp_data = self.ui.LineEditCutoff.text().split(',')
                    if len(temp_data) > 0:
                        for ele in temp_data:
                            try:
                                num = float(ele)
                                if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
                                    num_list.append(num)
                            except:
                                return
                        # remove redudant and sort
                        num_list = list(set(num_list))
                        num_list.sort()
                # max value + 1 so that the original max values can be processed correctly
                num_list[-1] = num_list[-1] + 1

                # start update records
                field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                SQLStatement = 'SELECT ' + field + ',SeqName FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                for ele in DataIn:
                    try:
                        cur_value = float(ele[0])
                        cur_id = str(ele[1])
                        for i in range(len(num_list) - 1):
                            if cur_value >= num_list[i] and cur_value < num_list[i + 1]:
                                new_value = new_values[i]
                                if new_value == True:
                                    To_check_list.append(cur_id)
                    except:
                        pass
            # for char fields
            else:
                Dict = {}
                layout = self.ui.gridLayout
                i = 1
                while i < layout.num_widget:
                    str1 = layout.itemAtPosition(i, 1).widget().text()
                    if layout.itemAtPosition(i, 0).widget().isChecked():
                        Dict[str1] = 'Checked'
                    i += 1

                if len(Dict) > 0:
                    field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                    for key in Dict:
                        SQLStatement = 'SELECT ' + field + ',SeqName FROM vgenesdb' + WHEREStatement + ' AND ' + field + ' = "' + key +  '"'
                        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                        for record in DataIn:
                            To_check_list.append(record[1])

            self.checkList = To_check_list
            self.StatFig()
            self.BatchSignal.emit(To_check_list)
        except:
            Msg = 'Nothing to apply!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def load_data(self, list):
        layout = self.ui.gridLayout
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()
        layout.num_widget = 0

        layout.addWidget(QLabel(""), 0, 0)
        layout.addWidget(QLabel("Original value"), 0, 1)

        layout.num_widget += 1

        i = 1
        for item in list:
            f = QLineEdit(item)
            f.setReadOnly(True)
            layout.addWidget(QCheckBox(''), i, 0)
            layout.addWidget(f, i, 1)
            layout.num_widget += 1
            i += 1

        # delete everything in char layout
        layout = self.ui.gridLayoutChar
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()

    def load_data_num(self, list, min, max):
        # clear old widgets
        layout = self.ui.gridLayout
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()
        layout.num_widget = 0

        if len(list) == 0:
            layout.addWidget(QLabel(""), 0, 0)
            layout.addWidget(QLabel("Data range:"), 0, 1)
            layout.num_widget += 1

            item = str(min) + ' <= Value <= ' + str(max)
            f = QLineEdit(item)
            f.setReadOnly(True)
            layout.addWidget(QCheckBox(''), i, 0)
            layout.addWidget(f, i, 1)
            layout.num_widget += 1
        else:
            layout.addWidget(QLabel(""), 0, 0)
            layout.addWidget(QLabel("Data range:"), 0, 1)
            layout.num_widget += 1

            for i in range(len(list)):
                if i == 0:
                    cur_range = str(min) + ' <= Value < ' + str(list[i])
                else:
                    cur_range = str(list[i - 1]) + ' <= Value < ' + str(list[i])

                f = QLineEdit(cur_range)
                f.setReadOnly(True)
                layout.addWidget(QCheckBox(''), i + 1, 0)
                layout.addWidget(f, i + 1, 1)
                layout.num_widget += 1

            cur_range = str(list[-1]) + ' <= Value <= ' + str(max)
            f = QLineEdit(cur_range)
            f.setReadOnly(True)
            layout.addWidget(QCheckBox(''), len(list) + 1, 0)
            layout.addWidget(f, len(list) + 1, 1)
            layout.num_widget += 1

    def load_data_char(self, list):
        layout = self.ui.gridLayoutChar
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()
        layout.num_widget = 0

        if len(list) > 0:
            layout.addWidget(QLabel(""), 0, 0)
            layout.addWidget(QLabel("Original value"), 0, 1)
            layout.num_widget += 1

            i = 1
            for item in list:
                f = QLineEdit(item)
                f.setReadOnly(True)
                layout.addWidget(QCheckBox(''), i, 0)
                layout.addWidget(f, i, 1)
                layout.num_widget += 1
                i += 1

class LoadTable_thread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(list)

    def __int__(self, parent=None):
        super(LoadTable_thread, self).__init__()
        self.vgene = ''
        self.DBFilename = DBFilename

    def run(self):
        DBFilename = self.DBFilename
        vgene = self.vgene

        field1 = re.sub(r'\(.+', '', vgene.ui.cboTreeOp1.currentText())
        field2 = re.sub(r'\(.+', '', vgene.ui.cboTreeOp2.currentText())
        field3 = re.sub(r'\(.+', '', vgene.ui.cboTreeOp3.currentText())

        pct = 0
        label = "Fetching data ..."
        self.loadProgress.emit(pct, label)

        SQLStatement = 'SELECT Field,FieldNickName FROM fieldsname WHERE display = "yes" ORDER BY display_priority,ID'
        HeaderIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        current_field_list = [i[0] for i in HeaderIn]
        current_nickname_list = [i[1] for i in HeaderIn]
        fields = ','.join(current_field_list)
        if fields == '':
            fields = '*'
        SQLStatement = 'select '+ fields +' from vgenesdb ORDER BY ' + field1 + ', ' + field2 + ', ' + field3 + ', SeqName'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        pct = 0
        label = "Initial Table ..."
        self.loadProgress.emit(pct, label)

        num_row = len(DataIn)
        num_col = len(current_field_list)
        vgene.ui.SeqTable.setRowCount(num_row)
        vgene.ui.SeqTable.setColumnCount(num_col + 1)

        horizontalHeader = [''] + current_nickname_list
        vgene.ui.SeqTable.setHorizontalHeaderLabels(horizontalHeader)
        vgene.ui.SeqTable.fields = horizontalHeader
        # re-size column size
        vgene.ui.SeqTable.horizontalHeader().resizeSection(0, 10)
        vgene.ui.SeqTable.setSelectionMode(QAbstractItemView.ExtendedSelection)
        if vgene.ui.checkBoxRowSelection.isChecked():
            vgene.ui.SeqTable.setSelectionBehavior(QAbstractItemView.SelectRows)
        else:
            vgene.ui.SeqTable.setSelectionBehavior(QAbstractItemView.SelectItems)

        process = 1
        for row_index in range(num_row):
            cell_checkBox = QCheckBox()
            # cell_checkBox.setText(DataIn[row_index][0])
            cell_checkBox.setChecked(False)
            cell_checkBox.stateChanged.connect(vgene.multipleSelection)
            vgene.ui.SeqTable.setCellWidget(row_index, 0, cell_checkBox)

            for col_index in range(num_col):
                unit = QTableWidgetItem(str(DataIn[row_index][col_index]))
                unit.last_name = DataIn[row_index][col_index]
                vgene.ui.SeqTable.setItem(row_index, col_index + 1, unit)

            pct = int(process / num_row * 100)
            label = "Loading records: " + str(process) + '/' + str(num_row)
            self.loadProgress.emit(pct, label)
            process += 1

        pct = 100
        label = "Finalizing Table ..."
        self.loadProgress.emit(pct, label)

        # disable edit
        vgene.ui.SeqTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        # show sort indicator
        vgene.ui.SeqTable.horizontalHeader().setSortIndicatorShown(True)
        # connect sort indicator to slot function
        vgene.ui.SeqTable.horizontalHeader().sectionClicked.connect(vgene.sortTable)
        vgene.ui.SeqTable.itemChanged.connect(vgene.EditTableItem)

        msg = 'Table fully loaded!'
        self.trigger.emit([0, msg])

class Batch_thread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(list)

    def __int__(self, parent=None):
        super(Batch_thread, self).__init__(parent)
        self.dialog = ''
        self.DBFilename = DBFilename

    def run(self):
        DBFilename = self.DBFilename

        if self.dialog.ui.radioButton.isChecked():
            pct = 1
            label = "Solving records ..."
            self.loadProgress.emit(pct, label)

            new_values = []
            # process num part
            layout = self.dialog.ui.gridLayout
            i = 1
            #print('row count = ' + str(layout.rowCount()))
            while i < layout.num_widget:
                str2 = layout.itemAtPosition(i, 1).widget().text()
                new_values.append(str2)
                i += 1

            num_list = [self.dialog.ui.LineEditCutoff.min, self.dialog.ui.LineEditCutoff.max]
            if self.dialog.ui.LineEditCutoff.text() == '':
                pass
            else:
                temp_data = self.dialog.ui.LineEditCutoff.text().split(',')
                if len(temp_data) > 0:
                    for ele in temp_data:
                        try:
                            num = float(ele)
                            if num > self.dialog.ui.LineEditCutoff.min and num < self.dialog.ui.LineEditCutoff.max:
                                num_list.append(num)
                        except:
                            return
                    # remove redudant and sort
                    num_list = list(set(num_list))
                    num_list.sort()
            # max value + 1 so that the original max values can be processed correctly
            num_list[-1] = num_list[-1] + 1

            # start update records
            # where statement
            if self.dialog.ui.radioButtonAll.isChecked():
                WHEREStatement = ' WHERE 1'
            else:
                if len(self.dialog.vgene.CheckedRecords) > 0:
                    WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.dialog.vgene.CheckedRecords) + '")'
                else:
                    WHEREStatement = ' WHERE 1'

            field = re.sub(r'\(.+', '', self.dialog.ui.comboBox.currentText())
            SQLStatement = 'SELECT ' + field + ',SeqName FROM vgenesdb' + WHEREStatement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            
            process = 1
            for ele in DataIn:
                try:
                    cur_value = float(ele[0])
                    cur_id = str(ele[1])
                    for i in range(len(num_list)-1):
                        if cur_value >= num_list[i] and cur_value < num_list[i+1]:
                            new_value = new_values[i]
                            if new_value == 'NULL':
                                SQLStatement = 'UPDATE vgenesdb SET ' + field + '= "' + new_value + '" WHERE SeqName="' + cur_id + '"'
                            else:
                                SQLStatement = 'UPDATE vgenesdb SET ' + field + '= "' + new_value + '" WHERE SeqName="' + cur_id + '"'
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

                            pct = int(process / len(DataIn) * 100)
                            label = "Updating records: " + str(process) + '/' + str(len(DataIn))
                            self.loadProgress.emit(pct, label)
                            process += 1
                except:
                    pass

            msg = 'Total ' + str(process) + ' records updated!'
            self.trigger.emit([0, msg])
        else:
            pct = 1
            label = "Solving records ..."
            self.loadProgress.emit(pct, label)

            Dict = {}
            layout = self.dialog.ui.gridLayout
            i = 1
            while i < layout.num_widget:
                str1 = layout.itemAtPosition(i, 0).widget().text()
                str2 = layout.itemAtPosition(i, 1).widget().text()
                if str2 == '':
                    pass
                else:
                    Dict[str1] = str2
                i += 1

            if len(Dict) > 0:
                field = re.sub(r'\(.+', '', self.dialog.ui.comboBox.currentText())
                process = 0
                step = 1
                for key in Dict:
                    if key == 'NULL':
                        SQLStatement = 'UPDATE vgenesdb SET ' + field + ' = "' + Dict[key] + '" WHERE ' + field + ' = ' + key
                    else:
                        SQLStatement = 'UPDATE vgenesdb SET ' + field + ' = "' + Dict[key] + '" WHERE ' + field + ' = "' + key + '"'
                    #print(SQLStatement)
                    process += VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

                    pct = int(step / len(Dict) * 100)
                    label = "Updating records: " + str(process)
                    self.loadProgress.emit(pct, label)
                    step += 1

                msg = 'Total ' + str(process) + ' records updated!'
                self.trigger.emit([0, msg])
            else:
                msg = 'You did not specific any value! Do nothing!'
                self.trigger.emit([1, msg])

class Clone_thread(QThread):
    Clone_progress = pyqtSignal(int, str)
    Clone_finish = pyqtSignal(list)

    def __int__(self, parent=None):
        super(Clone_thread, self).__init__(parent)
        self.ClonalPools = []
        self.Duplicates = ''
        self.remove = ''
        self.TotSeqs = ''
        self.ErLog = ''
        self.Errs = ''
        self.PoolNames = []

    def run(self):
        ClonalPools = self.ClonalPools
        Duplicates = self.Duplicates
        remove = self.remove
        TotSeqs = self.TotSeqs
        ErLog = self.ErLog
        Errs = self.Errs
        PoolNames = self.PoolNames
        if len(PoolNames) == 0:
            PoolNames = ['Current Clone pool']
        
        Currentrecord = Vgenes.ui.txtName.toPlainText()

        CPseqs = 0
        CPs = 0
        # identify all existing Clone IDs
        SQLStatement = 'SELECT DISTINCT(ClonalPool) FROM vgenesdb'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        existing_clone_list = [row[0] for row in DataIn]

        # initial clone ID
        i = 1
        while str(i) in existing_clone_list:
            i += 1
        PoolID = 0
        for pool in ClonalPools:
            Pool = list(pool)
            start = time.time()
            CPList = VGenesCloneCaller.CloneCaller(Pool, Duplicates, self.Clone_progress, PoolNames[PoolID])
            end = time.time()
            print('Run time for VGenesCloneCaller: ' + str(end - start))
            PoolID += 1

            for record in CPList:
                CPs += 1
                j = 1
                DupList = 'Sequences identical: '
                for item in record:
                    #Vgenes.findTreeItem(item)
                    if Duplicates == False:
                        try:
                            SQLStatement = 'UPDATE vgenesDB SET `ClonalPool` = "' + \
                                           str(i) + '" WHERE SeqName = "' + item + '"'
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                            existing_clone_list.append(str(i))
                        except:
                            print(item + ' caused error in finding clones at line 1798 and so was not annotated as a clone')

                    else:
                        if j == 1:
                            SeqName = 'Duplicate of:  ' + item
                            FirstOne = data[119]
                        else:
                            try:
                                if remove == False:
                                    SQLStatement = 'UPDATE vgenesDB SET `Quality` = "' + \
                                                   SeqName + '" WHERE SeqName = "' + item + '"'
                                    VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                                    #VGenesSQL.UpdateField(data[119], SeqName, 'Quality', DBFilename)
                                else:
                                    SQLStatement = 'UPDATE vgenesDB SET `Quality` = "' + \
                                                   'Duplicate' + '" WHERE SeqName = "' + item + '"'
                                    VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                                    SQLStatement = 'UPDATE vgenesDB SET `Project` = "' + \
                                                   'Delete' + '" WHERE SeqName = "' + item + '"'
                                    VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                                    #VGenesSQL.UpdateField(data[119], 'Duplicate', 'Quality', DBFilename)
                                    #VGenesSQL.UpdateField(data[119], 'Delete', 'Project', DBFilename)
                                DupList += (item + ', ')
                            except:
                                print('problem line 1810 with: ' + item)

                        j += 1
                    CPseqs += 1
                depth = 'Depth = ' + str(j - 1)
                if Duplicates == True:
                    Vgenes.findTreeItem(FirstOne)
                    if DupList[(len(DupList) - 2):] == ', ':
                        DupList = DupList[:(len(DupList) - 2)]
                    if data[94] != ' ' or data[94] != 'Comments':
                        DupList = DupList + ', ' + data[94]

                    if data[95] != ' ' or data[95] != 'Quality':
                        depth = depth + '  ' + data[95]

                    VGenesSQL.UpdateField(FirstOne, DupList, 'Comments', DBFilename)
                    VGenesSQL.UpdateField(FirstOne, depth, 'Quality', DBFilename)

                while str(i) in existing_clone_list:
                    i += 1


        # I don't want to modify the original Clone code because it has been so many years and was written by Patrick originally. Here i will check if cell barcode available, if so, integrate HC clones with LC clone to make HC+LC clone.
        # to be consistent with previous version, will use 0 indicate none-clones. Results will be put under: ClonalRank
        SQLStatement = 'SELECT GeneType,ClonalPool,Blank10 FROM vgenesdb WHERE ClonalPool != 0'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        CloneDF = pd.DataFrame(DataIn, columns=['GeneType', 'ClonalPool', 'CellBarcode'])
        # Check if Blank10 column has actual values (not default "Blank10" or empty string "")
        has_barcode = ~CloneDF['CellBarcode'].isin(['Blank10', ''])
        data_with_barcode = CloneDF[has_barcode].copy()

        # Group by cell barcode
        grouped = data_with_barcode.groupby('CellBarcode')

        result = []

        for barcode, group in grouped:
            # Initialize lists for heavy chains (hc) and light chains (lc)
            hc_pools = []
            kappa_pools = []
            lambda_pools = []

            # Process each record in the group
            for _, row in group.iterrows():
                gene_type = row['GeneType']
                pool = row['ClonalPool']

                # Add prefix based on GeneType
                if gene_type == 'Heavy':
                    prefixed_pool = f'H{pool}'
                    hc_pools.append(prefixed_pool)
                elif gene_type == 'Kappa':
                    prefixed_pool = f'K{pool}'
                    kappa_pools.append(prefixed_pool)
                elif gene_type == 'Lambda':
                    prefixed_pool = f'L{pool}'
                    lambda_pools.append(prefixed_pool)

            # Combine Kappa and Lambda into light chains (lc)
            lc_pools = kappa_pools + lambda_pools

            # Generate all possible hc-lc pairs
            pairs = ",".join([f"{hc}_{lc}" for hc in hc_pools for lc in lc_pools]) if hc_pools and lc_pools else "0"

            # Append to results: [barcode, records, pairs]
            result.append([barcode, group.to_dict('records'), pairs])

        # update VDB according to our results
        for item in result:
            SQLStatement = 'UPDATE vgenesDB SET `ClonalRank` = "' + str(item[2]) + '" WHERE Blank10 = "' + item[0] + '"'
            VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

        Msg = 'Integtated cell barcode info\n'

        # model = self.ui.tableView.model()
        # model.refresh()

        if re.sub(r'\(.+', '', Vgenes.ui.cboTreeOp1.currentText()) == 'Clonal Pool' \
                or re.sub(r'\(.+', '', Vgenes.ui.cboTreeOp2.currentText()) == 'Clonal Pool' \
                or re.sub(r'\(.+', '', Vgenes.ui.cboTreeOp3.currentText()) == 'Clonal Pool':
            Vgenes.on_btnUpdateTree_clicked()

        Vgenes.findTreeItem(Currentrecord)
        ErLog2 = str(CPs) + ' clonal pools containing ' + str(CPseqs) + ' sequences were identified from ' + str(
            TotSeqs) + ' total sequences analyzed.\n'

        SQLStatement = 'SELECT GeneType,ClonalPool FROM vgenesDB WHERE ClonalPool <> "0"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        '''
        list1 = []
        for ele in DataIn:
            list1.append(ele[1])
        list_unique = list(set(list1))
        try:
            list_unique.remove('0')
        except:
            pass
        
        list_unique = [int(i) for i in list_unique]
        list_unique.sort()
        list_unique = ['Clone' + str(i) for i in list_unique]
        '''
        clone_dict = {}
        list_unique = []
        for ele in DataIn:
            clone_name = ele[0] + '|' + 'Clone' + str(ele[1])
            if clone_dict.__contains__(clone_name):
                clone_dict[clone_name] += 1
            else:
                clone_dict[clone_name] = 1

        for key, value in sorted(clone_dict.items(), key=lambda x: x[1], reverse=True):
            list_unique.append(key + '|Num of seq: ' + str(value))

        list_unique.sort(key=lambda x: x[0])
        Vgenes.ui.comboBoxTree.clear()
        Vgenes.ui.comboBoxTree.addItems(list_unique)

        if remove == True:
            Vgenes.LoadDB(DBFilename)
            Vgenes.ui.txtFieldSearch.setText('Duplicate')
            Vgenes.ui.cboFindField.setCurrentText('Quality')
            done = Vgenes.on_btnFieldSearch_clicked()
            done = Vgenes.on_actionDelete_record_triggered()
            Vgenes.on_btnUpdateTree_clicked()

        if len(ErLog2) > 0:
            Erlog2 = ErLog2 + 'The following ' + str(
                Errs) + ' sequences could not be anaylzed for\nclonality because no CDR3s are indicated:\n' + ErLog
            ErlogFile = os.path.join(temp_folder,
                                     'ErLog.txt')  # '/Applications/IgBlast/database/ErLog.txt'  # NoErrors  NoGoodSeqs

            with open(ErlogFile, 'w') as currentFile:
                currentFile.write(Erlog2)

            #Vgenes.ShowVGenesText(ErlogFile)

        if Vgenes.ui.tabWidget.currentIndex() == 0:
            Vgenes.load_table()
            Vgenes.match_tree_to_table()
            Vgenes.tree_to_table_selection()
        else:
            updateMarker == True

        Vgenes.initial_Clone()

        sign = 0
        Msg += 'Successfully identified clones!'
        self.Clone_finish.emit([sign, Msg])

class CloneChangeOIgBlast_thread(QThread):
    Clone_progress = pyqtSignal(int, str)
    Clone_finish = pyqtSignal(list)

    def __int__(self, parent=None):
        super(CloneChangeOIgBlast_thread, self).__init__(parent)
        self.data = []
        self.file = ''
        self.species = ''

    def run(self):
        data = self.data
        species = data[0][3]
        # step 1: make fasta
        self.Clone_progress.emit(20,'Fetching data...')

        time_stamp = str(int(time.time() * 100))
        seq_pathname = os.path.join(temp_folder, time_stamp + '.fasta')
        if checkATCG(data[0][2]) == True:
            seq_index = 2
        else:
            seq_index = 1
        with open(seq_pathname, 'w') as currentfile:
            for row in data:
                currentfile.write('>' + row[0] + '\n')
                currentfile.write(row[seq_index] + '\n')

        # step 2: run IgBlast, outfmt 7
        self.Clone_progress.emit(40, 'Running IgBlast ...')
        igblast_res_pathname = self.file
        workingdir = os.path.join(working_prefix, 'IgBlast')
        os.chdir(workingdir)
        if species == 'Human':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system imgt -ig_seqtype Ig -query " + seq_pathname + " -auxiliary_data optional_file/human_gl.aux -outfmt '7 std qseq sseq btop' -out " + igblast_res_pathname
        elif species == 'Mouse':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system imgt -ig_seqtype Ig -query " + seq_pathname + " -auxiliary_data optional_file/mouse_gl.aux -outfmt '7 std qseq sseq btop' -out " + igblast_res_pathname
        IgBlastOut = os.popen(BLASTCommandLine)

        sign = 0
        Msg = 'Successfully finished IgBlast, the results has been saved!'
        self.Clone_finish.emit([sign, Msg])

class CloneChangeO_thread(QThread):
    Clone_progress = pyqtSignal(int, str)
    Clone_finish = pyqtSignal(list)

    def __int__(self, parent=None):
        super(CloneChangeO_thread, self).__init__(parent)
        self.data = []
        self.species = ''

    def run(self):
        data = self.data
        species = data[0][3]
        # step 1: make fasta
        self.Clone_progress.emit(5,'Fetching data...')

        time_stamp = str(int(time.time() * 100))
        seq_pathname = os.path.join(temp_folder, time_stamp + '.fasta')
        if checkATCG(data[0][2]) == True:
            seq_index = 2
        else:
            seq_index = 1
        with open(seq_pathname, 'w') as currentfile:
            for row in data:
                currentfile.write('>' + row[0] + '\n')
                currentfile.write(row[seq_index] + '\n')

        # step 2: run IgBlast, outfmt 7
        self.Clone_progress.emit(20, 'Running IgBlast ...')
        igblast_res_pathname = os.path.join(temp_folder, time_stamp + '.fmt7')
        workingdir = os.path.join(working_prefix, 'IgBlast')
        os.chdir(workingdir)
        if species == 'Human':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system imgt -ig_seqtype Ig -query " + seq_pathname + " -auxiliary_data optional_file/human_gl.aux -outfmt '7 std qseq sseq btop' -out " + igblast_res_pathname
        elif species == 'Mouse':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system imgt -ig_seqtype Ig -query " + seq_pathname + " -auxiliary_data optional_file/mouse_gl.aux -outfmt '7 std qseq sseq btop' -out " + igblast_res_pathname
        IgBlastOut = os.popen(BLASTCommandLine)
        # step 3: make DB
        self.Clone_progress.emit(40, 'Parsing IgBlast results...')
        os.chdir(temp_folder)
        igblast_db_pathname = os.path.join(temp_folder, time_stamp + '_db-pass.tsv')
        cmd = 'MakeDb.py igblast -i ' + igblast_res_pathname + ' -s ' + seq_pathname + ' -r ../IgBlast/IG/Human/HumanVGenes.fasta ../IgBlast/IG/Human/HumanDGenes.fasta ../IgBlast/IG/Human/HumanJGenes.fasta --extended'
        os.system(cmd)
        #out = MakeDb.parseIgBLAST(aligner_file = igblast_res_pathname, seq_file = seq_pathname,
        #                          repo = '../IgBlast/IG/Human/HumanVGenes.fasta ../IgBlast/IG/Human/HumanDGenes.fasta ../IgBlast/IG/Human/HumanJGenes.fasta',
        #                          extended = True, asis_id = False, out_file = igblast_db_pathname)
        aa = 1
        # step 4: identify clones
        self.Clone_progress.emit(60, 'Identifying clones...')
        igblast_db_pathname = os.path.join(temp_folder, time_stamp + '_db-pass.tsv')

        # step 5: load results to vgenes
        self.Clone_progress.emit(80, 'Parsing clonal identification results...')

        sign = 0
        Msg = 'Successfully identified clones!'
        self.Clone_finish.emit([sign, Msg])

class barcode_thread(QThread):
    loadProgress =  pyqtSignal(int, str)
    trigger = pyqtSignal(list)

    def __int__(self):
        super(barcode_thread, self).__init__()
        self.DBFilename = ''
        self.sample_field_name = ''
        self.barcode_field_name = ''
        self.del_str = ''
        self.rep_str = ''
        self.split_text = ''
        self.split_index = ''
        self.extract = False
        self.insert_pos = 'Front'

    def run(self):
        DBFilename = self.DBFilename
        sample_field_name = self.sample_field_name
        barcode_field_name = self.barcode_field_name
        del_str = self.del_str
        rep_str = self.rep_str
        split_text = self.split_text
        split_index = self.split_index
        extract = self.extract
        insert_pos = self.insert_pos

        process = 1
        if sample_field_name == '':
            if del_str != '':
                SQLStatement = 'SELECT ID,' + barcode_field_name + ' FROM vgenesDB'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                for record in DataIn:
                    id = record[0]
                    barcode = record[1]
                    barcode = re.sub(del_str, rep_str, barcode)
                    if barcode != record[0]:
                        SQLStatement = 'UPDATE vgenesDB SET `' + barcode_field_name + '`="' + barcode + '" WHERE `ID` = ' + str(
                            id)
                        VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

                        pct = int(process / len(DataIn) * 100)
                        label = "Updating records: " + str(process) + '/' + str(len(DataIn))
                        self.loadProgress.emit(pct, label)
                        process += 1

                msg = 'Update barcodes succeffully!'
                sign = 0
            else:
                msg = 'you did not do any change!'
                sign = 1
        else:
            sample_field_name = re.sub(r'\(.+', '', sample_field_name)

            SQLStatement = 'SELECT ID,' + barcode_field_name + ',' + sample_field_name + ' FROM vgenesDB'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            for record in DataIn:
                id = record[0]
                barcode = record[1]
                sample = record[2]
                if del_str != '':
                    barcode = re.sub(del_str, rep_str, barcode)

                if extract == True:
                    add_str = sample.split(split_text)[split_index]
                else:
                    add_str = sample

                if insert_pos == 'Front':
                    barcode = add_str + '_' + barcode
                else:
                    barcode = barcode + '_' + add_str

                if barcode != record[0]:
                    SQLStatement = 'UPDATE vgenesDB SET `' + barcode_field_name + '`="' + barcode + '" WHERE `ID` = ' + str(
                        id)
                    VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                    #print(SQLStatement)

                    pct = int(process / len(DataIn) * 100)
                    label = "Updating records: " + str(process) + '/' + str(len(DataIn))
                    self.loadProgress.emit(pct, label)
                    process += 1

            msg = 'Update barcodes succeffully!'
            sign = 0

        self.trigger.emit([sign, msg])

class annotate_thread(QThread):
    loadProgress =  pyqtSignal(int, str)
    trigger = pyqtSignal(list)

    def __int__(self):
        super(annotate_thread, self).__init__()
        self.DBFilename = ''
        self.dialog = ''
        self.csvFile = ''
        self.chains = 'All'

    def run(self):
        global RealNameList
        global FieldCommentList
        global FieldTypeList
        global FieldList

        DBFilename = self.DBFilename

        col_index = []
        col_fields = []

        header = self.dialog.header
        anchor_field = self.dialog.ui.comboBox.currentText()
        target_field = self.dialog.ui.comboBox2.currentText()
        target_field = re.sub(r'\s.+', '', target_field)
        anchor_col_index = header.index(anchor_field)

        num_col = self.dialog.ui.tableWidget.columnCount()

        pct = 1
        label = "Resolving annotation file ..."
        self.loadProgress.emit(pct, label)

        for col in range(num_col):
            if col == anchor_col_index:
                continue
            my_widget = self.dialog.ui.tableWidget.cellWidget(0, col)
            if my_widget.currentText() != "":
                col_index.append(col)
                col_fields.append(my_widget.currentText())

                # add new column if field name not exit in current col
                tmp_field_name = re.sub(r'\s.+', '', my_widget.currentText())
                if tmp_field_name in FieldList:
                    if self.dialog.ui.radioButtonUpdateName.isChecked():
                        VGenesSQL.UpdateFieldTable(tmp_field_name, header[col], 'FieldNickName', DBFilename)
                        RealNameList[FieldList.index(tmp_field_name)] = header[col]
                else:
                    # check if the new field name can be used:
                    HEADERStatement = 'PRAGMA table_info(vgenesDB);'
                    HeaderIn = VGenesSQL.RunSQL(DBFilename, HEADERStatement)
                    ALL_Fields = [i[1] for i in HeaderIn]

                    if tmp_field_name in ALL_Fields:
                        pass
                    else:
                        # update vgene table
                        SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + tmp_field_name + " text"

                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
                        except:
                            Msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
                            sign = 1
                            self.trigger.emit([sign, Msg])
                            return

                        # update field name table
                        SQLSTATEMENT = 'SELECT MAX(ID) FROM fieldsname'
                        max_id = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)

                        SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment,display, display_priority) ' \
                                        'VALUES(' + str(max_id[0][0] + 1) + ',"' + tmp_field_name + '", "' + \
                                        header[col] + '", "Customized", "", "yes", 9)'
                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
                        except:
                            Msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
                            sign = 1
                            self.trigger.emit([sign, Msg])
                            return

                        RealNameList.append(header[col])
                        FieldCommentList.append('')
                        FieldTypeList.append('Customized')
                        FieldList.append(tmp_field_name)

        count = 0
        process = 1
        ''' old code, fetch values from the table
        for row in range(num_row):
            if row == 0:
                continue
            else:
                SQLSTATEMENT = "UPDATE vgenesdb SET "
                for i in range(len(col_index)):
                    col = col_index[i]
                    field = col_fields[i]
                    field = re.sub(r'\s.+', '', field)
                    value = self.dialog.ui.tableWidget.item(row, col).text()
                    SQLSTATEMENT = SQLSTATEMENT + field + ' = "' + value + '",'

                current_anchor = self.dialog.ui.tableWidget.item(row, anchor_col_index).text()
                SQLSTATEMENT = SQLSTATEMENT.rstrip(',')
                SQLSTATEMENT = SQLSTATEMENT + " WHERE " + target_field + ' = "' + current_anchor + '"'

                try:
                    count += VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT)
                except:
                    Msg = 'SQL error! Current SQL statement is:\n' + SQLSTATEMENT
                    sign = 1
                    self.trigger.emit([sign, Msg])
                    return

                pct = int(process / num_row * 100)
                label = "Updating records: " + str(process) + '/' + str(num_row)
                self.loadProgress.emit(pct, label)
                process += 1
        '''
        num_row = wc_count(self.csvFile)
        csv_reader = csv.reader(open(self.csvFile))
        SkipHeader = True
        for row_content in csv_reader:
            if SkipHeader:
                SkipHeader = False
            else:
                SQLSTATEMENT = "UPDATE vgenesdb SET "
                for i in range(len(col_index)):
                    col = col_index[i]
                    field = col_fields[i]
                    field = re.sub(r'\s.+', '', field)
                    value = row_content[col]
                    SQLSTATEMENT = SQLSTATEMENT + field + ' = "' + value + '",'

                current_anchor = row_content[anchor_col_index]
                SQLSTATEMENT = SQLSTATEMENT.rstrip(',')

                if self.chains == 'All':
                    WHEREStatement = " WHERE " + target_field + ' = "' + current_anchor + '"'
                elif self.chains == 'HC':
                    WHEREStatement = " WHERE " + target_field + ' = "' + current_anchor + '" AND GeneType IN ("Heavy","Beta","Delta")'
                elif self.chains == 'LC':
                    WHEREStatement = " WHERE " + target_field + ' = "' + current_anchor + '" AND GeneType NOT IN ("Heavy","Beta","Delta")'
                else:
                    WHEREStatement = " WHERE " + target_field + ' = "' + current_anchor + '"'

                SQLSTATEMENT = SQLSTATEMENT + WHEREStatement

                try:
                    count += VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT)
                except:
                    Msg = 'SQL error! Current SQL statement is:\n' + SQLSTATEMENT
                    sign = 1
                    self.trigger.emit([sign, Msg])
                    return

                pct = int(process / num_row * 100)
                label = "Updating records: " + str(process) + '/' + str(num_row)
                self.loadProgress.emit(pct, label)
                process += 1

        if count == 0:
            Msg = "Total " + str(count) + ' records affected! Maybe check if you anchor column is correct?'
            sign = 1
        else:
            Msg = "Update successfully!\nTotal " + str(count) + ' records affected!'
            sign = 0
        self.trigger.emit([sign, Msg])

class protein_slimlar_thread(QThread):
    loadProgress =  pyqtSignal(int, str)
    trigger = pyqtSignal(list)

    def __int__(self):
        super(protein_slimlar_thread, self).__init__()
        self.DBFilename = ''
        self.options = {}
        self.sequenceType = ''
        self.searchRange = []
        self.targetName = ''
        self.ignoreGap = False
        self.alignment_setting = []

    def run(self):
        DBFilename = self.DBFilename

        # fetch all sequences
        pct = 1
        label = "Fetching records to compare with your selected sequence ..."
        self.loadProgress.emit(pct, label)

        ## search range
        if len(self.searchRange) == 0:
            if self.sequenceType == '':
                WhereStatement = ' WHERE 1'
            else:
                WhereStatement = ' WHERE GeneType = "' + self.sequenceType + '"'
        else:
            if self.sequenceType == '':
                WhereStatement = ' WHERE SeqName IN ("' + '","'.join(self.searchRange) + '")'
            else:
                WhereStatement = ' WHERE GeneType = "' + self.sequenceType + \
                                 '" AND SeqName IN ("' + '","'.join(self.searchRange) + '")'

        ## fetch data
        SQLStatement = 'SELECT SeqName, Sequence, FR1From, Jend, Blank7 FROM vgenesDB' + WhereStatement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        # pairwise alignment and score matching
        ## get the target sequence ready
        SQLStatement = 'SELECT SeqName, Sequence, FR1From, Jend, Blank7 FROM vgenesDB WHERE SeqName = "' + self.targetName + '"'
        targetDataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        targetNTSeq = targetDataIn[0][1]
        targetVDJstart = int(targetDataIn[0][2])
        targetVDJend = int(targetDataIn[0][3])
        targetNTSeq = targetNTSeq[targetVDJstart-1:targetVDJend]
        try:
            ORF = int(targetDataIn[0][4])
        except:
            ORF = 0
        targetAASeq, msg = Translator(targetNTSeq, ORF)
        targetAASeq = re.sub(r'~','',targetAASeq)
        ## calculate protein score for target sequence
        if 'Hydrophobicity' in self.options:
            WindowSize = self.options['Hydrophobicity']
            TargetColorMap1 = [0,0] + VGenesSeq.OtherParam(targetAASeq, 'Hydrophobicity', WindowSize, True)
        if 'Hydrophilicity' in self.options:
            WindowSize = self.options['Hydrophilicity']
            TargetColorMap2 = [0,0] + VGenesSeq.OtherParam(targetAASeq, 'Hydrophilicity', WindowSize, True)
        if 'Flexibility' in self.options:
            WindowSize = self.options['Flexibility']
            TargetColorMap3 = [0,0] + VGenesSeq.OtherParam(targetAASeq, 'Flexibility', WindowSize, True)
        if 'Surface' in self.options:
            WindowSize = self.options['Surface']
            TargetColorMap4 = [0,0] + VGenesSeq.OtherParam(targetAASeq, 'Surface', WindowSize, True)
        if 'MapAApI' in self.options:
            WindowSize = self.options['MapAApI']
            TargetColorMap5 = [0,0] + VGenesSeq.OtherParam(targetAASeq, 'MapAApI', WindowSize, True)
        if 'MapInstability' in self.options:
            WindowSize = self.options['MapInstability']
            TargetColorMap6 = [0,0] + VGenesSeq.OtherParam(targetAASeq, 'MapInstability', WindowSize, True)

        ScoreRank = pd.DataFrame(0, index=self.options.keys(), columns=[el[0] for el in DataIn])
        count = 0
        allRecordCount = len(DataIn)
        
        Error_list = []
        
        for record in DataIn:
            pct = count / allRecordCount * 100
            label = "Comparing the target sequence against select sequences, " + str(count) + '/' + str(allRecordCount) + '...'
            self.loadProgress.emit(pct, label)
            count += 1

            ## make sequence for each sequence
            currentSeqName = record[0]
            currentNTSeq = record[1]
            currentVDJstart = int(record[2])
            currentVDJend = int(record[3])
            currentNTSeq = currentNTSeq[currentVDJstart - 1:currentVDJend]
            try:
                ORF = int(record[4])
            except:
                ORF = 0
            currentAASeq, msg = Translator(currentNTSeq, ORF)
            currentAASeq = re.sub(r'~', '', currentAASeq)

            try:
                ## for each sequence, calculate protein scores
                if 'Hydrophobicity' in self.options:
                    WindowSize = self.options['Hydrophobicity']
                    CurrentColorMap1 = [0,0] + VGenesSeq.OtherParam(currentAASeq, 'Hydrophobicity', WindowSize, True)
                if 'Hydrophilicity' in self.options:
                    WindowSize = self.options['Hydrophilicity']
                    CurrentColorMap2 = [0,0] + VGenesSeq.OtherParam(currentAASeq, 'Hydrophilicity', WindowSize, True)
                if 'Flexibility' in self.options:
                    WindowSize = self.options['Flexibility']
                    CurrentColorMap3 = [0,0] + VGenesSeq.OtherParam(currentAASeq, 'Flexibility', WindowSize, True)
                if 'Surface' in self.options:
                    WindowSize = self.options['Surface']
                    CurrentColorMap4 = [0,0] + VGenesSeq.OtherParam(currentAASeq, 'Surface', WindowSize, True)
                if 'MapAApI' in self.options:
                    WindowSize = self.options['MapAApI']
                    CurrentColorMap5 = [0,0] + VGenesSeq.OtherParam(currentAASeq, 'MapAApI', WindowSize, True)
                if 'MapInstability' in self.options:
                    WindowSize = self.options['MapInstability']
                    CurrentColorMap6 = [0,0] + VGenesSeq.OtherParam(currentAASeq, 'MapInstability', WindowSize, True)

                ## hard copy oif target score
                if 'Hydrophobicity' in self.options:
                    ThisLoop_TargetColorMap1 = copy.deepcopy(TargetColorMap1)
                if 'Hydrophilicity' in self.options:
                    ThisLoop_TargetColorMap2 = copy.deepcopy(TargetColorMap2)
                if 'Flexibility' in self.options:
                    ThisLoop_TargetColorMap3 = copy.deepcopy(TargetColorMap3)
                if 'Surface' in self.options:
                    ThisLoop_TargetColorMap4 = copy.deepcopy(TargetColorMap4)
                if 'MapAApI' in self.options:
                    ThisLoop_TargetColorMap5 = copy.deepcopy(TargetColorMap5)
                if 'MapInstability' in self.options:
                    ThisLoop_TargetColorMap6 = copy.deepcopy(TargetColorMap6)

                ## for each sequence, align with target sequence
                if self.alignment_setting[0] == "blosum62":
                    matrix = matlist.blosum62
                    #matrix = substitution_matrices.load('BLOSUM62')
                elif self.alignment_setting[0] == "pam60":
                    matrix = matlist.pam60
                    #matrix = substitution_matrices.load('PAM70')
                elif self.alignment_setting[0] == "benner22":
                    matrix = matlist.benner22
                    #matrix = substitution_matrices.load('BENNER22')
                else:
                    matrix = matlist.blosum62
                    #matrix = substitution_matrices.load('BLOSUM62')
                gap_open = self.alignment_setting[1]
                gap_extend = self.alignment_setting[2]

                alignments = pairwise2.align.globalds(targetAASeq, currentAASeq, matrix, gap_open, gap_extend)
                tergetAlign = alignments[0][0]
                currentAlign = alignments[0][1]

                ## align score array for target sequence
                gap_index_target = []
                index = 0
                while index < len(tergetAlign):
                    pos = tergetAlign.find('-',index)
                    if pos != -1:
                        index = pos + 1
                        gap_index_target.append(pos)
                        if 'Hydrophobicity' in self.options:
                            ThisLoop_TargetColorMap1.insert(pos,-10)
                        if 'Hydrophilicity' in self.options:
                            ThisLoop_TargetColorMap2.insert(pos,-10)
                        if 'Flexibility' in self.options:
                            ThisLoop_TargetColorMap3.insert(pos,-10)
                        if 'Surface' in self.options:
                            ThisLoop_TargetColorMap4.insert(pos,-10)
                        if 'MapAApI' in self.options:
                            ThisLoop_TargetColorMap5.insert(pos,-10)
                        if 'MapInstability' in self.options:
                            ThisLoop_TargetColorMap6.insert(pos,-10)
                    else:
                        break

                ## align score array for current sequence
                gap_index_current = []
                index = 0
                while index < len(currentAlign):
                    pos = currentAlign.find('-', index)
                    if pos != -1:
                        index = pos + 1
                        gap_index_current.append(pos)
                        if 'Hydrophobicity' in self.options:
                            CurrentColorMap1.insert(pos, -10)
                        if 'Hydrophilicity' in self.options:
                            CurrentColorMap2.insert(pos, -10)
                        if 'Flexibility' in self.options:
                            CurrentColorMap3.insert(pos, -10)
                        if 'Surface' in self.options:
                            CurrentColorMap4.insert(pos, -10)
                        if 'MapAApI' in self.options:
                            CurrentColorMap5.insert(pos, -10)
                        if 'MapInstability' in self.options:
                            CurrentColorMap6.insert(pos, -10)
                    else:
                        break

                ## code for ignore GAP option
                if self.ignoreGap == True:
                    gap_index = gap_index_target + gap_index_current
                    if 'Hydrophobicity' in self.options:
                        ThisLoop_TargetColorMap1 = numpy.delete(ThisLoop_TargetColorMap1, gap_index).tolist()
                        CurrentColorMap1 = numpy.delete(CurrentColorMap1, gap_index).tolist()
                    if 'Hydrophilicity' in self.options:
                        ThisLoop_TargetColorMap2 = numpy.delete(ThisLoop_TargetColorMap2, gap_index).tolist()
                        CurrentColorMap2 = numpy.delete(CurrentColorMap2, gap_index).tolist()
                    if 'Flexibility' in self.options:
                        ThisLoop_TargetColorMap3 = numpy.delete(ThisLoop_TargetColorMap3, gap_index).tolist()
                        CurrentColorMap3 = numpy.delete(CurrentColorMap3, gap_index).tolist()
                    if 'Surface' in self.options:
                        ThisLoop_TargetColorMap4 = numpy.delete(ThisLoop_TargetColorMap4, gap_index).tolist()
                        CurrentColorMap4 = numpy.delete(CurrentColorMap4, gap_index).tolist()
                    if 'MapAApI' in self.options:
                        ThisLoop_TargetColorMap5 = numpy.delete(ThisLoop_TargetColorMap5, gap_index).tolist()
                        CurrentColorMap5 = numpy.delete(CurrentColorMap5, gap_index).tolist()
                    if 'MapInstability' in self.options:
                        ThisLoop_TargetColorMap6 = numpy.delete(ThisLoop_TargetColorMap6, gap_index).tolist()
                        CurrentColorMap6 = numpy.delete(CurrentColorMap6, gap_index).tolist()

                ## for each sequence, compare the protein score difference，assign a diff score
                if 'Hydrophobicity' in self.options:
                    Score = CalculateProteinScoreDiff(ThisLoop_TargetColorMap1, CurrentColorMap1, -10)
                    ScoreRank[currentSeqName].loc['Hydrophobicity'] = Score
                if 'Hydrophilicity' in self.options:
                    Score = CalculateProteinScoreDiff(ThisLoop_TargetColorMap2, CurrentColorMap2, -10)
                    ScoreRank[currentSeqName].loc['Hydrophilicity'] = Score
                if 'Flexibility' in self.options:
                    Score = CalculateProteinScoreDiff(ThisLoop_TargetColorMap3, CurrentColorMap3, -10)
                    ScoreRank[currentSeqName].loc['Flexibility'] = Score
                if 'Surface' in self.options:
                    Score = CalculateProteinScoreDiff(ThisLoop_TargetColorMap4, CurrentColorMap4, -10)
                    ScoreRank[currentSeqName].loc['Surface'] = Score
                if 'MapAApI' in self.options:
                    Score = CalculateProteinScoreDiff(ThisLoop_TargetColorMap5, CurrentColorMap5, -10)
                    ScoreRank[currentSeqName].loc['MapAApI'] = Score
                if 'MapInstability' in self.options:
                    Score = CalculateProteinScoreDiff(ThisLoop_TargetColorMap6, CurrentColorMap6, -10)
                    ScoreRank[currentSeqName].loc['MapInstability'] = Score
            except:
                Error_list.append([currentSeqName, currentAASeq])

        if len(Error_list) > 0:
            drop_list = [ele[0] for ele in Error_list]
            ScoreRank = ScoreRank.drop(drop_list, axis=1)

        # function finish, return message and data
        pct = 100
        self.loadProgress.emit(pct, '')
        sign = 0
        self.trigger.emit([sign, ScoreRank, Error_list, self.targetName, self.options])

class ProteinSimilarDialog(QtWidgets.QDialog, Ui_ProteinSimilarDialog):
    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(ProteinSimilarDialog, self).__init__()
        self.ui = Ui_ProteinSimilarDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""
        self.vgene = ''

        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.chkSelectAllProt.clicked.connect(self.checkAll)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def progressLabel(self, pct, label):
        try:
            if pct == 100:
                self.progress.hide()
            else:
                self.progress.setValue(pct)
                self.progress.setLabel(label)
        except:
            pass

    def checkAll(self):
        if self.ui.chkSelectAllProt.isChecked():
            self.ui.chkHydrophobicity.setChecked(True)
            self.ui.chkFlexibility.setChecked(True)
            self.ui.chkHydrophilicity.setChecked(True)
            self.ui.chkInstability.setChecked(True)
            self.ui.chkpI.setChecked(True)
            self.ui.chkSurface.setChecked(True)
        else:
            self.ui.chkHydrophobicity.setChecked(False)
            self.ui.chkFlexibility.setChecked(False)
            self.ui.chkHydrophilicity.setChecked(False)
            self.ui.chkInstability.setChecked(False)
            self.ui.chkpI.setChecked(False)
            self.ui.chkSurface.setChecked(False)

    def accept(self):
        if self.ui.chkHydrophobicity.isChecked() or self.ui.chkFlexibility.isChecked() or self.ui.chkHydrophilicity.isChecked() or self.ui.chkInstability.isChecked() or self.ui.chkpI.isChecked() or self.ui.chkSurface.isChecked():
            # multi-thread
            self.protein_slimlar_workThread = protein_slimlar_thread(self)

            self.protein_slimlar_workThread.DBFilename = DBFilename
            self.protein_slimlar_workThread.options = {}
            if self.ui.chkHydrophobicity.isChecked():
                self.protein_slimlar_workThread.options['Hydrophobicity'] = self.ui.spnHydrophobicity.value()
            if self.ui.chkHydrophilicity.isChecked():
                self.protein_slimlar_workThread.options['Hydrophilicity'] = self.ui.spnHydrophilicity.value()
            if self.ui.chkFlexibility.isChecked():
                self.protein_slimlar_workThread.options['Flexibility'] = self.ui.spnFlexibility.value()
            if self.ui.chkSurface.isChecked():
                self.protein_slimlar_workThread.options['Surface'] = self.ui.spnSurface.value()
            if self.ui.chkpI.isChecked():
                self.protein_slimlar_workThread.options['MapAApI'] = self.ui.spnpI.value()
            if self.ui.chkInstability.isChecked():
                self.protein_slimlar_workThread.options['MapInstability'] = self.ui.spnInstability.value()
            self.protein_slimlar_workThread.sequenceType = self.ui.lineEditGeneType.text()
            if self.ui.checkBoxCheckRecords.isChecked():
                self.protein_slimlar_workThread.searchRange = self.vgene.CheckedRecords
                if len(self.protein_slimlar_workThread.searchRange) == 0:
                    Msg = 'You did not select any records, will search the entire database!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            else:
                self.protein_slimlar_workThread.searchRange = []
            self.protein_slimlar_workThread.targetName = self.ui.lineEditName.text()
            if self.ui.radioButtonIgnoreGap.isChecked():
                self.protein_slimlar_workThread.ignoreGap = True
            else:
                self.protein_slimlar_workThread.ignoreGap = False

            if self.ui.radioButtonblosum62.isChecked():
                self.protein_slimlar_workThread.alignment_setting = ['blosum62']
            elif self.ui.radioButtonpam60.isChecked():
                self.protein_slimlar_workThread.alignment_setting = ['pam60']
            elif self.ui.radioButtonbenner22.isChecked():
                self.protein_slimlar_workThread.alignment_setting = ['benner22']
            else:
                self.protein_slimlar_workThread.alignment_setting = ['blosum62']

            try:
                self.protein_slimlar_workThread.alignment_setting.append(float(self.ui.lineEditGapopen.text()))
                self.protein_slimlar_workThread.alignment_setting.append(float(self.ui.lineEditGapExtend.text()))
            except:
                Msg = 'Only numbers allowed for Gap open and Gap extend!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            self.protein_slimlar_workThread.start()
            self.protein_slimlar_workThread.trigger.connect(self.vgene.ShowProteinSimilarResults)
            self.protein_slimlar_workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Fetching records ...')
            self.progress.show()

            self.close()
        else:
            Msg = 'Please check at least one protein property!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

class ProteinSimilarResultDialog(QtWidgets.QDialog, Ui_ProteinSimilarResultDialog):
    ProteinSimilarUpdateSelectionSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(ProteinSimilarResultDialog, self).__init__()
        self.ui = Ui_ProteinSimilarResultDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""

        self.ui.pushButtonReport.clicked.connect(self.Report)
        self.ui.pushButtonExport.clicked.connect(self.exportRes)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.radioButtonCheckAll.clicked.connect(self.CheckAll)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def CheckAll(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentTable = self.ui.tables[option]
        for index in range(currentTable.rowCount()):
            if self.ui.radioButtonCheckAll.isChecked():
                currentTable.cellWidget(index, 0).setChecked(True)
            else:
                currentTable.cellWidget(index, 0).setChecked(False)

    def updateSelection(self, currentRow, currentColumn, previousRow, previousColumn):
        sender_widget = self.sender()
        SeqName = sender_widget.item(currentRow, 1).text()
        self.ProteinSimilarUpdateSelectionSignal.emit(SeqName)

    def updateWindowSize(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentWindowSize = self.windowSize[option]
        self.ui.lineEditWindowSize.setText(str(currentWindowSize))

    def Report(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentTable = self.ui.tables[option]
        SeqNames = {}
        SeqNames[self.ui.lineEditTargetName.text()] = 0
        try:
            windowSize = int(self.ui.lineEditWindowSize.text())
        except:
            Msg = 'Window Size only can be integers that >= 2!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        for index in range(currentTable.rowCount()):
            if currentTable.cellWidget(index, 0).isChecked():
                SeqNames[currentTable.item(index, 1).text()] = float(currentTable.item(index, 2).text())
        if len(SeqNames) < 2:
            Msg = 'You did not check anything!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        HtmlFile, errorNum, errorFile = proteinFunction(DBFilename, SeqNames, option, windowSize, [self.ui.lineEditTargetName.text()])

        # display
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        url = QUrl.fromLocalFile(str(HtmlFile))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    def updateWindowSize(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        self.ui.lineEditWindowSize.setText(str(self.windowSize[option]))

    def exportRes(self):
        pass

class PatternSearchResultDialog(QtWidgets.QDialog, Ui_PatternSearchResultDialog):
    ProteinSimilarUpdateSelectionSignal = pyqtSignal(str)
    checkSignal = pyqtSignal(list)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(PatternSearchResultDialog, self).__init__()
        self.ui = Ui_PatternSearchResultDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""

        self.ui.pushButtonReport.clicked.connect(self.CheckRecord)
        self.ui.pushButtonClose.clicked.connect(self.reject)
        self.ui.radioButtonCheckAll.clicked.connect(self.CheckAll)
        self.ui.pushButtonProtein.clicked.connect(self.Report)
        self.ui.pushButtonAlignment.clicked.connect(self.Alignment)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass
    
    def Alignment(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentTable = self.ui.tables[option]
        SeqNames = []
        for index in range(currentTable.rowCount()):
            if currentTable.cellWidget(index, 0).isChecked():
                SeqNames.append(currentTable.item(index, 1).text())

        WhereState = 'SeqName IN ("' + '","'.join(SeqNames) + '")'
        field = 'SeqName,Sequence,FR1From,FR1To,CDR1From,CDR1To,FR2From,FR2To,CDR2From,CDR2To,FR3From,FR3To,CDR3beg,CDR3end,Jend,GermlineSequence,Blank7'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        DataSet = []
        for item in DataIn:
            SeqName = item[0]
            Sequence = item[1]
            SeqFrom = int(item[2])
            SeqTo = int(item[14])
            Sequence = Sequence[SeqFrom - 1:SeqTo]  # only keep V(D)J section
            Sequence = Sequence.upper()
            EachIn = (
                SeqName, Sequence, item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10],
                item[11], item[12], item[13], item[14], item[15], item[16])
            DataSet.append(EachIn)
        # make HTML
        ErrMsg, html_file = AlignSequencesHTMLBCR(DataSet, '')
        if ErrMsg != 'OK':
            QMessageBox.warning(self, 'Warning', ErrMsg, QMessageBox.Ok, QMessageBox.Ok)
            if html_file == '':
                return
        # delete close window objects
        del_list = []
        for id, obj in VGenesTextWindows.items():
            if obj.isVisible() == False:
                del_list.append(id)
        for id in del_list:
            del_obj = VGenesTextWindows.pop(id)

        # display
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        # view.load(QUrl("file://" + html_file))
        url = QUrl.fromLocalFile(str(html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()
    
    def CheckAll(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentTable = self.ui.tables[option]
        for index in range(currentTable.rowCount()):
            if self.ui.radioButtonCheckAll.isChecked():
                currentTable.cellWidget(index, 0).setChecked(True)
            else:
                currentTable.cellWidget(index, 0).setChecked(False)

    def updateSelection(self, currentRow, currentColumn, previousRow, previousColumn):
        sender_widget = self.sender()
        SeqName = sender_widget.item(currentRow, 1).text()
        self.ProteinSimilarUpdateSelectionSignal.emit(SeqName)

    def CheckRecord(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentTable = self.ui.tables[option]
        SeqNames = []
        for index in range(currentTable.rowCount()):
            if currentTable.cellWidget(index, 0).isChecked():
                SeqNames.append(currentTable.item(index, 1).text())

        self.checkSignal.emit(SeqNames)
        
        return

    def Report(self):
        option = self.ui.tabWidget.tabText(self.ui.tabWidget.currentIndex())
        currentTable = self.ui.tables[option]
        checkedItems = []
        for index in range(currentTable.rowCount()):
            if currentTable.cellWidget(index, 0).isChecked():
                checkedItems.append(currentTable.item(index, 1).text())

        # step 1: fetch data
        fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
                  'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend', 'Blank7']

        if len(checkedItems) == 0:
            Msg = 'Please check at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif len(checkedItems) > 100:
            Msg = 'You checked too many sequences! Max = 100!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        WhereState = 'SeqName IN ("' + '","'.join(checkedItems) + '")'
        field = ','.join(fields)
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        ## filter out bad sequences
        FilterDataIs = []
        badNumber = 0
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        with open(ErlogFile2, 'w') as currentFile:
            for record in DataIs:
                try:
                    tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                    FilterDataIs.append(record)
                except:
                    errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                    currentFile.write(errMsg)
                    badNumber += 1

        if badNumber > 0:
            self.ShowVGenesText(ErlogFile2)

        # Step 2: make sequences, scores, details
        CDR1beg = 0
        CDR1end = 0
        CDR2beg = 0
        CDR2end = 0
        CDR3beg = 0
        CDR3end = 0
        CDR1len = 0
        CDR2len = 0
        CDR3len = 0
        FW1len = 0
        FW2len = 0
        FW3len = 0
        FW4len = 0

        NameLength = 0
        SeqLength = 0
        SeqArray = []
        AllSeqs = []

        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
        for item in FilterDataIs:
            SeqArray.clear()
            SeqName = item[0]
            SeqArray.append(SeqName)

            # make CDR1beg, CDR1end, just 3 Cs and NameLength
            DNASeq = item[1]
            GDNAseq = item[2]
            mutations = item[10]
            IDEvents = item[11]

            try:
                ORF = int(item[15])
            except:
                ORF = 0

            # unfixed version
            AASeq, ErMessage = VGenesSeq.Translator(DNASeq, ORF)

            if IDEvents == 'Insertion' or IDEvents == 'Both':
                mutate = mutations
                mutations = mutate.split(',')
                for mut in mutations:
                    if mut[:9] == 'Insertion':
                        Ievent = mut
                        Iparts = Ievent.split('-')
                        AddAt = int(Iparts[1])
                        SeqToAdd = Iparts[2]
                        GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

            GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, ORF)

            if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
                GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

            if int(item[4]) != 0:
                SeqArray.append(int((int(item[4]) - 1) / 3))  # 'c1b'
            else:
                SeqArray.append(int((int(GCDRs[2]) - 1) / 3))

            if int(item[5]) != 0:
                SeqArray.append(int((int(item[5])) / 3))  # c1e
            else:
                SeqArray.append(int(int(GCDRs[3]) / 3))

            if int(item[6]) != 0:
                SeqArray.append(int((int(item[6]) - 1) / 3))
            else:
                SeqArray.append(int((int(GCDRs[6]) - 1) / 3))

            if int(item[7]) != 0:
                SeqArray.append(int((int(item[7])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[7]) / 3))

            if int(item[8]) != 0:
                SeqArray.append(int((int(item[8])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[9]) / 3))

            if int(item[9]) != 0:
                SeqArray.append(int((int(item[9])) / 3))
            else:
                SeqArray.append(len(GAASeq))

            if int(item[9]) != 0:
                Jend = int(int(item[14]) / 3)
                SeqArray.append(Jend)
            else:
                SeqArray.append(len(GAASeq))
            # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

            CDR1beg = int(SeqArray[1])
            CDR1end = int(SeqArray[2])
            CDR2beg = int(SeqArray[3])
            CDR2end = int(SeqArray[4])
            CDR3beg = int(SeqArray[5])
            CDR3end = int(SeqArray[6])

            if len(SeqName) > NameLength: NameLength = len(SeqName)

            if len(AASeq) > len(GAASeq):
                LenTo = len(GAASeq)
                AASeq = AASeq[:LenTo]
            else:
                LenTo = len(AASeq)

            SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

            for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
                if AASeq[i] == GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~':
                        AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                        GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

            for i in range(0, LenTo - 1):
                if AASeq[i] != GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                        AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

            AASeq = AASeq.replace('~', '').replace('.', '')

            if len(AASeq) > SeqLength: SeqLength = len(AASeq)

            if CDR1beg > FW1len: FW1len = CDR1beg
            if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
            if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
            if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
            if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
            if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
            if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

            if self.ui.checkBox1.isChecked() == True:

                WindowSize = self.ui.spinBox1.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spinBox1.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spinBox1.setValue(len(AASeq) - 1)
                PhobCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, True)

                PhobScale = (-4.5, 4.5)  # based on tests paramators

                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.checkBox2.isChecked() == True:
                WindowSize = self.ui.spinBox2.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spinBox2.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spinBox2.setValue(len(AASeq) - 1)

                PhilCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, True)

                PhilScale = (-3.4, 3.0)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.checkBox3.isChecked() == True:
                WindowSize = self.ui.spinBox3.value()
                if WindowSize < 9:
                    WindowSize = 9
                    self.ui.spinBox3.setValue(9)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spinBox3.setValue(len(AASeq) - 1)
                FlexCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, True)

                FlexScale = (0.904, 1.102)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.checkBox6.isChecked() == True:
                WindowSize = self.ui.spinBox6.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spinBox6.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spinBox6.setValue(len(AASeq) - 1)
                SurfCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, True)

                SurfScale = (0.394, 1.545)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.checkBox5.isChecked() == True:
                WindowSize = self.ui.spinBox5.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spinBox5.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spinBox5.setValue(len(AASeq) - 1)
                pICurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, True)

                pIScale = (0, 14)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.checkBox4.isChecked() == True:
                WindowSize = self.ui.spinBox4.value()
                if WindowSize < 8:
                    WindowSize = 8
                    self.ui.spinBox4.setValue(8)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spinBox4.setValue(len(AASeq) - 1)
                InsCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, True)

                # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
                if ColorMap != 0:
                    Highest = max(ColorMap)
                    Lowest = min(ColorMap)
                    maxi = ((40 - Lowest) / 8) * 11
                    InsScale = (Lowest, maxi)  # based on tests paramators
                else:
                    InsScale = (0, 1)
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            AllSeqs.append(tuple(SeqArray))

        # Step 3: Make HTML viewers from current data
        ## copy protein viewer template
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        out_html_file = os.path.join(temp_folder, time_stamp + '.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_ProteinViewer.html')
        shutil.copyfile(header_file, out_html_file)

        html_content = '<ul class = "seq_container" style="margin-top: 40px; padding-top: 10px;">\n'
        ## make HTML for each report type
        if self.ui.checkBox1.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Hydrophobicity</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 9, PhobScale, [])
            html_content += '</li>\n\n'

        if self.ui.checkBox2.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Hydrophilicity</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 10, PhilScale, [])
            html_content += '</li>\n\n'

        if self.ui.checkBox3.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Flexibility</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 11, FlexScale, [])
            html_content += '</li>\n\n'

        if self.ui.checkBox6.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Surface liklihood</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 12, SurfScale, [])
            html_content += '</li>\n\n'

        if self.ui.checkBox5.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Isoelectric point (pI)</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 13, pIScale, [])
            html_content += '</li>\n\n'

        if self.ui.checkBox4.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Instability</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 14, InsScale, [])
            html_content += '</li>\n\n'

        html_content += '</ul>\n</body>\n</html>\n'
        ## write content to HTML file
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(html_content)
        out_file_handle.close()

        # Step 4: show HTML on a pop-up window
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        # view.load(QUrl("file://" + out_html_file))
        url = QUrl.fromLocalFile(str(out_html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

'''
class QchartDialog(QtWidgets.QDialog, Ui_QchartDialog):
    ProteinSimilarUpdateSelectionSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(QchartDialog, self).__init__()
        self.ui = Ui_QchartDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""

        self.ui.pushButtonDraw.clicked.connect(self.Draw)
        self.ui.pushButtonResetZoom.clicked.connect(self.resetZoom)
        self.ui.radioButtonNum.clicked.connect(self.activeUI)

        self.chartview = QChartView()
        self.chartview.setRubberBand(QChartView.RectangleRubberBand)
        self.ui.PlotVerticalLayout.addWidget(self.chartview)



        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def select(self, event):

        msg = 'xxx'
        QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok, QMessageBox.Ok)

    def activeUI(self):
        if self.ui.radioButtonNum.isChecked():
            self.ui.lineEditMin.setEnabled(True)
            self.ui.lineEditMax.setEnabled(True)
        else:
            self.ui.lineEditMin.setEnabled(False)
            self.ui.lineEditMax.setEnabled(False)

    def resetZoom(self):
        self.chartview.chart().zoomReset()

    def Draw(self):
        dim1 = self.ui.comboBoxX.currentText()
        dim2 = self.ui.comboBoxY.currentText()
        group = self.ui.comboBoxGroup.currentText()

        dim1 = re.sub(r'\(.+', '', dim1)
        dim2 = re.sub(r'\(.+', '', dim2)
        group = re.sub(r'\(.+', '', group)

        if dim1 == "" or dim2 == "":
            QMessageBox.warning(self, 'Warning', 'Your dim1 or dim2 is empty!',
                                QMessageBox.Ok, QMessageBox.Ok)
            return

        where_statement = ' WHERE 1'

        chart = QChart()
        if group == '':
            field = dim1 + "," + dim2
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            series0 = QScatterSeries()
            series0.setName('plot data')
            series0.setMarkerShape(QScatterSeries.MarkerShapeCircle)
            
            goodNum = 0
            for d in DataIn:
                try:
                    x = float(d[0])
                    y = float(d[1])
                    series0.append(x, y)
                    goodNum += 1
                except:
                    pass
            if goodNum == 0:
                QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return

            chart.addSeries(series0)
            chart.setTitle("Scatter plot")
            chart.setAnimationOptions(QChart.SeriesAnimations)
            chart.setTheme(QChart.ChartThemeDark)
            chart.createDefaultAxes()

            if self.ui.radioButtonLogX.isChecked():
                axis_x = QLogValueAxis()
                axis_x.setTitleText(dim1)
                axis_x.setMinorTickCount(-1)
            else:
                axis_x = QValueAxis()
                axis_x.setTitleText(dim1)
            if self.ui.radioButtonLogY.isChecked():
                axis_y = QLogValueAxis()
                axis_y.setTitleText(dim2)
                axis_y.setMinorTickCount(-1)
            else:
                axis_y = QValueAxis()
                axis_y.setTitleText(dim2)

            chart.setAxisX(axis_x, series0)
            chart.setAxisY(axis_y, series0)
        else:
            field = dim1 + "," + dim2 + "," + group
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement + ' ORDER BY ' + group
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            goodNum = 0
            curGroup = ''
            series = []
            for d in DataIn:
                try:
                    x = float(d[0])
                    y = float(d[1])

                    if curGroup != d[2]:
                        if curGroup != '':
                            series.append(sub_series)
                            chart.addSeries(sub_series)
                        
                        curGroup = d[2]
                        sub_series = QScatterSeries()
                        sub_series.setName(curGroup)
                        sub_series.setMarkerShape(QScatterSeries.MarkerShapeCircle)
                        sub_series.append(x, y)
                    else:
                        sub_series.append(x, y)
                    goodNum += 1
                except:
                    pass
            series.append(sub_series)
            chart.addSeries(sub_series)

            if goodNum == 0:
                QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return

            chart.setTitle("Scatter plot")
            chart.setAnimationOptions(QChart.SeriesAnimations)
            chart.setTheme(QChart.ChartThemeDark)
            chart.createDefaultAxes()

            if self.ui.radioButtonLogX.isChecked():
                axis_x = QLogValueAxis()
                axis_x.setTitleText(dim1)
                axis_x.setMinorTickCount(-1)
            else:
                axis_x = QValueAxis()
                axis_x.setTitleText(dim1)
            if self.ui.radioButtonLogY.isChecked():
                axis_y = QLogValueAxis()
                axis_y.setTitleText(dim2)
                axis_y.setMinorTickCount(-1)
            else:
                axis_y = QValueAxis()
                axis_y.setTitleText(dim2)

            for ele in series:
                chart.setAxisX(axis_x, ele)
                chart.setAxisY(axis_y, ele)

        self.chartview.setChart(chart)
        self.chartview.chart().zoom(0.9)
'''

class ColorTableDialog(QtWidgets.QDialog):
    SelectSignal = pyqtSignal(str, list)

    def __init__(self):
        super(ColorTableDialog, self).__init__()
        self.ui = Ui_ColorTableDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.radioButton.clicked.connect(self.checkAll)
        
        self.field = ''

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def checkAll(self):
        rows = self.ui.tableWidget.rowCount()
        if self.ui.radioButton.isChecked():
            for row in range(0, rows):
                self.ui.tableWidget.cellWidget(row, 0).setChecked(True)
        else:
            for row in range(0, rows):
                self.ui.tableWidget.cellWidget(row, 0).setChecked(False)

    def accept(self):
        fields = []
        rows = self.ui.tableWidget.rowCount()
        for row in range(0, rows):
            if self.ui.tableWidget.cellWidget(row, 0).isChecked():
                fields.append(self.ui.tableWidget.item(row, 1).text())
        
        self.SelectSignal.emit(self.field, fields)
        Msg = 'High light setting saved! Try to draw plot to see the difference!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        self.close()

class PatternSearchDialog(QtWidgets.QDialog):
    InfoSignal = pyqtSignal(str, list, list, list, list)

    def __init__(self):
        super(PatternSearchDialog, self).__init__()
        self.ui = Ui_PatternSearchDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonSearch.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:18px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")

    def accept(self):
        # pattern
        pattern_str = self.ui.lineEdit.text()
        if pattern_str == '':
            Msg = 'Please type your pattern!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        # search region
        region_list = []
        if self.ui.checkBoxVgene.isChecked():
            region_list.append('Vgene')
        if self.ui.checkBoxDgene.isChecked():
            region_list.append('Dgene')
        if self.ui.checkBoxJgene.isChecked():
            region_list.append('Jgene')

        if self.ui.checkBoxFWR1.isChecked():
            region_list.append('FWR1')
        if self.ui.checkBoxFWR2.isChecked():
            region_list.append('FWR2')
        if self.ui.checkBoxFWR3.isChecked():
            region_list.append('FWR3')
        if self.ui.checkBoxFWR4.isChecked():
            region_list.append('FWR4')
        if self.ui.checkBoxCDR1.isChecked():
            region_list.append('CDR1')
        if self.ui.checkBoxCDR2.isChecked():
            region_list.append('CDR2')
        if self.ui.checkBoxCDR3.isChecked():
            region_list.append('CDR3')

        if self.ui.checkBoxFull.isChecked():
            region_list.append('Full')
        if self.ui.checkBoxJunction.isChecked():
            region_list.append('Junction')
            
        if len(region_list) == 0:
            Msg = 'Please check at least 1 region!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        # filter
        vlist = self.ui.comboBoxVgene.Selectlist()
        dlist = self.ui.comboBoxDgene.Selectlist()
        jlist = self.ui.comboBoxJgene.Selectlist()
        
        self.InfoSignal.emit(pattern_str, region_list, vlist, dlist, jlist)

class PyqtGraphDialog(QtWidgets.QDialog, Ui_QchartDialog):
    UpdateSelectionSignal = pyqtSignal(list)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(PyqtGraphDialog, self).__init__()
        self.ui = Ui_QchartDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""
        self.fields_name = []

        self.ui.pushButtonDraw.clicked.connect(self.Draw)
        self.ui.radioButtonNum.clicked.connect(self.activeUI)
        self.ui.lineEditMin.textChanged.connect(self.updateRange)
        self.ui.lineEditMax.textChanged.connect(self.updateRange)
        self.ui.radioButtonWhiteBG.clicked.connect(self.changeBG)
        self.ui.lineEditSize.textChanged.connect(self.sizeSwitch)
        self.ui.pushButtonSelect.clicked.connect(self.mouseModeSelect)
        self.ui.pushButtonZoom.clicked.connect(self.mouseModeRect)
        self.ui.pushButtonPan.clicked.connect(self.mouseModePan)
        self.ui.pushButtonReset.clicked.connect(self.resetZoom)
        self.ui.pushButtonExport.clicked.connect(self.exportFigure)
        self.ui.pushButtonColorSetting.clicked.connect(self.setColor)
        self.ui.pushButtonCheckSelection.clicked.connect(self.CheckSelection)
        self.ui.radioButtonDataRange.clicked.connect(self.updateCheck)
        self.ui.radioButtonHC.clicked.connect(self.updateHC)
        self.ui.radioButtonLC.clicked.connect(self.updateLC)
        
        self.view = pg.GraphicsLayoutWidget()
        self.ui.PlotVerticalLayout.addWidget(self.view)
        #self.w4 = self.view.addPlot()
        self.w4 = PlotItem()
        self.view.addItem(self.w4)

        self.w4.getViewBox().setMouseMode(pg.ViewBox.RectMode)
        self.w4.getViewBox().setMenuEnabled(False)
        self.w4.getViewBox().setMouseMode(ViewBox.SelectMode)
        self.w4.getViewBox().UpdateSelectionSignal.connect(self.updateSelectNum)
        self.rangeSet = False

        # high light factor setting for color group
        self.HighlightFactor = {}

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass
    
    def updateSelectNum(self, num):
        if num == 0:
            self.ui.labelMode.setText('Select mode: drag to select, drag + ALT to delete')
        else:
            Msg = str(num) + ' points has been selected from the plot!'
            self.ui.labelMode.setText(Msg)
    
    def updateHC(self):
        if self.ui.radioButtonHC.isChecked():
            pass
        else:
            if self.ui.radioButtonLC.isChecked():
                pass
            else:
                self.ui.radioButtonLC.setChecked(True)

    def updateLC(self):
        if self.ui.radioButtonLC.isChecked():
            pass
        else:
            if self.ui.radioButtonHC.isChecked():
                pass
            else:
                self.ui.radioButtonHC.setChecked(True)

    def updateCheck(self):
        if self.ui.radioButtonDataRange.isChecked():
            self.ui.radioButtonHC.setChecked(False)
            self.ui.radioButtonHC.setEnabled(False)
            self.ui.radioButtonLC.setChecked(False)
            self.ui.radioButtonLC.setEnabled(False)
        else:
            self.ui.radioButtonHC.setEnabled(True)
            self.ui.radioButtonLC.setEnabled(True)
            self.ui.radioButtonHC.setChecked(True)

    def initLineedit(self, lineEdit, items_list):
        # add auto complete
        self.completer = QCompleter(items_list)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        # set match mode
        self.completer.setFilterMode(Qt.MatchContains)
        # set complete mode
        self.completer.setCompletionMode(QCompleter.PopupCompletion)
        # set QCompleter for lineEdit
        lineEdit.setCompleter(self.completer)

    def CheckSelection(self):
        #print(self.w4.getViewBox().selectedPoints)
        self.UpdateSelectionSignal.emit(self.w4.getViewBox().selectedPoints)

    def setColor(self):
        group = self.ui.lineEditColor.text()
        if group == '':
            Msg = 'Please specify a group factor!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif group not in self.fields_name:
            Msg = 'Your color group name is not in VGenes database!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        group = re.sub(r'\(.+', '', group)
        # initial dialog
        self.tableDialog = ColorTableDialog()
        self.tableDialog.field = group
        if self.ui.radioButtonDataRange.isChecked():
            where_statement = ' WHERE SeqName IN ("' + '","'.join(self.vgenes.CheckedRecords) + '")'
        else:
            where_statement = ' WHERE 1'
        SQLStatement = 'SELECT ' + group + ' FROM vgenesDB' + where_statement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        data = []
        for element in DataIn:
            data.append(element[0])
        result = Counter(data)

        # sorted_labels = sorted(result, key=result.get, reverse=True) # sort by count
        sorted_labels = sorted(result.keys())   # sort by label

        header_list = ['Selected', 'Value', 'Count']
        num_row = len(sorted_labels)
        num_col = len(header_list)
        self.tableDialog.ui.tableWidget.setRowCount(num_row)
        self.tableDialog.ui.tableWidget.setColumnCount(num_col)
        self.tableDialog.ui.tableWidget.setHorizontalHeaderLabels(header_list)
        self.tableDialog.ui.tableWidget.horizontalHeader().setStretchLastSection(True)

        if group in self.HighlightFactor:
            for row_index in range(num_row):
                # col 0
                cell_checkBox = QCheckBox()
                if sorted_labels[row_index] in self.HighlightFactor[group]:
                    cell_checkBox.setChecked(True)
                else:
                    cell_checkBox.setChecked(False)
                self.tableDialog.ui.tableWidget.setCellWidget(row_index, 0, cell_checkBox)

                # col 2:
                unit = QTableWidgetItem(sorted_labels[row_index])
                self.tableDialog.ui.tableWidget.setItem(row_index, 1, unit)
                # col 3:
                unit = QTableWidgetItem()
                unit.setData(Qt.EditRole, result[sorted_labels[row_index]])
                self.tableDialog.ui.tableWidget.setItem(row_index, 2, unit)
        else:
            for row_index in range(num_row):
                # col 0
                cell_checkBox = QCheckBox()
                cell_checkBox.setChecked(True)
                self.tableDialog.ui.tableWidget.setCellWidget(row_index, 0, cell_checkBox)

                # col 2:
                unit = QTableWidgetItem(sorted_labels[row_index])
                self.tableDialog.ui.tableWidget.setItem(row_index, 1, unit)
                # col 3:
                unit = QTableWidgetItem()
                unit.setData(Qt.EditRole, result[sorted_labels[row_index]])
                self.tableDialog.ui.tableWidget.setItem(row_index, 2, unit)

        # disable edit
        self.tableDialog.ui.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # re-size column size
        self.tableDialog.ui.tableWidget.resizeColumnsToContents()
        # setup and enable sort
        self.tableDialog.ui.tableWidget.sortItems(2, Qt.AscendingOrder)
        self.tableDialog.ui.tableWidget.sortItems(1, Qt.AscendingOrder)
        self.tableDialog.ui.tableWidget.setSortingEnabled(True)

        # connect signal
        self.tableDialog.SelectSignal.connect(self.saveColor)
        # show dialog
        self.tableDialog.show()
    
    def saveColor(self, field, list):
        self.HighlightFactor[field] = list
        self.setFocus(True)
        self.activateWindow()
    
    def exportFigure(self):
        if self.ui.radioButtonPNG.isChecked():
            Pathname = saveFile(self.parent(), 'png')
            if Pathname == None:
                return
            exporter = pg.exporters.ImageExporter(self.view.scene())
            exporter.export(Pathname)

        if self.ui.radioButtonSVG.isChecked():
            Pathname = saveFile(self.parent(), 'svg')
            if Pathname == None:
                return
            exporter = pg.exporters.SVGExporter(self.view.scene())
            exporter.export(Pathname)

        Msg = 'You figure has been exported to ' + Pathname + '!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def mouseModeSelect(self):
        self.w4.getViewBox().setMouseMode(ViewBox.SelectMode)
        self.ui.labelMode.setText("Select mode: drag to select, drag + ALT to delete")

    def mouseModeRect(self):
        self.w4.getViewBox().setMouseMode(ViewBox.RectMode)
        self.ui.labelMode.setText("Rect mode: draw rect to zoom in")

    def mouseModePan(self):
        self.w4.getViewBox().setMouseMode(ViewBox.PanMode)
        self.ui.labelMode.setText("Pan mode: left click + move to move figure")

    def resetZoom(self):
        self.w4.getViewBox().autoRange()
    
    def sizeSwitch(self):
        if self.ui.lineEditSize.text() != "":
            self.ui.spinBoxPointSize.setEnabled(False)
            self.ui.label_6.setEnabled(False)
        else:
            self.ui.spinBoxPointSize.setEnabled(True)
            self.ui.label_6.setEnabled(True)
            
    def makeColors(self, n_color, plate_name): 
        try:    # continuous colors
            colors = sns.color_palette(plate_name, n_color)
        except: # discrete colors
            if plate_name == 'ManyColor1':
                colors = sns.color_palette('Dark2', 8)
                colors += sns.color_palette('Paired', n_color - 8)
            if plate_name == 'ManyColor2':
                colors = sns.color_palette('Set2', 8)
                colors += sns.color_palette('Paired', n_color - 8)
            else:
                colors = sns.color_palette('Paired', n_color)

        return colors

    def changeBG(self):
        if self.ui.radioButtonWhiteBG.isChecked():
            self.view.setBackground('w')
        else:
            self.view.setBackground('k')

    def resetRange(self):
        self.rangeSet = False
        self.ui.lineEditMin.setText('')
        self.ui.lineEditMax.setText('')
    
    def updateRange(self):
        self.rangeSet = True

    def activeUI(self):
        if self.ui.radioButtonNum.isChecked():
            self.ui.lineEditMin.setEnabled(True)
            self.ui.lineEditMax.setEnabled(True)
            self.ui.spinBox.setEnabled(True)
            self.ui.comboBoxContinuePlate.setEnabled(True)
            self.ui.label_4.setEnabled(True)
            self.ui.label_5.setEnabled(True)
            self.ui.label_7.setEnabled(True)
            self.ui.label_10.setEnabled(True)
            self.ui.comboBoxDiscretePlate.setEnabled(False)
            self.ui.label_9.setEnabled(False)
        else:
            self.ui.lineEditMin.setEnabled(False)
            self.ui.lineEditMax.setEnabled(False)
            self.ui.spinBox.setEnabled(False)
            self.ui.comboBoxContinuePlate.setEnabled(False)
            self.ui.label_4.setEnabled(False)
            self.ui.label_5.setEnabled(False)
            self.ui.label_7.setEnabled(False)
            self.ui.label_10.setEnabled(False)
            self.ui.comboBoxDiscretePlate.setEnabled(True)
            self.ui.label_9.setEnabled(True)

    def scaleSize(self, data_size, data_size_raw, range, baseSize):
        datamin = numpy.min(data_size)
        datamax = numpy.max(data_size)
        if datamin < 0:
            datamin = 0
        # new range is 0 - 30
        scale_factor = (datamax - datamin) / range
        data_size_scale = []
        
        for x in data_size_raw:
            scaled_value = int((abs(x) - datamin) / scale_factor) + baseSize
            data_size_scale.append(scaled_value)

        return data_size_scale

    def Draw(self):
        dim1 = self.ui.lineEditX.text()
        dim2 = self.ui.lineEditY.text()
        group = self.ui.lineEditColor.text()
        size = self.ui.lineEditSize.text()

        if dim1 not in self.fields_name:
            Msg = 'Your X axis name is not in VGenes database!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        if dim2 not in self.fields_name:
            Msg = 'Your Y axis name is not in VGenes database!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        
        if group != '' and group not in self.fields_name:
            Msg = 'Your color group name is not in VGenes database!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        if size != '' and size not in self.fields_name:
            Msg = 'Your size factor name is not in VGenes database!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        dim1 = re.sub(r'\(.+', '', dim1)
        dim2 = re.sub(r'\(.+', '', dim2)
        group = re.sub(r'\(.+', '', group)
        size = re.sub(r'\(.+', '', size)

        if dim1 == "" or dim2 == "":
            QMessageBox.warning(self, 'Warning', 'Your dim1 or dim2 is empty!',
                                QMessageBox.Ok, QMessageBox.Ok)
            return

        if self.ui.radioButtonDataRange.isChecked():
            where_statement = ' WHERE SeqName IN ("' + '","'.join(self.vgenes.CheckedRecords) + '")'
        else:
            if self.ui.radioButtonHC.isChecked() and self.ui.radioButtonLC.isChecked():
                where_statement = ' WHERE 1'
            elif self.ui.radioButtonHC.isChecked():
                where_statement = ' WHERE GeneType IN ("Heavy","Beta","Delta")'
            elif self.ui.radioButtonLC.isChecked():
                where_statement = ' WHERE GeneType NOT IN ("Heavy","Beta","Delta")'
            else:
                where_statement = ' WHERE 1'

        if self.ui.pushButtonSelect.isChecked():
            self.ui.labelMode.setText('Select mode: drag to select, drag + ALT to delete')

        # clear plot and selection data
        self.w4.clear()
        self.w4.getViewBox().selectedPoints.clear()

        # determine the pen size
        if self.ui.radioButton.isChecked():
            penForDots = pg.mkPen('k', width=2)
            if self.ui.spinBoxPointSize.value() < 5:
                Msg = 'You are using a small dot size with dot border option on\nPlease uncheck "Border" box if you can not see any dots!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            penForDots = pg.mkPen(None)

        # add legend
        self.w4.addLegend(
            pen=penForDots,
            brush=pg.mkBrush(0.8),
            labelTextColor='k',
            labelTextSize='12px'
        )

        if group == '':
            if size == '':
                field = dim1 + "," + dim2
                SQLStatement = 'SELECT ' + field + ',SeqName,Isotype,CDR3Length,TotMut FROM vgenesDB' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
    
                data_series1 = []
                data_series2 = []
                data_names = []
    
                goodNum = 0
                for d in DataIn:
                    try:
                        x = float(d[0])
                        y = float(d[1])
                        data_series1.append(x)
                        data_series2.append(y)
                        cur_names = '\nName:\t\t' + d[2] + '\nIsotype:\t\t' + d[3] + '\nCDR3Length:\t' + d[4] + '\nTotMut:\t\t' + d[5]
                        data_names.append(cur_names)
                        goodNum += 1
                    except:
                        pass
                if goodNum == 0:
                    QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                        QMessageBox.Ok, QMessageBox.Ok)
                    return

                if self.ui.radioButtonLogX.isChecked():
                    if numpy.min(data_series2) >= 0:
                        data_series1 = numpy.log1p(data_series1)
                    else:
                        Msg = 'Negative value found! X axis can not be log mode!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        self.ui.radioButtonLogX.setChecked(False)
                if self.ui.radioButtonLogY.isChecked():
                    if numpy.min(data_series2) >= 0:
                        data_series2 = numpy.log1p(data_series2)
                    else:
                        Msg = 'Negative value found! Y axis can not be log mode!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        self.ui.radioButtonLogY.setChecked(False)

                # make plot
                s4 = pg.ScatterPlotItem(
                    size=self.ui.spinBoxPointSize.value(),
                    pen=penForDots,
                    brush=pg.mkBrush(255, 255, 255, 20),
                    hoverable=True,
                    hoverSymbol='o',
                    hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                    hoverPen=pg.mkPen('r', width=4)
                    #hoverBrush=pg.mkBrush('g'),
                )
    
                s4.addPoints(
                    x=data_series1,
                    y=data_series2,
                    brush=pg.mkBrush(0.6),
                    #pen=[pg.mkPen(x) for x in numpy.random.randint(0, 256, (len(data_series1), 3))],
                    name='All data points',
                    data=data_names
                )

                self.w4.addItem(s4)
            else:
                field = dim1 + "," + dim2 + ',' + size
                SQLStatement = 'SELECT ' + field + ',SeqName,Isotype,CDR3Length,TotMut FROM vgenesDB' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                data_series1 = []
                data_series2 = []
                data_size = []
                data_names = []

                goodNum = 0
                for d in DataIn:
                    try:
                        x = float(d[0])
                        y = float(d[1])
                        z = float(d[2])
                        data_series1.append(x)
                        data_series2.append(y)
                        data_size.append(z)
                        cur_names = '\nName:\t\t' + d[3] + '\nIsotype:\t\t' + d[4] + '\nCDR3Length:\t' +\
                                    d[5] + '\nTotMut:\t\t' + d[6]
                        data_names.append(cur_names)
                        goodNum += 1
                    except:
                        pass
                if goodNum == 0:
                    QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                        QMessageBox.Ok, QMessageBox.Ok)
                    return
                # process data size
                data_size_scale = self.scaleSize(data_size, data_size, 30, 5)

                # log X,Y
                if self.ui.radioButtonLogX.isChecked():
                    if numpy.min(data_series2) >= 0:
                        data_series1 = numpy.log1p(data_series1)
                    else:
                        Msg = 'Negative value found! X axis can not be log mode!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        self.ui.radioButtonLogX.setChecked(False)
                if self.ui.radioButtonLogY.isChecked():
                    if numpy.min(data_series2) >= 0:
                        data_series2 = numpy.log1p(data_series2)
                    else:
                        Msg = 'Negative value found! Y axis can not be log mode!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        self.ui.radioButtonLogY.setChecked(False)

                # make plot
                s4 = pg.ScatterPlotItem(
                    size=self.ui.spinBoxPointSize.value(),
                    pen=penForDots,
                    brush=pg.mkBrush(255, 255, 255, 20),
                    hoverable=True,
                    hoverSymbol='o',
                    hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                    hoverPen=pg.mkPen('r', width=4)
                    #hoverBrush=pg.mkBrush('g'),
                )

                s4.addPoints(
                    x=data_series1,
                    y=data_series2,
                    brush=pg.mkBrush(0.6),
                    name='All data points',
                    size=data_size_scale,
                    data=data_names
                )
                self.w4.addItem(s4)
        else:
            if size == '':
                field = dim1 + "," + dim2 + "," + group
                SQLStatement = 'SELECT ' + field + ',SeqName,Isotype,CDR3Length,TotMut FROM vgenesDB ' + where_statement + ' ORDER BY ' + group
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            else:
                field = dim1 + "," + dim2 + "," + group + ',' + size
                SQLStatement = 'SELECT ' + field + ',SeqName,Isotype,CDR3Length,TotMut FROM vgenesDB ' + where_statement + ' ORDER BY ' + group
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            if self.ui.radioButtonNum.isChecked():
                if size == '':
                    goodNum = 0
                    data_series1 = []
                    data_series2 = []
                    data_color = []
                    data_names = []
    
                    for d in DataIn:
                        try:
                            x = float(d[0])
                            y = float(d[1])
                            z = float(d[2])
                            data_series1.append(x)
                            data_series2.append(y)
                            data_color.append(z)
                            cur_names = '\nName:\t\t' + d[3] + '\nIsotype:\t\t' + d[4] + '\nCDR3Length:\t' + d[5] + '\nTotMut:\t\t' + d[6]
                            data_names.append(cur_names)
                            goodNum += 1
                        except:
                            pass
    
                    if goodNum == 0:
                        QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return
                    
                    # log X,Y
                    if self.ui.radioButtonLogX.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! X axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogX.setChecked(False)
                    if self.ui.radioButtonLogY.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! Y axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogY.setChecked(False)
                    
                    ''' some old code
                    # make plot
                    pos = numpy.array([0., 0.25, 0.5, 0.75, 1.])
                    color = [[20, 133, 212, 255], [53, 42, 135, 255], [48, 174, 170, 255],
                             [210, 184, 87, 255], [249, 251, 14, 255]]
                    color = numpy.array(color, dtype=numpy.ubyte)
                    cmap = pg.ColorMap(pos, color)
                    min_spec = numpy.min(data_color)
                    max_spec = numpy.max(data_color)
                    spectr = [(x-min_spec)/(max_spec-min_spec) for x in data_color]
                    s4 = pg.ScatterPlotItem(
                        size=16,
                        pen=pg.mkPen('k', width=2),
                        hoverable=True,
                        hoverSymbol='s',
                        hoverSize=15,
                        hoverPen=pg.mkPen('r', width=2),
                        hoverBrush=pg.mkBrush('g'),
                    )
                    s4.addPoints(
                        x=data_series1,
                        y=data_series2,
                        name='All data points',
                        data=data_names,
                        brush=cmap.map(spectr, 'qcolor')
                    )
                    self.w4.addItem(s4)
                    # make color map
                    bar = pg.ColorBarItem(values=(numpy.min(data_color), numpy.max(data_color)), colorMap=cmap)
                    bar.setAxisItems(s4)
                    # bar.setImageItem(s4, insert_in=self.w4)
                    #bar_width = 32
                    #bar_data = pg.colormap.modulatedBarData(width=bar_width)
                    #imi = pg.ImageItem(bar_data)
                    #imi.setLookupTable(cmap.getLookupTable(alpha=True))
                    #self.w5 = self.view.addPlot()
                    #self.w5.addItem(imi)
                    '''
                    # make color range
                    if self.rangeSet == True:
                        minOK = False
                        maxOK = False
                        try:
                            min_spec = float(self.ui.lineEditMin.text())
                            minOK = True
                        except:
                            pass
                            
                        try:
                            max_spec = float(self.ui.lineEditMax.text())
                            maxOK = True
                        except:
                            pass
                        
                        if minOK or maxOK:
                            if minOK:
                                if maxOK:
                                    pass
                                else:
                                    # check min
                                    if min_spec > numpy.max(data_color):
                                        Msg = 'The min value you set is even larger than the max of your data, will use min and max of your data!'
                                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                                        min_spec = numpy.min(data_color)
                                        max_spec = numpy.max(data_color)
                                        self.resetRange()
                                    else:
                                        max_spec = numpy.max(data_color)
                            else:
                                # check max
                                if max_spec < numpy.min(data_color):
                                    Msg = 'The max value you set is even smaller than the min of your data, will use min and max of your data!'
                                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                                    min_spec = numpy.min(data_color)
                                    max_spec = numpy.max(data_color)
                                    self.resetRange()
                                else:
                                    min_spec = numpy.min(data_color)
                        else:
                            Msg = 'Can not parse both the min and max value you specified, will use min and max of your data!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            min_spec = numpy.min(data_color)
                            max_spec = numpy.max(data_color)
                            self.resetRange()
                    else:
                        min_spec = numpy.min(data_color)
                        max_spec = numpy.max(data_color)
                    
                    # determine colors
                    n_color = self.ui.spinBox.value()
                    colors = self.makeColors(n_color, self.ui.comboBoxContinuePlate.currentText())
                    color_dict = {}
                    for i in range(n_color):
                        cur_color = [x * 255 for x in colors[i]]
                        color_dict[i] = cur_color
    
                    color_step = (max_spec - min_spec) / n_color
                    data_dict = {}
                    data_name_dict = {}
                    group_name_dict = {}
                    
                    # make group name dict
                    start_value = min_spec
                    for i in range(n_color):
                        cur_name = 'G' + str(i+1) + '\t' + str(round(start_value, 2)) + ' - ' + str(round(start_value + color_step, 2))
                        group_name_dict[i] = cur_name
                        start_value += color_step
    
                    # make data dict
                    for i in range(len(data_color)):
                        cur_group = (data_color[i] - min_spec) // color_step
                        if cur_group > n_color - 1:
                            cur_group = n_color - 1
                        if cur_group < 0:
                            cur_group = 0
    
                        cur_names = data_names[i]
                        cur_names += '\n' + group + ':\t\t' + str(data_color[i])
                        if cur_group in data_dict:
                            data_dict[cur_group].append([data_series1[i], data_series2[i]])
                            data_name_dict[cur_group].append(cur_names)
                        else:
                            data_dict[cur_group] = [[data_series1[i], data_series2[i]]]
                            data_name_dict[cur_group] = [cur_names]
    
                    # make plot
                    for key in sorted(data_dict.keys()):
                        data_series1 = [x[0] for x in data_dict[key]]
                        data_series2 = [x[1] for x in data_dict[key]]
                        
                        if self.ui.radioButtonLogX.isChecked():
                            data_series1 = numpy.log1p(data_series1)
                        if self.ui.radioButtonLogY.isChecked():
                            data_series2 = numpy.log1p(data_series2)
                        
                        # make plot
                        s4 = pg.ScatterPlotItem(
                            size=self.ui.spinBoxPointSize.value(),
                            pen=penForDots,
                            brush=pg.mkBrush(255, 255, 255, 20),
                            hoverable=True,
                            hoverSymbol='o',
                            hoverSize=self.ui.spinBoxPointSize.value()*1.5,
                            hoverPen=pg.mkPen('r', width=4)
                            #hoverBrush=pg.mkBrush('g'),
                        )
                        s4.addPoints(
                            x=data_series1,
                            y=data_series2,
                            brush=pg.mkBrush(color_dict[key]),
                            name=group_name_dict[key],
                            data=data_name_dict[key]
                        )
                        self.w4.addItem(s4)
                else:
                    goodNum = 0
                    data_series1 = []
                    data_series2 = []
                    data_size = []
                    data_color = []
                    data_names = []

                    for d in DataIn:
                        try:
                            x = float(d[0])
                            y = float(d[1])
                            z = float(d[2])
                            n = float(d[3])
                            data_series1.append(x)
                            data_series2.append(y)
                            data_size.append(n)
                            data_color.append(z)
                            cur_names = '\nName:\t\t' + d[4] + '\nIsotype:\t\t' + d[5] + '\nCDR3Length:\t' + \
                                        d[6] + '\nTotMut:\t\t' + d[7]
                            data_names.append(cur_names)
                            goodNum += 1
                        except:
                            pass

                    if goodNum == 0:
                        QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # log X,Y
                    if self.ui.radioButtonLogX.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! X axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogX.setChecked(False)
                    if self.ui.radioButtonLogY.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! Y axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogY.setChecked(False)

                    # process data size
                    data_size_scale = self.scaleSize(data_size, data_size, 30, 5)
                    # make color range
                    if self.rangeSet == True:
                        minOK = False
                        maxOK = False
                        try:
                            min_spec = float(self.ui.lineEditMin.text())
                            minOK = True
                        except:
                            pass

                        try:
                            max_spec = float(self.ui.lineEditMax.text())
                            maxOK = True
                        except:
                            pass

                        if minOK or maxOK:
                            if minOK:
                                if maxOK:
                                    pass
                                else:
                                    # check min
                                    if min_spec > numpy.max(data_color):
                                        Msg = 'The min value you set is even larger than the max of your data, will use min and max of your data!'
                                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                                        min_spec = numpy.min(data_color)
                                        max_spec = numpy.max(data_color)
                                        self.resetRange()
                                    else:
                                        max_spec = numpy.max(data_color)
                            else:
                                # check max
                                if max_spec < numpy.min(data_color):
                                    Msg = 'The max value you set is even smaller than the min of your data, will use min and max of your data!'
                                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                                    min_spec = numpy.min(data_color)
                                    max_spec = numpy.max(data_color)
                                    self.resetRange()
                                else:
                                    min_spec = numpy.min(data_color)
                        else:
                            Msg = 'Can not parse both the min and max value you specified, will use min and max of your data!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            min_spec = numpy.min(data_color)
                            max_spec = numpy.max(data_color)
                            self.resetRange()
                    else:
                        min_spec = numpy.min(data_color)
                        max_spec = numpy.max(data_color)

                    n_color = self.ui.spinBox.value()
                    colors = self.makeColors(n_color, self.ui.comboBoxContinuePlate.currentText())
                    color_dict = {}
                    for i in range(n_color):
                        cur_color = [x * 255 for x in colors[i]]
                        color_dict[i] = cur_color

                    color_step = (max_spec - min_spec) / n_color
                    data_dict = {}
                    data_name_dict = {}
                    group_name_dict = {}

                    # make group name dict
                    start_value = min_spec
                    for i in range(n_color):
                        cur_name = 'G' + str(i + 1) + '\t' + str(round(start_value, 2)) + ' - ' + str(
                            round(start_value + color_step, 2))
                        group_name_dict[i] = cur_name
                        start_value += color_step

                    # make data dict
                    for i in range(len(data_color)):
                        cur_group = (data_color[i] - min_spec) // color_step
                        if cur_group > n_color - 1:
                            cur_group = n_color - 1
                        if cur_group < 0:
                            cur_group = 0

                        cur_names = data_names[i]
                        cur_names += '\n' + group + ':\t\t' + str(data_color[i])
                        if cur_group in data_dict:
                            data_dict[cur_group].append([data_series1[i], data_series2[i], data_size_scale[i]])
                            data_name_dict[cur_group].append(cur_names)
                        else:
                            data_dict[cur_group] = [[data_series1[i], data_series2[i], data_size_scale[i]]]
                            data_name_dict[cur_group] = [cur_names]

                    # make plot
                    for key in sorted(data_dict.keys()):
                        data_series1 = [x[0] for x in data_dict[key]]
                        data_series2 = [x[1] for x in data_dict[key]]
                        data_size = [x[2] for x in data_dict[key]]

                        if self.ui.radioButtonLogX.isChecked():
                            data_series1 = numpy.log1p(data_series1)
                        if self.ui.radioButtonLogY.isChecked():
                            data_series2 = numpy.log1p(data_series2)

                        # make plot
                        s4 = pg.ScatterPlotItem(
                            size=self.ui.spinBoxPointSize.value(),
                            pen=penForDots,
                            brush=pg.mkBrush(255, 255, 255, 20),
                            hoverable=True,
                            hoverSymbol='o',
                            hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                            hoverPen=pg.mkPen('r', width=4)
                            #hoverBrush=pg.mkBrush('g'),
                        )
                        s4.addPoints(
                            x=data_series1,
                            y=data_series2,
                            brush=pg.mkBrush(color_dict[key]),
                            name=group_name_dict[key],
                            size=data_size,
                            data=data_name_dict[key]
                        )
                        self.w4.addItem(s4)
            else:
                if size == '':
                    goodNum = 0
                    data_dict = {}
                    data_name_dict = {}
                    data_series1 = []
                    data_series2 = []

                    # IF USERS TRY TO HIGHLIGHT SOME GROUPS
                    if group in self.HighlightFactor:
                        for d in DataIn:
                            try:
                                x = float(d[0])
                                y = float(d[1])
                                cur_names = '\nName:\t\t' + d[3] + '\nIsotype:\t\t' + d[4] + '\nCDR3Length:\t' + d[5] + '\nTotMut:\t\t' + d[6]
                                cur_group_info = d[2]
                                data_series1.append(x)
                                data_series2.append(y)
                                # handle NA value from database
                                if cur_group_info is None:
                                    cur_group_info = "N/A"
                                # handle those values that not being highlighted
                                if cur_group_info not in self.HighlightFactor[group]:
                                    cur_group_info = "Others"
                                
                                # make different groups
                                if cur_group_info in data_dict:
                                    data_dict[cur_group_info].append([x,y])
                                    data_name_dict[cur_group_info].append(cur_names)
                                else:
                                    data_dict[cur_group_info] = [[x,y]]
                                    data_name_dict[cur_group_info] = [cur_names]
                                goodNum += 1
                            except:
                                pass
                    else:
                        for d in DataIn:
                            try:
                                x = float(d[0])
                                y = float(d[1])
                                cur_names = '\nName:\t\t' + d[3] + '\nIsotype:\t\t' + d[4] + '\nCDR3Length:\t' + d[5] + '\nTotMut:\t\t' + d[6]
                                cur_group_info = d[2]
                                data_series1.append(x)
                                data_series2.append(y)
                                if cur_group_info is None:
                                    cur_group_info = "N/A"
                                if cur_group_info in data_dict:
                                    data_dict[cur_group_info].append([x,y])
                                    data_name_dict[cur_group_info].append(cur_names)
                                else:
                                    data_dict[cur_group_info] = [[x,y]]
                                    data_name_dict[cur_group_info] = [cur_names]
                                goodNum += 1
                            except:
                                pass

                    if goodNum == 0:
                        QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # log X,Y
                    if self.ui.radioButtonLogX.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! X axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogX.setChecked(False)
                    if self.ui.radioButtonLogY.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! Y axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogY.setChecked(False)
                    
                    # ask user when there are too many groups
                    if len(data_dict) > 100:
                        Msg = 'There are ' + str(len(data_dict)) + \
                              ' distinct levels in your color group, do you want to continue (could be very slow)?\n\n' + \
                              'If this group is numerical, please click "No" and then check the "Numerical" radio button!'
                        buttons = 'YN'
                        answer = questionMessage(self, Msg, buttons)
                        if answer == 'No':
                            return
                    
                    # generate color code
                    labels = list(data_dict.keys())
                    n_color = len(labels)
                    colors = self.makeColors(n_color, self.ui.comboBoxDiscretePlate.currentText())
                    color_dict = {}
                    for i in range(len(labels)):
                        cur_color = [x*255 for x in colors[i]]
                        color_dict[labels[i]] = cur_color

                    # plot N/A value and other value first if have
                    special_groups = ['N/A','Others']
                    for group in special_groups:
                        if group in data_dict:
                            na_group_data = data_dict.pop(group)
                            data_series1 = [x[0] for x in na_group_data]
                            data_series2 = [x[1] for x in na_group_data]

                            if self.ui.radioButtonLogX.isChecked():
                                data_series1 = numpy.log1p(data_series1)
                            if self.ui.radioButtonLogY.isChecked():
                                data_series2 = numpy.log1p(data_series2)

                            # make plot
                            if self.ui.radioButton.isChecked():
                                penSize = 0
                            else:
                                penSize = 2
                            s4 = pg.ScatterPlotItem(
                                size=self.ui.spinBoxPointSize.value(),
                                pen=penForDots,
                                brush=pg.mkBrush(255, 255, 255, 20),
                                hoverable=True,
                                hoverSymbol='o',
                                hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                                hoverPen=pg.mkPen('r', width=4)
                                # hoverBrush=pg.mkBrush('g'),
                            )

                            s4.addPoints(
                                x=data_series1,
                                y=data_series2,
                                brush=pg.mkBrush(0.7),
                                name=group,
                                data=data_name_dict[group]
                            )
                            self.w4.addItem(s4)

                    for key in sorted(data_dict.keys()):
                        data_series1 = [x[0] for x in data_dict[key]]
                        data_series2 = [x[1] for x in data_dict[key]]

                        if self.ui.radioButtonLogX.isChecked():
                            data_series1 = numpy.log1p(data_series1)
                        if self.ui.radioButtonLogY.isChecked():
                            data_series2 = numpy.log1p(data_series2)

                        # make plot
                        s4 = pg.ScatterPlotItem(
                            size=self.ui.spinBoxPointSize.value(),
                            pen=penForDots,
                            brush=pg.mkBrush(255, 255, 255, 20),
                            hoverable=True,
                            hoverSymbol='o',
                            hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                            hoverPen=pg.mkPen('r', width=4)
                            #hoverBrush=pg.mkBrush('g'),
                        )

                        s4.addPoints(
                            x=data_series1,
                            y=data_series2,
                            brush=pg.mkBrush(color_dict[key]),
                            name=key,
                            data=data_name_dict[key]
                        )
                        self.w4.addItem(s4)
                else:
                    goodNum = 0
                    data_dict = {}
                    data_name_dict = {}
                    data_size = []
                    data_series1 = []
                    data_series2 = []

                    # IF USERS TRY TO HIGHLIGHT SOME GROUPS
                    if group in self.HighlightFactor:
                        for d in DataIn:
                            try:
                                x = float(d[0])
                                y = float(d[1])
                                z = float(d[3])
                                cur_names = '\nName:\t\t' + d[4] + '\nIsotype:\t\t' + d[5] + '\nCDR3Length:\t' + \
                                            d[6] + '\nTotMut:\t\t' + d[7]

                                cur_group_info = d[2]
                                data_series1.append(x)
                                data_series2.append(y)
                                # handle NA value from database
                                if cur_group_info is None:
                                    cur_group_info = "N/A"
                                # handle those values that not being highlighted
                                if cur_group_info not in self.HighlightFactor[group]:
                                    cur_group_info = "Others"

                                # make different groups
                                if cur_group_info in data_dict:
                                    data_dict[cur_group_info].append([x, y, z])
                                    data_name_dict[cur_group_info].append(cur_names)
                                else:
                                    data_dict[cur_group_info] = [[x, y, z]]
                                    data_name_dict[cur_group_info] = [cur_names]
                                data_size.append(z)
                                goodNum += 1
                            except:
                                pass
                    else:
                        for d in DataIn:
                            try:
                                x = float(d[0])
                                y = float(d[1])
                                z = float(d[3])
                                cur_names = '\nName:\t\t' + d[4] + '\nIsotype:\t\t' + d[5] + '\nCDR3Length:\t' + \
                                            d[6] + '\nTotMut:\t\t' + d[7]

                                cur_group_info = d[2]
                                data_series1.append(x)
                                data_series2.append(y)
                                if cur_group_info is None:
                                    cur_group_info = "N/A"
                                if cur_group_info in data_dict:
                                    data_dict[cur_group_info].append([x, y, z])
                                    data_name_dict[cur_group_info].append(cur_names)
                                else:
                                    data_dict[cur_group_info] = [[x, y, z]]
                                    data_name_dict[cur_group_info] = [cur_names]
                                data_size.append(z)
                                goodNum += 1
                            except:
                                pass

                    if goodNum == 0:
                        QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return

                    # log X,Y
                    if self.ui.radioButtonLogX.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! X axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogX.setChecked(False)
                    if self.ui.radioButtonLogY.isChecked():
                        if numpy.min(data_series2) < 0:
                            Msg = 'Negative value found! Y axis can not be log mode!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            self.ui.radioButtonLogY.setChecked(False)

                    # ask user when there are too many groups
                    if len(data_dict) > 100:
                        Msg = 'There are ' + str(len(data_dict)) + \
                              ' distinct levels in your color group, do you want to continue (could be very slow)?\n\n' + \
                              'If this group is numerical, please click "No" and then check the "Numerical" radio button!'
                        buttons = 'YN'
                        answer = questionMessage(self, Msg, buttons)
                        if answer == 'No':
                            return

                    # generate color code
                    labels = list(data_dict.keys())
                    n_color = len(labels)
                    colors = self.makeColors(n_color, self.ui.comboBoxDiscretePlate.currentText())
                    color_dict = {}
                    for i in range(len(labels)):
                        cur_color = [x * 255 for x in colors[i]]
                        color_dict[labels[i]] = cur_color

                    # plot N/A value and other value first if have
                    special_groups = ['N/A', 'Others']
                    for group in special_groups:
                        if group in data_dict:
                            na_group_data = data_dict.pop(group)
                            data_series1 = [x[0] for x in na_group_data]
                            data_series2 = [x[1] for x in na_group_data]

                            if self.ui.radioButtonLogX.isChecked():
                                data_series1 = numpy.log1p(data_series1)
                            if self.ui.radioButtonLogY.isChecked():
                                data_series2 = numpy.log1p(data_series2)

                            # make plot
                            s4 = pg.ScatterPlotItem(
                                size=self.ui.spinBoxPointSize.value(),
                                pen=penForDots,
                                brush=pg.mkBrush(255, 255, 255, 20),
                                hoverable=True,
                                hoverSymbol='o',
                                hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                                hoverPen=pg.mkPen('r', width=4)
                                # hoverBrush=pg.mkBrush('g'),
                            )

                            s4.addPoints(
                                x=data_series1,
                                y=data_series2,
                                brush=pg.mkBrush(0.7),
                                name=group,
                                data=data_name_dict[group]
                            )
                            self.w4.addItem(s4)

                    for key in sorted(data_dict.keys()):
                        data_series1 = [x[0] for x in data_dict[key]]
                        data_series2 = [x[1] for x in data_dict[key]]
                        data_size_raw = [x[2] for x in data_dict[key]]
                        data_size_scale = self.scaleSize(data_size, data_size_raw, 30, 5)

                        if self.ui.radioButtonLogX.isChecked():
                            data_series1 = numpy.log1p(data_series1)
                        if self.ui.radioButtonLogY.isChecked():
                            data_series2 = numpy.log1p(data_series2)

                        # make plot
                        s4 = pg.ScatterPlotItem(
                            size=self.ui.spinBoxPointSize.value(),
                            pen=penForDots,
                            brush=pg.mkBrush(255, 255, 255, 20),
                            hoverable=True,
                            hoverSymbol='o',
                            hoverSize=self.ui.spinBoxPointSize.value() * 1.5,
                            hoverPen=pg.mkPen('r', width=4)
                            #hoverBrush=pg.mkBrush('g'),
                        )

                        s4.addPoints(
                            x=data_series1,
                            y=data_series2,
                            brush=pg.mkBrush(color_dict[key]),
                            name=key,
                            size=data_size_scale,
                            data=data_name_dict[key]
                        )
                        self.w4.addItem(s4)

        # set Axis labels
        if self.ui.radioButtonLogX.isChecked():
            self.w4.getAxis('bottom').setLabel('Log1p: ' + self.ui.lineEditX.text())
        else:
            self.w4.getAxis('bottom').setLabel(self.ui.lineEditX.text())
        if self.ui.radioButtonLogY.isChecked():
            self.w4.getAxis('left').setLabel('Log1p: ' + self.ui.lineEditY.text())
        else:
            self.w4.getAxis('left').setLabel(self.ui.lineEditY.text())

        self.w4.autoRange()

class MyFigure(FigureCanvas):
    def __init__(self,width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        super(MyFigure,self).__init__(self.fig)
        self.axes = self.fig.add_subplot(111)

class TableDialog(QtWidgets.QDialog, Ui_TableDialog):
    refreshDBSignal = pyqtSignal()

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        #super(ImportDataDialogue, self).__init__()
        self.ui = Ui_TableDialog()
        self.ui.setupUi(self)

        self.ui.pushButtonClose.clicked.connect(self.reject)
        self.ui.pushButtonSave.clicked.connect(self.saveChange)
        self.ui.checkBoxAll.clicked.connect(self.checkAll)
        self.ui.checkBoxRow.clicked.connect(self.rowSelection)

        self.changeNotSave = False
        self.loadTable()

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def rowSelection(self):
        if self.ui.checkBoxRow.isChecked():
            self.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        else:
            self.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectItems)

    def changeStatus(self):
        self.changeNotSave = True

    def loadTable(self):
        if DBFilename != '' and DBFilename != None and DBFilename != 'none':
            SQLStatement = 'SELECT display,display_priority,Field,FieldNickName,FieldType,FieldComment,ID FROM fieldsname ORDER BY ID'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            header_list = ['Display', 'Display Priority','Field','Field nickname','Field type','Field comment', 'ID']
            num_row = len(DataIn)
            num_col = len(header_list)
            self.ui.tableWidget.setRowCount(num_row)
            self.ui.tableWidget.setColumnCount(num_col)

            self.ui.tableWidget.setHorizontalHeaderLabels(header_list)
            #self.ui.tableWidget.horizontalHeader().resizeSection(0, 50)
            #self.ui.tableWidget.horizontalHeader().resizeSection(1, 100)
            #self.ui.tableWidget.horizontalHeader().resizeSection(2, 150)
            #self.ui.tableWidget.horizontalHeader().resizeSection(3, 250)
            #self.ui.tableWidget.horizontalHeader().resizeSection(4, 70)
            #self.ui.tableWidget.horizontalHeader().resizeSection(5, 250)
            self.ui.tableWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)
            self.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectItems)
            if self.ui.checkBoxRow.isChecked():
                self.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
            else:
                self.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectItems)

            for row_index in range(num_row):
                # col 0
                cell_checkBox = QCheckBox()
                if DataIn[row_index][0] == 'yes':
                    cell_checkBox.setChecked(True)
                else:
                    cell_checkBox.setChecked(False)
                if row_index == 0:
                    cell_checkBox.setEnabled(False)
                cell_checkBox.stateChanged.connect(self.changeStatus)
                self.ui.tableWidget.setCellWidget(row_index, 0, cell_checkBox)

                # col 1
                item_list = ['0','1','2','3','4','5','6','7','8','9']
                cell_combo = QComboBox()
                cell_combo.addItems(item_list)
                if str(DataIn[row_index][1]) in item_list:
                    cell_combo.setCurrentText(str(DataIn[row_index][1]))
                else:
                    cell_combo.setCurrentText('9')
                if row_index == 0:
                    cell_combo.setEnabled(False)
                cell_combo.currentTextChanged.connect(self.changeStatus)
                self.ui.tableWidget.setCellWidget(row_index, 1, cell_combo)

                # col 2:
                for col_index in range(2,num_col):
                    unit = QTableWidgetItem(str(DataIn[row_index][col_index]))
                    self.ui.tableWidget.setItem(row_index, col_index, unit)

            # disable edit
            self.ui.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            # re-size column size
            self.ui.tableWidget.resizeColumnsToContents()

    def checkAll(self):
        rows = self.ui.tableWidget.rowCount()
        if self.ui.checkBoxAll.isChecked():
            for row in range(1,rows):
                self.ui.tableWidget.cellWidget(row, 0).setChecked(True)
        else:
            for row in range(1,rows):
                self.ui.tableWidget.cellWidget(row, 0).setChecked(False)

    def saveChange(self):
        if DBFilename != '' and DBFilename != None and DBFilename != 'none':
            rows = self.ui.tableWidget.rowCount()
            for row in range(1, rows):
                name = self.ui.tableWidget.item(row, 2).text()
                if self.ui.tableWidget.cellWidget(row, 0).isChecked():
                    value = 'yes'
                else:
                    value = 'no'
                order = self.ui.tableWidget.cellWidget(row, 1).currentText()

                SQLStatement = 'UPDATE fieldsname SET display = "' + value + '" WHERE Field = "' + name + '"'
                VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                SQLStatement = 'UPDATE fieldsname SET display_priority = ' + order + ' WHERE Field = "' + name + '"'
                VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

            self.refreshDBSignal.emit()
            self.changeNotSave = False
            msg = 'Changes saved!'
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok, QMessageBox.Ok)

    def reject(self):
        if self.changeNotSave:
            reply = QMessageBox.question(self, u'Close progress bar', u'Your changes have not been saved, close anyway?',
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.No:
                pass
            else:
                self.hide()
        else:
            self.hide()

class BarcodeDialog(QtWidgets.QDialog):
    def __init__(self):
        super(BarcodeDialog, self).__init__()
        self.ui = Ui_BarcodeDialog()
        self.ui.setupUi(self)

        self.ui.radioButton.clicked.connect(self.enableFunction)
        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def enableFunction(self):
        if self.ui.radioButton.isChecked():
            self.ui.label_8.setEnabled(True)
            self.ui.lineEditSplit.setEnabled(True)
            self.ui.label_9.setEnabled(True)
            self.ui.spinBox.setEnabled(True)
            self.ui.label_10.setEnabled(True)
        else:
            self.ui.label_8.setEnabled(False)
            self.ui.lineEditSplit.setEnabled(False)
            self.ui.label_9.setEnabled(False)
            self.ui.spinBox.setEnabled(False)
            self.ui.label_10.setEnabled(False)

    def load_data(self, data_list):
        self.ui.comboBoxBarcode.clear()
        self.ui.comboBoxSample.clear()
        self.ui.comboBoxBarcode.addItems(data_list)
        self.ui.comboBoxSample.addItems(data_list)

    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def ShowMessageBox(self, data):
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if data[0] == 0:
            QMessageBox.information(self, 'Information', data[1], QMessageBox.Ok, QMessageBox.Ok)
            Vgenes.refreshDB()
            self.hide()
        else:
            QMessageBox.warning(self, 'Warning', data[1], QMessageBox.Ok, QMessageBox.Ok)

    def accept(self):
        barcode_field_name = self.ui.comboBoxBarcode.currentText()
        if barcode_field_name == '':
            QMessageBox.warning(self, 'Warning', 'Please select barcode field!',
                                QMessageBox.Ok, QMessageBox.Ok)
            return
        else:
            barcode_field_name = re.sub(r'\(.+', '', barcode_field_name)
        
        del_str = self.ui.lineEditDel.text()
        rep_str = self.ui.lineEditRep.text()

        sample_field_name = self.ui.comboBoxSample.currentText()
        split_text = self.ui.lineEditSplit.text()
        split_index = int(self.ui.spinBox.text()) - 1

        # try multi-thread
        self.workThread = barcode_thread(self)
        self.workThread.DBFilename = DBFilename
        self.workThread.sample_field_name = sample_field_name
        self.workThread.barcode_field_name = barcode_field_name
        self.workThread.del_str = del_str
        self.workThread.rep_str = rep_str
        self.workThread.split_text = split_text
        self.workThread.split_index = split_index
        self.workThread.extract = self.ui.radioButton.isChecked()
        self.workThread.insert_pos = self.ui.comboBoxPosition.currentText()

        self.workThread.start()
        self.workThread.trigger.connect(self.ShowMessageBox)
        self.workThread.loadProgress.connect(self.progressLabel)

        self.progress = ProgressBar(self)
        self.progress.setLabel('Modifying barcodes ...')
        self.progress.show()
        '''
        if sample_field_name == '':
            if del_str != '':
                SQLStatement = 'SELECT ID,' + barcode_field_name + ' FROM vgenesDB'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                for record in DataIn:
                    id = record[0]
                    barcode = record[1]
                    barcode = re.sub(del_str, rep_str, barcode)
                    if barcode != record[0]:
                        SQLStatement = 'UPDATE vgenesDB SET `' + barcode_field_name + '`="' + barcode + '" WHERE `ID` = ' + str(id)
                        VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
            else:
                QMessageBox.warning(self, 'Warning', 'you did not do any change!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
        else:
            sample_field_name = re.sub(r'\(.+', '', sample_field_name)
            if self.ui.radioButton.isChecked():
                split_text = self.ui.lineEditSplit.text()
                split_index = int(self.ui.spinBox.text()) - 1

            SQLStatement = 'SELECT ID,' + barcode_field_name + ',' + sample_field_name + ' FROM vgenesDB'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            for record in DataIn:
                id = record[0]
                barcode = record[1]
                sample = record[2]
                if del_str != '':
                    barcode = re.sub(del_str, rep_str, barcode)

                if self.ui.radioButton.isChecked():
                    add_str = sample.split(split_text)[split_index]
                else:
                    add_str = sample

                if self.ui.comboBoxPosition.currentText() == 'Front':
                    barcode = add_str + '_' + barcode
                else:
                    barcode = barcode + '_' + add_str

                if barcode != record[0]:
                    SQLStatement = 'UPDATE vgenesDB SET `' + barcode_field_name + '`="' + barcode + '" WHERE `ID` = ' + str(
                        id)
                    VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

        QMessageBox.information(self, 'Information', 'Update barcodes succeffully!',
                            QMessageBox.Ok, QMessageBox.Ok)
        Vgenes.refreshDB()
        self.hide()
        '''
    def reject(self):
        self.hide()

class NewFieldDialog(QtWidgets.QDialog, Ui_NewFieldDialog):
    NewFieldSignal = pyqtSignal(str, str)

    def __init__(self):
        super(NewFieldDialog, self).__init__()
        self.ui = Ui_NewFieldDialog()
        self.ui.setupUi(self)

        self.ui.labelTip.setHidden(True)
        self.ui.DisplayTip.setHidden(True)

        self.ui.Cancel.clicked.connect(self.reject)
        self.ui.OK.clicked.connect(self.accept)
        self.ui.comboBoxFrom.currentTextChanged.connect(self.StatFig)
        self.ui.radioButton.clicked.connect(self.StatFig)
        self.ui.DisplayTip.clicked.connect(self.StatFig)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def accept(self):
        field_from = self.ui.comboBoxFrom.currentText()
        new_field = self.ui.lineEdit.text()

        if new_field == '':
            Msg = 'This field name can not be empty!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        if new_field in FieldList:
            Msg = 'This field name has been taken! Enter another field name!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        else:
            self.NewFieldSignal.emit(field_from, new_field)
            self.close()

    def StatFig(self):
        if DontFindTwice == True:
            print('skip')
            return

        sender_widget = self.sender()

        if self.ui.gridLayoutFig.count() > 0:
            for i in range(self.ui.gridLayoutFig.count()):
                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()
        else:
            self.resize(800 + random.randint(0,9), 600 + random.randint(0,9))
        # numeric value
        try:
            if self.ui.radioButton.isChecked():
                field = re.sub(r'\(.+', '', self.ui.comboBoxFrom.currentText())
                if field == '':
                    return

                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = []
                char_list = []
                non_number_count = 0
                for row in DataIn:
                    try:
                        value_list.append(float(row[0]))
                    except:
                        char_list.append(row[0])
                        non_number_count += 1

                if len(value_list) == 0:
                    Msg = 'No value can be converted to number!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    self.ui.radioButton.setChecked(False)
                    self.StatFig()
                    return

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.hist(value_list, bins=30)

                F.axes.tick_params(labelsize=7)
                F.fig.subplots_adjust(bottom=0.1)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)
                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
            # character value
            else:
                field = re.sub(r'\(.+', '', self.ui.comboBoxFrom.currentText())
                if field == '':
                    return

                SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = [row[0] for row in DataIn]

                if sender_widget.objectName() == 'DisplayTip':
                    pass
                else:
                    if len(value_list) > 30:
                        if self.ui.gridLayoutFig.count() > 0:
                            for i in range(self.ui.gridLayoutFig.count()):
                                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()

                        self.ui.labelTip.setHidden(False)
                        self.ui.DisplayTip.setHidden(False)
                        return

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                data = []
                for element in DataIn:
                    data.append(element[0])
                result = Counter(data)
                labels = result.keys()
                values = result.values()
                colors = sns.color_palette("hls", len(values))

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.bar(labels, values, color=colors)
                F.axes.set_xticklabels(labels, rotation=-90)
                F.axes.tick_params(labelsize=7)

                # determine spacing
                lens = [len(lab) for lab in labels]
                max_len = max(lens)
                my_adjust = 0.1 + max_len / 50
                F.fig.subplots_adjust(bottom=my_adjust)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)
                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
        except:
            print('error')
            return

class CopyDialog(QtWidgets.QDialog, Ui_CopyDialog):
    CopySignal = pyqtSignal(str, str)

    def __init__(self):
        super(CopyDialog, self).__init__()
        self.ui = Ui_CopyDialog()
        self.ui.setupUi(self)
        self.ui.labelTip.setHidden(True)
        self.ui.DisplayTip.setHidden(True)

        self.ui.Cancel.clicked.connect(self.reject)
        self.ui.OK.clicked.connect(self.accept)
        self.ui.comboBoxFrom.currentTextChanged.connect(self.StatFig)
        self.ui.radioButton.clicked.connect(self.StatFig)
        self.ui.DisplayTip.clicked.connect(self.StatFig)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def accept(self):
        field_from = self.ui.comboBoxFrom.currentText()
        field_to = self.ui.comboBoxTo.currentText()

        if field_from == '' or field_to == '':
            Msg = 'Both field names can not be empty!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif field_from == field_to:
            Msg = 'Two field names are the same!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        else:
            self.CopySignal.emit(field_from, field_to)
            self.close()

    def StatFig(self):
        sender_widget = self.sender()
        # numeric value
        if self.ui.radioButton.isChecked():
            field = re.sub(r'\(.+', '', self.ui.comboBoxFrom.currentText())
            if field == '':
                return
            
            SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            value_list = []
            char_list = []
            non_number_count = 0
            for row in DataIn:
                try:
                    value_list.append(float(row[0]))
                except:
                    char_list.append(row[0])
                    non_number_count += 1

            if len(value_list) == 0:
                Msg = 'No value can be converted to number!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                self.ui.radioButton.setChecked(False)
                self.StatFig()
                return

            # update figure
            SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            F = MyFigure(width=3, height=3, dpi=160)
            F.axes.hist(value_list, bins=30)

            F.axes.tick_params(labelsize=7)
            F.fig.subplots_adjust(bottom=0.1)

            if self.ui.gridLayoutFig.count() > 0:
                for i in range(self.ui.gridLayoutFig.count()):
                    self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()
            else:
                self.resize(1200 + random.randint(0,9), 700 + random.randint(0,9))
            self.ui.gridLayoutFig.addWidget(F, 0, 1)
            self.ui.labelTip.setHidden(True)
            self.ui.DisplayTip.setHidden(True)
        # character value
        else:
            field = re.sub(r'\(.+', '', self.ui.comboBoxFrom.currentText())
            if field == '':
                return
        
            SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            value_list = [row[0] for row in DataIn]

            if sender_widget.objectName() == 'DisplayTip':
                pass
            else:
                if len(value_list) > 30:
                    if self.ui.gridLayoutFig.count() > 0:
                        for i in range(self.ui.gridLayoutFig.count()):
                            self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()

                    self.ui.labelTip.setHidden(False)
                    self.ui.DisplayTip.setHidden(False)
                    return

            # update figure
            SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            data = []
            for element in DataIn:
                if element[0] == None:
                    data.append('NA')
                else:
                    data.append(element[0])
            result = Counter(data)
            labels = result.keys()
            values = result.values()
            colors = sns.color_palette("hls", len(values))

            F = MyFigure(width=3, height=3, dpi=160)
            F.axes.bar(labels, values, color=colors)
            F.axes.set_xticklabels(labels, rotation=-90)
            F.axes.tick_params(labelsize=7)

            # determine spacing
            lens = [len(lab) for lab in labels]
            max_len = max(lens)
            my_adjust = 0.1 + max_len / 50
            F.fig.subplots_adjust(bottom=my_adjust)

            if self.ui.gridLayoutFig.count() > 0:
                for i in range(self.ui.gridLayoutFig.count()):
                    self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()
            else:
                self.resize(1200 + random.randint(0,9), 700 + random.randint(0,9))
            self.ui.gridLayoutFig.addWidget(F, 0, 1)
            self.ui.labelTip.setHidden(True)
            self.ui.DisplayTip.setHidden(True)

class BatchDialog(QtWidgets.QDialog, Ui_BatchDialog):
    BatchSignal = pyqtSignal(int, str, dict)

    def __init__(self):
        super(BatchDialog, self).__init__()
        self.ui = Ui_BatchDialog()
        self.ui.setupUi(self)
        self.initial = 0
        self.ui.LineEditCutoff.setHidden(True)
        self.ui.labelTip.setHidden(True)
        self.ui.DisplayTip.setHidden(True)
        self.ui.LineEditCutoff.min = 0
        self.ui.LineEditCutoff.max = 0
        self.ui.gridLayout.num_widget = 0
        self.ui.gridLayoutChar.num_widget = 0
        self.vgene = ''

        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.pushButtonOK.clicked.connect(self.accept)
        self.ui.comboBox.currentTextChanged.connect(self.StatFig)
        self.ui.radioButtonAll.clicked.connect(self.StatFig)
        self.ui.radioButtonChecked.clicked.connect(self.StatFig)
        self.ui.radioButton.clicked.connect(self.StatFig)
        self.ui.LineEditCutoff.textChanged.connect(self.StatFig)
        self.ui.DisplayTip.clicked.connect(self.StatFig)


        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def updateNum(self):
        if self.ui.radioButton.isChecked():
            num_list = []

            if self.ui.LineEditCutoff.text() == '':
                self.load_data_num([], self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max)
            elif self.ui.LineEditCutoff.text()[0] == 'T':
                self.load_data_num([], self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max)
            else:
                temp_data = self.ui.LineEditCutoff.text().split(',')
                if len(temp_data) > 0:
                    for ele in temp_data:
                        try:
                            num = float(ele)
                            if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
                                num_list.append(num)
                        except:
                            return
                    # remove redudant and sort
                    num_list = list(set(num_list))
                    num_list.sort()

                    self.load_data_num(num_list, self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max)
        else:
            self.ui.LineEditCutoff.setHidden(True)

    def StatFig(self):
        if self.initial == 0:
            return
        sender_widget = self.sender()

        if self.ui.gridLayoutFig.count() > 0:
            for i in range(self.ui.gridLayoutFig.count()):
                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()

        # where statement
        if self.ui.radioButtonAll.isChecked():
            WHEREStatement = ' WHERE 1'
        else:
            if len(self.vgene.CheckedRecords) > 0:
                WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.vgene.CheckedRecords) + '")'
            else:
                WHEREStatement = ' WHERE 1'

        try:
            # numeric value
            if self.ui.radioButton.isChecked():
                try:
                    sender = self.sender()
                    if sender.objectName() == 'comboBox':
                        self.ui.LineEditCutoff.setText('Type cutoff here, seprate by ,  (e.g.  500,600,700)')
                    elif sender.objectName() == 'radioButton':
                        self.ui.LineEditCutoff.setText('Type cutoff here, seprate by ,  (e.g.  500,600,700)')
                except:
                    pass

                self.ui.LineEditCutoff.setHidden(False)
                field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = []
                char_list = []
                non_number_count = 0
                for row in DataIn:
                    try:
                        value_list.append(float(row[0]))
                    except:
                        char_list.append(row[0])
                        non_number_count += 1

                if len(value_list) == 0:
                    Msg = 'No value can be converted to number!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    self.ui.radioButton.setChecked(False)
                    self.StatFig()
                    return

                # do it later
                ## number list
                self.ui.LineEditCutoff.min = min(value_list)
                self.ui.LineEditCutoff.max = max(value_list)
                self.updateNum()

                ## char list
                char_list = list(set(char_list))
                for i in range(len(char_list)):
                    if char_list[i] == None:
                        char_list[i] = 'NULL'
                self.load_data_char(char_list)

                num_list = []
                error = False
                if self.ui.LineEditCutoff.text() != '':
                    temp_data = self.ui.LineEditCutoff.text().split(',')
                    if len(temp_data) > 0:
                        for ele in temp_data:
                            try:
                                num = float(ele)
                                if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
                                    num_list.append(num)
                            except:
                                error = True
                        # remove redudant and sort
                        num_list = list(set(num_list))
                        num_list.sort()

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.hist(value_list, bins=30)

                if error == False:
                    ymin, ymax = F.axes.get_ylim()
                    for num in num_list:
                        F.axes.plot([num,num], [ymin, ymax], color='r', linewidth = 1, label="Cutoff")

                F.axes.tick_params(labelsize=7)
                F.fig.subplots_adjust(bottom=0.1)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)

                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
            # character value
            else:
                self.ui.LineEditCutoff.setHidden(True)
                if self.initial == 0:
                    return
                elif self.initial == 1:
                    field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                    SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    value_list = [row[0] for row in DataIn]
                elif self.initial == 2:
                    field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                    SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb' + WHEREStatement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    value_list = [row[0] for row in DataIn]

                    if sender_widget.objectName() == 'DisplayTip':
                        pass
                    else:
                        if len(value_list) > 30:
                            question = 'Distinct values of this field seems too many (number =  ' + str(
                                len(value_list)) + ')\nAre you sure?'
                            buttons = 'YN'
                            answer = questionMessage(self, question, buttons)
                            if answer == 'No':
                                self.ui.labelTip.setHidden(False)
                                self.ui.DisplayTip.setHidden(False)
                                return

                for i in range(len(value_list)):
                    if value_list[i] == None:
                        value_list[i] = 'NULL'
                self.load_data(value_list)

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb' + WHEREStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                data = []
                for element in DataIn:
                    data.append(element[0])
                result = Counter(data)
                labels = result.keys()
                values = result.values()
                colors = sns.color_palette("hls", len(values))

                # replace None by 'No record'
                labels = list(labels)
                values = list(values)
                for i in range(len(labels)):
                    if labels[i] == None:
                        labels[i] = 'NULL'

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.bar(labels, values, color=colors)
                F.axes.set_xticklabels(labels, rotation=-90)
                F.axes.tick_params(labelsize=7)

                # determine spacing
                lens = [len(lab) for lab in labels]
                max_len = max(lens)
                my_adjust = 0.1 + max_len/50
                F.fig.subplots_adjust(bottom=my_adjust)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)

                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
        except:
            return

    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def ShowMessageBox(self, data):
        global DontFindTwice
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if data[0] == 0:
            DontFindTwice = True
            Vgenes.refreshDB()
            value = Vgenes.ui.dial.value()
            Vgenes.updateF(value)
            DontFindTwice = False

            self.ui.radioButton.setChecked(False)
            self.StatFig()

            QMessageBox.information(self, 'Information', data[1], QMessageBox.Ok, QMessageBox.Ok)
        else:
            QMessageBox.warning(self, 'Warning', data[1], QMessageBox.Ok, QMessageBox.Ok)

    def accept(self):

        self.batch_thread = Batch_thread(self)
        self.batch_thread.DBFilename = DBFilename
        self.batch_thread.dialog = self
        self.batch_thread.trigger.connect(self.ShowMessageBox)
        self.batch_thread.loadProgress.connect(self.progressLabel)
        self.batch_thread.start()

        self.progress = ProgressBar(self)
        self.progress.setLabel('Modifying barcodes ...')
        self.progress.show()
        '''
        global DontFindTwice

        if self.ui.radioButton.isChecked():
            new_values = []
            # process num part
            layout = self.ui.gridLayout
            i = 1
            #print('row count = ' + str(layout.rowCount()))
            while i < layout.num_widget:
                str2 = layout.itemAtPosition(i, 1).widget().text()
                new_values.append(str2)
                i += 1

            num_list = [self.ui.LineEditCutoff.min, self.ui.LineEditCutoff.max]
            if self.ui.LineEditCutoff.text() == '':
                pass
            else:
                temp_data = self.ui.LineEditCutoff.text().split(',')
                if len(temp_data) > 0:
                    for ele in temp_data:
                        try:
                            num = float(ele)
                            if num > self.ui.LineEditCutoff.min and num < self.ui.LineEditCutoff.max:
                                num_list.append(num)
                        except:
                            return
                    # remove redudant and sort
                    num_list = list(set(num_list))
                    num_list.sort()

            # start update records
            field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
            SQLStatement = 'SELECT ' + field + ',ID FROM vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            for ele in DataIn:
                try:
                    cur_value = float(ele[0])
                    cur_id = str(ele[1])
                    for i in range(len(num_list)-1):
                        if cur_value >= num_list[i] and cur_value < num_list[i+1]:
                            new_value = new_values[i]
                            SQLStatement = 'UPDATE vgenesdb SET ' + field + '= "' + new_value + '" WHERE ID=' + cur_id
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
                except:
                    pass
            # process char part
            Dict = {}
            layout = self.ui.gridLayoutChar
            i = 1
            while i < layout.num_widget:
                str1 = layout.itemAtPosition(i, 0).widget().text()
                str2 = layout.itemAtPosition(i, 1).widget().text()
                if str2 == '':
                    pass
                else:
                    Dict[str1] = str2
                i += 1

            if len(Dict) > 0:
                field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                self.BatchSignal.emit(0, field, Dict)
            else:
                DontFindTwice = True
                Vgenes.refreshDB()
                value = Vgenes.ui.dial.value()
                Vgenes.updateF(value)
                DontFindTwice = False

                Msg = 'Update finished!'
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            Dict = {}
            layout = self.ui.gridLayout
            i = 1
            while i < layout.num_widget:
                str1 = layout.itemAtPosition(i, 0).widget().text()
                str2 = layout.itemAtPosition(i, 1).widget().text()
                if str2 == '':
                    pass
                else:
                    Dict[str1] = str2
                i += 1

            if len(Dict) > 0:
                field = re.sub(r'\(.+', '', self.ui.comboBox.currentText())
                self.BatchSignal.emit(0, field, Dict)
            else:
                self.BatchSignal.emit(1, '', Dict)

        self.close()
        '''

    def load_data(self, list):
        layout = self.ui.gridLayout
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()
        layout.num_widget = 0

        layout.addWidget(QLabel("Original value"),0,0)
        layout.addWidget(QLabel("New value"), 0, 1)
        layout.num_widget += 1

        i = 1
        for item in list:
            f = QLineEdit(item)
            f.setReadOnly(True)
            layout.addWidget(f, i, 0)
            layout.addWidget(QLineEdit(""), i, 1)
            layout.num_widget += 1
            i += 1

        # delete everything in char layout
        layout = self.ui.gridLayoutChar
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()

    def load_data_num(self, list, min, max):
        # clear old widgets
        layout = self.ui.gridLayout
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()
        layout.num_widget = 0

        if len(list) == 0:
            layout.addWidget(QLabel("Data range:"), 0, 0)
            layout.addWidget(QLabel("New value"), 0, 1)
            layout.num_widget += 1

            item = str(min) + ' <= Value <= ' + str(max)
            f = QLineEdit(item)
            f.setReadOnly(True)
            layout.addWidget(f, 1, 0)
            layout.addWidget(QLineEdit(""), 1, 1)
            layout.num_widget += 1
        else:
            layout.addWidget(QLabel("Data range:"), 0, 0)
            layout.addWidget(QLabel("New value"), 0, 1)
            layout.num_widget += 1

            for i in range(len(list)):
                if i == 0:
                    cur_range = str(min) + ' <= Value < ' + str(list[i])
                else:
                    cur_range = str(list[i-1]) + ' <= Value < ' + str(list[i])

                f = QLineEdit(cur_range)
                f.setReadOnly(True)
                layout.addWidget(f, i+1, 0)
                layout.addWidget(QLineEdit(""), i+1, 1)
                layout.num_widget += 1

            cur_range = str(list[-1]) + ' <= Value <= ' + str(max)
            f = QLineEdit(cur_range)
            f.setReadOnly(True)
            layout.addWidget(f, len(list) + 1, 0)
            layout.addWidget(QLineEdit(""), len(list) + 1, 1)
            layout.num_widget += 1

    def load_data_char(self, list):
        layout = self.ui.gridLayoutChar
        if layout.count() > 0:
            for i in range(layout.count()):
                layout.itemAt(i).widget().deleteLater()
        layout.num_widget = 0
        
        if len(list) > 0:
            layout.addWidget(QLabel("Original value"),0,0)
            layout.addWidget(QLabel("New value"), 0, 1)
            layout.num_widget += 1
    
            i = 1
            for item in list:
                f = QLineEdit(item)
                f.setReadOnly(True)
                layout.addWidget(f, i, 0)
                layout.addWidget(QLineEdit(""), i, 1)
                layout.num_widget += 1
                i += 1

class htmlDialog(QtWidgets.QDialog):
    def __init__(self):
        super(htmlDialog, self).__init__()
        self.ui = Ui_htmlDialog()
        self.ui.setupUi(self)
        self.resize(1300, 900)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

class EditableSqlModel(QSqlQueryModel):
    def flags(self, index):
        flags = super(EditableSqlModel, self).flags(index)

        if index.column() in (
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
        58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86,
        87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118):
            flags |= Qt.ItemIsEditable
        # print(str(index.row()))
        ID = Vgenes.ui.tableView.currentIndex().row()
        NameIs = ''
        if ID >= 0 and ID != PreVID:  # made this also not equal preVID before firing
            NameIs = Vgenes.MatchingValue(ID)
            Vgenes.findTreeItem(NameIs)
            ReportName = Vgenes.ui.txtName.toPlainText()  # tabbed this and next 2 lines in
            if ReportName != NameIs and ID >= 0:
                Vgenes.updateF(ID)

        return flags

    def setData(self, index, value, role):
        if index.column() not in (
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
        58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86,
        87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118):
            return False

        recordIs = Vgenes.ui.treeWidget.selectedItems()
        currentitemIs = ''

        for item in recordIs:
            currentitemIs = item.text(0)

        primaryKeyIndex = self.index(index.row(), 119)
        id = self.data(primaryKeyIndex)

        self.clear()

        i = 0
        for item in FieldList:
            if index.column() == i:
                field = item
                ok = self.setValue(id, value, field)
                self.refresh()
                if field == Vgenes.ui.cboTreeOp1.setCurrentText or field == Vgenes.ui.cboTreeOp2.setCurrentText or field == Vgenes.ui.cboTreeOp3.setCurrentText:
                    Vgenes.on_btnUpdateTree_clicked()

                Vgenes.findTreeItem(currentitemIs)
                Vgenes.ui.tableView.setCurrentIndex(index)
                return
            i += 1

        self.refresh()

        RowID = Vgenes.ui.tableView.currentIndex()
        model = Vgenes.ui.tableView.model()
        # for i in range(0, 83):
        #     index = model.index(RowID, i)
        #     data.append (str(model.data(index)))


        return

    def refresh(self):

        self.setQuery(RefreshSQL)
        i = 0
        for item in FieldList:
            self.setHeaderData(i, Qt.Horizontal, item)
            i += 1

    def setValue(self, Id, Newvalue, field):
        query = QSqlQuery()
        queryText = 'update vgenesdb set ' + field + ' = ? where ID = ?'
        query.prepare(queryText)
        query.addBindValue(Newvalue)
        query.addBindValue(Id)
        return query.exec_()

        # @pyqtSlot("QModelIndex")
        # def ItemClicked(self,index):
        #     # QMessageBox.information(None,"Hello!","You Clicked: \n"+index.data().toString())
        #     # print(index.data().toString())
        #     ID = self.model.record(index).value('ID')
        #     SeqName = self.model.record(index).value('SeqName')
        #     print(ID)
        #     print(SeqName)

class VGenesTextMain(QtWidgets.QMainWindow, ui_TextEditor):
    def __init__(self, parent=None):
        QtWidgets.QMainWindow.__init__(self, parent)
        # super(VGenesTextMain, self).__init__()
        self.setupUi()

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

class StartUpDialogue(QtWidgets.QDialog, Ui_VGenesStartUpDialog):
    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        self.setupUi(self)
        # self.TextEdit = VGenesTextMain()
        self.PopulateCombo()

        self.cboRecent.currentTextChanged.connect(self.cboRecentTextChanged)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def PopulateCombo(self):
        # # todo need to make this filename fall in VGenes directory upon deployment
        try:
            filename = os.path.join(working_prefix, 'Conf', 'RecentPaths.vtx')

            with open(filename, 'r') as currentfile:
                self.cboRecent.clear()
                self.cboRecent.addItem('Select a recently opened VGenes database file')
                for line in currentfile:
                    line = line.replace('\n', '')
                    if os.path.isfile(line):
                        self.cboRecent.addItem(line)
                    else:
                        Vgenes.UpdateRecentList(line, False)

        except:
            filename = 'RecentPaths.vtx'

            with open(filename, 'r') as currentfile:
                self.cboRecent.clear()
                self.cboRecent.addItem('Select a recently opened VGenes database file')
                for line in currentfile:
                    line = line.replace('\n', '')
                    if os.path.isfile(line):
                        self.cboRecent.addItem(line)
                    else:
                        Vgenes.UpdateRecentList(line, False)

    @pyqtSlot()
    def on_btnNew_clicked(self):

        global StartUpAnswer
        StartUpAnswer = 'New'
        if self.radioButtonBackDB.isChecked():
            Vgenes.StartUpClicked(True)
        else:
            Vgenes.StartUpClicked(False)

        self.close()

    @pyqtSlot()
    def on_cboOpen_clicked(self):

        global StartUpAnswer
        StartUpAnswer = 'Open'
        if self.radioButtonBackDB.isChecked():
            Vgenes.StartUpClicked(True)
        else:
            Vgenes.StartUpClicked(False)

        self.close()

    def cboRecentTextChanged(self):
        # self.cboRecent.currentTextChanged()
        # self.close()
        global StartUpAnswer

        StartUpAnswer = self.cboRecent.currentText()
        if os.path.isfile(self.cboRecent.currentText()):
            self.close()
            StartUpAnswer = 'Recent' + StartUpAnswer
            if self.radioButtonBackDB.isChecked():
                Vgenes.StartUpClicked(True)
            else:
                Vgenes.StartUpClicked(False)
            # return Answer

        else:
            Query = 'This file ' + self.cboRecent.currentText() + ' no longer exists at this location.'

            QtWidgets.QMessageBox.critical(None, "File error", Query, QtWidgets.QMessageBox.Cancel)
            StartUpAnswer += '\n'
            Vgenes.UpdateRecentList(StartUpAnswer, False)
            self.close()
            Vgenes.ApplicationStarted()

class AnnoDielog(QtWidgets.QDialog, Ui_AnnoDialog):
    refreshDBSignal = pyqtSignal()

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        #super(ImportDataDialogue, self).__init__()
        self.ui = Ui_AnnoDialog()
        self.ui.setupUi(self)

        self.csvFile = ''
        
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.radioButton.clicked.connect(self.switchHeader)
        self.ui.pushButtonOK.clicked.connect(self.accept)
        self.ui.pushButtonCopyName.clicked.connect(self.copyName)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def copyName(self):
        num_col = self.ui.tableWidget.columnCount()
        num_row = self.ui.tableWidget.rowCount()
        header = self.header
        anchor_field = self.ui.comboBox.currentText()
        target_field = self.ui.comboBox2.currentText()
        target_field = re.sub(r'\s.+', '', target_field)
        anchor_col_index = header.index(anchor_field)
        for col in range(num_col):
            if col == anchor_col_index:
                continue
            my_widget = self.ui.tableWidget.cellWidget(0, col)
            if my_widget.currentText() == "":
                my_widget.setEditText(header[col])

        Msg = 'We filled all empty fields with names pre-defiend in CSV!\nYou still can edit them!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)


    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def ShowMessageBox(self, data):
        try:
            self.refreshDBSignal.emit()
            self.hide()
            self.progress.setLabel('Refreshing DB ...')
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if data[0] == 0:
            QMessageBox.information(self, 'Information', data[1], QMessageBox.Ok, QMessageBox.Ok)
        else:
            QMessageBox.warning(self, 'Warning', data[1], QMessageBox.Ok, QMessageBox.Ok)

    def accept(self):
        '''
        global RealNameList
        global FieldCommentList
        global FieldTypeList
        global FieldList

        col_index = []
        col_fields = []

        header = self.header
        anchor_field = self.ui.comboBox.currentText()
        target_field = self.ui.comboBox2.currentText()
        target_field = re.sub(r'\s.+','',target_field)
        anchor_col_index = header.index(anchor_field)

        num_col = self.ui.tableWidget.columnCount()
        num_row = self.ui.tableWidget.rowCount()
        for col in range(num_col):
            if col == anchor_col_index:
                continue
            my_widget = self.ui.tableWidget.cellWidget(0, col)
            if my_widget.currentText() != "":
                col_index.append(col)
                col_fields.append(my_widget.currentText())

                # add new column if field name not exit in current col
                tmp_field_name = re.sub(r'\s.+', '', my_widget.currentText())
                if tmp_field_name in FieldList:
                    if self.ui.radioButtonUpdateName.isChecked():
                        VGenesSQL.UpdateFieldTable(tmp_field_name, header[col], 'FieldNickName', DBFilename)
                        RealNameList[FieldList.index(tmp_field_name)] = header[col]
                else:
                    # check if the new field name can be used:
                    HEADERStatement = 'PRAGMA table_info(vgenesDB);'
                    HeaderIn = VGenesSQL.RunSQL(DBFilename, HEADERStatement)
                    ALL_Fields = [i[1] for i in HeaderIn]

                    if tmp_field_name in ALL_Fields:
                        pass
                    else:
                        # update vgene table
                        SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + tmp_field_name + " text"

                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
                        except:
                            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
                            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                                QMessageBox.Ok)
                            return

                    # update field name table
                    SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment) ' \
                                    'VALUES(' + str(len(FieldList) + 1) + ',"' + tmp_field_name + '", "' + \
                                    header[col] + '", "Customized", "")'
                    try:
                        VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
                    except:
                        msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
                        QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                            QMessageBox.Ok)
                        return

                    RealNameList.append(header[col])
                    FieldCommentList.append('')
                    FieldTypeList.append('Customized')
                    FieldList.append(tmp_field_name)

        count = 0
        for row in range(num_row):
            if row == 0:
                continue
            else:
                SQLSTATEMENT = "UPDATE vgenesdb SET "
                for i in range(len(col_index)):
                    col = col_index[i]
                    field = col_fields[i]
                    field = re.sub(r'\s.+','',field)
                    value = self.ui.tableWidget.item(row, col).text()
                    SQLSTATEMENT = SQLSTATEMENT + field + ' = "' + value + '",'
                current_anchor = self.ui.tableWidget.item(row, anchor_col_index).text()
                SQLSTATEMENT = SQLSTATEMENT.rstrip(',')
                SQLSTATEMENT = SQLSTATEMENT + " WHERE " + target_field + ' = "' + current_anchor + '"'
                try:
                    count += VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT)
                    #print(SQLSTATEMENT)
                except:
                    Msg = 'SQL error! Current SQL statement is:\n' + SQLSTATEMENT
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                            QMessageBox.Ok)
                    return
                #print(SQLSTATEMENT)
        if count == 0:
            Msg = "Total " + str(count) + ' records affected! Maybe check if you anchor column is correct?'
            QMessageBox.information(self, 'information', Msg, QMessageBox.Ok, QMessageBox.Ok)

        else:
            Msg = "Update successfully!\nTotal " + str(count) + ' records affected!'
            QMessageBox.information(self, 'information', Msg, QMessageBox.Ok, QMessageBox.Ok)

            self.refreshDBSignal.emit()
            self.hide()
        '''
        # check new column names with old names make sure there is no Conflict
        num_col = self.ui.tableWidget.columnCount()
        new_cols = []
        for col in range(num_col):
            my_widget = self.ui.tableWidget.cellWidget(0, col)
            if my_widget.currentText() != "":
                new_cols.append(my_widget.currentText())
        
        unique_cols = dict(Counter(new_cols))
        repeat_cols = [key for key,value in unique_cols.items() if value > 1]

        ErrMessage = ''
        if len(repeat_cols) > 0:
            ErrMessage = "Found duplicate column names:\n" + "\n".join(repeat_cols)

        if ErrMessage != "":
            QMessageBox.warning(self, 'Warning', ErrMessage, QMessageBox.Ok,QMessageBox.Ok)
            return

        # try multi-thread
        self.workThread = annotate_thread(self)
        self.workThread.dialog = self
        self.workThread.DBFilename = DBFilename
        self.workThread.csvFile = self.csvFile
        if self.ui.radioButtonAll.isChecked():
            self.workThread.chains = 'All'
        elif self.ui.radioButtonHC.isChecked():
            self.workThread.chains = 'HC'
        elif self.ui.radioButtonLC.isChecked():
            self.workThread.chains = 'LC'
        else:
            self.workThread.chains = 'All'

        self.workThread.start()
        self.workThread.trigger.connect(self.ShowMessageBox)
        self.workThread.loadProgress.connect(self.progressLabel)

        self.progress = ProgressBar(self)
        self.progress.setLabel('Updating records ...')
        self.progress.show()


    def reject(self):
        self.hide()

    def switchHeader(self):
        if self.ui.radioButton.isChecked():
            Content = list(self.Content)
            horizontalHeader = Content.pop(0)
            self.ui.comboBox.clear()
            self.ui.comboBox.addItems(horizontalHeader)

            HEADERStatement = 'SELECT Field, FieldNickName FROM fieldsname'
            HeaderIn = VGenesSQL.RunSQL(DBFilename, HEADERStatement)
            Fields = [i[0] + '  (' + i[1] + ')' for i in HeaderIn]
            self.ui.comboBox2.addItems(Fields)

            num_col = len(horizontalHeader)
            num_row = len(Content)

            self.ui.tableWidget.setRowCount(num_row)
            self.ui.tableWidget.setColumnCount(num_col)
            self.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
            self.header = horizontalHeader

            for col_index in range(num_col):
                cell_comBox = QtWidgets.QComboBox()
                cell_comBox.addItems([''] + Fields)
                cell_comBox.setMaximumSize(10086, 40)
                cell_comBox.setMinimumSize(50, 20)
                cell_comBox.setEditable(True)
                self.ui.tableWidget.setCellWidget(0, col_index, cell_comBox)

            for row_index in range(num_row):
                for col_index in range(num_col):
                    self.ui.tableWidget.setItem(row_index + 1, col_index,
                                                           QTableWidgetItem(Content[row_index][col_index]))
        else:
            Content = list(self.Content)
            horizontalHeader = list(Content[0])
            for i in range(len(horizontalHeader)):
                horizontalHeader[i] = 'Column' + str(i+1)

            self.ui.comboBox.clear()
            self.ui.comboBox.addItems(horizontalHeader)

            HEADERStatement = 'SELECT Field, FieldNickName FROM fieldsname'
            HeaderIn = VGenesSQL.RunSQL(DBFilename, HEADERStatement)
            Fields = [i[0] + '  (' + i[1] + ')' for i in HeaderIn]
            self.ui.comboBox2.addItems(Fields)

            num_col = len(horizontalHeader)
            num_row = len(Content)

            self.ui.tableWidget.setRowCount(num_row)
            self.ui.tableWidget.setColumnCount(num_col)
            self.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
            self.header = horizontalHeader

            for col_index in range(num_col):
                cell_comBox = QtWidgets.QComboBox()
                cell_comBox.addItems([''] + Fields)
                cell_comBox.setMaximumSize(10086, 40)
                cell_comBox.setMinimumSize(50, 20)
                cell_comBox.setEditable(True)
                self.ui.tableWidget.setCellWidget(0, col_index, cell_comBox)

            for row_index in range(num_row):
                for col_index in range(num_col):
                    self.ui.tableWidget.setItem(row_index + 1, col_index,
                                                           QTableWidgetItem(Content[row_index][col_index]))

        self.ui.tableWidget.resizeColumnsToContents()

class AlterDielog(QtWidgets.QDialog, Ui_AlterDialog):
    refreshDBSignal = pyqtSignal()

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        #super(ImportDataDialogue, self).__init__()
        self.ui = Ui_AlterDialog()
        self.ui.setupUi(self)

        self.ui.labelTip.setHidden(True)
        self.ui.DisplayTip.setHidden(True)

        self.ui.pushButton.clicked.connect(self.reject)
        self.ui.pushButtonSave.clicked.connect(self.saveRecord)
        self.ui.lineEditNickName.textChanged.connect(self.valueChange)
        self.ui.textEditNote.textChanged.connect(self.valueChange)
        self.ui.listWidget.itemSelectionChanged.connect(self.ListItemChanged)
        self.ui.pushButtonNew.clicked.connect(self.addField)
        self.ui.pushButtonDelete.clicked.connect(self.deleteField)
        self.ui.lineEditNickName.setReadOnly(False)
        self.ui.pushButtonSave.setEnabled(False)
        self.ui.lineEditName.textChanged.connect(self.StatFig)
        self.ui.radioButton.clicked.connect(self.StatFig)
        self.ui.DisplayTip.clicked.connect(self.StatFig)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def StatFig(self):
        sender_widget = self.sender()
        if self.ui.gridLayoutFig.count() > 0:
            for i in range(self.ui.gridLayoutFig.count()):
                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()
        # numeric value
        try:
            if self.ui.radioButton.isChecked():
                field = re.sub(r'\(.+', '', self.ui.lineEditName.text())
                if field == '':
                    return

                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = []
                char_list = []
                non_number_count = 0
                for row in DataIn:
                    try:
                        value_list.append(float(row[0]))
                    except:
                        char_list.append(row[0])
                        non_number_count += 1

                if len(value_list) == 0:
                    Msg = 'No value can be converted to number!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    self.ui.radioButton.setChecked(False)
                    self.StatFig()
                    return

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.hist(value_list, bins=30)

                F.axes.tick_params(labelsize=7)
                F.fig.subplots_adjust(bottom=0.1)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)
                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
            # character value
            else:
                field = re.sub(r'\(.+', '', self.ui.lineEditName.text())
                if field == '':
                    return

                SQLStatement = 'SELECT DISTINCT(' + field + ') FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                value_list = [row[0] for row in DataIn]

                if sender_widget.objectName() == 'DisplayTip':
                    pass
                else:
                    if len(value_list) > 30:
                        if self.ui.gridLayoutFig.count() > 0:
                            for i in range(self.ui.gridLayoutFig.count()):
                                self.ui.gridLayoutFig.itemAt(i).widget().deleteLater()

                        self.ui.labelTip.setHidden(False)
                        self.ui.DisplayTip.setHidden(False)
                        return

                # update figure
                SQLStatement = 'SELECT ' + field + ' FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                data = []
                for element in DataIn:
                    data.append(element[0])
                result = Counter(data)
                labels = result.keys()
                values = result.values()
                colors = sns.color_palette("hls", len(values))

                F = MyFigure(width=3, height=3, dpi=160)
                F.axes.bar(labels, values, color=colors)
                F.axes.set_xticklabels(labels, rotation=-90)
                F.axes.tick_params(labelsize=7)

                # determine spacing
                lens = [len(lab) for lab in labels]
                max_len = max(lens)
                my_adjust = 0.1 + max_len / 50
                F.fig.subplots_adjust(bottom=my_adjust)

                self.ui.gridLayoutFig.addWidget(F, 0, 1)
                self.ui.labelTip.setHidden(True)
                self.ui.DisplayTip.setHidden(True)
        except:
            return

    def deleteField(self):
        global FieldList
        global RealNameList
        global FieldCommentList
        global FieldTypeList

        target_field = self.ui.listWidget.currentItem().text()
        if self.ui.lineEditType == "Fixed":
            Msg = 'You can not delete Fixed filed!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        Msg = "Are you sure to delete field: " + target_field + " ?"
        reply = QMessageBox.question(self, 'Information', Msg, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.No:
            return

        # update table
        #SQLSTATEMENT1 = "ALTER TABLE vgenesDB DROP COLUMN " + target_field
        #try:
        #	VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
        #except:
        #	msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
        #	QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
        #	                    QMessageBox.Ok)
        #	return

        SQLSTATEMENT2 = 'DELETE FROM fieldsname WHERE Field = "' + target_field + '"'
        try:
            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
        except:
            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                QMessageBox.Ok)
            return



        index = FieldList.index(target_field)
        RealNameList = RealNameList[0:index] + RealNameList[index + 1:]
        FieldCommentList = FieldCommentList[0:index] + FieldCommentList[index + 1:]
        FieldTypeList = FieldTypeList[0:index] + FieldTypeList[index + 1:]
        FieldList = FieldList[0:index] + FieldList[index + 1:]

        # update widget
        self.ui.listWidget.clear()
        self.ui.listWidget.addItems(FieldList)
        self.ui.listWidget.setCurrentItem(self.ui.listWidget.item(0))
        self.ui.listWidget.scrollToTop()

        self.refreshDBSignal.emit()

    def addField(self):
        global DontFindTwice
        self.newFieldDialog = NewFieldDialog()
        field_list = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        DontFindTwice = True
        self.newFieldDialog.ui.comboBoxFrom.addItems(field_list)
        DontFindTwice = False
        self.newFieldDialog.NewFieldSignal.connect(self.addFieldAndCopy)
        self.newFieldDialog.exec_()


    def addFieldAndCopy(self, field_from, new_field):
        print(field_from)
        print(new_field)
        global RealNameList
        global FieldCommentList
        global FieldTypeList
        global FieldList

        # update vgene table
        SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + new_field + " text"

        try:
            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
        except:
            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        # update field name table
        SQLSTATEMENT = 'SELECT MAX(ID) FROM fieldsname'
        max_id = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)

        SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment, display, display_priority) ' \
                        'VALUES(' + str(max_id[0][0] + 1) + ',"' + new_field + '", "' + new_field + '", "Customized", "", "yes", 9)'
        try:
            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
        except:
            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        # copy record
        if field_from != '':
            field_from = re.sub(r'\(.+', '', field_from)
            SQLStatement = 'UPDATE vgenesDB SET ' + new_field + ' = ' + field_from
            try:
                VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
            except:
                Msg = 'Error occurs when updating the DB!\nCurrent SQL statement is:\n' + SQLStatement
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

        RealNameList.append(new_field)
        FieldCommentList.append('')
        FieldTypeList.append('Customized')
        FieldList.append(new_field)

        self.ui.listWidget.addItem(new_field)
        self.ui.listWidget.setCurrentItem(self.ui.listWidget.item(self.ui.listWidget.count() - 1))
        self.ui.listWidget.scrollToBottom()

        self.refreshDBSignal.emit()

    def addField1(self):
        global RealNameList
        global FieldCommentList
        global FieldTypeList
        global FieldList

        items = []
        for index in range(self.ui.listWidget.count()):
            items.append(self.ui.listWidget.item(index))
        cur_fields = [i.text() for i in items]

        tmp_field_name, ok = QInputDialog.getText(self, 'Input Dialog','Enter name of your new field:')
        while tmp_field_name in cur_fields and ok:
            tmp_field_name, ok = QInputDialog.getText(self, 'Input Dialog','This field name has been taken! '
                                                                           'Enter another name of your new field:')

        if ok:
            pass
        else:
            return

        # check if the new field name can be used:
        HEADERStatement = 'PRAGMA table_info(vgenesDB);'
        HeaderIn = VGenesSQL.RunSQL(DBFilename, HEADERStatement)
        ALL_Fields = [i[1] for i in HeaderIn]

        if tmp_field_name in ALL_Fields:
            pass
        else:
            # update vgene table
            SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + tmp_field_name + " text"

            try:
                VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
            except:
                msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
                QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                    QMessageBox.Ok)
                return

        # update field name table
        SQLSTATEMENT = 'SELECT MAX(ID) FROM fieldsname'
        max_id = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)

        SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment, display, display_priority) ' \
                        'VALUES(' + str(max_id[0][0] + 1) + ',"' + tmp_field_name + '", "' + tmp_field_name + '", "Customized", "", "yes", 9)'
        try:
            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
        except:
            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        RealNameList.append(tmp_field_name)
        FieldCommentList.append('')
        FieldTypeList.append('Customized')
        FieldList.append(tmp_field_name)

        self.ui.listWidget.addItem(tmp_field_name)
        self.ui.listWidget.setCurrentItem(self.ui.listWidget.item(self.ui.listWidget.count()-1))
        self.ui.listWidget.scrollToBottom()

        self.refreshDBSignal.emit()

    def saveRecord(self):
        global RealNameList
        global FieldCommentList
        global FieldTypeList
        global FieldList

        items = self.ui.listWidget.selectedItems()
        for item in items:
            name = item.text()

        index = FieldList.index(name)
        RealNameList[index] = self.ui.lineEditNickName.text()
        FieldCommentList[index] = self.ui.textEditNote.toPlainText()

        # save to DB
        VGenesSQL.UpdateFieldTable(name, self.ui.textEditNote.toPlainText(), 'FieldComment', DBFilename)
        VGenesSQL.UpdateFieldTable(name, self.ui.lineEditNickName.text(), 'FieldNickName', DBFilename)

        self.ui.pushButtonSave.setEnabled(False)
        self.refreshDBSignal.emit()

    def valueChange(self):
        self.ui.pushButtonSave.setEnabled(True)

    def ListItemChanged(self):
        items = self.ui.listWidget.selectedItems()
        if len(items) == 0:
            return
        for item in items:
            name = item.text()

        index = FieldList.index(name)
        self.ui.lineEditName.setText(FieldList[index])
        self.ui.lineEditNickName.setText(RealNameList[index])
        self.ui.lineEditType.setText(FieldTypeList[index])
        self.ui.textEditNote.setText(FieldCommentList[index])
        self.ui.pushButtonSave.setEnabled(False)
        self.ui.lineEditNickName.setReadOnly(False)

    def reject(self):
        self.hide()

class VDBMergeDialog(QtWidgets.QDialog, Ui_VDBMergeDialog):
    VDBSignal = pyqtSignal(str, list, object)

    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        super(VDBMergeDialog, self).__init__()
        self.ui = Ui_VDBMergeDialog()
        self.ui.setupUi(self)

        self.DBFilename = ""
        self.files = []
        
        self.ui.pushButtonConfirm.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def CheckAll(self):
        sender = self.sender()
        pass

    def accept(self):
        ErrorFlag = ''
        # check field name confilict
        unit1 = QtWidgets.QLineEdit()
        ## collect all new field names
        col_names = []
        for col_index in range(1, self.ui.tableWidget.columnCount()):
            if self.ui.tableWidget.cellWidget(0, col_index).text() == "":
                self.ui.tableWidget.cellWidget(0, col_index).setStyleSheet("QLineEdit"
                        "{"
                        "background : lightblue;"
                        "}")
                ErrorFlag = 'Please specify a unique name for your column!'
            else:
                col_names.append(self.ui.tableWidget.cellWidget(0, col_index).text())
                self.ui.tableWidget.cellWidget(0, col_index).setStyleSheet("QLineEdit"
                                                                     "{"
                                                                     "background : white;"
                                                                     "}")
        col_names = [''] + col_names
        col_names_np = numpy.array(col_names)
        if ErrorFlag != '':
            QMessageBox.warning(self, 'Warning', ErrorFlag, QMessageBox.Ok, QMessageBox.Ok)
            return

        ## if find any repeat names, make sure no confilict
        cl = Counter(col_names)
        repeat_col_names = []
        for key, value in cl.items():
            if value > 1:
                repeat_col_names.append(key)
        if len(repeat_col_names) > 0:
            for col_name in repeat_col_names:
                positions = list(numpy.where(col_names_np == col_name)[0])
                if len(positions) > 0:
                    for row in range(1, self.ui.tableWidget.rowCount()):
                        values = False
                        for pos in positions:
                            if self.ui.tableWidget.item(row, pos).text() == "":
                                pass
                            else:
                                if values == False:
                                    values = True
                                else:
                                    ErrorFlag += 'There is a field conflict for ' + col_name + '!\n'
                                    # make them highlighted
                                    for pos in positions:
                                        self.ui.tableWidget.cellWidget(0, pos).setStyleSheet("QLineEdit"
                                    "{"
                                    "background : lightblue;"
                                    "}")
                                    continue

        if ErrorFlag != '':
            QMessageBox.warning(self, 'Warning', ErrorFlag, QMessageBox.Ok, QMessageBox.Ok)
            return

        # make new df
        newDF = pd.DataFrame(0, index=self.files, columns=[])
        for col_index in range(1, self.ui.tableWidget.columnCount()):
            cur_name = self.ui.tableWidget.cellWidget(0, col_index).text()
            if cur_name not in newDF.columns:
                newDF[cur_name] = [''] * len(self.files)
            for row_index in range(1, self.ui.tableWidget.rowCount()):
                row_name = self.ui.tableWidget.item(row_index, 0).text()
                if self.ui.tableWidget.item(row_index, col_index).text() != '':
                    newDF[cur_name][row_name] = self.ui.tableWidget.item(row_index, col_index).text()

        # send information out
        self.VDBSignal.emit(self.DBFilename, self.files, newDF)
        self.close()

class ImportDataDialogue(QtWidgets.QDialog, Ui_DialogImport):
    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        #super(ImportDataDialogue, self).__init__()
        self.ui = Ui_ImportDataDialog()
        self.ui.setupUi(self)

        self.TextEdit = VGenesTextMain()

        self.ui.pushButtonOK.clicked.connect(self.accept)
        self.ui.pushButtonCancel.clicked.connect(self.reject)
        self.ui.tabWidget.currentChanged['int'].connect(self.switchTab)
        self.ui.browse10x.clicked.connect(self.browse10x)
        self.ui.browseCSV.clicked.connect(self.browseCSV)
        self.ui.browseFasta.clicked.connect(self.browseFasta)
        self.ui.browseVDB.clicked.connect(self.browseVDB)
        self.ui.browseIgBlast.clicked.connect(self.browseIgBlast)
        self.ui.browseIMGT.clicked.connect(self.browseIMGT)
        self.ui.browseSEQ.clicked.connect(self.browseSEQ)
        self.ui.radioButtonChain.clicked.connect(self.ChainClicked)
        self.ui.lineEditRep1.textChanged.connect(self.updateName)
        self.ui.lineEditRep2.textChanged.connect(self.updateName)
        self.ui.lineEditRep3.textChanged.connect(self.updateName)
        self.ui.rdoChoose.clicked.connect(self.updateGroupSetting)
        self.ui.rdoFunction.clicked.connect(self.updateGroupSetting)
        self.ui.checkBoxFileStruc.clicked.connect(self.updateGroupSetting)
        self.ui.toolButtonIgFasta.clicked.connect(self.browseIgBlastFasta)
        self.ui.listWidgetVDB.itemDoubleClicked.connect(self.removeSel)
        self.ui.listWidgetCSV.itemDoubleClicked.connect(self.removeSel)
        self.ui.listWidgetFasta.itemDoubleClicked.connect(self.removeSel)
        self.ui.listWidgetSEQ.itemDoubleClicked.connect(self.removeSel)
        self.ui.radioButtonCon.clicked.connect(self.change10xType)
        self.ui.radioButtonTig.clicked.connect(self.change10xType)

        # unknown bug for this function, the icon doesn't update well
        self.ui.pushButtonBCR.clicked.connect(self.setIcon)
        self.ui.pushButtonTCR.clicked.connect(self.setIcon)

        self.iconBCR = QIcon(QPixmap(":/PNG-Icons/BCR.png"))
        self.iconBCRgray = QIcon(QPixmap(":/PNG-Icons/BCRgray.png"))
        self.iconTCR = QIcon(QPixmap(":/PNG-Icons/TCR.png"))
        self.iconTCRgray= QIcon(QPixmap(":/PNG-Icons/TCRgray.png"))

        #self.ui.radioButtonAllcontig.clicked.connect(self.update10x)
        #self.ui.radioButtonConsensus.clicked.connect(self.update10x)
        #self.ui.radioButtonFiltercontig.clicked.connect(self.update10x)

        self.path10x = ''
        self.pathIMGT = ''
        self.pathIgBlast = ''
        self.type10x = 'consensus'

        global answer3
        answer3 = 'No'

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass
        
        self.setIcon()
    
    def change10xType(self):
        if self.ui.radioButtonCon.isChecked():  # consensus sequence
            self.ui.lineEditRep1.setEnabled(True)
            self.ui.label_16.setText('1) Replace "clonotype" by')
            self.ui.label_17.setText('2) Replace "consensus_" by')
            self.ui.label_15.setText('10X seq name: clonotype2_consensus_1')
            self.ui.lineEditRep2.setText('consensus_')
        else:   # filtered contigs sequence
            self.ui.lineEditRep1.setEnabled(False)
            self.ui.label_16.setText('1) ')
            self.ui.label_17.setText('2) Replace "contig_" by')
            self.ui.label_15.setText('10X seq name: AAACCTGAGACAAGCC-1_contig_1')
            self.ui.lineEditRep2.setText('contig_')
        self.updateName()

        if self.ui.Annopath.text() != "":
            path_10x = self.ui.Annopath.text()
            path_10x = re.sub('filtered_contig_annotations.csv', '', path_10x)
            self.update10x(path_10x)

    def setIcon(self):
        if self.ui.pushButtonBCR.isChecked():
            self.ui.pushButtonBCR.setIcon(self.iconBCR)
            self.ui.pushButtonTCR.setIcon(self.iconTCRgray)
        elif self.ui.pushButtonTCR.isChecked():
            self.ui.pushButtonBCR.setIcon(self.iconBCRgray)
            self.ui.pushButtonTCR.setIcon(self.iconTCR)
        else:
            pass

        size_w = self.size().width()
        size_h = self.size().height()
        offset_pool = [-1, 1]
        offset = offset_pool[random.randint(0, 1)]
        self.resize(size_w + offset, size_h + offset)

    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def removeSel(self):
        sender = self.sender()
        listRow = sender.currentRow()
        if listRow > -1:
            sender.takeItem(listRow)

    def update10x(self, directory):
        if isinstance(directory, str):
            pass
        else:
            if self.path10x == '':
                return
            else:
                pass

        choosed_seq = ''
        choose_annotate = ''
        if self.ui.radioButtonTig.isChecked():
            choosed_seq = 'filtered_contig.fasta'
            choose_annotate = 'filtered_contig_annotations.csv'
        elif self.ui.radioButtonCon.isChecked():
            choosed_seq = 'consensus.fasta'
            choose_annotate = 'filtered_contig_annotations.csv'

        if choosed_seq == '':
            return

        if isinstance(directory, str):
            self.path10x = directory

        seq_file = os.path.join(self.path10x, choosed_seq)
        anno_file = os.path.join(self.path10x, choose_annotate)
        if os.path.exists(seq_file):
            pass
        else:
            seq_file = os.path.join(self.path10x, 'outs', choosed_seq)
            anno_file = os.path.join(self.path10x, 'outs', choose_annotate)

        if os.path.exists(anno_file):
            self.ui.Annopath.setText(anno_file)
        else:
            Msg = 'Can not find ' + anno_file + ' under your folder! Please check your input!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        if os.path.exists(seq_file):
            self.ui.Seqpath.setText(seq_file)
        else:
            Msg = 'Can not find ' + seq_file + ' under your folder! Please check your input!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def updateGroupSetting(self):
        if self.ui.rdoChoose.isChecked():
            self.ui.comboBoxProject.clear()
            self.ui.comboBoxGroup.clear()
            self.ui.comboBoxSubgroup.clear()

            fields = ['Project']  # , 'Grouping', 'SubGroup'
            SQLStatement1 = Vgenes.MakeSQLStatement(fields)

            SQLStatement = SQLStatement1[:7] + 'DISTINCT ' + SQLStatement1[7:]

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            if len(DataIn) > 0:
                for item in DataIn:
                    self.ui.comboBoxProject.addItem(item[0])
            DataIn.clear()

            fields = ['Grouping']  # , 'Grouping', 'SubGroup'
            SQLStatement1 = Vgenes.MakeSQLStatement(fields)

            SQLStatement = SQLStatement1[:7] + 'DISTINCT ' + SQLStatement1[7:]

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if len(DataIn) > 0:
                for item in DataIn:
                    self.ui.comboBoxGroup.addItem(item[0])
            DataIn.clear()

            fields = ['SubGroup']  # , 'Grouping', 'SubGroup'
            SQLStatement1 = Vgenes.MakeSQLStatement(fields)

            SQLStatement = SQLStatement1[:7] + 'DISTINCT ' + SQLStatement1[7:]

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            if len(DataIn) > 0:
                for item in DataIn:
                    self.ui.comboBoxSubgroup.addItem(item[0])

            self.ui.comboBoxProject.addItem('')
            self.ui.comboBoxGroup.addItem('')
            self.ui.comboBoxSubgroup.addItem('')

            self.ui.comboBoxProject.setCurrentText('')
            self.ui.comboBoxGroup.setCurrentText('')
            self.ui.comboBoxSubgroup.setCurrentText('')

            self.ui.comboBoxProject.setEditable(True)
            self.ui.comboBoxGroup.setEditable(True)
            self.ui.comboBoxSubgroup.setEditable(True)

            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)

        if self.ui.rdoFunction.isChecked():
            self.ui.comboBoxProject.clear()
            self.ui.comboBoxGroup.clear()
            self.ui.comboBoxSubgroup.clear()

            self.ui.comboBoxProject.setEnabled(False)
            self.ui.comboBoxGroup.setEnabled(False)
            self.ui.comboBoxSubgroup.setEnabled(False)

        if self.ui.checkBoxFileStruc.isChecked():
            self.ui.comboBoxProject.clear()
            self.ui.comboBoxGroup.clear()
            self.ui.comboBoxSubgroup.clear()

            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)

            if self.ui.tabWidget.currentIndex() == 0:
                if self.path10x == '':
                    return
                else:
                    dirs = self.path10x.split('/')
                    if len(dirs) > 3:
                        dirs = dirs[-3:]

                    if len(dirs) == 3:
                        project = dirs[0]
                        group = dirs[1]
                        subgroup = dirs[2]
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                        self.ui.comboBoxSubgroup.addItem(subgroup)
                        self.ui.comboBoxSubgroup.setCurrentText(subgroup)
                    elif len(dirs) == 2:
                        project = dirs[0]
                        group = dirs[1]
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                    elif len(dirs) == 1:
                        project = dirs[0]
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                    else:
                        pass
            elif self.ui.tabWidget.currentIndex() == 1:
                if self.ui.listWidgetFasta.count() == 0:
                    return
                else:
                    fasta_files = []
                    for index in range(self.ui.listWidgetFasta.count()):
                        fasta_files.append(self.ui.listWidgetFasta.item(index).text())

                    dirs = fasta_files[0].split('/')
                    if len(dirs) > 3:
                        dirs = dirs[-3:]

                    if len(dirs) == 3:
                        project = dirs[0]
                        group = dirs[1]
                        subgroup = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                        self.ui.comboBoxSubgroup.addItem(subgroup)
                        self.ui.comboBoxSubgroup.setCurrentText(subgroup)
                    elif len(dirs) == 2:
                        project = dirs[0]
                        group = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                    elif len(dirs) == 1:
                        project = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                    else:
                        pass
            elif self.ui.tabWidget.currentIndex() == 5:
                if self.pathIgBlast == '':
                    return
                else:
                    dirs = self.pathIgBlast.split('/')
                    if len(dirs) > 3:
                        dirs = dirs[-3:]

                    if len(dirs) == 3:
                        project = dirs[0]
                        group = dirs[1]
                        subgroup = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                        self.ui.comboBoxSubgroup.addItem(subgroup)
                        self.ui.comboBoxSubgroup.setCurrentText(subgroup)
                    elif len(dirs) == 2:
                        project = dirs[0]
                        group = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                    elif len(dirs) == 1:
                        project = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                    else:
                        pass
            elif self.ui.tabWidget.currentIndex() == 6:
                if self.pathIMGT == '':
                    return
                else:
                    dirs = self.pathIMGT.split('/')
                    if len(dirs) > 3:
                        dirs = dirs[-3:]

                    dirs[-1] = re.sub(r'\W.+','',dirs[-1])

                    if len(dirs) == 3:
                        project = dirs[0]
                        group = dirs[1]
                        subgroup = dirs[2]
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                        self.ui.comboBoxSubgroup.addItem(subgroup)
                        self.ui.comboBoxSubgroup.setCurrentText(subgroup)
                    elif len(dirs) == 2:
                        project = dirs[0]
                        group = dirs[1]
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                    elif len(dirs) == 1:
                        project = dirs[0]
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                    else:
                        pass
            elif self.ui.tabWidget.currentIndex() == 2:
                if self.ui.listWidgetSEQ.count() == 0:
                    return
                else:
                    fasta_files = []
                    for index in range(self.ui.listWidgetSEQ.count()):
                        fasta_files.append(self.ui.listWidgetSEQ.item(index).text())

                    dirs = fasta_files[0].split('/')
                    if len(dirs) > 3:
                        dirs = dirs[-3:]

                    if len(dirs) == 3:
                        project = dirs[0]
                        group = dirs[1]
                        subgroup = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                        self.ui.comboBoxSubgroup.addItem(subgroup)
                        self.ui.comboBoxSubgroup.setCurrentText(subgroup)
                    elif len(dirs) == 2:
                        project = dirs[0]
                        group = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                        self.ui.comboBoxGroup.addItem(group)
                        self.ui.comboBoxGroup.setCurrentText(group)
                    elif len(dirs) == 1:
                        project = '$FileName'
                        self.ui.comboBoxProject.addItem(project)
                        self.ui.comboBoxProject.setCurrentText(project)
                    else:
                        pass

    def updateName(self):
        if self.ui.radioButtonCon.isChecked():
            ori_name = 'clonotype2_consensus_1'
            rep1 = self.ui.lineEditRep1.text()
            if self.ui.radioButtonChain.isChecked():
                rep2 = 'H'
            else:
                rep2 = self.ui.lineEditRep2.text()
            prefix = self.ui.lineEditRep3.text()
        else:
            ori_name = 'AAACCTGAGACAAGCC-1_contig_1'
            rep1 = 'contig'
            if self.ui.radioButtonChain.isChecked():
                rep2 = 'H'
            else:
                rep2 = self.ui.lineEditRep2.text()
            prefix = self.ui.lineEditRep3.text()
        new_name = reName(ori_name, rep1, rep2, prefix)
        self.ui.labelName.setText(new_name)

    def ChainClicked(self):
        if self.ui.radioButtonChain.isChecked():
            self.ui.lineEditRep2.setEnabled(False)
        else:
            self.ui.lineEditRep2.setEnabled(True)
        self.updateName()

    def browseVDB(self):
        files, filetype = QtWidgets.QFileDialog.getOpenFileNames(self, "getOpenFileNames", "~/Documents",
                                                                  "VGene DB Files (*.vdb);;All Files (*)")
        if len(files) == 0:
            return
        else:
            existing_items = []
            count = self.ui.listWidgetVDB.count()
            for i in range(count):
                existing_items.append(self.ui.listWidgetVDB.item(i).text())

            share = set(existing_items).intersection(set(files))
            if len(share) > 0:
                diff = set(files).difference(set(share))
                self.ui.listWidgetVDB.addItems(diff)
                
                Msg = 'These folders/files are already in our list!\n' + '\n'.join(share)
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            else:
                self.ui.listWidgetVDB.addItems(files)

    def browse10x(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, "getExistingDirectory", "～/Documents")
        if directory == None or directory == '':
            return
        else:
            self.update10x(directory)
            self.updateGroupSetting()

    def browseFasta(self):
        files, filetype = QtWidgets.QFileDialog.getOpenFileNames(self, "getOpenFileNames", "~/Documents",
                                                           "Fasta Files (*.fasta *.fas *.fa);;All Files (*)")
        if len(files) == 0:
            return
        else:
            existing_items = []
            count = self.ui.listWidgetFasta.count()
            for i in range(count):
                existing_items.append(self.ui.listWidgetFasta.item(i).text())

            share = set(existing_items).intersection(set(files))
            if len(share) > 0:
                diff = set(files).difference(set(share))
                self.ui.listWidgetFasta.addItems(diff)

                Msg = 'These folders/files are already in our list!\n' + '\n'.join(share)
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            else:
                self.ui.listWidgetFasta.addItems(files)

            self.updateGroupSetting()

    def browseSEQ(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, "getExistingDirectory", "～/Documents")
        if directory == None or directory == '':
            return
        else:
            existing_items = []
            count = self.ui.listWidgetSEQ.count()
            for i in range(count):
                existing_items.append(self.ui.listWidgetSEQ.item(i).text())

            if directory in existing_items:
                Msg = 'These folders/files are already in our list!\n' + directory
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            else:
                self.ui.listWidgetSEQ.addItem(directory)

            self.updateGroupSetting()

    def browseCSV(self):
        files, filetype = QtWidgets.QFileDialog.getOpenFileNames(self, "getOpenFileNames", "~/Documents",
                                                           "VGene exported CSV Files (*.csv);;All Files (*)")
        if len(files) == 0:
            return
        else:
            existing_items = []
            count = self.ui.listWidgetCSV.count()
            for i in range(count):
                existing_items.append(self.ui.listWidgetCSV.item(i).text())

            share = set(existing_items).intersection(set(files))
            if len(share) > 0:
                diff = set(files).difference(set(share))
                self.ui.listWidgetCSV.addItems(diff)

                Msg = 'These folders/files are already in our list!\n' + '\n'.join(share)
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            else:
                self.ui.listWidgetCSV.addItems(files)

    def browseIgBlast(self):
        file, filetype = QtWidgets.QFileDialog.getOpenFileName(self, "getOpenFileName", "~/Documents",
                                                           "igBlast output File (*.txt);;All Files (*)")
        if file == '' or file == None:
            return
        else:
            self.ui.lineEditIgOut.setText(file)
            self.pathIgBlast = file

    def browseIgBlastFasta(self):
        file, filetype = QtWidgets.QFileDialog.getOpenFileName(self, "getOpenFileName", "~/Documents",
                                                               "Fasta Files (*.fasta);Fasta Files (*.fas);Fasta Files (*.fa);All Files (*)")
        if file == '' or file == None:
            return
        else:
            self.ui.lineEditIgFasta.setText(file)

    def browseIMGT(self):
        file, filetype = QtWidgets.QFileDialog.getOpenFileName(self, "getOpenFileName", "~/Documents",
                                                           "IMGT output Zip File (*.zip);;All Files (*)")
        if len(file) == 0:
            return
        else:
            self.ui.lineEditIMGT.setText(file)
            self.pathIMGT = file

    def switchTab(self, num):
        self.updateGroupSetting()
        if num == 0:
            self.ui.radioButtonHuman.setEnabled(True)
            self.ui.radioButtonMouse.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.rdoVandJ.setEnabled(True)
            self.ui.rdoFunction.setEnabled(True)
            self.ui.rdoAll.setEnabled(True)
            self.ui.rdoChoose.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.checkBoxFileStruc.setEnabled(True)
            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)
            self.ui.txtComment.setEnabled(True)
        elif num == 1:
            self.ui.radioButtonHuman.setEnabled(True)
            self.ui.radioButtonMouse.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.rdoVandJ.setEnabled(True)
            self.ui.rdoFunction.setEnabled(True)
            self.ui.rdoAll.setEnabled(True)
            self.ui.rdoChoose.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.checkBoxFileStruc.setEnabled(True)
            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)
            self.ui.txtComment.setEnabled(True)
        elif num == 3:
            self.ui.radioButtonHuman.setEnabled(False)
            self.ui.radioButtonMouse.setEnabled(False)
            self.ui.rdoProductive.setEnabled(False)
            self.ui.rdoVandJ.setEnabled(False)
            self.ui.rdoFunction.setEnabled(False)
            self.ui.rdoAll.setEnabled(False)
            self.ui.rdoChoose.setEnabled(False)
            self.ui.rdoProductive.setEnabled(False)
            self.ui.checkBoxFileStruc.setEnabled(False)
            self.ui.comboBoxProject.setEnabled(False)
            self.ui.comboBoxGroup.setEnabled(False)
            self.ui.comboBoxSubgroup.setEnabled(False)
            self.ui.txtComment.setEnabled(False)
        elif num == 4:
            self.ui.radioButtonHuman.setEnabled(False)
            self.ui.radioButtonMouse.setEnabled(False)
            self.ui.rdoProductive.setEnabled(False)
            self.ui.rdoVandJ.setEnabled(False)
            self.ui.rdoFunction.setEnabled(False)
            self.ui.rdoAll.setEnabled(False)
            self.ui.rdoChoose.setEnabled(False)
            self.ui.rdoProductive.setEnabled(False)
            self.ui.checkBoxFileStruc.setEnabled(False)
            self.ui.comboBoxProject.setEnabled(False)
            self.ui.comboBoxGroup.setEnabled(False)
            self.ui.comboBoxSubgroup.setEnabled(False)
            self.ui.txtComment.setEnabled(False)
        elif num == 5:
            self.ui.radioButtonHuman.setEnabled(True)
            self.ui.radioButtonMouse.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.rdoVandJ.setEnabled(True)
            self.ui.rdoFunction.setEnabled(True)
            self.ui.rdoAll.setEnabled(True)
            self.ui.rdoChoose.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.checkBoxFileStruc.setEnabled(True)
            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)
            self.ui.txtComment.setEnabled(True)
        elif num == 6:
            self.ui.radioButtonHuman.setEnabled(False)
            self.ui.radioButtonMouse.setEnabled(False)
            self.ui.rdoVandJ.setEnabled(False)
            self.ui.rdoFunction.setEnabled(True)
            self.ui.rdoAll.setEnabled(False)
            self.ui.rdoChoose.setEnabled(True)
            self.ui.rdoProductive.setEnabled(False)
            self.ui.checkBoxFileStruc.setEnabled(True)
            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)
            self.ui.txtComment.setEnabled(True)
        elif num == 2:
            self.ui.radioButtonHuman.setEnabled(True)
            self.ui.radioButtonMouse.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.rdoVandJ.setEnabled(True)
            self.ui.rdoFunction.setEnabled(True)
            self.ui.rdoAll.setEnabled(True)
            self.ui.rdoChoose.setEnabled(True)
            self.ui.rdoProductive.setEnabled(True)
            self.ui.checkBoxFileStruc.setEnabled(True)
            self.ui.comboBoxProject.setEnabled(True)
            self.ui.comboBoxGroup.setEnabled(True)
            self.ui.comboBoxSubgroup.setEnabled(True)
            self.ui.txtComment.setEnabled(True)
        else:
            pass

        # BCR and TCR switch
        if num in [0,1,2]:
            self.ui.pushButtonBCR.setEnabled(True)
            self.ui.pushButtonTCR.setEnabled(True)
        else:
            self.ui.pushButtonBCR.setEnabled(False)
            self.ui.pushButtonTCR.setEnabled(False)

    def accept(self):
        num = self.ui.tabWidget.currentIndex()

        #self.ui.progressBar.setValue(1)
        #self.ui.labelpct.setText('Start processing and loading...')

        # bcr or tcr switch
        dataType = 'BCR'
        if self.ui.pushButtonBCR.isChecked():
            dataType = 'BCR'
        else:
            dataType = 'TCR'

        if num == 0:
            self.InitiateImportFrom10X('none', 0, dataType)
        elif num == 1:
            self.InitiateImportFromFasta('none', 0, dataType)
        elif num == 3:
            self.InitiateImportFromCSV('none', 0)
        elif num == 4:
            self.InitiateImportFromVDB('none', 0)
        elif num == 5:
            self.InitiateImportFromIgBlast('none', 0)
        elif num == 6:
            self.InitiateImportFromIMGT()
        elif num == 2:
            self.InitiateImportFromSEQ('none', 0, dataType)
        else:
            pass

    def reject(self):
        print('close')
        self.hide()

    def disableWidgets(self):
        self.ui.tabWidget.setEnabled(False)

        self.ui.comboBoxGroup.setDisabled(True)
        self.ui.comboBoxProject.setDisabled(True)
        self.ui.comboBoxSubgroup.setDisabled(True)

        self.ui.radioButtonHuman.setDisabled(True)
        self.ui.radioButtonMouse.setDisabled(True)

        self.ui.rdoAll.setDisabled(True)
        self.ui.rdoProductive.setDisabled(True)
        self.ui.rdoVandJ.setDisabled(True)

        self.ui.rdoChoose.setDisabled(True)
        self.ui.rdoFunction.setDisabled(True)
        self.ui.checkBoxFileStruc.setDisabled(True)

        self.ui.txtComment.setDisabled(True)
        self.ui.pushButtonCancel.setEnabled(False)
        self.ui.pushButtonOK.setEnabled(False)

    def checkProgress(self):
        global timer
        progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
        file_handle = open(progressBarFile, 'r')
        text = file_handle.readline()
        text_list = text.split(',')

        try:
            progress = text_list[0]
            progress_text = text_list[1]
            progress = int(float(progress))
            self.ui.progressBar.setValue(progress)
            self.ui.labelpct.setText(progress_text + '(' + str(progress) + '%) records loaded')
        except:
            progress = self.ui.progressBar.value()
        if progress > 99:
            self.ui.labelpct.setText('Loading finished!')
            self.ui.progressBar.setValue(100)
            return

        if StopCheckProgress:
            return
        else:
            t = thd.Timer(1, self.checkProgress)
            t.start()

    def readBarcode(self, anno_path_name, type10x):
        # read annotation content
        name_index = 17
        barcode_dict = {}
        if anno_path_name != "":
            csvFile = open(anno_path_name, "r")
            reader = csv.reader(csvFile)
            for item in reader:
                # ignore header line
                if reader.line_num == 1:
                    if type10x == 'consensus':
                        name_index = item.index('raw_consensus_id')
                    else:
                        name_index = item.index('contig_id')
                barcode_dict[item[name_index]] = item[0]
            csvFile.close()
        return barcode_dict

    def readInfo(self, anno_path_name, type10x, field_name):
        # read annotation content
        barcode_dict = {}
        name_index = 1
        iso_index = 2
        if anno_path_name != "":
            csvFile = open(anno_path_name, "r")
            reader = csv.reader(csvFile)
            for item in reader:
                # ignore header line
                if reader.line_num == 1:
                    if type10x == 'consensus':
                        name_index = item.index('raw_consensus_id')
                    else:
                        name_index = item.index('contig_id')
                    iso_index = item.index(field_name)
                barcode_dict[item[name_index]] = item[iso_index]
            csvFile.close()
        return barcode_dict

    def InitiateImportFrom10X(self, Filenamed, MaxNum, dataType):
        self.calling = 1

        # need to transfer species grouping to IgBlaster
        answer = ''
        thetype = 'FASTA'
        species = ''
        datalist = []
        global answer3
        # answerTo = answer3

        if self.ui.radioButtonHuman.isChecked():
            species = 'Human'
        elif self.ui.radioButtonMouse.isChecked():
            species = 'Mouse'

        seq_pathname = self.ui.Seqpath.text()
        anno_path_name = self.ui.Annopath.text()
        self.anno_path_name = anno_path_name

        if self.ui.radioButtonCon.isChecked():
            self.rep1 = self.ui.lineEditRep1.text()
            self.type10x = 'consensus'
        else:
            self.rep1 = 'contig'
            self.type10x = 'contig'

        if self.ui.radioButtonChain.isChecked():
            self.rep2 = 'byChain'
        else:
            self.rep2 = self.ui.lineEditRep2.text()
        self.prefix = self.ui.lineEditRep3.text()

        if self.ui.rdoProductive.isChecked() == True:
            GetProductive = 0
        elif self.ui.rdoVandJ.isChecked() == True:
            GetProductive = 1
        else:
            GetProductive = 2

        if seq_pathname == None:
            return
        answer2 = ''

        ErlogFile = os.path.join(temp_folder,'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        header = "Began input at " + time.strftime('%c')
        with open(ErlogFile2, 'w') as currentFile:
            currentFile.write(header)
        # firstOne = True

        if self.ui.rdoChoose.isChecked() or self.ui.checkBoxFileStruc.isChecked():
            if Filenamed == 'none':
                project = self.ui.comboBoxProject.currentText()
                grouping = self.ui.comboBoxGroup.currentText()
                subgroup = self.ui.comboBoxSubgroup.currentText()
            else:
                project = Filenamed[1]
                grouping = Filenamed[2]
                subgroup = Filenamed[3]

            if project == '': project = 'none'
            if grouping == '': grouping = 'none'
            if subgroup == '': subgroup = 'none'

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast1.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast, may take a few minutes ...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            f.write(seq_pathname)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoFunction.isChecked():
            project = 'ByFunction'
            grouping = ''
            subgroup = ''

            multiProject = ''

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)
            datalist.append(multiProject)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast1.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast, may take a few minutes ...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            f.write(seq_pathname)
            f.close()

            #self.disableWidgets()
            return

    def InitiateImportFromFasta(self, Filenamed, MaxNum, dataType):
        self.calling = 2

        # need to transfer species grouping to IgBlaster
        if self.ui.listWidgetFasta.count() == 0:
            return
        else:
            fasta_files = []
            for index in range(self.ui.listWidgetFasta.count()):
                fasta_files.append(self.ui.listWidgetFasta.item(index).text())
        answer = ''
        thetype = 'FASTA'
        species = ''
        datalist = []
        global answer3
        # answerTo = answer3

        if self.ui.radioButtonHuman.isChecked():
            species = 'Human'
        elif self.ui.radioButtonMouse.isChecked():
            species = 'Mouse'

        # process sequence
        time_stamp = str(int(time.time() * 100)) + '.fasta'
        seq_pathname = os.path.join(temp_folder,time_stamp)
        fout = open(seq_pathname,'w')

        # process fasta file names
        processed_fasta_names = []
        path_depth = 0
        file_id = 1
        while len(processed_fasta_names) > len(list(set(processed_fasta_names))) or len(processed_fasta_names) == 0:
            processed_fasta_names.clear()
            path_depth = path_depth + 1
            for fasta_file in fasta_files:
                try:
                    file_name = '_'.join(fasta_file.split('/')[-path_depth:])
                except:
                    file_name = "File" + str(file_id) + '_' + fasta_file
                    file_id += 1

                file_name = re.sub(r'\..+', '', file_name)
                file_name = re.sub(' ', '', file_name)
                processed_fasta_names.append(file_name)

        file_id = 0
        for fasta_file in fasta_files:
            if os.path.isfile(fasta_file):
                fasta_seqs = ReadFasta(fasta_file)
                for fasta in fasta_seqs:
                    if len(fasta_files) == 1:
                        seq_name = '>' + fasta[0]
                    else:
                        seq_name = '>' + processed_fasta_names[file_id] + '_' + fasta[0]
                    fout.write(seq_name + '\n')
                    fout.write(fasta[1] + '\n')
                file_id += 1
            else:
                Msg = 'Your file\n ' + fasta_file + '\n does not exist! Check your input!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            '''
            try:
                for record in SeqIO.parse(fasta_file, "fasta"):
                    #print(record)
                    seq_name = '>' + processed_fasta_names[file_id] + '_' + record.id
                    fout.write(seq_name + '\n')
                    fout.write(record.seq._data + '\n')
                file_id += 1
            except:
                Msg = 'Can not parse file\n ' + fasta_file + '\n as fasta file! Check your input!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            '''
        fout.close()

        # settings
        if self.ui.rdoProductive.isChecked() == True:
            GetProductive = 0
        elif self.ui.rdoVandJ.isChecked() == True:
            GetProductive = 1
        else:
            GetProductive = 2

        if seq_pathname == None:
            return
        answer2 = ''

        ErlogFile = os.path.join(temp_folder,'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        header = "Began input at " + time.strftime('%c')
        with open(ErlogFile2, 'w') as currentFile:
            currentFile.write(header)
        # firstOne = True

        if self.ui.checkBoxFileStruc.isChecked():
            project = self.ui.comboBoxProject.currentText()
            grouping = self.ui.comboBoxGroup.currentText()
            subgroup = self.ui.comboBoxSubgroup.currentText()

            datalist.clear()
            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast2.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            file_list_str = '\n'.join(fasta_files)
            f.write(file_list_str)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoChoose.isChecked():
            (dirname, filename) = os.path.split(seq_pathname)

            if Filenamed == 'none':
                project = self.ui.comboBoxProject.currentText()
                grouping = self.ui.comboBoxGroup.currentText()
                subgroup = self.ui.comboBoxSubgroup.currentText()
            else:
                project = Filenamed[1]
                grouping = Filenamed[2]
                subgroup = Filenamed[3]

            if project == '': project = 'none'
            if grouping == '': grouping = 'none'
            if subgroup == '': subgroup = 'none'

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast2.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            file_list_str = '\n'.join(fasta_files)
            f.write(file_list_str)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoFunction.isChecked():
            project = 'ByFunction'
            grouping = ''
            subgroup = ''

            multiProject = ''

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)
            datalist.append(multiProject)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast2.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            file_list_str = '\n'.join(fasta_files)
            f.write(file_list_str)
            f.close()

            #self.disableWidgets()
            return

    def InitiateImportFromCSV(self, Filenamed, MaxNu):
        global FieldList
        global FieldCommentList
        global FieldTypeList
        global RealNameList

        self.calling = 3
        if self.ui.listWidgetCSV.count() == 0:
            return
        else:
            files = []
            for index in range(self.ui.listWidgetCSV.count()):
                files.append(self.ui.listWidgetCSV.item(index).text())

        if os.path.isfile(DBFilename):
            # collect information, alter the DB structure
            Msg = 'We added new fileds from the follow VDBs:\n'
            for csv_file in files:
                csvFile = open(csv_file, "r")
                reader = csv.reader(csvFile)
                line = 0
                for item in reader:
                    if line == 0:
                        cur_field = item
                    elif line == 1:
                        cur_field_name = item
                    else:
                        break
                    line += 1
                csvFile.close()

                new_cols = [i for i in cur_field if i not in FieldList]

                if len(new_cols) > 0:
                    for new_col in new_cols:
                        new_col_index = cur_field.index(new_col)
                        new_col_name = cur_field_name[new_col_index]
                        new_col_comment = ''

                        # update table
                        SQLSTATEMENT = 'SELECT MAX(ID) FROM fieldsname'
                        max_id = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)

                        SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + new_col + " text"
                        SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment, display, display_priority) ' \
                                        'VALUES(' + str(max_id[0][0] + 1) + ',"' + new_col + '", "' + new_col_name + \
                                        '", "Customized", "' + new_col_comment + '", "yes", 9)'
                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
                        except:
                            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
                            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                                QMessageBox.Ok)
                            return

                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
                        except:
                            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
                            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                                QMessageBox.Ok)
                            return

                        RealNameList.append(new_col)
                        FieldCommentList.append(new_col_comment)
                        FieldTypeList.append('Customized')
                        FieldList.append(new_col_name)

                        Msg = Msg + new_col + ' from    ' + csv_file + '\n'

            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

            '''
            # import data from VDBs
            print('import data from VDBs')
            for csv_file in files:

                csvFile = open(csv_file, "r")
                reader = csv.reader(csvFile)
                line = 0
                DataIn = []
                for item in reader:
                    if line == 0:
                        cur_field = item
                    elif line == 1:
                        cur_field_name = item
                    else:
                        DataIn.append(item)
                    line += 1
                csvFile.close()

                question_list = ['?' for n in range(len(cur_field))]
                field_str = ','.join(cur_field)
                question_str = ','.join(question_list)

                # update ID (ID should be unique)
                SQLSTATEMENT = 'SELECT COUNT(ID) FROM vgenesDB'
                Count = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)
                Count = Count[0][0]

                InputData = []
                for records in DataIn:
                    cur_line = list(records)
                    cur_line[119] = str(int(records[119]) + Count)
                    cur_line[58] = re.sub('#','\n',records[58])
                    cur_line[97] = re.sub('|', ',', records[97])
                    InputData.append(cur_line)

                # insert into DB
                print('insert into DB')
                conn = db.connect(DBFilename)
                cursor = conn.cursor()
                SQLSTATEMENT = "INSERT INTO vgenesDB(" + field_str + ") VALUES(" + question_str + ")"
                cursor.executemany(SQLSTATEMENT, InputData)
                conn.commit()
                conn.close()
                print(csv_file)
            Msg = 'Data import finished!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

            Vgenes.LoadDB(DBFilename)
            self.hide()
            '''
            # try multi-thread
            workThread = CSV_thread(self)
            workThread.DBFilename = DBFilename
            workThread.files = files
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Merging CSV...')
            self.progress.show()
            
    def InitiateImportFromVDBOld(self, Filenamed, MaxNu):
        global FieldList
        global FieldCommentList
        global FieldTypeList
        global RealNameList

        a = FieldList
        b = RealNameList

        self.calling = 4
        if self.ui.listWidgetVDB.count() == 0:
            return
        else:
            files = []
            for index in range(self.ui.listWidgetVDB.count()):
                files.append(self.ui.listWidgetVDB.item(index).text())

        if os.path.isfile(DBFilename):
            # collect information, alter the DB structure
            Msg = 'We added new fileds from the follow VDBs:\n'
            for vdb_file in files:
                VGenesSQL.checkFieldTable(vdb_file)

                SQLSTATEMENT = 'SELECT Field,FieldNickName,FieldComment,FieldType FROM fieldsname'
                DataIn = VGenesSQL.RunSQL(vdb_file, SQLSTATEMENT)
                cur_field = [i[0] for i in DataIn]
                cur_field_name = [i[1] for i in DataIn]
                cur_field_comment = [i[2] for i in DataIn]
                cur_field_type = [i[3] for i in DataIn]

                new_cols = []
                new_cols = [i for i in cur_field if i not in FieldList]

                if len(new_cols) > 0:
                    for	new_col in new_cols:
                        new_col_index = cur_field.index(new_col)
                        new_col_name = cur_field_name[new_col_index]
                        new_col_comment = cur_field_comment[new_col_index]

                        # update table
                        SQLSTATEMENT = 'SELECT MAX(ID) FROM fieldsname'
                        max_id = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)
                        SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + new_col + " text"
                        SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment, display, display_priority) ' \
                                        'VALUES(' + str(max_id[0][0] + 1) + ',"' + new_col + '", "' + new_col_name + \
                                        '", "Customized", "' + new_col_comment + '", "yes", 9)'
                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
                        except:
                            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1 + '\nCurrent VDB file: ' + vdb_file
                            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                                QMessageBox.Ok)
                            return

                        try:
                            VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
                        except:
                            msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2 + '\nCurrent VDB file: ' + vdb_file
                            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok,
                                                QMessageBox.Ok)
                            return

                        RealNameList.append(new_col_name)
                        FieldCommentList.append(new_col_comment)
                        FieldTypeList.append('Customized')
                        FieldList.append(new_col)

                        Msg = Msg + new_col + ' from    ' + vdb_file + '\n'

            if Msg == 'We added new fileds from the follow VDBs:\n':
                pass
            else:
                QMessageBox.information(self, 'Information', Msg,QMessageBox.Ok, QMessageBox.Ok)

            '''
            # import data from VDBs
            print('import data from VDBs')
            for vdb_file in files:
                SQLSTATEMENT = 'SELECT Field FROM fieldsname'
                DataIn = VGenesSQL.RunSQL(vdb_file, SQLSTATEMENT)
                field_str = ''
                question_str = ''
                for item in DataIn:
                    field_str = field_str + item[0] + ','
                    question_str = question_str + '?,'
                field_str = field_str.rstrip(',')
                question_str = question_str.rstrip(',')

                SQLSTATEMENT = 'SELECT ' + field_str + ' FROM vgenesDB'
                DataIn = VGenesSQL.RunSQL(vdb_file, SQLSTATEMENT)

                # update ID (ID should be unique)
                SQLSTATEMENT = 'SELECT COUNT(ID) FROM vgenesDB'
                Count = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)
                Count = Count[0][0]

                InputData = []
                for records in DataIn:
                    cur_line = list(records)
                    cur_line[119] = int(records[119]) + Count
                    InputData.append(cur_line)

                # insert into DB
                print('insert into DB')
                conn = db.connect(DBFilename)
                cursor = conn.cursor()
                SQLSTATEMENT = "INSERT INTO vgenesDB(" + field_str + ") VALUES(" + question_str + ")"
                cursor.executemany(SQLSTATEMENT, InputData)
                conn.commit()
                conn.close()
                print(vdb_file)
            Msg = 'Data import finished!'
            QMessageBox.information(self, 'Information', Msg,QMessageBox.Ok, QMessageBox.Ok)

            Vgenes.LoadDB(DBFilename)
            self.hide()
            '''

            # try multi-thread
            workThread = VDB_thread(self)
            workThread.DBFilename = DBFilename
            workThread.files = files
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Merging VDB...')
            self.progress.show()
        else:
            return

    def InitiateImportFromVDB(self, Filenamed, MaxNu):
        self.calling = 4
        if self.ui.listWidgetVDB.count() == 0:
            return
        else:
            files = []
            for index in range(self.ui.listWidgetVDB.count()):
                files.append(self.ui.listWidgetVDB.item(index).text())

        if os.path.isfile(DBFilename) is not True:
            return

        # initial pandas data frame
        rawDF = pd.DataFrame(0,index=files,columns=[])
        # collect information
        Msg = 'We added new fileds from the follow VDBs:\n'
        for vdb_file in files:
            # for old version VDB, create field table
            VGenesSQL.checkFieldTable(vdb_file)

            SQLSTATEMENT = 'SELECT Field,FieldNickName,FieldComment,FieldType FROM fieldsname WHERE FieldType <> "Fixed"'
            DataIn = VGenesSQL.RunSQL(vdb_file, SQLSTATEMENT)

            if len(DataIn) > 0:
                for record in DataIn:
                    cur_name = record[0]
                    if cur_name not in rawDF.columns:
                        rawDF[cur_name] = [False] * len(files)
                    rawDF[cur_name][vdb_file] = True

        # show these new fields on a table
        self.myVDBdialog = VDBMergeDialog()
        
        # make table
        horizontalHeader = ['Database Name'] + ['New Field ' + str(i+1) for i in range(len(rawDF.columns))]
        self.myVDBdialog.ui.tableWidget.setRowCount(len(rawDF.index) + 1)
        self.myVDBdialog.ui.tableWidget.setColumnCount(len(horizontalHeader))
        self.myVDBdialog.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
        self.myVDBdialog.ui.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.myVDBdialog.ui.tableWidget.horizontalHeader().setResizeMode(0, QHeaderView.ResizeToContents)
        self.myVDBdialog.ui.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.myVDBdialog.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        
        # first row
        col_index = 1
        for field in rawDF.columns:
            unit1 = QtWidgets.QLineEdit()
            unit1.setText(field)
            self.myVDBdialog.ui.tableWidget.setCellWidget(0, col_index, unit1)
            #unit1.textChanged.connect(self.myVDBdialog.CheckAll)
            col_index += 1
        
        row_index = 1
        for file in rawDF.index:
            unit1 = QTableWidgetItem(file)
            self.myVDBdialog.ui.tableWidget.setItem(row_index, 0, unit1)
            col_index = 1
            for field in rawDF.columns:
                if rawDF[field][file] == True:
                    unit = QTableWidgetItem(field)
                    unit.setBackground(QBrush(QColor("green")))
                else:
                    unit = QTableWidgetItem('')
                self.myVDBdialog.ui.tableWidget.setItem(row_index, col_index, unit)
                col_index += 1
            row_index += 1

        self.myVDBdialog.DBFilename = DBFilename
        self.myVDBdialog.files = files

        self.myVDBdialog.VDBSignal.connect(self.handleVDB)
        self.myVDBdialog.show()

    def handleVDB(self, DBFilename, files, DF):
        # try multi-thread
        workThread = VDB_thread(self)
        workThread.DBFilename = DBFilename
        workThread.files = files
        workThread.df = DF
        workThread.start()
        workThread.trigger.connect(self.multi_callback)
        workThread.loadProgress.connect(self.progressLabel)

        self.progress = ProgressBar(self)
        self.progress.setLabel('Merging VDB...')
        self.progress.show()

    def InitiateImportFromIgBlast(self, Filenamed, MaxNum):
        if os.path.isfile(self.ui.lineEditIgOut.text()) and os.path.isfile(self.ui.lineEditIgFasta.text()):
            pass
        else:
            msg = 'Please setup IgOut file and Fasta file!'
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.calling = 4

        # need to transfer species grouping to IgBlaster
        answer = ''
        thetype = 'FASTA'
        species = ''
        datalist = []
        global answer3
        # answerTo = answer3

        if self.ui.radioButtonHuman.isChecked():
            species = 'Human'
        elif self.ui.radioButtonMouse.isChecked():
            species = 'Mouse'

        igOut = self.ui.lineEditIgOut.text()
        seq_pathname = self.ui.lineEditIgFasta.text()

        if self.ui.rdoProductive.isChecked() == True:
            GetProductive = 0
        elif self.ui.rdoVandJ.isChecked() == True:
            GetProductive = 1
        else:
            GetProductive = 2

        if seq_pathname == None:
            return
        if igOut == None:
            return
        answer2 = ''

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        header = "Began input at " + time.strftime('%c')
        with open(ErlogFile2, 'w') as currentFile:
            currentFile.write(header)
        # firstOne = True

        if self.ui.rdoChoose.isChecked() or self.ui.checkBoxFileStruc.isChecked():
            if Filenamed == 'none':
                project = self.ui.comboBoxProject.currentText()
                grouping = self.ui.comboBoxGroup.currentText()
                subgroup = self.ui.comboBoxSubgroup.currentText()
            else:
                project = Filenamed[1]
                grouping = Filenamed[2]
                subgroup = Filenamed[3]

            if project == '': project = 'none'
            if grouping == '': grouping = 'none'
            if subgroup == '': subgroup = 'none'

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread1(self)
            workThread.igOut = igOut
            workThread.item = seq_pathname
            workThread.datalist = datalist
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            f.write(seq_pathname)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoFunction.isChecked():
            project = 'ByFunction'
            grouping = ''
            subgroup = ''

            multiProject = ''

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)
            datalist.append(multiProject)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread1(self)
            workThread.igOut = igOut
            workThread.item = seq_pathname
            workThread.datalist = datalist
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            f.write(seq_pathname)
            f.close()

            # self.disableWidgets()
            return

    def InitiateImportFromIMGT(self):
        if os.path.isfile(self.ui.lineEditIMGT.text()):
            pass
        else:
            msg = 'Please setup IGMT output file!'
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.calling = 5

        # need to transfer species grouping to IgBlaster
        datalist = []
        global answer3
        # answerTo = answer3

        IMGT_out = self.ui.lineEditIMGT.text()

        answer2 = ''

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        header = "Began input at " + time.strftime('%c')
        with open(ErlogFile2, 'w') as currentFile:
            currentFile.write(header)
        # firstOne = True

        if self.ui.rdoChoose.isChecked() or self.ui.checkBoxFileStruc.isChecked():
            project = self.ui.comboBoxProject.currentText()
            grouping = self.ui.comboBoxGroup.currentText()
            subgroup = self.ui.comboBoxSubgroup.currentText()

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThreadIMGTparser(self)
            workThread.item = IMGT_out
            workThread.datalist = datalist
            workThread.start()
            workThread.trigger.connect(self.multiIMGT_callback)

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            f.write(IMGT_out)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoFunction.isChecked():
            project = 'ByFunction'
            grouping = ''
            subgroup = ''

            multiProject = ''

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThreadIMGTparser(self)
            workThread.item = IMGT_out
            workThread.datalist = datalist
            workThread.start()
            workThread.trigger.connect(self.multiIMGT_callback)

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            f.write(IMGT_out)
            f.close()

            # self.disableWidgets()
            return

    def InitiateImportFromSEQ(self, Filenamed, MaxNum, dataType):
        self.calling = 6

        # need to transfer species grouping to IgBlaster

        if self.ui.listWidgetSEQ.count() == 0:
            return
        else:
            fasta_files = []
            for index in range(self.ui.listWidgetSEQ.count()):
                path = self.ui.listWidgetSEQ.item(index).text()
                cur_files = os.listdir(path)
                cur_name = path.split('/')[-1]
                cur_fasta = os.path.join(temp_folder, cur_name +'.fasta')
                out_handle = open(cur_fasta, 'w')
                for cur_file in cur_files:
                    if cur_file[-4:] == '.seq':
                        out_handle.write('>' + cur_file[:-4] + '\n')
                        f = open(os.path.join(path, cur_file), 'r')
                        seq = f.read()
                        f.close()
                        # remove dupulicate sequence names (if have)
                        seq = re.sub(r'>.+\n', '', seq)
                        out_handle.write(seq + '\n')
                fasta_files.append(cur_fasta)
                out_handle.close()
        answer = ''
        thetype = 'FASTA'
        species = ''
        datalist = []
        global answer3
        # answerTo = answer3

        if self.ui.radioButtonHuman.isChecked():
            species = 'Human'
        elif self.ui.radioButtonMouse.isChecked():
            species = 'Mouse'

        # process sequence
        time_stamp = str(int(time.time() * 100)) + '.fasta'
        seq_pathname = os.path.join(temp_folder,time_stamp)
        fout = open(seq_pathname,'w')
        for fasta_file in fasta_files:
            fasta_file = os.path.normpath(fasta_file)
            file_name = fasta_file.split(os.sep)[-1]
            file_name = re.sub(r'\..+', '', file_name)
            if os.path.isfile(fasta_file):
                fasta_seqs = ReadFasta(fasta_file)
                for fasta in fasta_seqs:
                    if len(fasta_files) == 1:
                        seq_name = '>' + fasta[0]
                    else:
                        seq_name = '>' + file_name + '_' + fasta[0]
                    fout.write(seq_name + '\n')
                    fout.write(fasta[1] + '\n')
            else:
                Msg = 'Your file\n ' + fasta_file + '\n does not exist! Check your input!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            '''
            try:
                for record in SeqIO.parse(fasta_file, "fasta"):
                    #print(record)
                    seq_name = '>' + file_name + '_' + record.id
                    fout.write(seq_name + '\n')
                    fout.write(record.seq._data + '\n')
            except:
                Msg = 'Can not parse file\n ' + fasta_file + '\n as fasta file! Check your input!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            '''
        fout.close()

        # settings
        if self.ui.rdoProductive.isChecked() == True:
            GetProductive = 0
        elif self.ui.rdoVandJ.isChecked() == True:
            GetProductive = 1
        else:
            GetProductive = 2

        if seq_pathname == None:
            return
        answer2 = ''

        ErlogFile = os.path.join(temp_folder,'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        header = "Began input at " + time.strftime('%c')
        with open(ErlogFile2, 'w') as currentFile:
            currentFile.write(header)
        # firstOne = True

        if self.ui.checkBoxFileStruc.isChecked():
            project = self.ui.comboBoxProject.currentText()
            grouping = self.ui.comboBoxGroup.currentText()
            subgroup = self.ui.comboBoxSubgroup.currentText()

            datalist.clear()
            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast2.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            file_list_str = '\n'.join(fasta_files)
            f.write(file_list_str)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoChoose.isChecked():
            (dirname, filename) = os.path.split(seq_pathname)

            if Filenamed == 'none':
                project = self.ui.comboBoxProject.currentText()
                grouping = self.ui.comboBoxGroup.currentText()
                subgroup = self.ui.comboBoxSubgroup.currentText()
            else:
                project = Filenamed[1]
                grouping = Filenamed[2]
                subgroup = Filenamed[3]

            if project == '': project = 'none'
            if grouping == '': grouping = 'none'
            if subgroup == '': subgroup = 'none'

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast2.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            file_list_str = '\n'.join(fasta_files)
            f.write(file_list_str)
            f.close()

            self.disableWidgets()
            return
        elif self.ui.rdoFunction.isChecked():
            project = 'ByFunction'
            grouping = ''
            subgroup = ''

            multiProject = ''

            datalist.clear()

            datalist.append(project)
            datalist.append(grouping)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(GetProductive)
            datalist.append(MaxNum)
            datalist.append(multiProject)

            # try multi-thread
            #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
            #file_handle = open(progressBarFile, 'w')
            #file_handle.write('0')
            #file_handle.close()
            workThread = WorkThread(self)
            workThread.item = seq_pathname
            workThread.datalist = datalist
            '''
            if self.ui.radioButtonFast2.isChecked():
                workThread.method = 'fast'
            else:
                workThread.method = 'slow'
            '''
            workThread.method = 'fast'
            workThread.datatype = dataType
            workThread.start()
            workThread.trigger.connect(self.multi_callback)
            workThread.loadProgress.connect(self.progressLabel)

            self.progress = ProgressBar(self)
            self.progress.setLabel('Running IgBlast...')
            self.progress.show()

            import_file = os.path.join(temp_folder, "import_file_name.txt")
            f = open(import_file, 'w')
            file_list_str = '\n'.join(fasta_files)
            f.write(file_list_str)
            f.close()

            #self.disableWidgets()
            return

    def multi_callback(self, signal, info):
        global IgBLASTAnalysis

        if signal == 1:
            QMessageBox.warning(self, 'Warning', info, QMessageBox.Ok, QMessageBox.Ok)

            try:
                self.progress.FeatProgressBar.setValue(100)
                self.progress.close()
            except:
                pass

            return

        Startprocessed = 0
        try:
            Startprocessed = len(IgBLASTAnalysis)
            self.close()
        except:
            if Startprocessed == 0:
                self.close()

        a = IgBLASTAnalysis

        if self.calling == 1:
            # match barcode
            barcodeDict = self.readBarcode(self.anno_path_name, self.type10x)
            IsoDict = self.readInfo(self.anno_path_name, self.type10x, 'c_gene')

            # generate a dict to replace barcodes by numbers
            if self.type10x == 'contig':
                unique_barcode = list(Counter(barcodeDict.values()).keys())
                barcode_dict = zip(unique_barcode, list(range(1, len(unique_barcode) + 1)))
                barcode_dict = dict(barcode_dict)

            for record in IgBLASTAnalysis:
                # add barcode info
                if record[0] in barcodeDict.keys():
                    record[108] = barcodeDict[record[0]]
                # add isotype info from 10X file
                if record[0] in IsoDict.keys():
                    if len(IsoDict[record[0]]) > 3:
                        record[101] = isotypeTranslation(IsoDict[record[0]])
                # modify sequence name
                if self.type10x == 'contig':
                    tmp_name = re.sub(r'_contig.+', '', record[0])
                    # replace barcodes by numbers
                    if tmp_name in barcode_dict.keys():
                        modified_name = re.sub(tmp_name, str(barcode_dict[tmp_name]), record[0])
                    else:
                        modified_name = record[0]
                    # rename sequence by subtype or given identifier
                    if self.rep2 == "byChain":
                        modified_name = re.sub('contig_', record[2][0], modified_name)
                    else:
                        modified_name = re.sub('contig_', self.rep2, modified_name)
                    # add prefix if given
                    if self.prefix != '':
                        modified_name = self.prefix + '_' + modified_name

                    record[0] = modified_name
                else:
                    if self.rep2 == "byChain":
                        rep2 = record[2][0]
                    else:
                        rep2 = self.rep2
                    record[0] = reName(record[0], self.rep1, rep2, self.prefix)

        elif self.calling == 2:
            for record in IgBLASTAnalysis:
                sampleName = record[0].split('_')[0]
                if len(record[75]) > 0:
                    if record[75][0] == '$':
                        record[75] = sampleName
                        continue
                if len(record[76]) > 0:
                    if record[76][0] == '$':
                        record[76] = sampleName
                        continue
                if len(record[77]) > 0:
                    if record[77][0] == '$':
                        record[77] = sampleName
                        continue
        elif self.calling == 3:
            Vgenes.LoadDB(DBFilename)

            try:
                self.progress.FeatProgressBar.setValue(100)
                self.progress.close()
            except:
                pass

            Msg = 'Data import finished!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            self.hide()
            return
        elif self.calling == 4:
            Vgenes.LoadDB(DBFilename)

            try:
                self.progress.FeatProgressBar.setValue(100)
                self.progress.close()
            except:
                pass

            Msg = 'Data import finished!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            self.hide()
            return
        a = IgBLASTAnalysis

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        Processed, answer, dup_msg = VGenesSQL.enterData(self, DBFilename, IgBLASTAnalysis, answer3, ErlogFile2)

        if dup_msg[0] == 'd':
            Msg = "Find some duplicated sequence names! We did some midifications:\n" + dup_msg[1]
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        if dup_msg[0] == 'e':
            Msg = dup_msg[1]
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        import_file = os.path.join(temp_folder, "import_file_name.txt")
        file_handle = open(import_file, 'r')
        file_name = file_handle.readlines()
        file_name = ''.join(file_name)
        file_handle.close()

        i = 0
        newErLog = '\n' + str(Processed) + ' sequences were input by IgBLAST for file: \n' + file_name + '\n'


        with open(ErlogFile, 'r') as currentFile:  # using with for this automatically closes the file even if you crash
            for line in currentFile:
                if i > 0:
                    newErLog += line
                i += 1

        with open(ErlogFile2, 'a') as currentFile:
            currentFile.write(newErLog)

        Vgenes.LoadDB(DBFilename)
        self.ShowVGenesText(ErlogFile2)
        self.hide()

        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

    def multiIMGT_callback(self):
        global IMGTAnalysis

        Startprocessed = 0
        try:
            Startprocessed = len(IMGTAnalysis)
            self.close()
        except:
            if Startprocessed == 0:
                self.close()

        a = IMGTAnalysis

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        Processed, answer, dup_msg = VGenesSQL.enterData(self, DBFilename, IMGTAnalysis, answer3, ErlogFile2)

        if dup_msg[0] == 'd':
            Msg = "Find some duplicated sequence names! We did some midifications:\n" + dup_msg[1]
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        if dup_msg[0] == 'e':
            Msg = dup_msg[1]
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        import_file = os.path.join(temp_folder, "import_file_name.txt")
        file_handle = open(import_file, 'r')
        file_name = file_handle.readlines()
        file_name = ''.join(file_name)
        file_handle.close()

        i = 0
        newErLog = '\n' + str(Processed) + ' sequences were input by IgBLAST for file: \n' + file_name + '\n'

        with open(ErlogFile, 'r') as currentFile:  # using with for this automatically closes the file even if you crash
            for line in currentFile:
                if i > 0:
                    newErLog += line
                i += 1

        with open(ErlogFile2, 'a') as currentFile:
            currentFile.write(newErLog)

        Vgenes.LoadDB(DBFilename)
        self.ShowVGenesText(ErlogFile2)
        self.hide()

    def ProcessSeqFiles(self, fileNames):
        if fileNames:
            FASTAfile = []
            FASTAparts = []
            for files in fileNames:
                WriteFASTA = True
                (dirname, filename) = os.path.split(files)  # parses filename from path
                (shortname, extension) = os.path.splitext(filename)  # parses filename into name and extension
                NameLine = '>' + shortname + '\n'

                # print(FASTAfile)
                os.chdir(dirname)

                with open(files,
                          'r') as currentFile:  # using with for this automatically closes the file even if you crash
                    readLine = str(currentFile.read())

                CountNucs = readLine.count('a') + readLine.count('A') + readLine.count('g') + readLine.count(
                    'G') + readLine.count('c') + readLine.count('C') + readLine.count('t') + readLine.count('T')
                PercentNuc = CountNucs / len(readLine)

                if readLine[0] == '>':
                    query = files + ' appears to ba a FASTA file, process as such?'
                    answer = questionMessage(self, query, 'YN')
                    if answer == 'Yes':
                        FASTAparts.append(readLine)
                        WriteFASTA = False
                    else:
                        WriteFASTA = False

                # code to see if mostly a good sequence

                elif len(readLine) < 30:
                    query = files + ' is a short sequence (<30 nucleotides), analyze anyways?'
                    answer = questionMessage(self, query, 'YN')
                    if answer == 'Yes':
                        WriteFASTA = True
                    else:
                        WriteFASTA = False


                elif PercentNuc < 0.8:
                    query = files + ' has over 20% of characters that are not nucleotides (A, G, C, or T), analyze anyways?'
                    answer = questionMessage(self, query, 'YN')
                    if answer == 'Yes':
                        WriteFASTA = True
                    else:
                        WriteFASTA = False

                # print(readLine)
                if WriteFASTA == True:
                    FASTAfile.append(NameLine)

                    readLine = readLine.replace('\n', '').replace('\r', '')
                    readLine += '\n'
                    FASTAfile.append(readLine)

            # print(FASTAfile)
            FinalFASTA = ''.join(FASTAfile)

            now = 'FASTA' + time.strftime('%c') + '.nt'
            FASTAFileName = os.path.join(temp_folder, now)
            # need to test

            with open(FASTAFileName,
                      'w') as currentFile:  # using with for this automatically closes the file even if you crash
                currentFile.write(FinalFASTA)

            return FASTAFileName

    def ShowVGenesText(self, filename):

        self.TextEdit.show()
        if filename != '':
            self.TextEdit.loadFile(filename)

class ImportDialogue(QtWidgets.QDialog, Ui_DialogImport):
    def __init__(self, parent=None):
        QtWidgets.QDialog.__init__(self, parent)
        self.setupUi(self)
        self.TextEdit = VGenesTextMain()

        self.toolButton.clicked.connect(self.browsedir)

        global answer3
        answer3 = 'No'

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def browsedir(self):  # browse and select path
        out_dir = openFiles(self, thetype)
        if out_dir == '' or out_dir == None:
            return
        self.lineEdit.setText(out_dir)

    @pyqtSlot()
    def on_rdoChoose_clicked(self):

        if self.rdoChoose.isChecked():
            self.comboBoxProject.setEditable(True)
            self.comboBoxGroup.setEditable(True)
            self.comboBoxSubgroup.setEditable(True)
            self.comboBoxProject.setCurrentText('')
            self.comboBoxGroup.setCurrentText('')
            self.comboBoxSubgroup.setCurrentText('')

            fields = ['Project']  # , 'Grouping', 'SubGroup'
            SQLStatement1 = Vgenes.MakeSQLStatement(fields)

            SQLStatement = SQLStatement1[:7] + 'DISTINCT ' + SQLStatement1[7:]

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            if len(DataIn) > 0:
                for item in DataIn:
                    self.comboBoxProject.addItem(item[0])
            DataIn.clear()

            fields = ['Grouping']  # , 'Grouping', 'SubGroup'
            SQLStatement1 = Vgenes.MakeSQLStatement(fields)

            SQLStatement = SQLStatement1[:7] + 'DISTINCT ' + SQLStatement1[7:]

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if len(DataIn) > 0:
                for item in DataIn:
                    self.comboBoxGroup.addItem(item[0])
            DataIn.clear()

            fields = ['SubGroup']  # , 'Grouping', 'SubGroup'
            SQLStatement1 = Vgenes.MakeSQLStatement(fields)

            SQLStatement = SQLStatement1[:7] + 'DISTINCT ' + SQLStatement1[7:]

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            if len(DataIn) > 0:
                for item in DataIn:
                    self.comboBoxSubgroup.addItem(item[0])


        else:
            self.comboBoxProject.setEditable(False)
            self.comboBoxGroup.setEditable(False)
            self.comboBoxSubgroup.setEditable(False)

    @pyqtSlot()
    def on_checkBoxFileStruc_clicked(self):

        if self.checkBoxFileStruc.isChecked():
            self.comboBoxProject.setEditable(False)
            self.comboBoxGroup.setEditable(False)
            self.comboBoxSubgroup.setEditable(False)
            self.comboBoxProject.setCurrentText('')
            self.comboBoxGroup.setCurrentText('')
            self.comboBoxSubgroup.setCurrentText('')

        else:
            self.comboBoxProject.setEditable(True)
            self.comboBoxGroup.setEditable(True)
            self.comboBoxSubgroup.setEditable(True)

    @pyqtSlot()
    def on_buttonBox_accepted(self):
        # Alldone = False
        MaxNum = self.MaxImport.value()
        Alldone = self.InitiateImport('none', MaxNum)

        if Alldone == True:
            self.close()

    @pyqtSlot()
    def on_buttonBox_rejected(self):
        self.close()

    def disableWidgets(self):
        self.comboBoxGroup.setDisabled(True)
        self.comboBoxProject.setDisabled(True)
        self.comboBoxSubgroup.setDisabled(True)

        self.radioButFASTA.setDisabled(True)
        self.radioButHuman.setDisabled(True)
        self.radioButIndSeq.setDisabled(True)
        self.radioButMouse.setDisabled(True)

        self.rdoAll.setDisabled(True)
        self.rdoProductive.setDisabled(True)
        self.rdoVandJ.setDisabled(True)

        self.rdoChoose.setDisabled(True)
        self.rdoFunction.setDisabled(True)
        self.checkBoxFileStruc.setDisabled(True)

        self.txtComment.setDisabled(True)
        self.MaxImport.setDisabled(True)

        #self.btnImportOldVGenes.setDisabled(True)
        self.buttonBox.setDisabled(True)

    def checkProgress(self):
        global timer
        progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
        file_handle = open(progressBarFile,'r')
        text = file_handle.readline()
        text_list = text.split(',')

        try:
            progress = text_list[0]
            progress_text = text_list[1]
            progress = int(float(progress))
            self.progressBar.setValue(progress)
            self.labelpct.setText(progress_text + '(' + str(progress) + '%) records loaded')
        except:
            progress = self.progressBar.value()
        if progress > 99:
            self.labelpct.setText('Loading finished!')
            self.progressBar.setValue(100)
            return
        t=thd.Timer(1, self.checkProgress)
        t.start()

    def InitiateImport(self, Filenamed, MaxNum):
        # need to transfer species grouping to IgBlaster
        answer = ''
        thetype = ''
        species = ''
        datalist = []
        global answer3
        # answerTo = answer3

        if self.radioButHuman.isChecked():
            species = 'Human'
        elif self.radioButMouse.isChecked():
            species = 'Mouse'

        if self.radioButFASTA.isChecked():
            thetype = 'FASTA'
        elif self.radioButIndSeq.isChecked():
            thetype = 'Sequence'

        if thetype == 'FASTA':
            if Filenamed == 'none':
                pathname = openFiles(self, thetype)
            else:
                pathname = Filenamed[0]
            if pathname == None:
                return False
        elif thetype == 'Sequence':
            filenames = openFiles(self, 'seq')
            if filenames == None:
                return False
            pathname1 = self.ProcessSeqFiles(filenames)
            pathname = []
            pathname.append(pathname1)
        # filename = filenames[0]

        if self.ui.rdoProductive.isChecked() == True:
            GetProductive = 0
        elif self.ui.rdoVandJ.isChecked() == True:
            GetProductive = 1
        else:
            GetProductive = 2

        if pathname == None:
            return
        answer2 = ''

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')  # '/Applications/IgBlast/database/ErLog.txt'  # NoErrors  NoGoodSeqs

        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')  # '/Applications/IgBlast/database/ErLog.txt'  # NoErrors  NoGoodSeqs
        header = "Began input at " + time.strftime('%c')
        with open(ErlogFile2, 'w') as currentFile:
            currentFile.write(header)
        # firstOne = True

        if self.checkBoxFileStruc.isChecked():
            for item in pathname:
                (dirname, filename) = os.path.split(item)
                dirparts = dirname.split('/')
                NumParts = len(dirparts)

                subgroup = dirparts[NumParts - 1]

                for i in range((self.comboBoxSubgroup.count()) - 1):
                    if self.comboBoxSubgroup.itemText(i) == subgroup:
                        self.comboBoxSubgroup.setCurrentText(subgroup)
                if self.comboBoxSubgroup.currentText() != subgroup:
                    self.comboBoxSubgroup.addItem(subgroup)
                    self.comboBoxSubgroup.setCurrentText(subgroup)
                # need to check this code and add to other combos

                if NumParts > 2:
                    grouping = dirparts[NumParts - 2]
                    for i in range((self.comboBoxGroup.count()) - 1):
                        if self.comboBoxGroup.itemText(i) == grouping:
                            self.comboBoxGroup.setCurrentText(grouping)
                    if self.comboBoxGroup.currentText() != grouping:
                        self.comboBoxGroup.addItem(grouping)
                        self.comboBoxGroup.setCurrentText(grouping)
                # need to check this code and add to other combos

                else:
                    grouping = dirparts[NumParts - 1]
                    for i in range((self.comboBoxGroup.count()) - 1):
                        if self.comboBoxGroup.itemText(i) == grouping:
                            self.comboBoxGroup.setCurrentText(grouping)
                    if self.comboBoxGroup.currentText() != grouping:
                        self.comboBoxGroup.addItem(grouping)
                        self.comboBoxGroup.setCurrentText(grouping)

                if NumParts > 3:
                    project = dirparts[NumParts - 3]
                    for i in range((self.comboBoxProject.count()) - 1):
                        if self.comboBoxProject.itemText(i) == project:
                            self.comboBoxProject.setCurrentText(project)
                    if self.comboBoxProject.currentText() != project:
                        self.comboBoxProject.addItem(project)
                        self.comboBoxProject.setCurrentText(project)

                elif NumParts > 2:
                    project = dirparts[NumParts - 1]
                    for i in range((self.comboBoxProject.count()) - 1):
                        if self.comboBoxProject.itemText(i) == project:
                            self.comboBoxProject.setCurrentText(project)
                    if self.comboBoxProject.currentText() != project:
                        self.comboBoxProject.addItem(project)
                        self.comboBoxProject.setCurrentText(project)

                else:
                    project = dirparts[NumParts - 1]
                    self.comboBoxProject.setCurrentText(project)

                    # if thetype != 'Sequence':
                    if answer2 == '':
                        if len(pathname) > 1:
                            msg = 'More then 1 FASTA file was selected. Make each a seperate project based on the filenames?'
                            buttons = 'YN'
                            answer2 = informationMessage(self, msg, buttons)

                            firstOne = False

                if answer2 == 'Yes':
                    preproject = os.path.splitext(filename)
                    project = preproject[0]

                datalist.clear()
                datalist.append(project)
                datalist.append(grouping)
                datalist.append(subgroup)
                datalist.append(species)
                datalist.append(GetProductive)
                datalist.append(MaxNum)

                # try multi-thread
                #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
                #file_handle = open(progressBarFile, 'w')
                #file_handle.write('0')
                #file_handle.close()
                workThread = WorkThread(self)
                workThread.item = item
                workThread.datalist = datalist
                workThread.start()
                workThread.trigger.connect(self.multi_callback)

                import_file = os.path.join(temp_folder, "import_file_name.txt")
                f = open(import_file, 'w')
                f.write(item)
                f.close()

                self.disableWidgets()
                return

                '''
                IgBLASTAnalysis = IgBLASTer.IgBLASTit(item, datalist)

                Startprocessed = len(IgBLASTAnalysis)
                if Startprocessed == 0:
                    self.close()

                Processed, answer = VGenesSQL.enterData(self, DBFilename, IgBLASTAnalysis, answer3)

                i = 0
                newErLog = '\n' + str(Processed) + ' sequences were input by IgBLAST for file: ' + item + '\n'

                with open(ErlogFile,
                          'r') as currentFile:  # using with for this automatically closes the file even if you crash
                    for line in currentFile:
                        if i > 0:
                            newErLog += line
                        i += 1

                with open(ErlogFile2, 'a') as currentFile:
                    currentFile.write(newErLog)
                '''
        elif self.rdoChoose.isChecked():
            # checklabel = {}

            for item in pathname:
                (dirname, filename) = os.path.split(item)

                if Filenamed == 'none':
                    project = self.comboBoxProject.currentText()
                    grouping = self.comboBoxGroup.currentText()
                    subgroup = self.comboBoxSubgroup.currentText()
                else:
                    project = Filenamed[1]
                    grouping = Filenamed[2]
                    subgroup = Filenamed[3]

                if project == '': project = 'none'
                if grouping == '': grouping = 'none'
                if subgroup == '': subgroup = 'none'

                # if thetype != 'Sequence':
                if answer2 == '':
                    if len(pathname) > 1:
                        msg = 'More then 1 FASTA file was selected. Make each a seperate project based on the filenames?'
                        buttons = 'YN'

                        answer2 = informationMessage(self, msg, buttons)

                        firstOne = False

                if answer2 == 'Yes':
                    preproject = os.path.splitext(filename)
                    project = preproject[0]

                datalist.clear()

                datalist.append(project)
                datalist.append(grouping)
                datalist.append(subgroup)
                datalist.append(species)
                datalist.append(GetProductive)
                datalist.append(MaxNum)

                # try multi-thread
                #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
                #file_handle = open(progressBarFile, 'w')
                #file_handle.write('0')
                #file_handle.close()
                workThread = WorkThread(self)
                workThread.item = item
                workThread.datalist = datalist
                workThread.start()
                workThread.trigger.connect(self.multi_callback)

                import_file = os.path.join(temp_folder, "import_file_name.txt")
                f = open(import_file, 'w')
                f.write(item)
                f.close()

                self.disableWidgets()
                return

                '''
                IgBLASTAnalysis = IgBLASTer.IgBLASTit(item, datalist)

                Startprocessed = len(IgBLASTAnalysis)
                if Startprocessed == 0:
                    self.close()

                Processed, answer = VGenesSQL.enterData(self, DBFilename, IgBLASTAnalysis, answer3)

                i = 0
                newErLog = '\n' + str(Processed) + ' sequences were input by IgBLAST for file: ' + item + '\n'

                with open(ErlogFile,
                          'r') as currentFile:  # using with for this automatically closes the file even if you crash
                    for line in currentFile:
                        if i > 0:
                            newErLog += line
                        i += 1

                with open(ErlogFile2, 'a') as currentFile:
                    currentFile.write(newErLog)
                '''
        elif self.rdoFunction.isChecked():
            for item in pathname:
                self.lineEdit.setText(item)
                (dirname, filename) = os.path.split(item)

                project = 'ByFunction'
                grouping = ''
                subgroup = ''

                # if thetype != 'Sequence':
                if answer2 == '':
                    if len(pathname) > 1:
                        msg = 'More then 1 FASTA file was selected. Make each a seperate project based on the filenames?'
                        buttons = 'YN'
                        answer2 = informationMessage(self, msg, buttons)
                        firstOne = False

                if answer2 == 'Yes':
                    preproject = os.path.splitext(filename)
                    multiProject = preproject[0]
                else:
                    multiProject = ''

                datalist.clear()

                datalist.append(project)
                datalist.append(grouping)
                datalist.append(subgroup)
                datalist.append(species)
                datalist.append(GetProductive)
                datalist.append(MaxNum)
                datalist.append(multiProject)

                # try multi-thread
                #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
                #file_handle = open(progressBarFile, 'w')
                #file_handle.write('0')
                #file_handle.close()
                workThread = WorkThread(self)
                workThread.item = item
                workThread.datalist = datalist
                workThread.start()
                workThread.trigger.connect(self.multi_callback)

                import_file = os.path.join(temp_folder, "import_file_name.txt")
                f = open(import_file, 'w')
                f.write(item)
                f.close()

                self.disableWidgets()
                return

                '''				
                start = time.time()
                IgBLASTAnalysis = IgBLASTer.IgBLASTit(item, datalist)
                end = time.time()
                print('Run time for IgBlast: ' +str(end - start))
                Startprocessed = 0
                try:

                    Startprocessed = len(IgBLASTAnalysis)
                except:
                    if Startprocessed == 0:
                        self.close()

                start = time.time()
                Processed, answer = VGenesSQL.enterData(self, DBFilename, IgBLASTAnalysis, answer3)
                end = time.time()
                print('Run time for Importing DB: ' + str(end - start))

                i = 0
                newErLog = '\n' + str(Processed) + ' sequences were input by IgBLAST for file: ' + item + '\n'

                with open(ErlogFile,
                          'r') as currentFile:  # using with for this automatically closes the file even if you crash
                    for line in currentFile:
                        if i > 0:
                            newErLog += line
                        i += 1

                with open(ErlogFile2, 'a') as currentFile:
                    currentFile.write(newErLog)
                '''
        Vgenes.LoadDB(DBFilename)
        self.ShowVGenesText(ErlogFile2)

    @pyqtSlot()
    def multi_callback(self):

        Startprocessed = 0
        try:
            Startprocessed = len(IgBLASTAnalysis)
            self.close()
        except:
            if Startprocessed == 0:
                self.close()

        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        Processed, answer, dup_msg = VGenesSQL.enterData(self, DBFilename, IgBLASTAnalysis, answer3, ErlogFile2)

        if dup_msg[0] == 'd':
            Msg = "Find some duplicated sequence names! We did some midifications:\n" + dup_msg[1]
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        if dup_msg[0] == 'e':
            Msg = dup_msg[1]
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        import_file = os.path.join(temp_folder, "import_file_name.txt")
        file_handle = open(import_file,'r')
        file_name = file_handle.readline()
        file_handle.close()

        i = 0
        newErLog = '\n' + str(Processed) + ' sequences were input by IgBLAST for file: ' + file_name + '\n'


        with open(ErlogFile,'r') as currentFile:  # using with for this automatically closes the file even if you crash
            for line in currentFile:
                if i > 0:
                    newErLog += line
                i += 1

        with open(ErlogFile2, 'a') as currentFile:
            currentFile.write(newErLog)

        Vgenes.LoadDB(DBFilename)
        self.ShowVGenesText(ErlogFile2)

    @pyqtSlot()
    def on_btnImportOldVGenes_clicked(self):
        from operator import itemgetter  # SeqList.sort(key=itemgetter(0, 1, 2, 3))
        msg = 'This function imports a comma separated values (CSV) file formatted as: Project, Group, Subgroup, Name, Sequence'
        buttons = 'OKC'
        global answer3
        answer3 = 'No'
        answer = informationMessage(self, msg, buttons)
        if answer == 'Cancel':
            print('no file')
            return

        # self.rdoChoose.setChecked(True)
        # self.checkBoxFileStruc.setChecked(False)
        self.rdoFunction.setChecked(False)

        Pathname = openFile(self, 'CSV')
        self.checkBoxFileStruc.setChecked(False)
        self.rdoChoose.setChecked(True)
        self.radioButFASTA.setChecked(True)
        SeqList = []
        fieldis = ''
        try:
            with open(Pathname, 'r') as currentfile:
                for line in currentfile:
                    fields = line.split(',')
                    if len(fields) == 5:
                        for i in range(0, 4):
                            fieldis = fields[i]
                            fieldis = fieldis.upper()
                            # if fieldis == '01B_STAN_17-006-1A03H_VH3':
                            #     print('stop')
                            fields[i] = fieldis.replace('"', '')

                            if fields[i] == '' and i < 3:
                                fields[i] = 'none'
                        SeqList.append(fields)
            SeqList.sort(key=itemgetter(0, 1, 2, 3))
            LastP = ''
            LastG = ''
            LastSG = ''
            StartNewFASTA = True
            FASTAFile = ''
            NewFile = ''
            FirstOne = True
            DataPass = []
            ItemP = []
            FileNamed = os.path.join(working_prefix, 'IgBlast', 'database',
                                     'WorkingFile.nt')  # '/Applications/IgBlast/database/WorkingFile.nt'
            ItemP.append(FileNamed)
            DataPass.append(ItemP)
            DataPass.append('none')
            DataPass.append('none')
            DataPass.append('none')
            for seq in SeqList:
                project = seq[0]
                group = seq[1]
                subgroup = seq[2]
                SeqName = '>' + seq[3] + '\n'
                Sequence = seq[4] + '\n'

                if project != LastP:
                    LastP = project
                    StartNewFASTA = True
                # else:
                #     StartNewFASTA = False

                if group != LastG:
                    LastG = group
                    StartNewFASTA = True
                # else:
                #     StartNewFASTA = False

                if subgroup != LastSG:
                    LastSG = subgroup
                    StartNewFASTA = True
                # else:
                #     StartNewFASTA = False

                if StartNewFASTA == True:  # then write it and clear it clear
                    StartNewFASTA = False
                    if FirstOne == False:  # firstone is empty
                        with open(FileNamed, 'w') as currentFile:
                            currentFile.write(NewFile)

                        Alldone = self.InitiateImport(DataPass, 0)
                        DataPass[1] = project
                        # if project == 'STAN-004':
                        # 	print('stop')
                        DataPass[2] = group
                        DataPass[3] = subgroup

                        self.comboBoxProject.setCurrentText(project)
                        self.comboBoxGroup.setCurrentText(group)
                        self.comboBoxSubgroup.setCurrentText(subgroup)

                    else:
                        DataPass[1] = project
                        DataPass[2] = group
                        DataPass[3] = subgroup
                        self.comboBoxProject.setCurrentText(project)
                        self.comboBoxGroup.setCurrentText(group)
                        self.comboBoxSubgroup.setCurrentText(subgroup)

                    FirstOne = False
                    NewFile = ''

                NewFile += SeqName
                NewFile += Sequence

            if NewFile != '':
                with open(FileNamed, 'w') as currentFile:
                    currentFile.write(NewFile)
                Alldone = self.InitiateImport(DataPass)

            if Alldone == True:
                self.close()
        except:
            return

    def ProcessSeqFiles(self, fileNames):
        if fileNames:
            FASTAfile = []
            FASTAparts = []
            for files in fileNames:
                WriteFASTA = True
                (dirname, filename) = os.path.split(files)  # parses filename from path
                (shortname, extension) = os.path.splitext(filename)  # parses filename into name and extension
                NameLine = '>' + shortname + '\n'

                # print(FASTAfile)
                os.chdir(dirname)

                with open(files,
                          'r') as currentFile:  # using with for this automatically closes the file even if you crash
                    readLine = str(currentFile.read())

                CountNucs = readLine.count('a') + readLine.count('A') + readLine.count('g') + readLine.count(
                    'G') + readLine.count('c') + readLine.count('C') + readLine.count('t') + readLine.count('T')
                PercentNuc = CountNucs / len(readLine)

                if readLine[0] == '>':
                    query = files + ' appears to ba a FASTA file, process as such?'
                    answer = questionMessage(self, query, 'YN')
                    if answer == 'Yes':
                        FASTAparts.append(readLine)
                        WriteFASTA = False
                    else:
                        WriteFASTA = False

                # code to see if mostly a good sequence

                elif len(readLine) < 30:
                    query = files + ' is a short sequence (<30 nucleotides), analyze anyways?'
                    answer = questionMessage(self, query, 'YN')
                    if answer == 'Yes':
                        WriteFASTA = True
                    else:
                        WriteFASTA = False


                elif PercentNuc < 0.8:
                    query = files + ' has over 20% of characters that are not nucleotides (A, G, C, or T), analyze anyways?'
                    answer = questionMessage(self, query, 'YN')
                    if answer == 'Yes':
                        WriteFASTA = True
                    else:
                        WriteFASTA = False

                # print(readLine)
                if WriteFASTA == True:
                    FASTAfile.append(NameLine)

                    readLine = readLine.replace('\n', '').replace('\r', '')
                    readLine += '\n'
                    FASTAfile.append(readLine)

            # print(FASTAfile)
            FinalFASTA = ''.join(FASTAfile)

            now = 'FASTA' + time.strftime('%c') + '.nt'
            FASTAFileName = os.path.join(temp_folder, now)
            # need to test

            with open(FASTAFileName, 'w') as currentFile:  # using with for this automatically closes the file even if you crash
                currentFile.write(FinalFASTA)

            return FASTAFileName

    # ErLog = IgBLASTer.ProcessFASTA(filename)
    # if ErLog != '':
    #     type = 'YN'
    #     Query = "There were some bad sequences, would you like to see the Error log?"
    #
    #     reply = questionMessage(Query,type)
    #     if reply == 'Yes':
    #         self.ShowVGenesText(ErLog)

    def ShowVGenesText(self, filename):

        self.TextEdit.show()
        if filename != '':
            self.TextEdit.loadFile(filename)

class ResizeWidget(QWebEngineView):
    resizeSignal = pyqtSignal(int, int)
    def __init__(self, parent=None):
        super(ResizeWidget, self).__init__()
        self.id = 0
        self.h = 0
        self.w = 0
        self.html = ''
        self._resize_timer = None

    def updateResizeTimer(self, interval=None):
        if self._resize_timer is not None:
            self.killTimer(self._resize_timer)
        if interval is not None:
            self._resize_timer = self.startTimer(interval)
        else:
            self._resize_timer = None

    def resizeEvent(self, event):
        w = event.size().width()
        h = event.size().height()
        # only emit re-size signal if change size more than 20px
        if (abs(self.h - h) > 20) or (abs(self.w - w) > 20):
            self.updateResizeTimer(300)
        else:
            print('minor re-size')
            
        self.h = h
        self.w = w

    def timerEvent(self, event):
        if event.timerId() == self._resize_timer:
            self.updateResizeTimer()

            print(f' size now :{self.w, self.h, self.id}')
            self.resizeSignal.emit(self.w, self.h)

class MyObjectCls(QObject):
    downloadFigSignal = pyqtSignal(str)
    updateSelectionSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        QObject.__init__(self, parent)

    @pyqtSlot(str)
    def consolePrint(self, msg):
        print(msg)

    @pyqtSlot(str)
    def updateSelection(self, msg):
        self.updateSelectionSignal.emit(msg)

    @pyqtSlot(str)
    def download(self, msg):
        self.downloadFigSignal.emit(msg)

class WorkThread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(int, str)

    def __int__(self):
        super(WorkThread, self).__init__()
        self.parent = parent
        self.item = ''
        self.datalist = ''
        self.method = 'fast'
        self.datatype = 'BCR'

    def run(self):
        global IgBLASTAnalysis
        if self.method == 'fast':
            if self.datatype == 'BCR':
                IgBLASTAnalysis = IgBlastParserFast(self.item, self.datalist, self.loadProgress)
            elif self.datatype == 'TCR':
                IgBLASTAnalysis = IgBlastParserFastTCR(self.item, self.datalist, self.loadProgress)
            else:
                return
        else:
            if self.datatype == 'BCR':
                IgBLASTAnalysis = IgBLASTer.IgBLASTit(self.item, self.datalist, self.loadProgress)
            else:
                return

        self.trigger.emit(0, self.item)

class WorkThread1(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(int, str)

    def __int__(self):
        super(WorkThread1, self).__init__()
        self.parent = parent
        self.item = ''
        self.datalist = ''
        self.igOut = ''

    def run(self):
        global IgBLASTAnalysis
        IgBLASTAnalysis = IgBLASTer.IgBLASTitResults(self.item, self.igOut, self.datalist, self.loadProgress)
        self.trigger.emit(0, self.item)

class VDB_thread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(int, str)

    def __int__(self):
        super(VDB_thread, self).__init__()
        self.DBFilename = ''
        self.files = []
        self.df = ''

    def run(self):
        DBFilename = self.DBFilename
        files = self.files
        DF = self.df

        # collect information, alter the DB structure
        for new_field in DF.columns:
            if new_field not in RealNameList:
                # update table
                SQLSTATEMENT = 'SELECT MAX(ID) FROM fieldsname'
                max_id = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)
                SQLSTATEMENT1 = "ALTER TABLE vgenesDB ADD " + new_field + " text"
                SQLSTATEMENT2 = 'INSERT INTO fieldsname(ID, Field, FieldNickName, FieldType, FieldComment, display, display_priority) ' \
                                'VALUES(' + str(max_id[0][0] + 1) + ',"' + new_field + '", "' + new_field + \
                                '", "Customized", "' + new_field + '", "yes", 9)'
                try:
                    VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT1)
                except:
                    msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT1
                    self.trigger.emit(1, msg)
                    return

                try:
                    VGenesSQL.RunUpdateSQL(DBFilename, SQLSTATEMENT2)
                except:
                    msg = "DB operation Error! Current SQL statement is: \n" + SQLSTATEMENT2
                    self.trigger.emit(1, msg)
                    return

                RealNameList.append(new_field)
                FieldCommentList.append(new_field)
                FieldTypeList.append('Customized')
                FieldList.append(new_field)

        # import data from VDBs
        print('import data from VDBs')
        conn = db.connect(DBFilename)
        cursor = conn.cursor()
        process = 1
        for vdb_file in files:
            df_slices_current_vdb = DF.loc[vdb_file]
            projection_dict = {}
            for sub_index in df_slices_current_vdb.index:
                if df_slices_current_vdb[sub_index] != '':
                    projection_dict[df_slices_current_vdb[sub_index]] = sub_index
                    
            SQLSTATEMENT = 'SELECT Field FROM fieldsname'
            DataIn = VGenesSQL.RunSQL(vdb_file, SQLSTATEMENT)
            fields = []
            translated_fields = []
            index = 0
            for item in DataIn:
                fields.append(item[0])
                if index < 119:
                    translated_fields.append(item[0])
                else:
                    if item[0] in projection_dict.keys():
                        translated_fields.append(projection_dict[item[0]])
                    else:
                        translated_fields.append(item[0])
                index += 1
            questions = ['?'] * len(fields)
            
            field_str = ','.join(fields)
            question_str = ','.join(questions)
            translated_field_str = ','.join(translated_fields)

            SQLSTATEMENT = 'SELECT ' + field_str + ' FROM vgenesDB'
            DataIn = VGenesSQL.RunSQL(vdb_file, SQLSTATEMENT)

            # update ID (ID should be unique)
            SQLSTATEMENT = 'SELECT ID FROM vgenesDB'
            Res = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)
            if len(Res) > 0:
                Count = [int(ele[0]) for ele in Res]
                maxCount = max(Count)
            else:
                maxCount = 0

            InputData = []
            for records in DataIn:
                cur_line = list(records)
                cur_line[119] = int(records[119]) + maxCount
                InputData.append(cur_line)

            # insert into DB
            print(vdb_file)
            SQLSTATEMENT = "INSERT INTO vgenesDB(" + translated_field_str + ") VALUES(" + question_str + ")"
            try:
                cursor.executemany(SQLSTATEMENT, InputData)
            except Exception as e:
                print(traceback.format_exc())
                msg = "UNIQUE constraint failed: SeqName\n Please make sure all the sequence names are unique! (add sampleID to each sequence name)"
                #print(msg)
                self.trigger.emit(1, msg)
                return
            conn.commit()

            pct = int(process/len(files)*100)
            label = "Processing VDB file: " + vdb_file
            self.loadProgress.emit(pct, label)
            process += 1
            #print(vdb_file)
        conn.close()
        self.trigger.emit(0, 'Data import finished!')

class CSV_thread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(int, str)

    def __int__(self):
        super(CSV_thread, self).__init__()
        self.DBFilename = ''
        self.files = []

    def run(self):
        DBFilename = self.DBFilename
        files = self.files

        # import data from VDBs
        print('import data from CSV')
        conn = db.connect(DBFilename)
        cursor = conn.cursor()
        process = 1
        for csv_file in files:

            csvFile = open(csv_file, "r")
            reader = csv.reader(csvFile)
            line = 0
            DataIn = []
            for item in reader:
                if line == 0:
                    cur_field = item
                elif line == 1:
                    cur_field_name = item
                else:
                    DataIn.append(item)
                line += 1
            csvFile.close()

            question_list = ['?' for n in range(len(cur_field))]
            field_str = ','.join(cur_field)
            question_str = ','.join(question_list)

            # update ID (ID should be unique)
            SQLSTATEMENT = 'SELECT COUNT(ID) FROM vgenesDB'
            Count = VGenesSQL.RunSQL(DBFilename, SQLSTATEMENT)
            Count = Count[0][0]

            InputData = []
            for records in DataIn:
                cur_line = list(records)
                cur_line[119] = str(int(records[119]) + Count)
                cur_line[58] = re.sub('#', '\n', records[58])
                cur_line[97] = re.sub('|', ',', records[97])
                cur_line[119] = int(cur_line[119])
                InputData.append(cur_line)

            # insert into DB
            SQLSTATEMENT = "INSERT INTO vgenesDB(" + field_str + ") VALUES(" + question_str + ")"

            try:
                cursor.executemany(SQLSTATEMENT, InputData)
                conn.commit()
            except Exception as e:
                self.trigger.emit(1,'Error detected! \nError Message:' + traceback.format_exc())
                return

            pct = int(process/len(files)*100)
            label = "Processing CSV file: " + csv_file
            self.loadProgress.emit(pct, label)
            process += 1
            #print(vdb_file)
        conn.close()
        self.trigger.emit(0,'Data import finished!')

class WorkThreadIMGTparser(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(str)

    def __int__(self):
        super(WorkThreadIMGTparser, self).__init__()
        self.parent = parent
        self.item = ''
        self.datalist = ''

    def run(self):
        global IMGTAnalysis
        IMGTAnalysis = IMGTparser(self.item, self.datalist, self.loadProgress)
        a = IMGTAnalysis
        self.trigger.emit(self.item)

class CookieThread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(str, list, list, str)
    badNews = pyqtSignal(str)

    def __int__(self):
        super(CookieThread, self).__init__()
        self.mode = ''
        self.pf = ''
        self.data = []
        self.cols = []
        self.rows = []
        self.size = 0

    def run(self):
        runFlag, CookieResults = CookieSampling(self.mode, self.pf, self.size, self.data, self.rows, self.cols, self.loadProgress)
        if runFlag == True:
            if self.pf == '':
                self.trigger.emit(self.mode, CookieResults, self.cols, self.pf)
            else:
                self.trigger.emit(self.mode, CookieResults, self.cols, self.pf[0])
        else:
            self.badNews.emit(CookieResults)

class PatternThread(QThread):
    loadProgress = pyqtSignal(int, str)
    trigger = pyqtSignal(str, dict)
    badNews = pyqtSignal(str)

    def __int__(self):
        super(PatternThread, self).__init__()
        self.species = ''
        self.fasta = ''
        self.pattern = ''
        self.region = []
        self.num = 0

    def run(self):
        # run IgBlast
        workingdir = os.path.join(working_prefix, 'IgBlast')
        os.chdir(workingdir)
        self.loadProgress.emit(1,'Running IgBlast ... ')
        try:
            start = time.time()
            if self.species == 'Human':
                BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query " + self.fasta + " -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19"
                IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            elif self.species == 'Mouse':
                BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query " + self.fasta + " -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19"
                IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            end = time.time()
            print('Run time for IgBlast: ' + str(end - start))
        except:
            ErLog = 'VGenes running Error!\nCurrent CMD: ' + BLASTCommandLine + '\n'
            self.badNews.emit(ErLog)
            return
            
        # Identify pattern from IgBlast result
        ## process pattern str
        pattern = self.pattern.upper()
        pattern = re.sub('X', '.', pattern)
        pattern = re.compile(pattern)
        ## identify pattern for each record
        region = self.region
        line_num = 0
        search_index = {}
        selected_result = {}
        for record in IgBlastOut_fmt19:
            if line_num == 0:  # find column index for all regions
                fields = record.split('\t')
                if 'Vgene' in region:
                    search_index['Vgene'] = fields.index('v_sequence_alignment_aa')
                if 'Dgene' in region:
                    search_index['Dgene'] = fields.index('d_sequence_alignment_aa')
                if 'Jgene' in region:
                    search_index['Jgene'] = fields.index('j_sequence_alignment_aa')
                if 'FWR1' in region:
                    search_index['FWR1'] = fields.index('fwr1_aa')
                if 'FWR2' in region:
                    search_index['FWR2'] = fields.index('fwr2_aa')
                if 'FWR3' in region:
                    search_index['FWR3'] = fields.index('fwr3_aa')
                if 'FWR4' in region:
                    search_index['FWR4'] = fields.index('fwr4_aa')
                if 'CDR1' in region:
                    search_index['CDR1'] = fields.index('cdr1_aa')
                if 'CDR2' in region:
                    search_index['CDR2'] = fields.index('cdr2_aa')
                if 'CDR3' in region:
                    search_index['CDR3'] = fields.index('cdr3_aa')
                if 'Full' in region:
                    search_index['Full'] = fields.index('sequence_alignment_aa')
                if 'Junction' in region:
                    search_index['Junction'] = fields.index('junction_aa')
            else:  # match all regions for each record
                fields = record.split('\t')
                for ele in search_index.keys():
                    match_res = pattern.search(fields[search_index[ele]])
                    if match_res != None:
                        if ele in selected_result.keys():
                            selected_result[ele].append(fields[0])
                        else:
                            selected_result[ele] = [fields[0]]

            line_num += 1
            progress_int = int(line_num / self.num * 100)
            progress_str = "Working progress: " + str(line_num) + '/' + str(self.num)
            self.loadProgress.emit(progress_int, progress_str)
        
        # send result back
        self.trigger.emit(self.pattern, selected_result)

class ProgressBar(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ProgressBar, self).__init__(parent)

        #self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint)
        #self.setWindowFlags(Qt.WindowCloseButtonHint)

        self.resize(350, 100)
        self.setWindowTitle(self.tr("Processing progress"))

        self.TipLabel = QLabel(self.tr("Processing:"))

        self.FeatProgressBar = QtWidgets.QProgressBar(self)
        self.FeatProgressBar.setMinimum(0)
        self.FeatProgressBar.setMaximum(100)
        self.FeatProgressBar.setValue(0)

        TipLayout = QtWidgets.QHBoxLayout()
        TipLayout.addWidget(self.TipLabel)

        FeatLayout = QtWidgets.QHBoxLayout()
        FeatLayout.addWidget(self.FeatProgressBar)

        layout = QtWidgets.QVBoxLayout()
        # layout = QGridLayout()
        layout.addLayout(FeatLayout)
        layout.addLayout(TipLayout)
        self.setLayout(layout)
        self.show()

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QTextEdit{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:18px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:18px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}")
        else:
            pass

    def setValue(self, value):
        self.FeatProgressBar.setValue(value)

    def setLabel(self, label):
        self.TipLabel.setText(label)

    def onCancel(self, event):
        self.close()

    def closeEvent(self, event):
        if self.FeatProgressBar.value() < 100:
            reply = QMessageBox.question(self, u'Close progress bar',u'Are you sure to close the progress bar?\n'
                                                                     u'You will not able to monitor the progress and'
                                                                     u' the program will keep running anyway.',
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.No:
                event.ignore()
            else:
                event.accept()

class VGenesForm(QtWidgets.QMainWindow):
    def __init__(self):  # , parent=None):
        super(VGenesForm, self).__init__()  # parent)
        global VGenesTextWindows
        global DBFilename

        self.ui = Ui_MainWindow()

        self.ui.setupUi(self)

        self.ui.comboBoxSpecies.currentTextChanged.connect(self.on_comboBoxSpecies_editTextChanged)
        self.ui.cboTreeOp1.currentTextChanged.connect(self.TreeviewOptions)
        self.ui.cboTreeOp2.currentTextChanged.connect(self.TreeviewOptions)
        self.ui.cboTreeOp3.currentTextChanged.connect(self.TreeviewOptions)
        self.ui.cboDecorate.currentTextChanged.connect(self.DecoratePeptide)
        self.ui.treeWidget.itemChanged.connect(self.handleChanged)
        self.ui.treeWidget.itemSelectionChanged.connect(self.TreeSelectChanged)
        self.ui.treeWidget.clicked['QModelIndex'].connect(self.treeWidgetClicked)
        self.ui.treeWidget.doubleClicked['QModelIndex'].connect(self.CheckMultiple)
        self.ui.cboReportOptions.currentTextChanged.connect(self.ReportOptions)
        self.ui.cboFindField.currentTextChanged.connect(self.on_cboFindField_currentTextChanged)
        self.ui.tabWidget.currentChanged['int'].connect(self.InitialGraphic)
        self.ui.tabWidgetFig.currentChanged['int'].connect(self.InitialGraphicFig)
        self.ui.pushButtonDraw.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxFigLegend.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxStack.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxStack.clicked.connect(self.enableMoreOptionBar1)
        self.ui.checkBoxY.clicked.connect(self.enableMoreOptionBar2)
        self.ui.checkBoxScatterValueColor.clicked.connect(self.enableMoreOptionScatter)
        self.ui.radioButtonOriginal.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonLog10.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonLog2.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonScale.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxHideNull.clicked.connect(self.GenerateFigure)
        self.ui.pushButtonDownload.clicked.connect(self.downloadFig)
        self.ui.radioButtonTreeMap.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonTree.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonDJ.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonVJ.clicked.connect(self.GenerateFigure)
        self.ui.radioButtonVD.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxLocus.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxGene.clicked.connect(self.GenerateFigure)
        self.ui.checkBoxBarPct.clicked.connect(self.GenerateFigure)
        self.ui.pushButtonNT.clicked.connect(self.makeNTLogo)
        self.ui.pushButtonAA.clicked.connect(self.makeAALogo)
        self.ui.toolButtonIgphyml.clicked.connect(self.loadIgphyml)
        self.ui.toolButtonCloneRaxml.clicked.connect(self.buildCloneTree)
        self.ui.EditLock.clicked.connect(self.ChangeEditMode)
        self.ui.checkBoxAll.stateChanged.connect(self.checkAll)
        self.ui.checkBoxAll1.stateChanged.connect(self.checkAll1)
        self.ui.checkBoxRowSelection.stateChanged.connect(self.selectionMode)
        self.ui.pushButtonRefresh.clicked.connect(self.refreshDB)
        self.ui.pushButtonRefresh1.clicked.connect(self.refreshDB)
        self.ui.SeqTable.clicked.connect(self.table_to_tree_selection)
        self.ui.pushButtonAlter.clicked.connect(self.openAlter)
        self.ui.pushButtonTable.clicked.connect(self.openTableDialog)
        self.ui.listWidgetClone.itemSelectionChanged.connect(self.selectClone)
        self.ui.pushButtonDrawClone.clicked.connect(self.GenerateFigureClone)
        self.ui.checkBoxFigLegendClone.clicked.connect(self.GenerateFigureClone)
        self.ui.checkBoxStackClone.clicked.connect(self.GenerateFigureClone)
        self.ui.pushButtonDownloadClone.clicked.connect(self.downloadFigClone)
        self.ui.pushButtonCheckCloone.clicked.connect(self.checkClone)
        self.ui.listWidgetCloneMember.itemSelectionChanged.connect(self.updateClone)
        self.ui.pushButtonNewickTree.clicked.connect(self.loadNewickTree)
        self.ui.listWidgetAll.itemDoubleClicked.connect(self.addFieldsHeatmap)
        self.ui.listWidgetSelected.itemDoubleClicked.connect(self.delFieldsHeatmap)
        self.ui.pushButtonClear.clicked.connect(self.clearCheck)
        self.ui.pushButtonClear1.clicked.connect(self.clearCheck)
        self.ui.pushButtonMark.clicked.connect(self.markRecords)
        self.ui.pushButtonMark1.clicked.connect(self.markRecords)
        self.ui.radioButtonPNG.clicked.connect(self.setupPNG)
        self.ui.tabWidgetFig.currentChanged['int'].connect(self.disablePNG)
        self.ui.comboBoxTree.currentTextChanged.connect(self.updateCloneTreeInfo)
        self.ui.CopyAA.clicked.connect(self.copySelAA)
        self.ui.CopyDNA.clicked.connect(self.copySelDNA)
        self.ui.pushButtonDeleteThis.clicked.connect(self.deleteThis)
        self.ui.pushButtonDeleteThese.clicked.connect(self.deleteThese)
        self.ui.pushButtonDeleteBatch.clicked.connect(self.deleteBatch)
        self.ui.pushButtonDeleteBad.clicked.connect(self.deleteBad)
        self.ui.pushButtonDeleteAll.clicked.connect(self.deleteAll)
        self.ui.tableWidgetHC.cellClicked.connect(self.matchSelection)
        self.ui.tableWidgetLC.cellClicked.connect(self.matchSelection)
        self.ui.txtFieldSearch.textChanged.connect(self.trimInfo)
        self.ui.checkBoxSHM_Vregion.clicked.connect(self.SHMcheck)
        self.ui.checkBoxSHM_FR1.clicked.connect(self.SHMcheck1)
        self.ui.checkBoxSHM_FR2.clicked.connect(self.SHMcheck1)
        self.ui.checkBoxSHM_FR3.clicked.connect(self.SHMcheck1)
        self.ui.checkBoxSHM_CDR1.clicked.connect(self.SHMcheck1)
        self.ui.checkBoxSHM_CDR2.clicked.connect(self.SHMcheck1)
        self.ui.spinBoxMinCloneSize.valueChanged.connect(self.initial_Clone)
        self.ui.radioButtonHConly.clicked.connect(self.initial_Clone)
        self.ui.tabWidgetClone.currentChanged['int'].connect(self.updateUIclone)
        self.ui.rdoAll.clicked.connect(self.on_cboFindField_currentTextChanged)
        self.ui.rdoLocal.clicked.connect(self.on_cboFindField_currentTextChanged)
        self.ui.pushButtonUserList.clicked.connect(self.openUserList)
        self.ui.radioButtonEnableTree.clicked.connect(self.enableTree)
        # self.ui.listViewSpecificity.highlighted['QString'].connect(self.SpecSet)
        # self.ui.listViewSpecificity.mouseDoubleClickEvent.connect(self.SpecSet)

        self.threadpool = QThreadPool()

        self.lastTab = 1
        self.ui.cboTreeOp1.id = 'TreeOp1'
        self.ui.cboTreeOp2.id = 'TreeOp2'
        self.ui.cboTreeOp3.id = 'TreeOp3'

        self.ui.lcdNumber_max.display(self.ui.horizontalScrollBar.maximum())
        self.ui.dial.setMaximum(self.ui.horizontalScrollBar.maximum())

        self.TextEdit = VGenesTextMain()
        # self.VGProgress = VGenesProgressBar()
        # self.ImportOptions =ImportDialogue()
        self.ImportOptions = ImportDataDialogue()
        self.AlterWindow = AlterDielog()
        self.AlterWindow.refreshDBSignal.connect(self.refreshDB)
        self.AlterWindow.intial = True
        self.AlterWindow.ui.pushButtonSave.setEnabled(False)

        self.ui.HTMLview = ResizeWidget(self)
        self.ui.gridLayoutStat.addWidget(self.ui.HTMLview, 0, 0)
        self.ui.HTMLview.resizeSignal.connect(self.resizeHTML)

        #self.ui.F = MyFigure(width=3, height=3, dpi=160)
        self.ui.figure = plt.figure()
        self.ui.F = FigureCanvas(self.ui.figure)
        self.ui.gridLayoutStat1.addWidget(self.ui.F, 0, 1)
        self.ui.F.setVisible(False)
        self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])

        self.ui.HTMLviewClone = ResizeWidget(self)
        self.ui.gridLayoutClone.addWidget(self.ui.HTMLviewClone)
        self.ui.HTMLviewClone.resizeSignal.connect(self.resizeHTMLClone)

        self.ui.HTMLviewSHM = ResizeWidget(self)
        self.ui.gridLayoutSHM.addWidget(self.ui.HTMLviewSHM)
        self.ui.HTMLviewSHM.resizeSignal.connect(self.resizeHTMLSHM)

        self.ui.HTMLViewProtein = QWebEngineView()
        self.ui.gridLayoutProtein.addWidget(self.ui.HTMLViewProtein)

        self.AntibodyCandidates = []
        self.clickedTable = ''

        self.SamplingType = ''
        self.SamplingRes = []

        self.enableEdit = False
        self.HeatmapList = []

        # save all checked records name, this is the only way I know to improve our DB page without changing the SQL table design
        self.CheckedRecords = []
        self.ui.SeqTable.pageSize = 20
        self.ui.SeqTable.EditTag = False

        self.HCLCDialog = HCLCDialog()

        self.initialHCLCTable()

        if system() == 'Windows':
            # set style for windows
            self.setStyleSheet("QLabel{font-size:18px;}"
                               "QComboBox{font-size:18px;}"
                               "QPushButton{font-size:18px;}"
                               "QTabWidget{font-size:18px;}"
                               "QCommandLinkButton{font-size:10px;}"
                               "QRadioButton{font-size:18px;}"
                               "QPlainTextEdit{font-size:15px;}"
                               "QCheckBox{font-size:18px;}"
                               "QTableWidget{font-size:18px;}"
                               "QToolBar{font-size:18px;}"
                               "QMenuBar{font-size:18px;}"
                               "QMenu{font-size:18px;}"
                               "QAction{font-size:18px;}"
                               "QMainWindow{font-size:18px;}"
                               "QLineEdit{font-size:14px;}"
                               "QTreeWidget{font-size:18px;}"
                               "QSpinBox{font-size:18px;}")
        else:
            pass

    @pyqtSlot()
    def on_actionReverse_Current_Selection_triggered(self):
        # notice when DB is huge
        if self.ui.lcdNumber_max.value() > 10000:
            question = 'Your dataset is huge, doing this may take very long time, Do you still want to do it?\n'
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)
            if answer != 'Yes':
                return

        # updated selected list
        SQLStatement = 'SELECT SeqName FROM vgenesdb'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) == 0:
            return
        
        allRecords = set([ele[0] for ele in DataIn])
        checkedRecords = set(self.CheckedRecords)

        self.CheckedRecords = list(allRecords - checkedRecords)
        # refersh DB table
        if self.ui.SeqTable.rowCount() > 0:
            self.ui.pushButtonRefresh.click()

        # update tree (if active)
        if self.ui.treeWidget.isEnabled():
            self.clearTreeChecks()
            for cur_name in self.CheckedRecords:
                found = self.ui.treeWidget.findItems(cur_name, Qt.MatchRecursive, 0)
                if len(found) > 0:
                    for item in found:
                        item.setCheckState(0, Qt.Checked)

    def enableTree(self):
        if self.ui.radioButtonEnableTree.isChecked():
            self.ui.treeWidget.setEnabled(True)
            self.ui.groupBox_2.setEnabled(True)
            self.on_btnUpdateTree_clicked()
        else:
            self.ui.treeWidget.clear()
            self.ui.treeWidget.setEnabled(False)
            self.ui.groupBox_2.setEnabled(False)


    def markRecords(self):
        if len(self.CheckedRecords) == 0:
            Msg = 'You have not checked any records yet!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.myMarkRecordsDialog = MarkRecordsDialog()
        fields_name = [""] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myMarkRecordsDialog.ui.comboBox.addItems(fields_name)
        self.myMarkRecordsDialog.ui.lcdNumber.display(len(self.CheckedRecords))
        self.myMarkRecordsDialog.BatchSignal.connect(self.updateValueForSelection)
        self.myMarkRecordsDialog.show()

    def updateValueForSelection(self, filed_name, given_value):
        WHEREStatement = 'WHERE SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'
        SQLStatement = 'UPDATE vgenesDB SET ' + filed_name + ' = "' + given_value + '" ' + WHEREStatement
        VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

        Msg = 'Records updated successfully!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def openUserList(self):
        self.myUserListDialog = UserListDialog()
        fields_name = [""] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myUserListDialog.ui.comboBox.addItems(fields_name)
        self.myUserListDialog.BatchSignal.connect(self.updateSelectionFromDialog)
        self.myUserListDialog.show()

    def ShowProteinSimilarResults(self, result):
        ScoreRank = result[1]
        Error_info = result[2]
        
        # display error log
        ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
        with open(ErlogFile, 'w') as currentFile:
            currentFile.write('Running finished!\n')
            currentFile.write('\nThe following records can not be processed:\n')
            for record in Error_info:
                err_string = record[0] + '\n' + record[1] + '\n'
                currentFile.write(err_string)
        self.ShowVGenesText(ErlogFile)

        self.myProteinSimilarResultDialog = ProteinSimilarResultDialog()

        self.myProteinSimilarResultDialog.DBFilename = DBFilename
        self.myProteinSimilarResultDialog.ui.lineEditTargetName.setText(result[3])
        self.myProteinSimilarResultDialog.windowSize = result[4]
        self.myProteinSimilarResultDialog.ui.lineEditWindowSize.setText(str(self.myProteinSimilarResultDialog.windowSize[ScoreRank.index.values[0]]))

        # create a tab widget
        self.myProteinSimilarResultDialog.ui.tabWidget = QtWidgets.QTabWidget()
        self.myProteinSimilarResultDialog.ui.tabs = {}
        self.myProteinSimilarResultDialog.ui.tables = {}
        # recolve the results and add data and tabs
        SequenceNames = ScoreRank.columns.values
        for index in ScoreRank.index.values:
            # create a tab and add tab to tab widget
            self.myProteinSimilarResultDialog.ui.tabs[index] = QtWidgets.QWidget()
            self.myProteinSimilarResultDialog.ui.tabWidget.addTab(self.myProteinSimilarResultDialog.ui.tabs[index], index)
            # create table
            self.myProteinSimilarResultDialog.ui.tabs[index].layout = QtWidgets.QVBoxLayout(self)
            self.myProteinSimilarResultDialog.ui.tables[index] = QtWidgets.QTableWidget()

            horizontalHeader = ['Selected','Seq Name','Score (the lower the better)']
            self.myProteinSimilarResultDialog.ui.tables[index].setRowCount(len(SequenceNames))
            self.myProteinSimilarResultDialog.ui.tables[index].setColumnCount(len(horizontalHeader))
            self.myProteinSimilarResultDialog.ui.tables[index].setHorizontalHeaderLabels(horizontalHeader)
            self.myProteinSimilarResultDialog.ui.tables[index].horizontalHeader().setStretchLastSection(True)
            self.myProteinSimilarResultDialog.ui.tables[index].setSelectionMode(QAbstractItemView.SingleSelection)
            self.myProteinSimilarResultDialog.ui.tables[index].setSelectionBehavior(QAbstractItemView.SelectRows)

            currDataSlice = ScoreRank.loc[index].sort_values(ascending=True)
            row_index = 0
            for Seq in currDataSlice.index:
                unit1 = QtWidgets.QCheckBox()
                unit2 = QTableWidgetItem(Seq)
                unit3 = QTableWidgetItem(str(currDataSlice[Seq]))

                self.myProteinSimilarResultDialog.ui.tables[index].setCellWidget(row_index, 0, unit1)
                self.myProteinSimilarResultDialog.ui.tables[index].setItem(row_index, 1, unit2)
                self.myProteinSimilarResultDialog.ui.tables[index].setItem(row_index, 2, unit3)
                row_index += 1

            self.myProteinSimilarResultDialog.ui.tables[index].currentCellChanged.connect(self.myProteinSimilarResultDialog.updateSelection)
            # add table to this tab
            self.myProteinSimilarResultDialog.ui.tabs[index].layout.addWidget(self.myProteinSimilarResultDialog.ui.tables[index])
            #
            self.myProteinSimilarResultDialog.ui.tabs[index].setLayout(self.myProteinSimilarResultDialog.ui.tabs[index].layout)
        self.myProteinSimilarResultDialog.ui.tabWidget.currentChanged.connect(self.myProteinSimilarResultDialog.updateWindowSize)

        # add the tab widget to the main layout
        self.myProteinSimilarResultDialog.ui.gridLayoutMain.addWidget(self.myProteinSimilarResultDialog.ui.tabWidget)
        # bind signals
        self.myProteinSimilarResultDialog.ProteinSimilarUpdateSelectionSignal.connect(self.select_tree_by_name)

        self.myProteinSimilarResultDialog.show()

    def updateUIclone(self):
        if self.ui.tabWidgetClone.currentIndex() == 3:
            self.ui.pushButtonDrawClone.setEnabled(False)
            self.ui.pushButtonDownloadClone.setEnabled(False)
            self.ui.checkBoxFigLegendClone.setEnabled(False)
        elif self.ui.tabWidgetClone.currentIndex() == 4:
            self.ui.pushButtonDrawClone.setEnabled(False)
            self.ui.pushButtonDownloadClone.setEnabled(False)
            self.ui.checkBoxFigLegendClone.setEnabled(False)
        else:
            self.ui.pushButtonDrawClone.setEnabled(True)
            self.ui.pushButtonDownloadClone.setEnabled(True)
            self.ui.checkBoxFigLegendClone.setEnabled(True)

    def enableMoreOptionScatter(self):
        if self.ui.checkBoxScatterValueColor.isChecked():
            self.ui.label_15.setEnabled(True)
            self.ui.lineEditScatterMin.setEnabled(True)
            self.ui.lineEditScatterMax.setEnabled(True)
        else:
            self.ui.label_15.setEnabled(False)
            self.ui.lineEditScatterMin.setEnabled(False)
            self.ui.lineEditScatterMax.setEnabled(False)

    def enableMoreOptionBar1(self):
        if self.ui.checkBoxStack.isChecked():
            self.ui.checkBoxBarPct.setEnabled(True)
        else:
            self.ui.checkBoxBarPct.setEnabled(False)

    def enableMoreOptionBar2(self):
        if self.ui.checkBoxY.isChecked():
            self.ui.checkBoxBarPct.setEnabled(False)
            self.ui.checkBoxStack.setEnabled(False)
        else:
            self.ui.checkBoxBarPct.setEnabled(True)
            self.ui.checkBoxStack.setEnabled(True)

    @pyqtSlot()
    def on_pushButtonRemoveFromClone_clicked(self):
        if self.ui.radioButtonEnableEditClone.isChecked():
            SeqName = self.ui.listWidgetCloneMember.currentItem().text()
            CurVal = '0'
            col_name = 'ClonalPool'
            self.UpdateSeq(SeqName, CurVal, col_name)

            self.ui.listWidgetCloneMember.takeItem(self.ui.listWidgetCloneMember.currentRow())
            Msg = SeqName + ' has been removed from current clone!'
        else:
            Msg = 'Please enable edit first (check the radio button)!'

        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def on_radioButtonEnableEditClone_clicked(self):
        if self.ui.radioButtonEnableEditClone.isChecked():
            self.ui.pushButtonRemoveFromClone.setEnabled(True)
        else:
            self.ui.pushButtonRemoveFromClone.setEnabled(False)

    def on_pushButtonHCLCTable_clicked(self):
        if self.HCLCDialog.isVisible() == True:
            pass
        else:
            self.loadHCLCtable('')
            self.HCLCDialog.show()

    def loadHCLCtable(self, SeqName):
        if SeqName != '':
            text = 'Details of ' + SeqName
            # fill table
            # clear table if table exists
            if self.HCLCDialog.ui.tableWidget.rowCount() > 0:
                self.HCLCDialog.ui.tableWidget.setRowCount(0)
                self.HCLCDialog.ui.tableWidget.setColumnCount(0)

            # fetch data for current record
            SQLStatement = 'SELECT * FROM vgenesdb WHERE SeqName = "' + SeqName + '"'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if len(DataIn) == 0:
                return
            Records = DataIn[0]
            # make table
            horizontalHeader = ['Field', 'Field Name', 'Value']
            num_row = len(FieldList)
            num_col = len(horizontalHeader)
            self.HCLCDialog.ui.tableWidget.setRowCount(num_row)
            self.HCLCDialog.ui.tableWidget.setColumnCount(num_col)
            self.HCLCDialog.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
            self.HCLCDialog.ui.tableWidget.horizontalHeader().setStretchLastSection(True)
            self.ui.SeqTable.horizontalHeader().resizeSection(0, 12)
            self.ui.SeqTable.horizontalHeader().resizeSection(1, 18)

            for row_index in range(num_row):
                print(str(row_index))
                unit1 = QTableWidgetItem(FieldList[row_index])
                unit1.setFlags(Qt.ItemIsEnabled)
                unit2 = QTableWidgetItem(RealNameList[row_index])
                unit2.setFlags(Qt.ItemIsEnabled)
                unit3 = QTableWidgetItem(str(Records[row_index]))
                if row_index == 0:
                    unit3.setFlags(Qt.ItemIsEnabled)

                self.HCLCDialog.ui.tableWidget.setItem(row_index, 0, unit1)
                self.HCLCDialog.ui.tableWidget.setItem(row_index, 1, unit2)
                self.HCLCDialog.ui.tableWidget.setItem(row_index, 2, unit3)

            self.HCLCDialog.ui.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
            self.HCLCDialog.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectItems)

            self.HCLCDialog.ui.label.setText(text)
        else:
            if len(self.AntibodyCandidates) > 0:
                try:
                    # find current records in HC table
                    if self.clickedTable == 'HC':
                        row = self.ui.tableWidgetHC.currentRow()
                        SeqName = self.ui.tableWidgetHC.item(row, 0).text()
                    else:
                        row = self.ui.tableWidgetLC.currentRow()
                        SeqName = self.ui.tableWidgetLC.item(row, 0).text()

                    # update title
                    if SeqName == '' or SeqName == None:
                        text = 'Please click any records from your HC or LC list to see their details!'
                    else:
                        text = 'Details of ' + SeqName

                        # fill table
                        # clear table if table exists
                        if self.HCLCDialog.ui.tableWidget.rowCount() > 0:
                            self.HCLCDialog.ui.tableWidget.setRowCount(0)
                            self.HCLCDialog.ui.tableWidget.setColumnCount(0)

                        # fetch data for current record
                        SQLStatement = 'SELECT * FROM vgenesdb WHERE SeqName = "' + SeqName + '"'
                        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                        if len(DataIn) == 0:
                            return
                        Records = DataIn[0]
                        # make table
                        horizontalHeader = ['Field', 'Field Name', 'Value']
                        num_row = len(FieldList)
                        num_col = len(horizontalHeader)
                        self.HCLCDialog.ui.tableWidget.setRowCount(num_row)
                        self.HCLCDialog.ui.tableWidget.setColumnCount(num_col)
                        self.HCLCDialog.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
                        self.HCLCDialog.ui.tableWidget.horizontalHeader().setStretchLastSection(True)
                        self.ui.SeqTable.horizontalHeader().resizeSection(0, 12)
                        self.ui.SeqTable.horizontalHeader().resizeSection(1, 18)

                        for row_index in range(num_row):
                            print(str(row_index))
                            unit1 = QTableWidgetItem(FieldList[row_index])
                            unit1.setFlags(Qt.ItemIsEnabled)
                            unit2 = QTableWidgetItem(RealNameList[row_index])
                            unit2.setFlags(Qt.ItemIsEnabled)
                            unit3 = QTableWidgetItem(str(Records[row_index]))
                            if row_index == 0:
                                unit3.setFlags(Qt.ItemIsEnabled)

                            self.HCLCDialog.ui.tableWidget.setItem(row_index, 0, unit1)
                            self.HCLCDialog.ui.tableWidget.setItem(row_index, 1, unit2)
                            self.HCLCDialog.ui.tableWidget.setItem(row_index, 2, unit3)

                        self.HCLCDialog.ui.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
                        self.HCLCDialog.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectItems)

                    self.HCLCDialog.ui.label.setText(text)
                except:
                    text = 'Please click any records from your HC or LC list to see their details!'
                    self.HCLCDialog.ui.label.setText(text)
            else:
                text = 'Please click any records from your HC or LC list to see their details!'
                self.HCLCDialog.ui.label.setText(text)

    @pyqtSlot()
    def on_actionPatternSearch_triggered(self):
        self.myPatternSearchDialog = PatternSearchDialog()
        
        SQLStatement = "SELECT DISTINCT VLocus FROM vgenesDB"
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        VList = [x[0] for x in DataIn]
        VList.sort()
        self.myPatternSearchDialog.ui.comboBoxVgene.loadItems(VList)

        SQLStatement = "SELECT DISTINCT DLocus FROM vgenesDB"
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        DList = [x[0] for x in DataIn]
        try:
            DList.remove('')
        except:
            pass
        DList.sort()
        self.myPatternSearchDialog.ui.comboBoxDgene.loadItems(DList)

        SQLStatement = "SELECT DISTINCT JLocus FROM vgenesDB"
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        JList = [x[0] for x in DataIn]
        JList.sort()
        self.myPatternSearchDialog.ui.comboBoxJgene.loadItems(JList)

        self.myPatternSearchDialog.InfoSignal.connect(self.SearchPattern)
        
        self.myPatternSearchDialog.show()

    def SearchPattern(self, pattern, region, vlist, dlist, jlist):
        WHEREStatement = ' WHERE 1'
        # search range
        and_used = False
        if len(vlist) + len(dlist) + len(jlist) > 0:
            WHEREStatement = ' WHERE '
            if len(vlist) > 0:
                WHEREStatement += 'Vlocus IN ("' + '","'.join(vlist) + '")'
                and_used = True
            if len(dlist) > 0:
                if and_used:
                    WHEREStatement += ' AND Dlocus IN ("' + '","'.join(dlist) + '")'
                else:
                    WHEREStatement += 'Dlocus IN ("' + '","'.join(dlist) + '")'
                    and_used = True
            if len(jlist) > 0:
                if and_used:
                    WHEREStatement += ' AND Jlocus IN ("' + '","'.join(jlist) + '")'
                else:
                    WHEREStatement += 'Jlocus IN ("' + '","'.join(jlist) + '")'
        
        # fetch sequence
        SQLStatement = "SELECT SeqName,Sequence,Blank20,Species FROM vgenesDB" + WHEREStatement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) == 0:
            Msg = 'No records were found under your searching criteria!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # write to fasta
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        fasta_path = os.path.join(temp_folder, time_stamp + '.fasta')
        if SequenceCheck(DataIn[0][2], 'nt') == 'none':
            index = 2
        else:
            index = 1
        with open(fasta_path, 'w') as writeFasta:
            for record in DataIn:
                writeFasta.write('>' + record[0] + '\n')
                writeFasta.write(record[index] + '\n')
        species = DataIn[0][3]
        
        # open an thread to identify pattern
        self.PatternworkThread = PatternThread(self)
        self.PatternworkThread.species = species
        self.PatternworkThread.fasta = fasta_path
        self.PatternworkThread.pattern = pattern
        self.PatternworkThread.region = region
        self.PatternworkThread.num = len(DataIn)
        self.PatternworkThread.start()

        self.PatternworkThread.trigger.connect(self.patternResult)
        self.PatternworkThread.loadProgress.connect(self.progressLabel)
        self.PatternworkThread.badNews.connect(self.errorMsgFun)

        self.progress = ProgressBar(self)
        self.progress.setLabel('Pattern searching ...')
        self.progress.show()

    def patternResult(self, pattern, selected_result):
        # close progress bar
        try:
            self.progress.close()
        except:
            pass
        
        # if no results
        if len(selected_result.keys()) == 0:
            Msg = 'We did not find any sequence that have this pattern!'
            self.errorMsgFun(Msg)
            return
        
        # show results on the UI
        self.myPatternSearchResultDialog = PatternSearchResultDialog()
        self.myPatternSearchResultDialog.ui.lineEdit.setText(pattern)

        # create a tab widget
        self.myPatternSearchResultDialog.ui.tabWidget = QtWidgets.QTabWidget()
        self.myPatternSearchResultDialog.ui.tabs = {}
        self.myPatternSearchResultDialog.ui.tables = {}
        # recolve the results and add data and tabs
        for region in selected_result.keys():
            # create a tab and add tab to tab widget
            self.myPatternSearchResultDialog.ui.tabs[region] = QtWidgets.QWidget()
            self.myPatternSearchResultDialog.ui.tabWidget.addTab(self.myPatternSearchResultDialog.ui.tabs[region], region)
            # create table
            self.myPatternSearchResultDialog.ui.tabs[region].layout = QtWidgets.QVBoxLayout(self)
            self.myPatternSearchResultDialog.ui.tables[region] = QtWidgets.QTableWidget()

            horizontalHeader = ['Selected', 'Seq Name']
            self.myPatternSearchResultDialog.ui.tables[region].setRowCount(len(selected_result[region]))
            self.myPatternSearchResultDialog.ui.tables[region].setColumnCount(len(horizontalHeader))
            self.myPatternSearchResultDialog.ui.tables[region].setHorizontalHeaderLabels(horizontalHeader)
            self.myPatternSearchResultDialog.ui.tables[region].horizontalHeader().setStretchLastSection(True)
            self.myPatternSearchResultDialog.ui.tables[region].setSelectionMode(QAbstractItemView.SingleSelection)
            self.myPatternSearchResultDialog.ui.tables[region].setSelectionBehavior(QAbstractItemView.SelectRows)

            row_index = 0
            for Seq in selected_result[region]:
                unit1 = QtWidgets.QCheckBox()
                unit2 = QTableWidgetItem(Seq)
                self.myPatternSearchResultDialog.ui.tables[region].setCellWidget(row_index, 0, unit1)
                self.myPatternSearchResultDialog.ui.tables[region].setItem(row_index, 1, unit2)
                row_index += 1
            self.myPatternSearchResultDialog.ui.tables[region].currentCellChanged.connect(self.myPatternSearchResultDialog.updateSelection)
            # add table to this tab
            self.myPatternSearchResultDialog.ui.tabs[region].layout.addWidget(self.myPatternSearchResultDialog.ui.tables[region])
            self.myPatternSearchResultDialog.ui.tabs[region].setLayout(self.myPatternSearchResultDialog.ui.tabs[region].layout)

        # add the tab widget to the main layout
        self.myPatternSearchResultDialog.ui.gridLayoutMain.addWidget(self.myPatternSearchResultDialog.ui.tabWidget)
        # bind signals
        self.myPatternSearchResultDialog.ProteinSimilarUpdateSelectionSignal.connect(self.select_tree_by_name)
        self.myPatternSearchResultDialog.checkSignal.connect(self.updateSelectionFromDialog)
        self.myPatternSearchResultDialog.show()

    def errorMsgFun(self, Msg):
        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_actionTestMutMap_triggered(self):
        # test something
        import pyqtgraph.examples
        pyqtgraph.examples.run()
        return
        # fetch data
        cur_name = self.ui.txtName.toPlainText()
        WHEREStatement = 'WHERE SeqName IN ("' + cur_name + '")'
        field = 'SeqName,Sequence,FR1From,FR1To,CDR1From,CDR1To,FR2From,FR2To,CDR2From,CDR2To,FR3From,FR3To,CDR3beg,CDR3end,Jend,GermlineSequence,Blank7'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + WHEREStatement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        DataSet = []
        for item in DataIn:
            SeqName = item[0]
            Sequence = item[1]
            SeqFrom = int(item[2])
            SeqTo = int(item[14])
            Sequence = Sequence[SeqFrom - 1:SeqTo]  # only keep V(D)J section
            Sequence = Sequence.upper()
            EachIn = (
                SeqName, Sequence, item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10],
                item[11], item[12], item[13], item[14], item[15], item[16])
            DataSet.append(EachIn)

        # AID targeting
        AIDres = MutMap(DataSet[0][1])

        # make HTML
        html_file = AlignSequencesHTMLAID(AIDres, DataSet)
        if html_file[0] == 'W':
            QMessageBox.warning(self, 'Warning', html_file, QMessageBox.Ok, QMessageBox.Ok)
            return
        # delete close window objects
        del_list = []
        for id, obj in VGenesTextWindows.items():
            if obj.isVisible() == False:
                del_list.append(id)
        for id in del_list:
            del_obj = VGenesTextWindows.pop(id)

        # display
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        # view.load(QUrl("file://" + html_file))
        url = QUrl.fromLocalFile(str(html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    @pyqtSlot()
    def on_pushButtonCircos_clicked(self):
        # pre-check
        if len(self.AntibodyCandidates) > 0:
            bad_count = self.detectBad()
            if bad_count > 0:
                Msg = 'We found some improper paired HCs and LCs, and have highlighted them in red!\n' \
                      'Please check and remove those records then re-try!\n'
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
        else:
            Msg = 'You do not have any records in current antibody candidate list. ' \
                  'Please add some records into your antibody candidate list and then re-try!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # fetch data
        barcodes = []
        for index in range(self.ui.tableWidgetHC.rowCount()):
            hc_barcode = self.ui.tableWidgetHC.item(index, 8).text()
            barcodes.append(hc_barcode)
        data_field = self.ui.comboBoxHCLC.currentText()
        ## HC
        WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(barcodes) + '") AND `GeneType` IN ("Heavy","Beta","Delta") ORDER BY Blank10'
        SQLStatement = 'SELECT Blank10,' + data_field + ' FROM vgenesdb' + WHEREStatement
        DataInHC = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        ## LC
        WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(barcodes) + '") AND `GeneType` NOT IN ("Heavy","Beta","Delta") ORDER BY Blank10'
        SQLStatement = 'SELECT Blank10,' + data_field + ' FROM vgenesdb' + WHEREStatement
        DataInLC = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        Res = []
        for index in range(len(DataInHC)):
            element = (DataInHC[index][1], DataInLC[index][1])
            Res.append(element)

        # reformat data
        gene_names, reshaped_data, HC_names, LC_names = dataReshape(Res)
        step = 3
        hc_len = (360 - len(gene_names) * step) / 2 + (len(HC_names) - 1) * step
        lc_len = (360 - len(gene_names) * step) / 2 + (len(LC_names) - 1) * step
        # hc_len = 178 + (len(HC_names) - 1) * step
        # lc_len = 178 + (len(LC_names) - 1) * step

        # generate HTML
        data_file = os.path.join(temp_folder, 'CircosData.js')
        out_file_handle = open(data_file, 'w')

        out_file_handle.write('var NGCircosGenome = [[["HC",' + str(hc_len) + '],["LC",' + str(lc_len) + '],]];\n\n')
        out_file_handle.write('var CHORD1 = [ "CHORD1" , {\n')
        out_file_handle.write('			CHORDinnerRadius: 270,\n')
        out_file_handle.write('			CHORDouterRadius: 275,\n')
        out_file_handle.write('			CHORDFillOpacity:0.67,\n')
        out_file_handle.write('			CHORDStrokeColor: "black",\n')
        out_file_handle.write('			CHORDStrokeWidth: "1px",\n')
        out_file_handle.write('			CHORDPadding:0.06,\n')
        out_file_handle.write('			CHORDAutoFillColor: true,\n')
        out_file_handle.write('			CHORDouterARC:true,\n')
        out_file_handle.write('			CHORDouterARCAutoColor:true,\n')
        out_file_handle.write('			CHORDouterARCText:true,\n')
        out_file_handle.write('			} , [\n')
        # gene names
        gene_names_str = '[ "' + '","'.join(gene_names) + '"],\n'
        out_file_handle.write(gene_names_str)
        # data matrix
        data_matrix_str = '['
        for i in range(len(reshaped_data)):
            str_line = [str(ele) for ele in reshaped_data[i]]
            data_matrix_str += '[' + ','.join(str_line) + '],\n'
        data_matrix_str += ']\n]];'
        out_file_handle.write(data_matrix_str)
        # legend
        out_file_handle.write('var LEGEND1 = [ "LEGEND1" , {\n')
        out_file_handle.write('			x: 300,\n')
        out_file_handle.write('			y: -230,\n')
        out_file_handle.write('			title: " ",\n')
        out_file_handle.write('			titleSize: 20,\n')
        out_file_handle.write('			titleWeight: "bold",\n')
        out_file_handle.write('			GapBetweenGraphicText:5,\n')
        out_file_handle.write('			GapBetweenLines:20\n')
        out_file_handle.write('			} , [\n')
        HC_label = '				{type: "circle", color:"#1E77B4",opacity:"1.0",circleSize:"8",text: "HC V locus", textSize: "20",textWeight:"normal"},\n'
        LC_label = '				{type: "circle", color:"#2AA02B",opacity:"1.0",circleSize:"8",text: "LC V locus", textSize: "20",textWeight:"normal"},\n'
        out_file_handle.write(HC_label)
        out_file_handle.write(LC_label)
        out_file_handle.write('			]];\n')

        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        template_file = os.path.join(working_prefix, 'Data', 'template_circos.html')
        out_html_file = os.path.join(temp_folder, time_stamp + '.html')
        shutil.copyfile(template_file, out_html_file)

        # display HTML
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        url = QUrl.fromLocalFile(str(out_html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

        # build qweb channel
        channel = QWebChannel(view.page())
        my_object = MyObjectCls(view)
        channel.registerObject('connection', my_object)
        view.page().setWebChannel(channel)
        my_object.downloadFigSignal.connect(self.downloadSVG)

    @pyqtSlot()
    def on_actionRecordToNew_triggered(self):
        if len(self.CheckedRecords) == 0:
            msg = 'You did not check any record!'
            QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        Pathname = saveFile(self.parent(), 'db')
        if Pathname == None:
            return

        tmp_path, tmp_file = os.path.split(Pathname)
        if os.access(tmp_path, os.W_OK):
            pass
        else:
            msg = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.CopyRecord_Thread = CopyRecord_thread(self)
        self.CopyRecord_Thread.DBFilename = DBFilename
        self.CopyRecord_Thread.Pathname = Pathname
        self.CopyRecord_Thread.checkRecords = self.CheckedRecords
        self.CopyRecord_Thread.HCLC_progress.connect(self.result_display)
        self.CopyRecord_Thread.HCLC_finish.connect(self.HCLC_finish_process)
        self.CopyRecord_Thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()


    @pyqtSlot()
    def on_actionPairToNewDB_triggered(self):
        Pathname = saveFile(self.parent(), 'db')
        if Pathname == None:
            return

        tmp_path, tmp_file = os.path.split(Pathname)
        if os.access(tmp_path, os.W_OK):
            pass
        else:
            msg = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        if self.ui.checkBoxAll.isChecked():
            listItems = []
        else:
            #listItems = self.getTreeCheckedChild()
            listItems = self.CheckedRecords
            if len(listItems) == 0:
                pass
            else:
                mode = 1
                msg = 'You selected part of records, will only identify HC/LC pairs for your selected records!'
                QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)

        self.HCLC_Thread = HCLC_thread(self)
        self.HCLC_Thread.DBFilename = DBFilename
        self.HCLC_Thread.Pathname = Pathname
        self.HCLC_Thread.checkRecords = listItems
        self.HCLC_Thread.HCLC_progress.connect(self.result_display)
        self.HCLC_Thread.HCLC_finish.connect(self.HCLC_finish_process)
        self.HCLC_Thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_pushButtonHeatmap_clicked(self):
        # pre-check
        if len(self.AntibodyCandidates) > 0:
            bad_count = self.detectBad()
            if bad_count > 0:
                Msg = 'We found some improper paired HCs and LCs, and have highlighted them in red!\n' \
                      'Please check and remove those records then re-try!\n'
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
        else:
            Msg = 'You do not have any records in current antibody candidate list. ' \
                  'Please add some records into your antibody candidate list and then re-try!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # fetch data
        barcodes = []
        for index in range(self.ui.tableWidgetHC.rowCount()):
            hc_barcode = self.ui.tableWidgetHC.item(index, 8).text()
            barcodes.append(hc_barcode)
        data_field = self.ui.comboBoxHCLC.currentText()
        ## HC
        WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(barcodes) + '") AND `GeneType` IN ("Heavy","Beta","Delta") ORDER BY Blank10'
        SQLStatement = 'SELECT Blank10,' + data_field + ' FROM vgenesdb' + WHEREStatement
        DataInHC = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        ## LC
        WHEREStatement = ' WHERE Blank10 IN ("' + '","'.join(barcodes) + '") AND `GeneType` NOT IN ("Heavy","Beta","Delta") ORDER BY Blank10'
        SQLStatement = 'SELECT Blank10,' + data_field + ' FROM vgenesdb' + WHEREStatement
        DataInLC = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        Res = []
        for index in range(len(DataInHC)):
            element = (DataInHC[index][1], DataInLC[index][1])
            Res.append(element)

        # reformat data
        df = pd.DataFrame(Res, columns=['HC', 'LC'])
        gp = df.groupby(by=['HC', 'LC'])
        newdf = gp.size()
        newdf = newdf.reset_index(name='times')

        xaxis_data = []
        yaxis_data = []
        my_dict = dict()

        for index in range(len(newdf)):
            cur_a = newdf['HC'][index]
            cur_b = newdf['LC'][index]
            cur_count = newdf['times'][index]
            if cur_a not in xaxis_data:
                xaxis_data.append(cur_a)
            if cur_b not in yaxis_data:
                yaxis_data.append(cur_b)

            index_a = xaxis_data.index(cur_a)
            index_b = yaxis_data.index(cur_b)
            name = str(index_a) + '|' + str(index_b)
            my_dict[name] = cur_count

        data = []
        min_value = 0
        max_value = 0
        for i in range(len(xaxis_data)):
            for j in range(len(yaxis_data)):
                name = str(i) + '|' + str(j)
                if name in my_dict.keys():
                    num = int(my_dict[name].astype(numpy.int32))
                    unit = [i, j, num]
                    if num > max_value:
                        max_value = num
                else:
                    unit = [i, j, 0]
                data.append(unit)

        # render HTML
        my_pyecharts = (
            HeatMap(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
            .add_xaxis(
                xaxis_data,
            )
            .add_yaxis(
                "My data selection",
                yaxis_data,
                data,
                label_opts=opts.LabelOpts(is_show=False, position="inside"),
            )
            .set_series_opts()
            .set_global_opts(
                title_opts=opts.TitleOpts(title="HeatMap"),
                tooltip_opts=opts.TooltipOpts(
                    formatter=JsCode("""
                                    function(params) {
                                        mydata = params.data;
                                        return Labels[0] + ': ' + XdataName[mydata[0]] + '<br>' + Labels[1] + ': ' + YdataName[mydata[1]] + '<br>Count: ' + mydata[2];
                                    }	
                                """)
                ),
                visualmap_opts=opts.VisualMapOpts(min_=min_value, max_=max_value, range_color=['#ffffcc', '#006699']),
                xaxis_opts=opts.AxisOpts(
                    type_="category",
                    axislabel_opts=opts.LabelOpts(rotate=-45, interval=0),
                    splitarea_opts=opts.SplitAreaOpts(
                        is_show=True, areastyle_opts=opts.AreaStyleOpts(opacity=1)
                    ),
                ),
            )
        )
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        html_path = os.path.join(temp_folder, time_stamp + '.html')
        my_pyecharts.render(path=html_path)

        # modify HTML
        file_handle = open(html_path, 'r')
        lines = file_handle.readlines()
        file_handle.close()
        ## edit js line
        js_line = '<script type="text/javascript" src="' + \
                  os.path.join(js_folder, 'echarts.js') + '"></script>' + \
                  '<script src="' + os.path.join(js_folder, 'jquery.js') + '"></script>' + \
                  '<script src="qrc:///qtwebchannel/qwebchannel.js"></script>' + \
                  '<style>.download{width:160px;height:25px;border-width:0px;border-radius:3px;background:#1E90FF;cursor:pointer;outline:none;color:white;font-size:17px;}.download:hover{background:#5599FF;}</style>'
        SeqdataLine = '<script>XdataName=["'
        SeqdataLine += '","'.join(xaxis_data)
        SeqdataLine += '"]</script>\n'
        SeqdataLine += '<script>YdataName=["'
        SeqdataLine += '","'.join(yaxis_data)
        SeqdataLine += '"]</script>\n'
        SeqdataLine += '<script>Labels=["' + 'HC ' + data_field + '","' + 'LC ' + data_field + '"]</script>\n'
        lines[5] = js_line + "\n" + SeqdataLine
        ## edit style line
        style_line = lines[9]
        style_pos = style_line.find('style')
        style_line = style_line[0:style_pos] + \
                     'style="position: fixed; top: 0px; left: 5%;width:90%; height:' + str(600) + 'px;"></div>'
        lines[9] = style_line
        insert_js = '<script type="text/javascript">$(document).ready(function() {' \
                    'new QWebChannel(qt.webChannelTransport, function(channel) {' \
                    'var my_object = channel.objects.connection;$("#download").click(function(){' \
                    'text=document.getElementsByTagName("svg")[0].parentNode.innerHTML;my_object.download(text);});$("#update").click(function(){' \
                    'my_object.updateSelection(text);});});});</script>'
        insert_btn = '<input id="download" type="button" class="download" value="Download" style="display:block;"/>' \
                     '<input id="update" type="button" value="" style="display:none;"/>'
        lines = lines[:6] + [insert_js] + lines[6:9] + [insert_btn] + lines[9:]
        content = '\n'.join(lines)
        file_handle = open(html_path, 'w')
        file_handle.write(content)
        file_handle.close()

        # show local HTML
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        url = QUrl.fromLocalFile(str(html_path))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

        # build qweb channel
        channel = QWebChannel(view.page())
        my_object = MyObjectCls(view)
        channel.registerObject('connection', my_object)
        view.page().setWebChannel(channel)
        my_object.downloadFigSignal.connect(self.downloadSVG)

    @pyqtSlot()
    def on_actionSampling_triggered(self):
        # determine where to fetch data, single mode (bulk data) or pair mode (single cell data)
        if len(self.AntibodyCandidates) > 0:
            bad_count = self.detectBad()
            if bad_count > 0:
                Msg = 'We found some improper paired HCs and LCs, and have highlighted them in red!\n' \
                      'Please check and remove those records then re-try sampling again!\n' \
                      'If you would like to do sampling on individual sequences instead of paired-HC/LCs, ' \
                      'please clear your antibody candidate list and re-try sampling!'
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            else:
                self.SamplingType = 'pair'
        elif len(self.CheckedRecords) > 0:
            self.SamplingType = 'single'
        else:
            Msg = 'You did not either check any records or make a antibody candidate list. ' \
                  'Please check some records or add some records into your antibody candidate list and then re-try sampling!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # constructe dialog
        self.mySamplingDialog = SamplingDialog()
        self.mySamplingDialog.DBFilename = DBFilename

        # load data
        if self.SamplingType == 'single':
            self.mySamplingDialog.inputData = self.CheckedRecords
            self.mySamplingDialog.ui.lineEditMode.setText('Individual sequences')
            self.mySamplingDialog.ui.lineEditPopuSize.setText(str(len(self.CheckedRecords)) + ' Sequences')
            self.mySamplingDialog.ui.pushButtonSelect.setText('Select my sampling results in VGenes')
        elif self.SamplingType == 'pair':
            self.mySamplingDialog.ui.lineEditMode.setText('Paired sequences')
            self.mySamplingDialog.inputData = self.AntibodyCandidates
            self.mySamplingDialog.ui.lineEditPopuSize.setText(str(int(len(self.AntibodyCandidates)/2)) + ' HC/LC Pairs')
            self.mySamplingDialog.ui.pushButtonSelect.setText('Update candidate list from sampling results')
        else:
            return

        # load field values
        index = [2, 3, 6, 9, 13, 14, 15, 57, 75, 76, 83, 86, 87, 88, 90, 91, 92, 96, 99, 100, 101] + \
                list(range(106, 119))
        if len(FieldList) > 120:
            index += list(range(120, len(FieldList)))
        field_value = [FieldList[i] for i in index]

        self.mySamplingDialog.ui.comboBoxGroupField.addItems(field_value)
        self.mySamplingDialog.ui.comboBoxPrime.addItems(field_value)
        # field table
        Header = ['Name','Type','Select','IF']
        self.mySamplingDialog.ui.tableWidgetCookie.setRowCount(len(field_value))
        self.mySamplingDialog.ui.tableWidgetCookie.setColumnCount(len(Header))
        self.mySamplingDialog.ui.tableWidgetCookie.setHorizontalHeaderLabels(Header)
        for row_index in range(len(field_value)):
            # col 1
            unit = QTableWidgetItem(field_value[row_index])
            self.mySamplingDialog.ui.tableWidgetCookie.setItem(row_index,0,unit)
            # col2
            cell_comBox = QtWidgets.QComboBox()
            cell_comBox.addItems(['Char','Num'])
            cell_comBox.setMaximumSize(10086, 40)
            cell_comBox.setMinimumSize(50, 20)
            cell_comBox.setEditable(True)
            self.mySamplingDialog.ui.tableWidgetCookie.setCellWidget(row_index, 1, cell_comBox)
            # col3 and 4
            cell_check1 = QtWidgets.QCheckBox()
            cell_check2 = QtWidgets.QCheckBox()
            self.mySamplingDialog.ui.tableWidgetCookie.setCellWidget(row_index, 2, cell_check1)
            self.mySamplingDialog.ui.tableWidgetCookie.setCellWidget(row_index, 3, cell_check2)
        self.mySamplingDialog.ui.tableWidgetCookie.resizeColumnsToContents()

        # link signal
        self.mySamplingDialog.cookieSignal.connect(self.updateFromSampling)

        # show dialog
        self.mySamplingDialog.show()

    def SHMcheck(self):
        if self.ui.checkBoxSHM_Vregion.isChecked():
            self.ui.checkBoxSHM_FR1.setChecked(False)
            self.ui.checkBoxSHM_FR2.setChecked(False)
            self.ui.checkBoxSHM_FR3.setChecked(False)
            self.ui.checkBoxSHM_CDR1.setChecked(False)
            self.ui.checkBoxSHM_CDR2.setChecked(False)
        else:
            self.ui.checkBoxSHM_Vregion.setChecked(True)

    def SHMcheck1(self):
        if self.sender().isChecked():
            self.ui.checkBoxSHM_Vregion.setChecked(False)
        else:
            if self.ui.checkBoxSHM_FR1.isChecked() or self.ui.checkBoxSHM_FR2.isChecked() \
                or self.ui.checkBoxSHM_FR3.isChecked() or self.ui.checkBoxSHM_CDR1.isChecked() \
                   or self.ui.checkBoxSHM_CDR2.isChecked():
                pass
            else:
                self.ui.checkBoxSHM_Vregion.setChecked(True)

    def trimInfo(self):
        global DontFindTwice
        if DontFindTwice == False:
            cur_txt = self.ui.txtFieldSearch.text()
            DontFindTwice = True
            new_text = re.sub("\t.+", "", cur_txt)
            self.ui.txtFieldSearch.setText(new_text)
            print("q")
            DontFindTwice = False

    def resizeUI(self):
        size_w = self.size().width()
        size_h = self.size().height()
        offset_pool = [-1, 1]
        offset = offset_pool[random.randint(0, 1)]
        self.resize(size_w + offset, size_h + offset)

    def updateFromSampling(self, mode, names):
        if mode == 'single':
            if self.ui.treeWidget.isEnabled():
                self.clearTreeChecks()
                for Seqname in names:
                    found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                    for record in found:
                        wasClicked = True
                        record.setCheckState(0, Qt.Checked)

            self.CheckedRecords = names
            self.match_tree_to_table()

            Msg = 'Your checked records have been updated according to your sampling!'
        else:
            self.AntibodyCandidates = []
            self.ui.tableWidgetHC.setRowCount(0)
            self.ui.tableWidgetLC.setRowCount(0)

            notice = 'Sampling results'

            WhereState = 'Blank10 IN ("' + '","'.join(names) + '") ORDER BY Blank10'
            SQLStatement = 'SELECT SeqName,GeneType,ClonalPool,V1,D1,J1,TotalMuts,Isotype,Blank10 FROM vgenesDB WHERE ' + WhereState
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            for item in DataIn:
                SeqName = item[0]
                Genetype = item[1]
                Clone = item[2]
                Vgene = item[3]
                Dgene = item[4]
                Jgene = item[5]
                TotalMuts = item[6]
                Isotype = item[7]
                barcode = item[8]

                self.AntibodyCandidates.append(SeqName)

                if Genetype == 'Heavy':
                    rowPosition = self.ui.tableWidgetHC.rowCount()
                    self.ui.tableWidgetHC.insertRow(rowPosition)
                    self.ui.tableWidgetHC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetHC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetHC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 4, QTableWidgetItem(Dgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 5, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 6, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetHC.setItem(rowPosition, 7, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 8, QTableWidgetItem(barcode))
                    self.ui.tableWidgetHC.setItem(rowPosition, 9, QTableWidgetItem(notice))
                else:
                    rowPosition = self.ui.tableWidgetLC.rowCount()
                    self.ui.tableWidgetLC.insertRow(rowPosition)
                    self.ui.tableWidgetLC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetLC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetLC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 4, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 5, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetLC.setItem(rowPosition, 6, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 7, QTableWidgetItem(barcode))
                    self.ui.tableWidgetLC.setItem(rowPosition, 8, QTableWidgetItem(notice))

            self.ui.tableWidgetHC.resizeColumnsToContents()
            self.ui.tableWidgetHC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetHC.horizontalHeader().sectionClicked.connect(self.sortHCtable)

            self.ui.tableWidgetLC.resizeColumnsToContents()
            self.ui.tableWidgetLC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetLC.horizontalHeader().sectionClicked.connect(self.sortLCtable)

            # switch current tab to antibody candidate tab
            self.ui.tabWidget.setCurrentIndex(11)
            Msg = 'Your antibody candidate list/table have been updated according to your sampling!'
        # message
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        
    @pyqtSlot()
    def on_pushButtonCheckHCLC_clicked(self):
        '''
        if self.ui.tableWidgetHC.rowCount() > 0:
            self.ui.tableWidgetHC.clearSelection()
            pass_sign = True
            barcode_dict = {'barcode':0}
            for index in range(self.ui.tableWidgetHC.rowCount()):
                hc_barcode = self.ui.tableWidgetHC.item(index, 8).text()
                if hc_barcode in barcode_dict.keys():
                    self.ui.tableWidgetHC.item(index, 0).setForeground(QBrush(QColor("red")))
                    pass_sign = False
                    if barcode_dict[hc_barcode] == -1:
                        pass
                    else:
                        self.ui.tableWidgetHC.item(barcode_dict[hc_barcode], 0).setForeground(QBrush(QColor("red")))
                        barcode_dict[hc_barcode] = -1
                else:
                    barcode_dict[hc_barcode] = index
                match_num = 0
                for lc_index in range(self.ui.tableWidgetLC.rowCount()):
                    if hc_barcode == self.ui.tableWidgetLC.item(lc_index, 7).text():
                        match_num += 1
                if match_num != 1:
                    self.ui.tableWidgetHC.item(index, 0).setForeground(QBrush(QColor("red")))
                    pass_sign = False
        '''
        # get all HC barcode and LC barcode
        HC_barcode_dict = {'barcode': 0}
        LC_barcode_dict = {'barcode': 0}
        # check HC first
        if self.ui.tableWidgetHC.rowCount() > 0:
            self.ui.tableWidgetHC.clearSelection()
            for index in range(self.ui.tableWidgetHC.rowCount()):
                hc_barcode = self.ui.tableWidgetHC.item(index, 8).text()
                if hc_barcode in HC_barcode_dict.keys():
                    HC_barcode_dict[hc_barcode] += 1
                else:
                    HC_barcode_dict[hc_barcode] = 1
        # check LC
        if self.ui.tableWidgetLC.rowCount() > 0:
            self.ui.tableWidgetLC.clearSelection()
            for index in range(self.ui.tableWidgetLC.rowCount()):
                lc_barcode = self.ui.tableWidgetLC.item(index, 7).text()
                if lc_barcode in LC_barcode_dict.keys():
                    LC_barcode_dict[lc_barcode] += 1
                else:
                    LC_barcode_dict[lc_barcode] = 1
        # get good barcode for HC and LC
        HC_good = []
        LC_good = []
        for (barcode, num) in HC_barcode_dict.items():
            if num == 1:
                HC_good.append(barcode)
        for (barcode, num) in LC_barcode_dict.items():
            if num == 1:
                LC_good.append(barcode)
        good_barcodes = list(set(HC_good).intersection(set(LC_good)))
        
        # bad count
        bad_count = 0
        # highlight bad records in HC table
        for index in reversed(range(self.ui.tableWidgetHC.rowCount())):
            barcode = self.ui.tableWidgetHC.item(index, 8).text()
            if barcode not in good_barcodes:
                self.ui.tableWidgetHC.item(index, 0).setForeground(QBrush(QColor("red")))
                bad_count += 1
        # highlight bad records in LC table
        for index in reversed(range(self.ui.tableWidgetLC.rowCount())):
            barcode = self.ui.tableWidgetLC.item(index, 7).text()
            if barcode not in good_barcodes:
                self.ui.tableWidgetLC.item(index, 0).setForeground(QBrush(QColor("red")))
                bad_count += 1

        self.resizeUI()

        if bad_count == 0:
            Msg = 'All HCs and LCs are correctly paired!'
        else:
            Msg = 'All improper paired HCs and LCs are highlighted in red!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_pushButtonClearHL_clicked(self):
        for index in range(self.ui.tableWidgetHC.rowCount()):
            self.ui.tableWidgetHC.item(index, 0).setForeground(QBrush(QColor("black")))
        for index in range(self.ui.tableWidgetLC.rowCount()):
            self.ui.tableWidgetLC.item(index, 0).setForeground(QBrush(QColor("black")))
        self.resizeUI()

    def detectBad(self):
        # get all HC barcode and LC barcode
        HC_barcode_dict = {'barcode': 0}
        LC_barcode_dict = {'barcode': 0}
        # check HC first
        if self.ui.tableWidgetHC.rowCount() > 0:
            self.ui.tableWidgetHC.clearSelection()
            for index in range(self.ui.tableWidgetHC.rowCount()):
                hc_barcode = self.ui.tableWidgetHC.item(index, 8).text()
                if hc_barcode in HC_barcode_dict.keys():
                    HC_barcode_dict[hc_barcode] += 1
                else:
                    HC_barcode_dict[hc_barcode] = 1
        # check LC
        if self.ui.tableWidgetLC.rowCount() > 0:
            self.ui.tableWidgetLC.clearSelection()
            for index in range(self.ui.tableWidgetLC.rowCount()):
                lc_barcode = self.ui.tableWidgetLC.item(index, 7).text()
                if lc_barcode in LC_barcode_dict.keys():
                    LC_barcode_dict[lc_barcode] += 1
                else:
                    LC_barcode_dict[lc_barcode] = 1
        # get good barcode for HC and LC
        HC_good = []
        LC_good = []
        for (barcode, num) in HC_barcode_dict.items():
            if num == 1:
                HC_good.append(barcode)
        for (barcode, num) in LC_barcode_dict.items():
            if num == 1:
                LC_good.append(barcode)
        good_barcodes = list(set(HC_good).intersection(set(LC_good)))

        # bad count
        bad_count = 0
        # delete bad records in HC table
        for index in reversed(range(self.ui.tableWidgetHC.rowCount())):
            barcode = self.ui.tableWidgetHC.item(index, 8).text()
            if barcode not in good_barcodes:
                self.ui.tableWidgetHC.item(index, 0).setForeground(QBrush(QColor("red")))
                bad_count += 1
        # delete bad records in LC table
        for index in reversed(range(self.ui.tableWidgetLC.rowCount())):
            barcode = self.ui.tableWidgetLC.item(index, 7).text()
            if barcode not in good_barcodes:
                self.ui.tableWidgetLC.item(index, 0).setForeground(QBrush(QColor("red")))
                bad_count += 1

        return bad_count

    def deleteBad(self):
        # get all HC barcode and LC barcode
        HC_barcode_dict = {'barcode': 0}
        LC_barcode_dict = {'barcode': 0}
        # check HC first
        if self.ui.tableWidgetHC.rowCount() > 0:
            self.ui.tableWidgetHC.clearSelection()
            for index in range(self.ui.tableWidgetHC.rowCount()):
                hc_barcode = self.ui.tableWidgetHC.item(index, 8).text()
                if hc_barcode in HC_barcode_dict.keys():
                    HC_barcode_dict[hc_barcode] += 1
                else:
                    HC_barcode_dict[hc_barcode] = 1
        # check LC
        if self.ui.tableWidgetLC.rowCount() > 0:
            self.ui.tableWidgetLC.clearSelection()
            for index in range(self.ui.tableWidgetLC.rowCount()):
                lc_barcode = self.ui.tableWidgetLC.item(index, 7).text()
                if lc_barcode in LC_barcode_dict.keys():
                    LC_barcode_dict[lc_barcode] += 1
                else:
                    LC_barcode_dict[lc_barcode] = 1
        # get good barcode for HC and LC
        HC_good = []
        LC_good = []
        for (barcode, num) in HC_barcode_dict.items():
            if num == 1:
                HC_good.append(barcode)
        for (barcode, num) in LC_barcode_dict.items():
            if num == 1:
                LC_good.append(barcode)
        good_barcodes = list(set(HC_good).intersection(set(LC_good)))

        # bad count
        bad_count = 0
        # delete bad records in HC table
        for index in reversed(range(self.ui.tableWidgetHC.rowCount())):
            barcode = self.ui.tableWidgetHC.item(index, 8).text()
            if barcode not in good_barcodes:
                # delete from candidate list
                name = self.ui.tableWidgetHC.item(index, 0).text()
                self.AntibodyCandidates.remove(name)
                # remove row from table
                self.ui.tableWidgetHC.removeRow(index)
                bad_count += 1
        # delete bad records in LC table
        for index in reversed(range(self.ui.tableWidgetLC.rowCount())):
            barcode = self.ui.tableWidgetLC.item(index, 7).text()
            if barcode not in good_barcodes:
                # delete from candidate list
                name = self.ui.tableWidgetLC.item(index, 0).text()
                self.AntibodyCandidates.remove(name)
                # remove row from table
                self.ui.tableWidgetLC.removeRow(index)
                bad_count += 1
        # resize UI
        self.resizeUI()

        if bad_count == 0:
            Msg = 'All HCs and LCs are correctly paired!'
        else:
            Msg = 'All improper HC/LC pairs have been removed!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def deleteThis(self):
        if self.clickedTable == 'HC':
            curTable = self.ui.tableWidgetHC
        elif self.clickedTable == 'LC':
            curTable = self.ui.tableWidgetLC
        else:
            Msg = 'Please click the record you want to delete first!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.clickedTable = ''

        if curTable.rowCount() > 0:
            # delete from table
            row = curTable.currentRow()
            name = curTable.item(row, 0).text()
            curTable.removeRow(row)
            # delete from candidate list
            self.AntibodyCandidates.remove(name)

            self.ui.tableWidgetHC.clearSelection()
            self.ui.tableWidgetLC.clearSelection()


    def deleteAll(self):
        self.ui.tableWidgetHC.setRowCount(0)
        self.ui.tableWidgetLC.setRowCount(0)
        self.AntibodyCandidates = []

    def deleteThese(self):
        if self.clickedTable == 'HC':
            curTable = self.ui.tableWidgetHC
        elif self.clickedTable == 'LC':
            curTable = self.ui.tableWidgetLC
        else:
            Msg = 'Please click the record you want to delete first!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.clickedTable = ''

        try:
            if curTable.rowCount() > 0:
                # get barcode
                row = curTable.currentRow()
                if curTable.columnCount() == 10:
                    barcode = curTable.item(row, 8).text()
                else:
                    barcode = curTable.item(row, 7).text()

                # delete from HC table
                delete_sign = True
                while delete_sign == True:
                    delete_sign = False
                    for index in range(self.ui.tableWidgetHC.rowCount()):
                        if barcode == self.ui.tableWidgetHC.item(index, 8).text():
                            name = self.ui.tableWidgetHC.item(index, 0).text()
                            try:
                                self.AntibodyCandidates.remove(name)
                            except:
                                print('opppppps!')
                            self.ui.tableWidgetHC.removeRow(index)
                            delete_sign = True
                            break
                # delete from LC table
                delete_sign = True
                while delete_sign == True:
                    delete_sign = False
                    for index in range(self.ui.tableWidgetLC.rowCount()):
                        if barcode == self.ui.tableWidgetLC.item(index, 7).text():
                            name = self.ui.tableWidgetLC.item(index, 0).text()
                            try:
                                self.AntibodyCandidates.remove(name)
                            except:
                                print('opppppps!')
                            self.ui.tableWidgetLC.removeRow(index)
                            delete_sign = True
                            break
                self.ui.tableWidgetHC.clearSelection()
                self.ui.tableWidgetLC.clearSelection()
        except:
            print('wrong in delete these!')

    def deleteBatch(self):
        if self.ui.tableWidgetHC.hasFocus():
            if self.ui.tableWidgetHC.rowCount() > 0:
                self.open_delete_dialog('HC')
        elif self.ui.tableWidgetLC.hasFocus():
            if self.ui.tableWidgetLC.rowCount() > 0:
                self.open_delete_dialog('LC')
        else:
            if self.ui.tableWidgetHC.rowCount() > 0:
                self.open_delete_dialog('HC')

    def open_delete_dialog(self, table):
        list = []
        if table == 'HC':
            for index in range(self.ui.tableWidgetHC.rowCount()):
                name = self.ui.tableWidgetHC.item(index, 0).text()
                list.append(name)
        elif table == 'LC':
            for index in range(self.ui.tableWidgetLC.rowCount()):
                name = self.ui.tableWidgetLC.item(index, 0).text()
                list.append(name)
        else:
            return

        self.modalessDeleteDialog = deleteDialog()
        self.modalessDeleteDialog.table = table
        self.modalessDeleteDialog.ui.listWidget.addItems(list)
        self.modalessDeleteDialog.deleteSignal.connect(self.delRecords)
        self.modalessDeleteDialog.show()

    def delRecords(self, del_list, table):
        if table == 'HC':
            row_index_list = list(range(self.ui.tableWidgetHC.rowCount()))
            row_index_list.reverse()
            for index in row_index_list:
                name = self.ui.tableWidgetHC.item(index, 0).text()
                barcode = self.ui.tableWidgetHC.item(index, 8).text()
                if name in del_list:
                    # delete in HC
                    try:
                        self.AntibodyCandidates.remove(name)
                    except:
                        print('opppppps!')
                    self.ui.tableWidgetHC.removeRow(index)
        elif table == 'LC':
            row_index_list = list(range(self.ui.tableWidgetLC.rowCount()))
            row_index_list.reverse()
            for index in row_index_list:
                name = self.ui.tableWidgetLC.item(index, 0).text()
                if name in del_list:
                    # delete in LC
                    try:
                        self.AntibodyCandidates.remove(name)
                    except:
                        print('opppppps!')
                    self.ui.tableWidgetLC.removeRow(index)
                # delete LC
                '''LC_row_index_list = list(range(self.ui.tableWidgetLC.rowCount()))
                LC_row_index_list.reverse()
                for LC_index in LC_row_index_list:
                    if barcode == self.ui.tableWidgetLC.item(LC_index, 7).text():
                        name = self.ui.tableWidgetLC.item(LC_index, 0).text()
                        try:
                            self.AntibodyCandidates.remove(name)
                        except:
                            print('opppppps!')
                        self.ui.tableWidgetLC.removeRow(LC_index)'''


    def matchSelection(self, row, col):
        curTable = self.ui.tabWidget.focusWidget()
        if curTable.columnCount() == 10:
            barcode = curTable.item(row, 8).text()
            self.ui.tableWidgetLC.clearSelection()
            self.clickedTable = 'HC'
        else:
            barcode = curTable.item(row, 7).text()
            self.ui.tableWidgetHC.clearSelection()
            self.clickedTable = 'LC'

        # color HC table
        for index in range(self.ui.tableWidgetHC.rowCount()):
            if barcode == self.ui.tableWidgetHC.item(index, 8).text():
                if curTable.columnCount() == 9:
                    self.ui.tableWidgetHC.setCurrentCell(index, 0)
                for col_index in range(self.ui.tableWidgetHC.columnCount()):
                    #self.ui.tableWidgetHC.item(index, col_index).setForeground(QBrush(QColor("red")))
                    self.ui.tableWidgetHC.item(index, col_index).setBackground(QBrush(QColor("gray")))
            else:
                for col_index in range(self.ui.tableWidgetHC.columnCount()):
                    #self.ui.tableWidgetHC.item(index, col_index).setForeground(QBrush(QColor("black")))
                    self.ui.tableWidgetHC.item(index, col_index).setBackground(QBrush(QColor("white")))
        # color LC table
        for index in range(self.ui.tableWidgetLC.rowCount()):
            if barcode == self.ui.tableWidgetLC.item(index, 7).text():
                if curTable.columnCount() == 10:
                    self.ui.tableWidgetLC.setCurrentCell(index, 0)
                for col_index in range(self.ui.tableWidgetLC.columnCount()):
                    #self.ui.tableWidgetLC.item(index, col_index).setForeground(QBrush(QColor("red")))
                    self.ui.tableWidgetLC.item(index, col_index).setBackground(QBrush(QColor("gray")))
            else:
                for col_index in range(self.ui.tableWidgetLC.columnCount()):
                    #self.ui.tableWidgetLC.item(index, col_index).setForeground(QBrush(QColor("black")))
                    self.ui.tableWidgetLC.item(index, col_index).setBackground(QBrush(QColor("white")))

        if self.ui.radioButtonNavigate.isChecked():
            self.select_tree_by_name(curTable.item(row, 0).text())

        if self.HCLCDialog.isVisible() == True:
            self.loadHCLCtable(curTable.item(row, 0).text())


    def initialHCLCTable(self):
        # setup HC table
        num_row = 0
        horizontalHeader = ['SeqName','GeneType','ClonalPool','Vgene','Dgene','Jgene','TotalMuts','Isotype','Barcode', 'Notes']
        num_col = len(horizontalHeader)
        self.ui.tableWidgetHC.setRowCount(num_row)
        self.ui.tableWidgetHC.setColumnCount(num_col)
        self.ui.tableWidgetHC.setHorizontalHeaderLabels(horizontalHeader)
        # self.myGibsonDialog.ui.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.ui.tableWidgetHC.horizontalHeader().setStretchLastSection(True)
        self.ui.tableWidgetHC.setSelectionMode(QAbstractItemView.SingleSelection)
        self.ui.tableWidgetHC.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.ui.tableWidgetHC.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # setup LC table
        num_row = 0
        horizontalHeader = ['SeqName', 'GeneType', 'ClonalPool', 'Vgene', 'Jgene', 'TotalMuts', 'Isotype', 'Barcode', 'Notes']
        num_col = len(horizontalHeader)
        self.ui.tableWidgetLC.setRowCount(num_row)
        self.ui.tableWidgetLC.setColumnCount(num_col)
        self.ui.tableWidgetLC.setHorizontalHeaderLabels(horizontalHeader)
        # self.myGibsonDialog.ui.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.ui.tableWidgetLC.horizontalHeader().setStretchLastSection(True)
        self.ui.tableWidgetLC.setSelectionMode(QAbstractItemView.SingleSelection)
        self.ui.tableWidgetLC.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.ui.tableWidgetLC.setEditTriggers(QAbstractItemView.NoEditTriggers)

    def displayLog(self, logFile):
        self.ShowVGenesText(logFile)

    def copySelAA(self):
        txt = self.ui.txtAASeq.textCursor().selectedText()
        if len(txt) > 0:
            clipboard = QtWidgets.QApplication.clipboard()
            clipboard.clear()
            clipboard.setText(txt)
            self.ui.lblSeq2.setText('AA Sequence Copied!')
        else:
            self.ui.lblSeq2.setText('Nothing selected!')

    def copySelDNA(self):
        txt = self.ui.txtDNASeq.textCursor().selectedText()
        if len(txt) > 0:
            clipboard = QtWidgets.QApplication.clipboard()
            clipboard.clear()
            clipboard.setText(txt)
            self.ui.lblSeq2.setText('DNA Sequence Copied!')
        else:
            self.ui.lblSeq2.setText('Nothing selected!')

    def openTableDialog(self):
        self.tableDialog = TableDialog()
        self.tableDialog.refreshDBSignal.connect(self.refreshDB)
        self.tableDialog.show()

    def progressLabel(self, pct, label):
        try:
            self.progress.setValue(pct)
            self.progress.setLabel(label)
        except:
            pass

    def HCLC_finish_process(self, data):
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if data[0] == 0:
            question = data[1] + '\nThey have been saved in file' + data[2] + ' \nDo you want to open it?\n'
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)

            if answer == 'Yes':
                if os.path.isfile(data[2]):
                    self.LoadDB(data[2])
                    QMessageBox.information(self, 'Information', 'New DB opened!', QMessageBox.Ok, QMessageBox.Ok)
                    self.UpdateRecentList(data[2], True)
        else:
            QMessageBox.warning(self, 'Warning', data[1], QMessageBox.Ok, QMessageBox.Ok)

    def ShowMessageBox(self, data):
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if data[0] == 0:
            QMessageBox.information(self, 'Information', data[1], QMessageBox.Ok, QMessageBox.Ok)
        else:
            QMessageBox.warning(self, 'Warning', data[1], QMessageBox.Ok, QMessageBox.Ok)

    def result_display(self, cur, total, pct):
        try:
            self.progress.setValue(pct)
            label = "Processing:" + "   " + str(cur) + "/" + str(total)
            self.progress.setLabel(label)
        except:
            pass

    def updateCloneTreeInfo(self):
        try:
            clone_id = self.ui.comboBoxTree.currentText()
            tmp = clone_id.split('|')
            clone_id = re.sub('Clone', '', tmp[1])

            SQLStatement = 'SELECT SeqName FROM vgenesDB WHERE ClonalPool = "' + clone_id + '"'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            seq_num = len(DataIn)
            self.ui.lineEditNumSeq.setText(str(seq_num))
            if seq_num < 3:
                self.ui.toolButtonCloneRaxml.setText('This Clone has too less sequences for a tree')
                self.ui.toolButtonCloneRaxml.setEnabled(False)
            else:
                self.ui.toolButtonCloneRaxml.setText('Build clone phylogeny with RAxML')
                self.ui.toolButtonCloneRaxml.setEnabled(True)
        except:
            return

    def disablePNG(self):
        global DontFindTwice
        DontFindTwice = True
        if self.ui.tabWidgetFig.currentIndex() in [0, 1, 2, 6, 7, 8]:
            self.ui.radioButtonPNG.setChecked(False)
            self.ui.radioButtonPNG.setEnabled(True)
        else:
            self.ui.radioButtonPNG.setChecked(False)
            self.ui.radioButtonPNG.setEnabled(False)

        if self.ui.tabWidgetFig.currentIndex() in [0, 1, 2, 6, 8]:
            self.ui.checkBoxUpdateSelection.setEnabled(True)
        else:
            self.ui.checkBoxUpdateSelection.setEnabled(False)

        self.ui.F.setVisible(False)
        self.ui.HTMLview.setVisible(True)
        #self.ui.checkBoxUpdateSelection.setEnabled(True)
        self.ui.checkBoxFigLegend.setEnabled(True)
        self.ui.HTMLview.resizeSignal.connect(self.resizeHTML)
        DontFindTwice = False

    @pyqtSlot()
    def on_actionpreviousChecked_triggered(self):
        #checked = self.getTreeCheckedChild()
        checked = self.CheckedRecords
        if len(checked) > 0:
            cur_selection = self.ui.txtName.toPlainText()
            if cur_selection in checked:
                index = checked.index(cur_selection)
                moveindex = index - 1
                if moveindex < 0:
                    moveindex = 0
                self.select_tree_by_name(checked[moveindex])
            else:
                self.select_tree_by_name(checked[0])

    @pyqtSlot()
    def on_actionnextChecked_triggered(self):
        #checked = self.getTreeCheckedChild()
        checked = self.CheckedRecords
        if len(checked) > 0:
            cur_selection = self.ui.txtName.toPlainText()
            if cur_selection in checked:
                index = checked.index(cur_selection)
                moveindex = index + 1
                if moveindex >= len(checked):
                    moveindex = len(checked) - 1
                self.select_tree_by_name(checked[moveindex])
            else:
                self.select_tree_by_name(checked[0])

    @pyqtSlot()
    def on_actionSave_As_triggered(self):
        self.saveAS()

    @pyqtSlot()
    def on_btnSaveAs_clicked(self):
        self.saveAS()

    def saveAS(self):
        options = QtWidgets.QFileDialog.Options()
        newDB, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                              "New Fragment Database",
                                                              "New Fragment database",
                                                              "VGene database Files (*.vdb);;All Files (*)",
                                                              options=options)
        if newDB != 'none' and newDB != '':
            shutil.copyfile(DBFilename, newDB)
            QMessageBox.information(self, 'Information', 'DB saved to new location!',
                                QMessageBox.Ok, QMessageBox.Ok)

    def addFieldsHeatmap(self):
        listItems = self.ui.listWidgetAll.selectedItems()
        for item in listItems:
            label = item.text()
            if label in self.HeatmapList:
                pass
            else:
                self.HeatmapList.append(label)
                self.ui.listWidgetSelected.addItem(label)

    def delFieldsHeatmap(self):
        listItems = self.ui.listWidgetSelected.selectedItems()
        for item in listItems:
            label = item.text()
            if label in self.HeatmapList:
                self.HeatmapList.remove(label)
                self.ui.listWidgetSelected.clear()
                self.ui.listWidgetSelected.addItems(self.HeatmapList)
            else:
                pass

    def updateClone(self):
        items = self.ui.listWidgetCloneMember.selectedItems()
        seq_name = ''
        for item in items:
            seq_name = item.text()

        SQLStatement = 'SELECT GeneType,V1,D1,J1,CDR3Length FROM vgenesDB WHERE SeqName = "' + seq_name + '"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        seq_num = len(DataIn)

        if seq_num == 0:
            return

        record = DataIn[0]

        self.ui.lineEditCloneType.setText(record[0])

        self.ui.lineEditCloneV.setText(record[1])
        self.ui.lineEditCloneD.setText(record[2])
        self.ui.lineEditCloneJ.setText(record[3])
        self.ui.lineEditCloneCDR3len.setText(record[4])

    def checkClone(self):
        global MoveNotChange

        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())
        '''
        MoveNotChange = True
        rows = self.ui.SeqTable.rowCount()
        for row in range(rows):
            cur_name = self.ui.SeqTable.item(row, 1).text()
            if cur_name in member_names:
                self.ui.SeqTable.cellWidget(row, 0).setChecked(True)
            else:
                self.ui.SeqTable.cellWidget(row, 0).setChecked(False)
        MoveNotChange = False

        self.match_table_to_tree()
        '''
        if self.ui.checkBoxExclusive.isChecked():
            self.CheckedRecords = member_names
            if self.ui.treeWidget.isEnabled():
                self.clearTreeChecks()
            Msg = 'All members of this clone were exclusively checked!'
        else:
            for ele in member_names:
                if ele not in self.CheckedRecords:
                    self.CheckedRecords.append(ele)
            Msg = 'All members of this clone were checked!'

        if self.ui.treeWidget.isEnabled():
            for cur_name in member_names:
                found = self.ui.treeWidget.findItems(cur_name, Qt.MatchRecursive, 0)
                if len(found) > 0:
                    for item in found:
                        item.setCheckState(0, Qt.Checked)
        self.match_tree_to_table()

        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_pushButtonCheckHC_clicked(self):
        seq_list = []
        for row in range(self.ui.tableWidgetHC.rowCount()):
            seq_list.append(self.ui.tableWidgetHC.item(row, 0).text())
        self.CheckedRecords = seq_list
        if self.ui.treeWidget.isEnabled():
            self.clearTreeChecks()
            for cur_name in seq_list:
                found = self.ui.treeWidget.findItems(cur_name, Qt.MatchRecursive, 0)
                if len(found) > 0:
                    for item in found:
                        item.setCheckState(0, Qt.Checked)
        self.match_tree_to_table()

        Msg = 'All members of this HC table were exclusively checked!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_pushButtonCheckLC_clicked(self):
        seq_list = []
        for row in range(self.ui.tableWidgetLC.rowCount()):
            seq_list.append(self.ui.tableWidgetLC.item(row, 0).text())
        self.CheckedRecords = seq_list
        if self.ui.treeWidget.isEnabled():
            self.clearTreeChecks()
            for cur_name in seq_list:
                found = self.ui.treeWidget.findItems(cur_name, Qt.MatchRecursive, 0)
                if len(found) > 0:
                    for item in found:
                        item.setCheckState(0, Qt.Checked)
        self.match_tree_to_table()

        Msg = 'All members of this LC table were exclusively checked!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def initial_Clone(self):
        self.ui.listWidgetClone.clear()
        self.ui.listWidgetCloneMember.clear()
        self.ui.comboBoxPieClone.clear()
        self.ui.comboBoxCol1Clone.clear()
        self.ui.comboBoxCol2Clone.clear()
        self.ui.comboBoxBoxDataClone.clear()
        self.ui.comboBoxBox1Clone.clear()
        self.ui.comboBoxBox2Clone.clear()

        self.ui.lineEditCloneName.clear()
        self.ui.lineEditCloneType.clear()
        self.ui.lineEditCloneNum.clear()
        self.ui.lineEditCloneV.clear()
        self.ui.lineEditCloneD.clear()
        self.ui.lineEditCloneJ.clear()
        self.ui.lineEditCloneCDR3len.clear()

        sizeCutoff = self.ui.spinBoxMinCloneSize.value()
        HConly = self.ui.radioButtonHConly.isChecked()

        # identify if clones exist
        '''   # old code
        SQLStatement = 'SELECT ClonalPool FROM vgenesDB'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        list1 = []
        for ele in DataIn:
            list1.append(ele[0])
        list_unique = list(set(list1))
        try:
            list_unique.remove('0')
        except:
            return

        if len(list_unique) == 0:
            return

        list_unique = [int(i) for i in list_unique]
        list_unique.sort()
        list_unique = ['Clone' + str(i) for i in list_unique]

        self.ui.listWidgetClone.addItems(list_unique)
        msg = 'Total ' + str(len(list_unique)) + ' Clones identified'
        self.ui.titleClone.setText(msg)
        '''

        SQLStatement = 'SELECT GeneType,ClonalPool FROM vgenesDB WHERE ClonalPool <> "0"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        clone_dict = {}
        list_unique = []
        for ele in DataIn:
            if HConly == True:
                if ele[0] == 'Heavy':
                    clone_name = ele[0] + '|' + 'Clone' + str(ele[1])
                    if clone_dict.__contains__(clone_name):
                        clone_dict[clone_name] += 1
                    else:
                        clone_dict[clone_name] = 1
            else:
                clone_name = ele[0] + '|' + 'Clone' + str(ele[1])
                if clone_dict.__contains__(clone_name):
                    clone_dict[clone_name] += 1
                else:
                    clone_dict[clone_name] = 1

        for key, value in sorted(clone_dict.items(), key=lambda x: x[1], reverse=True):
            if value >= sizeCutoff:
                list_unique.append(key + '|Count=' + str(value))

        list_unique.sort(key=lambda x: x[0])
        self.ui.listWidgetClone.clear()
        self.ui.listWidgetClone.addItems(list_unique)
        msg = 'Total ' + str(len(list_unique)) + ' Clones displayed'
        self.ui.titleClone.setText(msg)

        if DBFilename != '' and DBFilename != None and DBFilename != 'none':
            fields_name = [""] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
            self.ui.comboBoxPieClone.addItems(fields_name)
            self.ui.comboBoxCol1Clone.addItems(fields_name)
            self.ui.comboBoxCol2Clone.addItems(fields_name)
            self.ui.comboBoxBoxDataClone.addItems(fields_name)
            self.ui.comboBoxBox1Clone.addItems(fields_name)
            self.ui.comboBoxBox2Clone.addItems(fields_name)

    @pyqtSlot()
    def on_RefreshClone_clicked(self):
        print('refresh clone')
        self.initial_Clone()

    @pyqtSlot()
    def on_actionPairAndJump_triggered(self):
        listItems = self.CheckedRecords
        if len(listItems) > 0:
            pass
        else:
            msg = 'Please check some sequences to start!'
            QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.HCLC_Thread = HCLC_pair_thread(self)
        self.HCLC_Thread.DBFilename = DBFilename
        self.HCLC_Thread.checkRecords = listItems
        self.HCLC_Thread.HCLC_progress.connect(self.result_display)
        self.HCLC_Thread.HCLC_finish.connect(self.jump_to_HCLC)
        self.HCLC_Thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_pushButtonPairClone_clicked(self):
        notice = self.ui.lineEditCloneName.text()

        # step 1, get all members of this clone
        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())
        
        # step 2, pair HC/LCs for these sequences
        WhereState = 'SeqName IN ("' + '","'.join(member_names) + '")'
        field = 'SeqName,Blank10'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        barcodes_list = [ele[1] for ele in DataIn]

        WhereState = 'Blank10 IN ("' + '","'.join(barcodes_list) + '")'
        field = 'SeqName,Blank10'
        SQLStatement = 'SELECT ' + field + ' FROM vgenesDB WHERE ' + WhereState
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        listItems = [ele[0] for ele in DataIn]
        
        # step 3, add them into HC/LC list
        shared = list(set(listItems).intersection(self.AntibodyCandidates))
        novel_ele = list(set(listItems).difference(self.AntibodyCandidates))

        # warn redundant sequences
        if len(shared) > 0:
            Msg = "Those sequences are already in the list:\n" + ", ".join(shared)
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        # update Antibody Candidate list if there is new sequences
        if len(novel_ele) > 0:
            self.AntibodyCandidates = self.AntibodyCandidates + novel_ele

            WhereState = 'SeqName IN ("' + '","'.join(novel_ele) + '")'

            SQLStatement = 'SELECT SeqName,GeneType,ClonalPool,V1,D1,J1,TotalMuts,Isotype,Blank10 FROM vgenesDB WHERE ' + WhereState
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            for item in DataIn:
                SeqName = item[0]
                Genetype = item[1]
                Clone = item[2]
                Vgene = item[3]
                Dgene = item[4]
                Jgene = item[5]
                TotalMuts = item[6]
                Isotype = item[7]
                barcode = item[8]

                if Genetype in ['Heavy', 'Beta', 'Delta']:
                    rowPosition = self.ui.tableWidgetHC.rowCount()
                    self.ui.tableWidgetHC.insertRow(rowPosition)
                    self.ui.tableWidgetHC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetHC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetHC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 4, QTableWidgetItem(Dgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 5, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 6, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetHC.setItem(rowPosition, 7, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 8, QTableWidgetItem(barcode))
                    self.ui.tableWidgetHC.setItem(rowPosition, 9, QTableWidgetItem(notice))
                else:
                    rowPosition = self.ui.tableWidgetLC.rowCount()
                    self.ui.tableWidgetLC.insertRow(rowPosition)
                    self.ui.tableWidgetLC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetLC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetLC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 4, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 5, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetLC.setItem(rowPosition, 6, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 7, QTableWidgetItem(barcode))
                    self.ui.tableWidgetLC.setItem(rowPosition, 8, QTableWidgetItem(notice))

            self.ui.tableWidgetHC.resizeColumnsToContents()
            self.ui.tableWidgetHC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetHC.horizontalHeader().sectionClicked.connect(self.sortHCtable)

            self.ui.tableWidgetLC.resizeColumnsToContents()
            self.ui.tableWidgetLC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetLC.horizontalHeader().sectionClicked.connect(self.sortLCtable)

        # step 4, jump to HC/LC list
        self.ui.tabWidget.setCurrentIndex(11)

    def selectClone(self):
        items = self.ui.listWidgetClone.selectedItems()
        if len(items) == 0:
            return

        clone_id = ''
        for item in items:
            clone_id = item.text()

        clone_id = clone_id.split('|')[1]
        clone_id = re.sub('Clone','',clone_id)

        SQLStatement = 'SELECT GeneType,V1,D1,J1,CDR3Length,SeqName FROM vgenesDB WHERE ClonalPool = "' + clone_id + '"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        seq_num = len(DataIn)

        if seq_num == 0:
            return

        record = DataIn[0]

        self.ui.lineEditCloneName.setText('Clone' + clone_id)
        self.ui.lineEditCloneType.setText(record[0])
        self.ui.lineEditCloneNum.setText(str(seq_num))

        self.ui.lineEditCloneV.setText(record[1])
        self.ui.lineEditCloneD.setText(record[2])
        self.ui.lineEditCloneJ.setText(record[3])
        self.ui.lineEditCloneCDR3len.setText(record[4])

        mab_names = []
        for record in DataIn:
            mab_names.append(record[5])
        self.ui.listWidgetCloneMember.clear()
        self.ui.listWidgetCloneMember.addItems(mab_names)
        self.ui.listWidgetCloneMember.setCurrentItem(self.ui.listWidgetCloneMember.item(0))

    @pyqtSlot()
    def refreshDB(self):
        global MoveNotChange
        MoveNotChange = True
        if self.ui.SeqTable.rowCount() == 0:
            return

        self.load_table()

        # update combox
        f_txt = re.sub(r'\(.+', '', self.ui.cboFindField.currentText())
        f_txt1 = re.sub(r'\(.+', '', self.ui.cboFindField1.currentText())
        tree_txt1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
        tree_txt2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
        tree_txt3 = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())

        self.ui.cboFindField.clear()
        self.ui.cboFindField1.clear()
        self.ui.cboTreeOp1.clear()
        self.ui.cboTreeOp2.clear()
        self.ui.cboTreeOp3.clear()

        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.ui.cboFindField.addItems(field_list)
        self.ui.cboFindField1.addItems(field_list)
        self.ui.cboTreeOp1.addItems(field_list)
        self.ui.cboTreeOp2.addItems(field_list)
        self.ui.cboTreeOp3.addItems(field_list)
        self.ui.cboTreeOp1.addItem('None')
        self.ui.cboTreeOp2.addItem('None')
        self.ui.cboTreeOp3.addItem('None')

        index = 2
        self.ui.cboFindField.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')
        self.ui.cboFindField1.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')

        if tree_txt1 == 'None':
            self.ui.cboTreeOp1.setCurrentText('None')
        else:
            index = FieldList.index(tree_txt1)
            self.ui.cboTreeOp1.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')

        if tree_txt2 == 'None':
            self.ui.cboTreeOp2.setCurrentText('None')
        else:
            index = FieldList.index(tree_txt2)
            self.ui.cboTreeOp2.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')

        if tree_txt3 == 'None':
            self.ui.cboTreeOp3.setCurrentText('None')
        else:
            index = FieldList.index(tree_txt3)
            self.ui.cboTreeOp3.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')
        MoveNotChange = False
        
    @pyqtSlot()
    def on_actionImport_Annotate_triggered(self):
        anno_file, _ = QtWidgets.QFileDialog.getOpenFileName(self, "select annotation file", '~/',
                                                          "Comma Separated Values (*.csv);;All Files (*)")
        if anno_file == '' or anno_file == None:
            return

        self.annoDialog = AnnoDielog()
        self.annoDialog.csvFile = anno_file
        self.annoDialog.refreshDBSignal.connect(self.refreshDB)
        Content = []
        max_row = 100
        try:
            csvFile = open(anno_file, "r")
            reader = csv.reader(csvFile)
            row = 0
            for item in reader:
                if row < max_row:
                    Content.append(item)
                    row += 1
                else:
                    break
            csvFile.close()
        except:
            Msg = 'Can not process your file as CSV! Please check your input!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.annoDialog.Content = copy.deepcopy(Content)

        horizontalHeader = Content.pop(0)
        self.annoDialog.ui.comboBox.addItems(horizontalHeader)

        HEADERStatement = 'SELECT Field, FieldNickName FROM fieldsname'
        HeaderIn = VGenesSQL.RunSQL(DBFilename, HEADERStatement)
        Fields = [i[0] + '  (' + i[1] + ')' for i in HeaderIn]
        self.annoDialog.ui.comboBox2.addItems(Fields)
        try:
            self.annoDialog.ui.comboBox2.setCurrentIndex(108)
        except:
            pass

        num_col = len(horizontalHeader)
        num_row = len(Content)

        self.annoDialog.ui.tableWidget.setRowCount(num_row + 1) # +1 because the 1st row is empty for users to type col names
        self.annoDialog.ui.tableWidget.setColumnCount(num_col)
        self.annoDialog.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
        self.annoDialog.header = horizontalHeader

        for col_index in range(num_col):
            cell_comBox = QtWidgets.QComboBox()
            cell_comBox.addItems([''] + Fields)
            cell_comBox.setMaximumSize(10086,40)
            cell_comBox.setMinimumSize(50,20)
            cell_comBox.setEditable(True)
            self.annoDialog.ui.tableWidget.setCellWidget(0, col_index, cell_comBox)

        for row_index in range(num_row):
            for col_index in range(num_col):
                self.annoDialog.ui.tableWidget.setItem(row_index + 1, col_index,
                                                       QTableWidgetItem(Content[row_index][col_index]))
        #self.annoDialog.ui.tableWidget.resizeColumnsToContents()
        #self.annoDialog.ui.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        #self.annoDialog.ui.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.annoDialog.show()

    @pyqtSlot()
    def on_CopyValue_clicked(self):
        self.copy_dialog = CopyDialog()
        field_list = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.copy_dialog.ui.comboBoxFrom.addItems(field_list)
        self.copy_dialog.ui.comboBoxTo.addItems(field_list)
        self.copy_dialog.CopySignal.connect(self.CopyRecord)
        self.copy_dialog.exec_()

    def CopyRecord(self, field_from, field_to):
        global DontFindTwice
        field_from = re.sub(r'\(.+', '', field_from)
        field_to = re.sub(r'\(.+', '', field_to)
        SQLStatement = 'UPDATE vgenesDB SET ' + field_to + ' = ' + field_from
        try:
            VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
            Msg = 'Update finished!'
            DontFindTwice = True
            self.refreshDB()
            value = self.ui.dial.value()
            self.updateF(value)
            DontFindTwice = False

            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        except:
            Msg = 'Error occurs when updating the DB!\nCurrent SQL statement is:\n' + SQLStatement
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

    def openAlter(self):
        self.AlterWindow.ui.pushButtonSave.setEnabled(False)
        if self.AlterWindow.intial:
            if DBFilename != "":
                self.AlterWindow.ui.listWidget.addItems(FieldList)
                self.AlterWindow.ui.listWidget.setCurrentItem(self.AlterWindow.ui.listWidget.item(0))
                self.AlterWindow.ui.lineEditName.setText(FieldList[0])
                self.AlterWindow.ui.lineEditNickName.setText(RealNameList[0])
                self.AlterWindow.ui.lineEditType.setText(FieldTypeList[0])
                self.AlterWindow.ui.textEditNote.setText(FieldCommentList[0])
                self.AlterWindow.intial = False
                self.AlterWindow.ui.pushButtonSave.setDisabled(True)
        self.AlterWindow.show()

    def selectionMode(self):
        if self.ui.checkBoxRowSelection.isChecked():
            self.ui.SeqTable.setSelectionBehavior(QAbstractItemView.SelectRows)
        else:
            self.ui.SeqTable.setSelectionBehavior(QAbstractItemView.SelectItems)

    @pyqtSlot()
    def on_actionModify_Barcodes_triggered(self):
        self.barcodeDislog = BarcodeDialog()
        field_list = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.barcodeDislog.load_data(field_list)
        self.barcodeDislog.show()

    @pyqtSlot()
    def on_actionmatchHCLC_triggered(self):
        listItems = self.CheckedRecords
        if len(listItems) > 0:
            pass
        else:
            msg = 'Please check some sequences to start!'
            QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.HCLC_Thread = HCLC_pair_thread(self)
        self.HCLC_Thread.DBFilename = DBFilename
        self.HCLC_Thread.checkRecords = listItems
        self.HCLC_Thread.HCLC_progress.connect(self.result_display)
        self.HCLC_Thread.HCLC_finish.connect(self.update_check_from_list)
        self.HCLC_Thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

        '''
        checkedItems = self.CheckedRecords
        checkedItemsAll = checkedItems.copy()
        # if users checked any records, will search paired HC/LC for all checked records
        if len(checkedItems) > 0:
            ErrMsgType1 = ''
            ErrMsgType2 = ''
            ErrMsgType3 = ''
            for item in checkedItems:
                SQLStatement = 'SELECT SeqName,Blank10 FROM vgenesDB WHERE SeqName = "' + item + '"'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                barcode = DataIn[0][1]
                if barcode == 'Blank10' or barcode == '':
                    ErrMsgType1 += "Sequence " + item + "does not have barcode information!\n"
                    continue
                else:
                    SQLStatement = 'SELECT SeqName,Blank10 FROM vgenesDB WHERE Blank10 = "' + barcode + '"'
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    i = len(DataIn) - 1
                    if i == 0:
                        ErrMsgType2 += "For " + item + ", did not find any Heavy/Light chain using same barcode!\n"
                        continue
                    else:
                        ErrMsgType3 += "For " + item + ", find " + str(i) +  " Heavy/Light chain using same barcode!\n"
                        for record in DataIn:
                            Seqname = record[0]
                            if Seqname in checkedItemsAll:
                                continue
                            else:
                                if self.ui.treeWidget.isEnabled():
                                    found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                                    for record in found:
                                        wasClicked = True
                                        record.setCheckState(0, Qt.Checked)
                                checkedItemsAll.append(Seqname)

            self.match_tree_to_table()

            ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
            with open(ErlogFile, 'w') as currentFile:
                currentFile.write('Running finished!\n')
                currentFile.write('\nThe following records have paired HC/LC:\n')
                currentFile.write(ErrMsgType3)
                currentFile.write('\nThe following records do not have barcode information:\n')
                currentFile.write(ErrMsgType1)
                currentFile.write('\nThe following records do not have any paired HC/LC:\n')
                currentFile.write(ErrMsgType2)
            self.ShowVGenesText(ErlogFile)
        # if users didn't check any records, will search paired HC/LC for current selection
        else:
            cur_seq_name = self.ui.txtName.toPlainText()
            SQLStatement = 'SELECT SeqName,Blank10 FROM vgenesDB WHERE SeqName = "' + cur_seq_name + '"'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            barcode = DataIn[0][1]
            if barcode == 'Blank10' or barcode == '':
                QMessageBox.warning(self, 'Warning', 'Your barcode information is empty!',
                                    QMessageBox.Ok,
                                    QMessageBox.Ok)
                return

            SQLStatement = 'SELECT SeqName,Blank10 FROM vgenesDB WHERE Blank10 = "' + barcode + '"'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            i = len(DataIn) - 1
            if i == 0:
                QMessageBox.warning(self, 'Warning', 'Did not find any Heavy/Light chain using same barcode!',
                                    QMessageBox.Ok,
                                    QMessageBox.Ok)
                return
            else:
                if self.ui.treeWidget.isEnabled():
                    for record in DataIn:
                        Seqname = record[0]
                        found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                        for record1 in found:
                            wasClicked = True
                            record1.setCheckState(0, Qt.Checked)

                self.match_tree_to_table()

                QMessageBox.information(self, 'Information',
                                    'Found and checked ' + str(i) + ' Heavy/Light chain using same barcode!',
                                    QMessageBox.Ok,
                                    QMessageBox.Ok)

        '''

    def update_check_from_list(self, old_list, new_list, error_file):
        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass
        # update the checked list
        self.CheckedRecords = self.CheckedRecords + new_list
        # update tree checks if the tree is enabled
        if self.ui.treeWidget.isEnabled():
            for Seqname in new_list:
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                for record in found:
                    record.setCheckState(0, Qt.Checked)
        # open log file
        self.ShowVGenesText(error_file)

    def jump_to_HCLC(self, old_list, new_list, error_file):
        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass
        # update the checked list
        self.CheckedRecords = self.CheckedRecords + new_list
        # update tree checks if the tree is enabled
        if self.ui.treeWidget.isEnabled():
            for Seqname in new_list:
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                for record in found:
                    record.setCheckState(0, Qt.Checked)
        # open log file
        self.ShowVGenesText(error_file)

        # add them into HC/LC list
        shared = list(set(self.CheckedRecords).intersection(self.AntibodyCandidates))
        novel_ele = list(set(self.CheckedRecords).difference(self.AntibodyCandidates))
        notice = 'Checked records'

        # warn redundant sequences
        if len(shared) > 0:
            Msg = "Those sequences are already in the list:\n" + ", ".join(shared)
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        # update Antibody Candidate list if there is new sequences
        if len(novel_ele) > 0:
            self.AntibodyCandidates = self.AntibodyCandidates + novel_ele

            WhereState = 'SeqName IN ("' + '","'.join(novel_ele) + '")'

            SQLStatement = 'SELECT SeqName,GeneType,ClonalPool,V1,D1,J1,TotalMuts,Isotype,Blank10 FROM vgenesDB WHERE ' + WhereState
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            for item in DataIn:
                SeqName = item[0]
                Genetype = item[1]
                Clone = item[2]
                Vgene = item[3]
                Dgene = item[4]
                Jgene = item[5]
                TotalMuts = item[6]
                Isotype = item[7]
                barcode = item[8]

                if Genetype in ['Heavy', 'Beta', 'Delta']:
                    rowPosition = self.ui.tableWidgetHC.rowCount()
                    self.ui.tableWidgetHC.insertRow(rowPosition)
                    self.ui.tableWidgetHC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetHC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetHC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 4, QTableWidgetItem(Dgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 5, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 6, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetHC.setItem(rowPosition, 7, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 8, QTableWidgetItem(barcode))
                    self.ui.tableWidgetHC.setItem(rowPosition, 9, QTableWidgetItem(notice))
                else:
                    rowPosition = self.ui.tableWidgetLC.rowCount()
                    self.ui.tableWidgetLC.insertRow(rowPosition)
                    self.ui.tableWidgetLC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetLC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetLC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 4, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 5, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetLC.setItem(rowPosition, 6, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 7, QTableWidgetItem(barcode))
                    self.ui.tableWidgetLC.setItem(rowPosition, 8, QTableWidgetItem(notice))

            self.ui.tableWidgetHC.resizeColumnsToContents()
            self.ui.tableWidgetHC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetHC.horizontalHeader().sectionClicked.connect(self.sortHCtable)

            self.ui.tableWidgetLC.resizeColumnsToContents()
            self.ui.tableWidgetLC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetLC.horizontalHeader().sectionClicked.connect(self.sortLCtable)

        # step 4, jump to HC/LC list
        self.ui.tabWidget.setCurrentIndex(11)

    @pyqtSlot()
    def on_actionAlignment_triggered(self):
        self.ui.tabWidget.setCurrentIndex(3)

    @pyqtSlot()
    def on_actionSeqSimlarPct_triggered(self):
        #listItems = self.getTreeCheckedChild()
        listItems = self.CheckedRecords
        if len(listItems) < 2:
            QMessageBox.warning(self, 'Warning', 'Please check at least 2 sequences!',
                                QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        self.SeqSimilarity_thread = SeqSimilarity_thread(self)
        self.SeqSimilarity_thread.DBFilename = DBFilename
        self.SeqSimilarity_thread.checkRecords = listItems
        self.SeqSimilarity_thread.HCLC_progress.connect(self.result_display)
        self.SeqSimilarity_thread.HCLC_finish.connect(self.handle_alignment_html)
        self.SeqSimilarity_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_actionStructure_triggered(self):
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        html_path = os.path.join(temp_folder, time_stamp + '.html')
        template_file = os.path.join(working_prefix, 'Data', 'Miew.html')
        shutil.copyfile(template_file, html_path)

        # show local HTML
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        url = QUrl.fromLocalFile(str(html_path))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    @pyqtSlot()
    def on_pushButtonSeqIdCloneHTML_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        # fetch sequence names of this clone
        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())

        if len(member_names) < 2:
            QMessageBox.warning(self, 'Warning', 'Please check at least 2 sequences!',
                                QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        self.SeqSimilarity_thread = SeqSimilarity_thread(self)
        self.SeqSimilarity_thread.DBFilename = DBFilename
        self.SeqSimilarity_thread.checkRecords = member_names
        self.SeqSimilarity_thread.HCLC_progress.connect(self.result_display)
        self.SeqSimilarity_thread.HCLC_finish.connect(self.handle_alignment_html_clone)
        self.SeqSimilarity_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_actionAlignmentHTML_triggered(self):
        # load data
        listItems = self.CheckedRecords
        if len(listItems) == 0:
            Msg = 'Please check sequence from active sequence panel!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.Alignment_thread = Alignment_thread(self)
        self.Alignment_thread.DBFilename = DBFilename
        self.Alignment_thread.checkRecords = listItems
        self.Alignment_thread.HCLC_progress.connect(self.result_display)
        self.Alignment_thread.HCLC_finish.connect(self.handle_alignment_html)
        self.Alignment_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def handle_alignment_html(self, res):
        global VGenesTextWindows

        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass
        
        # check results
        if res[0] != 'OK':
            QMessageBox.warning(self, 'Warning', res[0], QMessageBox.Ok, QMessageBox.Ok)

        # delete close window objects
        del_list = []
        for id, obj in VGenesTextWindows.items():
            if obj.isVisible() == False:
                del_list.append(id)
        for id in del_list:
            del_obj = VGenesTextWindows.pop(id)

        # display
        html_file = res[1]
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        #view.load(QUrl("file://" + html_file))
        url = QUrl.fromLocalFile(str(html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    def loadNewickTree(self):
        treefile, _ = QtWidgets.QFileDialog.getOpenFileName(self, "select Newick file", '~/',
                                                          "Newick File (*.nwk);;All Files (*)")
        if treefile == '' or treefile == None:
            return
        self.ui.lineEditNewick.setText(treefile)

        # generate html page
        treefile = treefile
        f = open(treefile, 'r')
        tree_str = f.readline()
        f.close()
        tree_str = 'var test_string = "' + tree_str.rstrip("\n") + '";\n'

        out_html_file = os.path.join(temp_folder, 'newick_tree.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_newick_tree.html')
        shutil.copyfile(header_file, out_html_file)

        foot = 'var container_id = "#tree_container";\nvar svg = d3.select(container_id).append("svg")' \
               '.attr("width", width).attr("height", height);\n$( document ).ready( function () {' \
               'default_tree_settings();tree(test_string).svg (svg).layout();update_selection_names();' \
               '});\n</script>\n</body>\n</html>'
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(tree_str)
        out_file_handle.write(foot)
        out_file_handle.close()

        if self.ui.radioButtonNewick.isChecked():
            # display
            window_id = int(time.time() * 100)
            VGenesTextWindows[window_id] = htmlDialog()
            VGenesTextWindows[window_id].id = window_id
            layout = QGridLayout(VGenesTextWindows[window_id])
            view = QWebEngineView(self)
            #view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(out_html_file))
            view.load(url)
            view.show()
            layout.addWidget(view)
            VGenesTextWindows[window_id].show()
        else:
            # display
            view = QWebEngineView()
            #view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(out_html_file))
            view.load(url)
            view.show()

            layout = self.ui.groupBoxTree.layout()
            if layout == None:
                layout = QGridLayout(self.ui.groupBoxTree)
            else:
                for i in range(layout.count()):
                    layout.removeWidget(layout.itemAt(i).widget())
            layout.addWidget(view)

    @pyqtSlot()
    def on_pushButtonAlignHC_clicked(self):
        global VGenesTextWindows

        if self.ui.tableWidgetHC.rowCount() < 1:
            Msg = 'Too few sequences selected! At least one sequences required!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # fetch data
        seq_list = []
        for row in range(self.ui.tableWidgetHC.rowCount()):
            seq_list.append(self.ui.tableWidgetHC.item(row, 0).text())

        self.Alignment_thread = Alignment_thread(self)
        self.Alignment_thread.DBFilename = DBFilename
        self.Alignment_thread.checkRecords = seq_list
        self.Alignment_thread.HCLC_progress.connect(self.result_display)
        self.Alignment_thread.HCLC_finish.connect(self.handle_alignment_html)
        self.Alignment_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_pushButtonAlignLC_clicked(self):
        global VGenesTextWindows

        if self.ui.tableWidgetLC.rowCount() < 1:
            Msg = 'Too few sequences selected! At least one sequences required!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # fetch data
        seq_list = []
        for row in range(self.ui.tableWidgetLC.rowCount()):
            seq_list.append(self.ui.tableWidgetLC.item(row, 0).text())

        self.Alignment_thread = Alignment_thread(self)
        self.Alignment_thread.DBFilename = DBFilename
        self.Alignment_thread.checkRecords = seq_list
        self.Alignment_thread.HCLC_progress.connect(self.result_display)
        self.Alignment_thread.HCLC_finish.connect(self.handle_alignment_html)
        self.Alignment_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_pushButtonTreeHC_clicked(self):
        if self.ui.tableWidgetHC.rowCount() < 3:
            Msg = 'Too few sequences selected! At least three sequences required!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        seq_list = []
        for row in range(self.ui.tableWidgetHC.rowCount()):
            seq_list.append(self.ui.tableWidgetHC.item(row, 0).text())

        self.Tree_thread = Tree_thread(self)
        self.Tree_thread.DBFilename = DBFilename
        self.Tree_thread.checkRecords = seq_list
        self.Tree_thread.HCLC_progress.connect(self.result_display)
        self.Tree_thread.HCLC_finish.connect(self.handle_tree_html)
        self.Tree_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def on_pushButtonTreeLC_clicked(self):
        if self.ui.tableWidgetLC.rowCount() < 3:
            Msg = 'Too few sequences selected! At least three sequences required!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        seq_list = []
        for row in range(self.ui.tableWidgetLC.rowCount()):
            seq_list.append(self.ui.tableWidgetLC.item(row, 0).text())

        self.Tree_thread = Tree_thread(self)
        self.Tree_thread.DBFilename = DBFilename
        self.Tree_thread.checkRecords = seq_list
        self.Tree_thread.HCLC_progress.connect(self.result_display)
        self.Tree_thread.HCLC_finish.connect(self.handle_tree_html)
        self.Tree_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def on_pushButtonSelectTree_clicked(self):
        seq_list = self.CheckedRecords

        if len(seq_list) < 3:
            Msg = 'Too few sequences selected! At least three sequences required!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.Tree_thread = Tree_thread(self)
        self.Tree_thread.DBFilename = DBFilename
        self.Tree_thread.checkRecords = seq_list
        self.Tree_thread.HCLC_progress.connect(self.result_display)
        self.Tree_thread.HCLC_finish.connect(self.handle_tree_html_clone)
        self.Tree_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def buildCloneTree(self):
        clone_name = self.ui.comboBoxTree.currentText()
        tmp = clone_name.split('|')
        clone_name = re.sub('Clone','',tmp[1])

        WHEREStatement = 'WHERE ClonalPool = "' + clone_name + '"'
        SQLStatement = 'SELECT SeqName,ClonalPool FROM vgenesDB ' + WHEREStatement
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        if len(DataIn) < 3:
            Msg = 'Too few sequences in this clone! At least three sequences required!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        listItems = [ele[0] for ele in DataIn]

        self.Tree_thread = Tree_thread(self)
        self.Tree_thread.DBFilename = DBFilename
        self.Tree_thread.checkRecords = listItems
        self.Tree_thread.HCLC_progress.connect(self.result_display)
        self.Tree_thread.HCLC_finish.connect(self.handle_tree_html_clone)
        self.Tree_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def handle_tree_html_clone(self, res):
        global VGenesTextWindows

        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if res[0] != 'OK':
            QMessageBox.warning(self, 'Warning', res[0], QMessageBox.Ok, QMessageBox.Ok)
            return

        if self.ui.radioButtonNewick.isChecked():
            # display
            window_id = int(time.time() * 100)
            VGenesTextWindows[window_id] = htmlDialog()
            VGenesTextWindows[window_id].id = window_id
            layout = QGridLayout(VGenesTextWindows[window_id])
            view = QWebEngineView(self)
            # view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(res[1]))
            view.load(url)
            view.show()
            layout.addWidget(view)
            VGenesTextWindows[window_id].show()
        else:
            # display
            view = QWebEngineView()
            # view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(res[1]))
            view.load(url)
            view.show()

            layout = self.ui.groupBoxTree.layout()
            if layout == None:
                layout = QGridLayout(self.ui.groupBoxTree)
            else:
                for i in range(layout.count()):
                    layout.removeWidget(layout.itemAt(i).widget())
            layout.addWidget(view)

    def handle_tree_html(self, res):
        global VGenesTextWindows
        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        if res[0] != 'OK':
            QMessageBox.warning(self, 'Warning', res[0], QMessageBox.Ok, QMessageBox.Ok)
            return

        # display
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        # view.load(QUrl("file://" + out_html_file))
        url = QUrl.fromLocalFile(str(res[1]))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    def loadIgphyml(self):
        ig_out, _ = QtWidgets.QFileDialog.getOpenFileName(self, "select igphyml output", '~/',
                                                 "igphyml output File (*.tab);;All Files (*)")
        if ig_out == '' or ig_out == None:
            return
        self.ui.igphyml_line.setText(ig_out)

        trees = []
        f = open(ig_out, 'r')
        lines = f.readlines()
        f.close()
        if len(lines) < 3:
            QMessageBox.warning(self, 'Warning', 'No trees detected!',QMessageBox.Ok,QMessageBox.Ok)
            return
        lines = lines[2:]
        for line in lines:
            tmp_list = line.split('\t')
            this = ('Clone ' + tmp_list[0],tmp_list[14])
            trees.append(this)

        out_html_file = os.path.join(temp_folder, 'tree.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_tree.html')
        shutil.copyfile(header_file, out_html_file)

        tree_str = 'var trees = new Array();\n'
        i = 0
        for tree in trees:
            tree_str = tree_str + '$("#mySelect").append("<option value=' + "'" + str(i) + "'" + '>' + tree[0] + '</option>");\n'
            tree_str = tree_str + 'trees[' + str(i) + ']="' + tree[1].strip('\n') + '";\n'
            i += 1

        tree_str = tree_str + 'var test_string = trees[0];\n'

        foot = 'var container_id = "#tree_container";\nvar svg = d3.select(container_id).append("svg")' \
               '.attr("width", width).attr("height", height);\n$( document ).ready( function () {' \
               'default_tree_settings();tree(test_string).svg (svg).layout();update_selection_names();' \
               '});\n</script>\n</body>\n</html>'
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(tree_str)
        out_file_handle.write(foot)
        out_file_handle.close()

        print("html done!")

        if self.ui.radioButtonNewick.isChecked():
            # display
            window_id = int(time.time() * 100)
            VGenesTextWindows[window_id] = htmlDialog()
            VGenesTextWindows[window_id].id = window_id
            layout = QGridLayout(VGenesTextWindows[window_id])
            view = QWebEngineView(self)
            #view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(out_html_file))
            view.load(url)
            view.show()
            layout.addWidget(view)
            VGenesTextWindows[window_id].show()
        else:
            # display
            view = QWebEngineView()
            #view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(out_html_file))
            view.load(url)
            view.show()

            layout = self.ui.groupBoxTree.layout()
            if layout == None:
                layout = QGridLayout(self.ui.groupBoxTree)
            else:
                for i in range(layout.count()):
                    layout.removeWidget(layout.itemAt(i).widget())
            layout.addWidget(view)

    def makeNTLogo(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        listItems = self.CheckedRecords
        if len(listItems) < 1:
            msg = 'Please select(check) at least one sequence!'
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.SeqLogo_thread = SeqLogo_thread(self)
        self.SeqLogo_thread.DBFilename = DBFilename
        self.SeqLogo_thread.checkRecords = listItems
        self.SeqLogo_thread.type = 'NT'
        self.SeqLogo_thread.color = self.ui.comboBoxLogoColorNT.currentText()
        self.SeqLogo_thread.field = self.ui.comboBoxFieldLogo.currentText()
        self.SeqLogo_thread.HCLC_progress.connect(self.result_display)
        self.SeqLogo_thread.HCLC_finish.connect(self.handle_logo_html)
        self.SeqLogo_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def makeAALogo(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        listItems = self.CheckedRecords
        if len(listItems) < 1:
            msg = 'Please select(check) at least one sequence!'
            QMessageBox.warning(self, 'Warning', msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.SeqLogo_thread = SeqLogo_thread(self)
        self.SeqLogo_thread.DBFilename = DBFilename
        self.SeqLogo_thread.checkRecords = listItems
        self.SeqLogo_thread.type = 'AA'
        self.SeqLogo_thread.color = self.ui.comboBoxLogoColorAA.currentText()
        self.SeqLogo_thread.field = self.ui.comboBoxFieldLogo.currentText()
        self.SeqLogo_thread.HCLC_progress.connect(self.result_display)
        self.SeqLogo_thread.HCLC_finish.connect(self.handle_logo_html)
        self.SeqLogo_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def handle_logo_html(self, res):
        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        # check results
        if res[0] != 'OK':
            QMessageBox.warning(self, 'Warning', res[0], QMessageBox.Ok, QMessageBox.Ok)
            return

        data = res[1]
        format = res[2]

        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        if self.ui.radioButtonPop.isChecked():
            eps = eps_formatter(data, format)
            if system() == 'Windows':
                options = QtWidgets.QFileDialog.Options()
                out_eps, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                                   "New AA logo",
                                                                   "New AA logo",
                                                                   "Encapsulated PostScript Files (*.eps);;All Files (*)",
                                                                   options=options)
                if out_eps != 'none':
                    with open(out_eps, 'wb') as f:
                        f.write(eps)

                    Msg = 'You sequence logo EPS file has been saved at ' + out_eps
                    QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            elif system() == 'Darwin':
                out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                with open(out_eps, 'wb') as f:
                    f.write(eps)
                cmd = 'open ' + out_eps  # mac
            elif system() == 'Linux':
                out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                with open(out_eps, 'wb') as f:
                    f.write(eps)
                cmd = 'nautilus' + out_eps  # Linux
            else:
                cmd = ''
            bot1 = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True,
                         env={"LANG": "en_US.UTF-8", "LC_ALL": "en_US.UTF-8"})
        else:
            error = 0
            try:
                svg = svg_formatter(data, format)
                svg = svg.decode("utf-8")

                out_svg = os.path.join(temp_folder, "out-" + time_stamp + ".html")
                with open(out_svg, 'w') as f:
                    f.write('<!DOCTYPE html>\n<html>\n<body style="margin-left: 0px;\n">')
                    f.write(svg)
                    f.write('\n</body>\n</html>')

                # display
                view = QWebEngineView()
                # view.load(QUrl("file://" + out_svg))
                url = QUrl.fromLocalFile(str(out_svg))
                view.load(url)
                view.show()

                layout = self.ui.groupBoxLogo.layout()
                if layout == None:
                    layout = QGridLayout(self.ui.groupBoxLogo)
                else:
                    for i in range(layout.count()):
                        layout.removeWidget(layout.itemAt(i).widget())
                layout.addWidget(view)
            except:
                error = 1

            if error == 1:
                try:
                    # generate eps and png
                    eps = eps_formatter(data, format)
                    out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                    with open(out_eps, 'wb') as f:
                        f.write(eps)

                    im = Image.open(out_eps)
                    im.load(scale=4)
                    out_png = os.path.join(temp_folder, "out-" + time_stamp + ".png")
                    im.save(out_png)

                    # load png to HMTL
                    out_html = os.path.join(temp_folder, "out-" + time_stamp + ".html")
                    with open(out_html, 'w') as f:
                        f.write('<!DOCTYPE html>\n<html>\n<body style="margin-left: 0px;\n">')
                        f.write('<p><img src="' + out_png + '" width="960">')
                        f.write('</p>')
                        f.write('\n</body>\n</html>')

                    view = QWebEngineView()
                    # view.load(QUrl("file://" + out_svg))
                    url = QUrl.fromLocalFile(str(out_html))
                    view.load(url)
                    view.show()

                    layout = self.ui.groupBoxLogo.layout()
                    if layout == None:
                        layout = QGridLayout(self.ui.groupBoxLogo)
                    else:
                        for i in range(layout.count()):
                            layout.removeWidget(layout.itemAt(i).widget())
                    layout.addWidget(view)
                except:
                    eps = eps_formatter(data, format)
                    if system() == 'Windows':
                        options = QtWidgets.QFileDialog.Options()
                        out_eps, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                                           "New AA logo",
                                                                           "New AA logo",
                                                                           "Encapsulated PostScript Files (*.eps);;All Files (*)",
                                                                           options=options)
                        if out_eps != 'none':
                            with open(out_eps, 'wb') as f:
                                f.write(eps)

                            Msg = 'You sequence logo EPS file has been saved at ' + out_eps
                            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return
                    elif system() == 'Darwin':
                        out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                        with open(out_eps, 'wb') as f:
                            f.write(eps)
                        cmd = 'open ' + out_eps  # mac
                        bot1 = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True,
                                     env={"LANG": "en_US.UTF-8", "LC_ALL": "en_US.UTF-8"})
                        Msg = 'Supporting package missed! Will show sequence logo in a file!\n' + out_eps
                        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    elif system() == 'Linux':
                        out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                        with open(out_eps, 'wb') as f:
                            f.write(eps)
                        cmd = 'nautilus' + out_eps  # Linux
                        bot1 = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True,
                                     env={"LANG": "en_US.UTF-8", "LC_ALL": "en_US.UTF-8"})
                    else:
                        return

    def InitialGraphic(self):
        global DBFilename
        global updateMarker
        if DBFilename != '' and DBFilename != 'none' and DBFilename != None:
            #Msg = str(self.ui.tabWidget.currentIndex())
            #QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            # stat figure
            if self.ui.tabWidget.currentIndex() == 7:
                self.InitialGraphicFig()
            # Ig phylogeny
            elif self.ui.tabWidget.currentIndex() == 9:
                SQLStatement = 'SELECT GeneType,ClonalPool FROM vgenesDB WHERE ClonalPool <> "0"'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                if len(DataIn) > 1:
                    '''
                    list1 = []
                    for ele in DataIn:
                        list1.append(ele[0])
                    list_unique = list(set(list1))
                    if '0' in list_unique:
                        list_unique.remove('0')
                    if '' in list_unique:
                        list_unique.remove('')

                    if len(list_unique) > 0:
                        list_unique = [int(i) for i in list_unique]
                        list_unique.sort()
                        list_unique = ['Clone' + str(i) for i in list_unique]
                    '''
                    clone_dict = {}
                    list_unique = []
                    for ele in DataIn:
                        clone_name = ele[0] + '|' + 'Clone' + str(ele[1])
                        if clone_dict.__contains__(clone_name):
                            clone_dict[clone_name] += 1
                        else:
                            clone_dict[clone_name] = 1

                    for key, value in sorted(clone_dict.items(), key=lambda x: x[1], reverse=True):
                        list_unique.append(key + '|Num of seq: ' + str(value))

                    list_unique.sort(key=lambda x:x[0])
                    Vgenes.ui.comboBoxTree.clear()
                    Vgenes.ui.comboBoxTree.addItems(list_unique)
            # DB page
            elif self.ui.tabWidget.currentIndex() == 0:
                # if old table exists, skip
                if self.ui.SeqTable.columnCount() > 0:
                    pass
                    #if updateMarker == True:
                    #	self.load_table()
                    #	self.match_tree_to_table()
                    #	self.tree_to_table_selection()
                    #	updateMarker = False
                else:
                    max_number = self.ui.lcdNumber_max.value()
                    if max_number > 5000000:
                        message = 'Your current DB has more than 5000000 records (' + str(int(max_number)) + \
                                   '), loading a table with all details could be time-consuming ' \
                                   'and cause slow UI response，the table will be hide by default, ' \
                                   'you can click "Table" button to display/hide the table.\n'
                        QMessageBox.information(self, 'Information', message, QMessageBox.Ok, QMessageBox.Ok)
                        #self.load_table()
                        #self.match_tree_to_table()
                        #self.tree_to_table_selection()
                    else:
                        #worker = Worker(self.load_table)
                        #self.threadpool.start(worker)
                        self.load_table()
                        #self.match_tree_to_table()
                        self.tree_to_table_selection()
            # clone page
            elif self.ui.tabWidget.currentIndex() == 10:
                self.initial_Clone()
            # table view page
            elif self.ui.tabWidget.currentIndex() == 2:
                self.GenerateTableView()
                #self.ui.tableWidgetTableView.item(0, 0).row()
            # sequence logo page
            elif self.ui.tabWidget.currentIndex() == 8:
                layout = self.ui.groupBoxLogo.layout()
                if layout == None:
                    if system() == 'Windows':
                        # display
                        view = QWebEngineView()
                        out_svg = os.path.join(working_prefix, 'Data', 'win.html')
                        url = QUrl.fromLocalFile(str(out_svg))
                        view.load(url)
                        view.show()
                        layout = QGridLayout(self.ui.groupBoxLogo)
                        layout.addWidget(view)
                    elif system() == 'Darwin':
                        # display
                        view = QWebEngineView()
                        out_svg = os.path.join(working_prefix, 'Data', 'mac.html')
                        url = QUrl.fromLocalFile(str(out_svg))
                        view.load(url)
                        view.show()
                        layout = self.ui.groupBoxLogo.layout()
                        layout = QGridLayout(self.ui.groupBoxLogo)
                        layout.addWidget(view)
                    else:
                        print('system not support!')
                else:
                    print('layout exist!')

            self.lastTab = self.ui.tabWidget.currentIndex()

    def InitialGraphicFig(self):
        if self.ui.tabWidgetFig.currentIndex() == 0:
            if self.ui.comboBoxPie.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxPie.clear()
                self.ui.comboBoxPie.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 1:
            if self.ui.comboBoxCol1.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxCol1.clear()
                self.ui.comboBoxCol1.addItems(fields_name)
                self.ui.comboBoxCol2.clear()
                self.ui.comboBoxCol2.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 2:
            if self.ui.comboBoxBoxData.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxBoxData.clear()
                self.ui.comboBoxBoxData.addItems(fields_name)
                self.ui.comboBoxBox1.clear()
                self.ui.comboBoxBox1.addItems(fields_name)
                self.ui.comboBoxBox2.clear()
                self.ui.comboBoxBox2.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 3:
            if self.ui.comboBoxWord.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxWord.clear()
                self.ui.comboBoxWord.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 4:
            if self.ui.comboBoxRiver1.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxRiver1.clear()
                self.ui.comboBoxRiver1.addItems(fields_name)
                self.ui.comboBoxRiver2.clear()
                self.ui.comboBoxRiver2.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 5:
            if self.ui.comboBoxTree1.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxTree1.clear()
                self.ui.comboBoxTree1.addItems(fields_name)
                self.ui.comboBoxTree2.clear()
                self.ui.comboBoxTree2.addItems(fields_name)
                self.ui.comboBoxTree3.clear()
                self.ui.comboBoxTree3.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 6:
            if self.ui.comboBoxScatterX.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxScatterX.clear()
                self.ui.comboBoxScatterX.addItems(fields_name)
                self.ui.comboBoxScatterY.clear()
                self.ui.comboBoxScatterY.addItems(fields_name)
                self.ui.comboBoxScatterGroup.clear()
                self.ui.comboBoxScatterGroup.addItems(fields_name)
        elif self.ui.tabWidgetFig.currentIndex() == 7:
            if self.ui.comboBoxSortField.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxSortField.clear()
                self.ui.comboBoxSortField.addItems(fields_name)
                self.ui.listWidgetAll.clear()
                self.ui.listWidgetAll.addItems(fields_name[1:])
        elif self.ui.tabWidgetFig.currentIndex() == 9:
            if self.ui.comboBoxSankey1.count() == 0:
                fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
                self.ui.comboBoxSankey1.clear()
                self.ui.comboBoxSankey2.clear()
                self.ui.comboBoxSankey3.clear()
                self.ui.comboBoxSankey4.clear()
                self.ui.comboBoxSankey1.addItems(fields_name)
                self.ui.comboBoxSankey2.addItems(fields_name)
                self.ui.comboBoxSankey3.addItems(fields_name)
                self.ui.comboBoxSankey4.addItems(fields_name)
        else:
            return

    def GenerateTableView(self):
        # clear table if table exists
        if self.ui.tableWidgetTableView.rowCount() > 0:
            self.ui.tableWidgetTableView.setRowCount(0)
            self.ui.tableWidgetTableView.setColumnCount(0)
            self.ui.tableWidgetTableView.currentItemChanged.disconnect(self.bindToSearch)
            self.ui.tableWidgetTableView.itemChanged.disconnect(self.AutoSaveTable)

        # get current record
        currentName = self.ui.txtName.toPlainText()
        # fetch data for current record
        SQLStatement = 'SELECT * FROM vgenesdb WHERE SeqName = "' + currentName + '"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) == 0:
            return
        Records = DataIn[0]
        # make table
        horizontalHeader = ['Field', 'Field Name', 'Value']
        num_row = len(FieldList)
        num_col = len(horizontalHeader)
        self.ui.tableWidgetTableView.setRowCount(num_row)
        self.ui.tableWidgetTableView.setColumnCount(num_col)
        self.ui.tableWidgetTableView.setHorizontalHeaderLabels(horizontalHeader)
        self.ui.tableWidgetTableView.horizontalHeader().setStretchLastSection(True)
        self.ui.SeqTable.horizontalHeader().resizeSection(0, 12)
        self.ui.SeqTable.horizontalHeader().resizeSection(1, 18)

        #a = FieldList
        #b = RealNameList
        for row_index in range(num_row):
            print(str(row_index))
            unit1 = QTableWidgetItem(FieldList[row_index])
            unit1.setFlags(Qt.ItemIsEnabled)
            unit2 = QTableWidgetItem(RealNameList[row_index])
            unit2.setFlags(Qt.ItemIsEnabled)
            unit3 = QTableWidgetItem(str(Records[row_index]))
            if row_index == 0:
                unit3.setFlags(Qt.ItemIsEnabled)

            self.ui.tableWidgetTableView.setItem(row_index, 0, unit1)
            self.ui.tableWidgetTableView.setItem(row_index, 1, unit2)
            self.ui.tableWidgetTableView.setItem(row_index, 2, unit3)

        self.ui.tableWidgetTableView.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
        self.ui.tableWidgetTableView.setSelectionMode(QAbstractItemView.SingleSelection)
        self.ui.tableWidgetTableView.setSelectionBehavior(QAbstractItemView.SelectItems)
        # bind selection
        self.ui.tableWidgetTableView.currentItemChanged.connect(self.bindToSearch)
        self.ui.tableWidgetTableView.itemChanged.connect(self.AutoSaveTable)

    def AutoSaveTable(self, item):
        global MoveNotChange
        global NameIndex
        if MoveNotChange:
            return

        if self.ui.checkBoxAutoSave.isChecked():
            row = item.row()
            col = item.column()
            CurVal = item.text()

            col_name = self.ui.tableWidgetTableView.item(row, 0).text()
            SeqName = self.ui.tableWidgetTableView.item(0, 2).text()

            try:
                old_name = self.ui.txtName.toPlainText()
                if row == 0:  # update sequence name
                    self.UpdateSeq(SeqName, CurVal, col_name)
                    SQLFields = (
                        re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText()),
                        re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText()),
                        re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
                    )
                    if self.ui.treeWidget.isEnabled():
                        self.initializeTreeView(SQLFields)
                        self.ui.treeWidget.expandAll()
                    self.updateF(-2)
                else:
                    self.UpdateSeq(SeqName, CurVal, col_name)
            except:
                MoveNotChange = True
                col = item.column()
                self.ui.SeqTable.item(row, col).setText(SeqName)
                MoveNotChange = False
                QMessageBox.warning(self, 'Warning',
                                    'The name:\n' + CurVal + '\nhas been taken! Please choose another name!',
                                    QMessageBox.Ok, QMessageBox.Ok)



    def bindToSearch(self, current, previous):
        global LastSelected
        try:
            row_index = current.row()
            # disable auto-update for sequence name
            if row_index == 0:
                return
            fieldName = self.ui.tableWidgetTableView.item(row_index, 0).text()
            valueis = self.ui.tableWidgetTableView.item(row_index, 2).text()
            LastSelected = (fieldName, valueis)
            field = LastSelected[0]
            # Fiedlvalue = self.TransLateFieldtoReal(field, False)
            Fiedlvalue = self.makeFieldName(field)
            self.ui.cboFindField.setCurrentText(Fiedlvalue)
    
            self.ui.fieldLine.setText(fieldName)
            self.ui.valueLine.setText(valueis)
        except:
            return


    def load_table(self):
        if self.ui.SeqTable.columnCount() > 0:
            self.ui.SeqTable.itemChanged.disconnect(self.EditTableItem)
        self.ui.SeqTable.setColumnCount(0)
        self.ui.SeqTable.setRowCount(0)

        try:
            # load data for new table
            if DBFilename != '' and DBFilename != 'none' and DBFilename != None:
                #self.progress = ProgressBar(self)
                #self.progress.setLabel('Modifying barcodes ...')
                #self.progress.show()

                #pct = 0
                #label = "Fetching data ..."
                #self.progressLabel(pct, label)

                field1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
                field2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
                field3 = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())

                # paging system
                pageSize = int(self.ui.spinBoxPageSize.text())
                if self.ui.SeqTable.pageSize == pageSize:
                    pass
                else:
                    self.ui.SeqTable.pageSize = pageSize
                    self.ui.labelCurPage.setText('1')

                CurPage = int(self.ui.labelCurPage.text()) - 1
                #RecordLimitStatement = " LIMIT " + str(CurPage * pageSize) + "," + str((CurPage + 1) * pageSize)
                RecordLimitStatement = " LIMIT " + str(CurPage * pageSize) + "," + str(pageSize)
                SQLStatement = 'SELECT COUNT(*) FROM vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                TotalRecords = DataIn[0][0]
                TotalRecordsStr = str(math.ceil(TotalRecords/pageSize))
                self.ui.labelTotalPage.setText(TotalRecordsStr)

                SQLStatement = 'SELECT Field,FieldNickName FROM fieldsname WHERE display = "yes" ORDER BY display_priority,ID LIMIT 0,200'
                HeaderIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                current_field_list = [i[0] for i in HeaderIn]
                current_nickname_list = [i[1] for i in HeaderIn]
                fields = ','.join(current_field_list)
                if fields == '':
                    fields = '*'
                SQLStatement = 'select '+ fields +' from vgenesdb ORDER BY ' + field1 + ',' + field2 + ',' + field3 + ',SeqName'
                SQLStatement += RecordLimitStatement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                #pct = 0
                #label = "Initial Table ..."
                #self.progressLabel(pct, label)

                num_row = len(DataIn)
                num_col = len(current_field_list)
                self.ui.SeqTable.setRowCount(num_row)
                self.ui.SeqTable.setColumnCount(num_col + 1)

                horizontalHeader = [''] + current_nickname_list
                self.ui.SeqTable.setHorizontalHeaderLabels(horizontalHeader)
                self.ui.SeqTable.fields = horizontalHeader
                # re-size column size
                self.ui.SeqTable.horizontalHeader().resizeSection(0, 10)
                self.ui.SeqTable.setSelectionMode(QAbstractItemView.ExtendedSelection)
                if self.ui.checkBoxRowSelection.isChecked():
                    self.ui.SeqTable.setSelectionBehavior(QAbstractItemView.SelectRows)
                else:
                    self.ui.SeqTable.setSelectionBehavior(QAbstractItemView.SelectItems)

                #process = 1
                for row_index in range(num_row):
                    cell_checkBox = QCheckBox()
                    cell_checkBox.id = str(DataIn[row_index][0])
                    # cell_checkBox.setText(DataIn[row_index][0])
                    if str(DataIn[row_index][0]) in self.CheckedRecords:
                        cell_checkBox.setChecked(True)
                    else:
                        cell_checkBox.setChecked(False)
                    cell_checkBox.stateChanged.connect(self.multipleSelection)
                    self.ui.SeqTable.setCellWidget(row_index, 0, cell_checkBox)

                    for col_index in range(num_col):
                        unit = QTableWidgetItem(str(DataIn[row_index][col_index]))
                        unit.last_name = DataIn[row_index][col_index]
                        self.ui.SeqTable.setItem(row_index, col_index + 1, unit)

                    #pct = int(process / num_row * 100)
                    #label = "Loading records: " + str(process) + '/' + str(num_row)
                    #self.progressLabel(pct, label)
                    #process += 1


                # disable edit
                if self.ui.SeqTable.EditTag == True:
                    self.ui.SeqTable.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
                else:
                    self.ui.SeqTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
                # show sort indicator
                self.ui.SeqTable.horizontalHeader().setSortIndicatorShown(True)
                # connect sort indicator to slot function
                self.ui.SeqTable.horizontalHeader().sectionClicked.connect(self.sortTable)
                self.ui.SeqTable.itemChanged.connect(self.EditTableItem)
        except:
            return
        # try multi-thread
        '''
        if DBFilename != '' and DBFilename != 'none' and DBFilename != None:
            
            self.loadTable_thread = LoadTable_thread(self)
            self.loadTable_thread.DBFilename = DBFilename
            self.loadTable_thread.vgene = self
            self.loadTable_thread.trigger.connect(self.ShowMessageBox)
            self.loadTable_thread.loadProgress.connect(self.progressLabel)
            self.loadTable_thread.start()
                
            self.progress = ProgressBar(self)
            self.progress.setLabel('Modifying barcodes ...')
            self.progress.show()
        '''

    @pyqtSlot()
    def on_pushButtonFirstPage_clicked(self):
        if self.ui.labelCurPage.text() == '1':
            Msg = 'This is already the first page!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            self.ui.labelCurPage.setText("1")
            self.load_table()

    @pyqtSlot()
    def on_pushButtonPreviousPage_clicked(self):
        if self.ui.labelCurPage.text() == '1':
            Msg = 'This is already the first page!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            CurPage = int(self.ui.labelCurPage.text()) - 1
            self.ui.labelCurPage.setText(str(CurPage))
            self.load_table()

    @pyqtSlot()
    def on_pushButtonNextPage_clicked(self):
        if self.ui.labelCurPage.text() == self.ui.labelTotalPage.text():
            Msg = 'This is already the last page!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            CurPage = int(self.ui.labelCurPage.text()) + 1
            self.ui.labelCurPage.setText(str(CurPage))
            self.load_table()

    @pyqtSlot()
    def on_pushButtonLastPage_clicked(self):
        if self.ui.labelCurPage.text() == self.ui.labelTotalPage.text():
            Msg = 'This is already the last page!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            self.ui.labelCurPage.setText(self.ui.labelTotalPage.text())
            self.load_table()

    @pyqtSlot()
    def on_pushButtonJumpTo_clicked(self):
        setPage = self.ui.lineEditPageNumber.text()
        maxPage = self.ui.labelTotalPage.text()
        try:
            setPage = int(setPage)
            maxPage = int(maxPage)
            if setPage < 1:
                Msg = 'Page number can not < 1!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            elif setPage > maxPage:
                Msg = 'Page number can not > than Max page!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            else:
                self.ui.labelCurPage.setText(str(setPage))
                self.load_table()
        except:
            Msg = 'Please type page numbers!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def clearCheck(self):
        self.ui.checkBoxAll1.setChecked(False)
        self.ui.checkBoxAll.setChecked(False)
        self.clearTreeChecks()
        self.CheckedRecords = []
        self.match_tree_to_table()

        self.ui.label_Name.setText(self.ui.txtName.toPlainText())

    def checkAll(self):
        global MoveNotChange
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        MoveNotChange = True
        rows = self.ui.SeqTable.rowCount()
        if rows > 0:
            if self.ui.checkBoxAll.isChecked():
                self.ui.checkBoxAll1.setChecked(True)
                for row in range(rows):
                    self.ui.SeqTable.cellWidget(row, 0).setChecked(True)
                self.TreeChecksAll()
                # update check list
                SQLStatement = 'SELECT SeqName from vgenesdb'
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                self.CheckedRecords = [u[0] for u in DataIn]
            else:
                self.ui.checkBoxAll1.setChecked(False)
                for row in range(rows):
                    self.ui.SeqTable.cellWidget(row, 0).setChecked(False)
                # update check list
                self.CheckedRecords = []
            MoveNotChange = False
        else:
            if self.ui.checkBoxAll.isChecked():
                self.ui.checkBoxAll1.setChecked(True)
            else:
                self.ui.checkBoxAll1.setChecked(False)
            self.checkAll1()

    def checkAll1(self):
        global MoveNotChange
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        MoveNotChange = True
        rows = self.ui.SeqTable.rowCount()
        if self.ui.checkBoxAll1.isChecked():
            self.ui.checkBoxAll.setChecked(True)
            # check table
            if rows > 0:
                for row in range(rows):
                    self.ui.SeqTable.cellWidget(row, 0).setChecked(True)
            # check trre
            if self.ui.treeWidget.isEnabled():
                root = self.ui.treeWidget.invisibleRootItem()
                self.TreeChecksAll()
            # update check list
            SQLStatement = 'SELECT SeqName from vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            self.CheckedRecords = [u[0] for u in DataIn]
        else:
            self.ui.checkBoxAll.setChecked(False)
            # check table
            if rows > 0:
                for row in range(rows):
                    self.ui.SeqTable.cellWidget(row, 0).setChecked(False)
            # check trre
            if self.ui.treeWidget.isEnabled():
                root = self.ui.treeWidget.invisibleRootItem()
                self.clearTreeChecks()
            # update check list
            self.CheckedRecords = []
        MoveNotChange = False

    def multipleSelection(self, int_signal):
        global MoveNotChange
        if MoveNotChange:
            return

        sender = self.sender()
        sender_name = sender.id

        MoveNotChange = True
        buttonClicked = self.sender()
        postitionOfWidget = buttonClicked.pos()
        index = self.ui.SeqTable.indexAt(postitionOfWidget)
        row = index.row()

        # get all selected rows
        rows = []
        item = self.ui.SeqTable.selectedItems()
        for i in item:
            if self.ui.SeqTable.indexFromItem(i).row() not in rows:
                rows.append(self.ui.SeqTable.indexFromItem(i).row())

        # prepare names
        checked_names = []
        # if current row in selected rows, check all rows
        if row in rows:
            for cur_row in rows:
                if cur_row != row:
                    if int_signal == 2:		# signal = 2 means check event
                        self.ui.SeqTable.cellWidget(cur_row, 0).setChecked(True)
                    else:
                        self.ui.SeqTable.cellWidget(cur_row, 0).setChecked(False)

            for cur_row in rows:
                checked_names.append(self.ui.SeqTable.item(cur_row, 1).text())
        else:
            checked_names.append(sender_name)

        if int_signal == 2:
            events = True
            for name in checked_names:
                self.CheckedRecords.append(name)
        else:
            events = False
            for name in checked_names:
                try:
                    self.CheckedRecords.remove(name)
                except:
                    print(name + ':Not in the list')
        self.match_table_to_tree(checked_names, events)
        MoveNotChange = False


    def match_tree_to_table(self):
        global MoveNotChange
        # check if checked item changed
        if self.ui.treeWidget.isEnabled():
            selected_list = self.getTreeCheckedChild()
            selected_list = selected_list[3]
            self.CheckedRecords = selected_list
        else:
            selected_list = self.CheckedRecords

        MoveNotChange = True
        rows = self.ui.SeqTable.rowCount()
        for row in range(rows):
            cur_name = self.ui.SeqTable.item(row, 1).text()
            if cur_name in selected_list:
                self.ui.SeqTable.cellWidget(row, 0).setChecked(True)
            else:
                self.ui.SeqTable.cellWidget(row, 0).setChecked(False)
        MoveNotChange = False

    def match_table_to_tree(self, names, events):
        if self.ui.treeWidget.isEnabled():
            # update the selection
            if events == True:
                action = Qt.Checked
            else:
                action = Qt.Unchecked
    
            NumFound = len(names)
            i = 0
            for Seqname in names:
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                i += 1
                for record in found:
                    if i == NumFound - 1:
                        wasClicked = True
                    record.setCheckState(0, action)

    def match_table_to_tree_old(self):
        if self.ui.treeWidget.isEnabled():
            DataIn = []
            # get all checked table rows
            total_rows = self.ui.SeqTable.rowCount()
            for row in range(total_rows):
                if self.ui.SeqTable.cellWidget(row, 0).isChecked():
                    DataIn.append(self.ui.SeqTable.item(row, 1).text())
    
            # update the selection
            self.clearTreeChecks()
            NumFound = len(DataIn)
            i = 0
            for Seqname in DataIn:
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                i += 1
                for record in found:
                    if i == NumFound - 1:
                        wasClicked = True
                    record.setCheckState(0, Qt.Checked)

    def EditTableItem(self, item):
        global MoveNotChange
        global NameIndex

        if MoveNotChange:
            return

        row = item.row()
        col = item.column()
        CurVal = item.text()

        horizontalHeader = self.ui.SeqTable.fields
        col_name = horizontalHeader[col]
        index = RealNameList.index(col_name)
        col_name = FieldList[index]

        if col == 1:  # update sequence name
            SeqName = item.last_name
        else:
            SeqName = self.ui.SeqTable.item(row, 1).text()

        try:
            self.UpdateSeq(SeqName, CurVal, col_name)
            if col == 1:  # update sequence name
                item.last_name = CurVal

                # update name index
                #NameIndex[CurVal] = NameIndex[SeqName]
                #del NameIndex[SeqName]
                #refresh model
                #model = self.ui.tableView.model()
                #model.refresh()
                # update tree
                #SQLFields = (
                #self.ui.cboTreeOp1.currentText(), self.ui.cboTreeOp2.currentText(), self.ui.cboTreeOp3.currentText())
                '''
                index1 = RealNameList.index(self.ui.cboTreeOp1.currentText())
                index2 = RealNameList.index(self.ui.cboTreeOp2.currentText())
                index3 = RealNameList.index(self.ui.cboTreeOp3.currentText())

                SQLFields = (FieldList[index1], FieldList[index2], FieldList[index3])
                '''
                SQLFields = (
                    re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText()),
                    re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText()),
                    re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
                )
                if self.ui.treeWidget.isEnabled():
                    self.initializeTreeView(SQLFields)
                    self.ui.treeWidget.expandAll()
        except:
            MoveNotChange = True
            col = item.column()
            self.ui.SeqTable.item(row, col).setText(SeqName)
            MoveNotChange = False
            QMessageBox.warning(self, 'Warning',
                                'The name:\n' + CurVal + '\nhas been taken! Please choose another name!',
                                QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def UpdateSeq(self, ID, ItemValue, FieldName):
        global DBFilename
        # ID = item[0]
        VGenesSQL.UpdateFieldbySeqName(ID, ItemValue, FieldName, DBFilename)

    def sortTable(self, index):
        if self.ui.tabWidget.currentIndex() == 9:
            self.ui.SeqTable.sortByColumn(index, self.ui.SeqTable.horizontalHeader().sortIndicatorOrder())
        else:
            self.ui.SeqTable.sortByColumn(index, self.ui.SeqTable.horizontalHeader().sortIndicatorOrder())

    def ChangeEditMode(self):
        if self.ui.SeqTable.editTriggers() == QtWidgets.QAbstractItemView.NoEditTriggers:
            unlock_icon = QIcon()
            unlock_icon.addPixmap(QPixmap(":/PNG-Icons/unlocked.png"), QIcon.Normal, QIcon.Off)
            self.ui.EditLock.setIcon(unlock_icon)
            self.ui.EditLock.setText('Edit \nunlock')
            self.ui.SeqTable.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.ui.SeqTable.EditTag = True
        else:
            lock_icon = QIcon()
            lock_icon.addPixmap(QPixmap(":/PNG-Icons/locked.png"), QIcon.Normal, QIcon.Off)
            self.ui.EditLock.setIcon(lock_icon)
            self.ui.EditLock.setText('Edit \nlocked')
            self.ui.SeqTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.ui.SeqTable.EditTag = False

    @pyqtSlot()
    def on_actionBatchChangeName_triggered(self):
        self.renameDialog = RenameDialog()
        self.renameDialog.show()

    @pyqtSlot()
    def on_actionIdentifyPublicClone_triggered(self):
        SQLStatement = 'SELECT GeneType,ClonalPool FROM vgenesDB WHERE ClonalPool <> "0"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) > 1:
            QueryIS = 'Please choose field that contains sample/subject/batch information:'
            Fields = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
            fieldName = getItemDial(self, QueryIS, Fields)
            if fieldName == None:
                return
            fieldName = re.sub('\(.+', '', fieldName)

            SQLStatement = 'SELECT GeneType,ClonalPool,' + fieldName + ' FROM vgenesDB WHERE ClonalPool <> "0" ORDER BY ClonalPool'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if len(DataIn) > 1:
                clone_dict = {}
                clone_public = {}
                list_unique = []
                for ele in DataIn:
                    clone_name = ele[0] + '|' + 'Clone' + str(ele[1])
                    if clone_dict.__contains__(clone_name):
                        clone_dict[clone_name] += 1
                    else:
                        clone_dict[clone_name] = 1

                    if clone_public.__contains__(clone_name):
                        if clone_public[clone_name] != ele[2]:
                            clone_public[clone_name] = 'public'
                    else:
                        clone_public[clone_name] = ele[2]

                for key, value in sorted(clone_dict.items(), key=lambda x: x[1], reverse=True):
                    list_unique.append(key)

                list_unique.sort(key=lambda x: x[0])
                num_public = 0
                self.ui.listWidgetClone.clear()
                for clone_item in list_unique:
                    clone_text = clone_item + '|Num of seq: ' + str(clone_dict[clone_item])
                    self.ui.listWidgetClone.addItem(clone_text)
                    if clone_public[clone_item] == "public":
                        index = self.ui.listWidgetClone.count() - 1
                        self.ui.listWidgetClone.item(index).setForeground(QColor('red'))
                        self.ui.listWidgetClone.item(index).setBackground(QColor('#e6d933'))
                        num_public += 1

                Msg = 'Total ' + str(num_public) + ' public clones found! We highlighted them in red!'
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
        else:
            Msg = 'Did not find any clone in your dataset! Please identify clone first (Tools -> Find Clones)!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

    @pyqtSlot()
    def on_pushButtonPublicClone_clicked(self):
        print('Find public clone')
        self.on_actionIdentifyPublicClone_triggered()

    def GenerateFigureClone(self):
        msg = 'h:' + str(self.ui.HTMLviewClone.h) + ',w:' +str(self.ui.HTMLviewClone.w)
        print(msg)

        global DBFilename
        # global data

        # select data or not
        clone_id = self.ui.lineEditCloneName.text()
        clone_id = re.sub('Clone','',clone_id)
        try:
            int(clone_id)
        except:
            return
        where_statement = 'WHERE ClonalPool = "' + clone_id + '"'

        # pie chart
        if self.ui.tabWidgetClone.currentIndex() == 0:
            # get data
            field = re.sub(r'\(.+', '', self.ui.comboBoxPieClone.currentText())
            if field == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if len(DataIn) == 0:
                Msg = 'No records can be fetched!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            data = []
            for element in DataIn:
                data.append(element[0])
            result = Counter(data)
            labels = result.keys()
            values = result.values()

            my_pyecharts = (
                Pie(init_opts=opts.InitOpts(width=str(self.ui.HTMLviewClone.w)+"px", height=str(self.ui.HTMLviewClone.h)+"px", renderer='svg'))\
                .add('', [list(z) for z in zip(labels, values)], radius=["40%", "75%"])\
                .set_global_opts(
                    title_opts=opts.TitleOpts(title=""),
                    legend_opts=opts.LegendOpts(
                        is_show=self.ui.checkBoxFigLegendClone.isChecked()
                    ),
                )
                .set_series_opts(label_opts=opts.LabelOpts(formatter=" {b}: {c} ({d}%)"))
            )  #
        # Bar chart
        elif self.ui.tabWidgetClone.currentIndex() == 1:
            # get data
            field1 = re.sub(r'\(.+', '', self.ui.comboBoxCol1Clone.currentText())
            field2 = re.sub(r'\(.+', '', self.ui.comboBoxCol2Clone.currentText())
            if field1 == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            if field2 == field1:
                QMessageBox.warning(self, 'Warning', 'Please select different group factors for field1 and field2!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return

            multi_factor = False
            if field2 == "":
                field = field1
            else:
                field = field1 + "," + field2
                multi_factor = True
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if multi_factor == True:
                if self.ui.checkBoxStackClone.isChecked():
                    stack = "stack1"
                else:
                    stack = None

                if self.ui.checkBoxYClone.isChecked():
                    labels = []
                    values = []
                    try:
                        for element in DataIn:
                            labels.append(element[0])
                            values.append(int(element[1]))
                    except:
                        QMessageBox.warning(self, 'Warning', 'Some values of your field2 are not numbers!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return

                    my_pyecharts = (
                        Bar(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                            .add_xaxis(labels)
                            .add_yaxis(field2, values)
                            .set_global_opts(
                            title_opts=opts.TitleOpts(title=""),
                            legend_opts=opts.LegendOpts(
                                is_show=self.ui.checkBoxFigLegend.isChecked()
                            ),
                        )
                            .set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {b}: {c}"))
                    )
                else:
                    label_data = []
                    for element in DataIn:
                        label_data.append(element[0])

                    result = Counter(label_data)
                    labels = list(result.keys())
                    values = list(result.values())

                    data = {}
                    for element in DataIn:
                        if data.__contains__(element[1]):
                            data[element[1]] = data[element[1]] + [element[0]]
                        else:
                            data[element[1]] = [element[0]]

                    dic_keys = list(data.keys())

                    my_bar = Bar(init_opts=opts.InitOpts(width=str(self.ui.HTMLviewClone.w)+"px", height=str(self.ui.HTMLviewClone.h)+"px", renderer='svg')) \
                        .add_xaxis(labels) \
                        .set_global_opts(
                            title_opts=opts.TitleOpts(title=""),
                            legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                            xaxis_opts=opts.AxisOpts(
                                name=field1,
                                name_location='center',
                                name_gap=30,
                            ),
                            yaxis_opts=opts.AxisOpts(
                                name='Count',
                                name_location='center',
                                name_gap=30,
                            ),
                        )

                    for group in dic_keys:
                        cur_data = data[group]
                        group_data = []
                        for ele in labels:
                            group_data.append(cur_data.count(ele))
                        my_bar.add_yaxis(group, group_data, stack=stack)
                    my_bar.set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {b}: {c}"))

                    my_pyecharts = (
                        my_bar
                    )
            else:
                data = []
                for element in DataIn:
                    data.append(element[0])

                result = Counter(data)
                labels = list(result.keys())
                values = list(result.values())

                my_pyecharts = (
                    Bar(init_opts=opts.InitOpts(width=str(self.ui.HTMLviewClone.w)+"px", height=str(self.ui.HTMLviewClone.h)+"px", renderer='svg'))
                    .add_xaxis(labels)
                    .add_yaxis(field1, values)
                    .set_global_opts(
                        title_opts=opts.TitleOpts(title=""),
                        legend_opts=opts.LegendOpts(
                            is_show=self.ui.checkBoxFigLegendClone.isChecked()
                        ),
                    )
                    .set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {b}: {c}"))
                )
        # Box plot
        elif self.ui.tabWidgetClone.currentIndex() == 2:
            # get data
            data_field = re.sub(r'\(.+', '', self.ui.comboBoxBoxDataClone.currentText())
            field1 = re.sub(r'\(.+', '', self.ui.comboBoxBox1Clone.currentText())
            field2 = re.sub(r'\(.+', '', self.ui.comboBoxBox2Clone.currentText())
            if field1 == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            if field2 == field1:
                QMessageBox.warning(self, 'Warning', 'Please select different group factors for field1 and field2!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            multi_factor = False
            if field2 == "":
                field = data_field + "," + field1
            else:
                field = data_field + "," + field1 + "," + field2
                multi_factor = True
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            box_data = [i[0] for i in DataIn]
            try:
                box_data = list(map(float, box_data))
            except:
                QMessageBox.warning(self, 'Warning', 'The data field is not numerical! Check your input!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return

            if min(box_data) >= 0:
                null_data = [0, 0, 0, 0, 0]
            else:
                null_data = [min(box_data), min(box_data), min(box_data), min(box_data), min(box_data)]

            if multi_factor == True:
                label_data = []
                g2_label = []
                for element in DataIn:
                    label_data.append(element[1])
                    g2_label.append(element[2])

                result = Counter(label_data)
                labels = list(result.keys())

                g2_dict = {}
                i = 0
                for ele in g2_label:
                    if g2_dict.__contains__(ele):
                        g2_dict[ele] = g2_dict[ele] + [i]
                    else:
                        g2_dict[ele] = [i]
                    i += 1
                g2_dict_keys = list(g2_dict.keys())

                my_bar = Boxplot(init_opts=opts.InitOpts(width=str(self.ui.HTMLviewClone.w)+"px", height=str(self.ui.HTMLviewClone.h)+"px", renderer='svg')) \
                    .add_xaxis(labels) \
                    .set_global_opts(
                        title_opts=opts.TitleOpts(title=""),
                        legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                        xaxis_opts=opts.AxisOpts(
                            name=field1,
                            name_location='center',
                            name_gap=30,
                        ),
                        yaxis_opts=opts.AxisOpts(
                            name='Count',
                            name_location='center',
                            name_gap=30,
                        ),
                        # toolbox_opts = opts.ToolboxOpts()
                    )

                # for each group in field 2
                for group in g2_dict_keys:
                    cur_box_data = []
                    cur_label_data = []
                    for i in g2_dict[group]:
                        cur_box_data.append(box_data[i])
                        cur_label_data.append(label_data[i])

                    sub_dict = {}
                    i = 0
                    for ele in cur_label_data:
                        if sub_dict.__contains__(ele):
                            sub_dict[ele] = sub_dict[ele] + [i]
                        else:
                            sub_dict[ele] = [i]
                        i += 1

                    data_v1 = []
                    for ele in labels:
                        if sub_dict.__contains__(ele):
                            cur_data = []
                            for i in sub_dict[ele]:
                                cur_data.append(cur_box_data[i])
                            data_v1.append(cur_data)
                        else:
                            data_v1.append(null_data)

                    my_bar.add_yaxis(group, Boxplot.prepare_data(data_v1))

                my_pyecharts = (
                    my_bar
                )
            else:
                data = []
                for element in DataIn:
                    data.append(element[1])

                result = Counter(data)
                labels = list(result.keys())

                my_dict = {}
                i = 0
                for ele in data:
                    if my_dict.__contains__(ele):
                        my_dict[ele] = my_dict[ele] + [i]
                    else:
                        my_dict[ele] = [i]
                    i += 1

                data_v1 = []
                for ele in labels:
                    if my_dict.__contains__(ele):
                        cur_data = []
                        for i in my_dict[ele]:
                            cur_data.append(box_data[i])
                        data_v1.append(cur_data)
                    else:
                        data_v1.append(null_data)

                my_pyecharts = (
                    Boxplot(init_opts=opts.InitOpts(width=str(self.ui.HTMLviewClone.w)+"px", height=str(self.ui.HTMLviewClone.h)+"px", renderer='svg'))
                    .add_xaxis(labels)
                    .add_yaxis(field1, Boxplot.prepare_data(data_v1))
                    .set_global_opts(
                        title_opts=opts.TitleOpts(title=""),
                        legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                        xaxis_opts=opts.AxisOpts(
                            name=field1,
                            name_location='center',
                            name_gap=30,
                        ),
                        yaxis_opts=opts.AxisOpts(
                            name='Count',
                            name_location='center',
                            name_gap=30,
                        ),
                    )
                )

        # load figure
        html_path = os.path.join(temp_folder, 'figure_clone.html')
        my_pyecharts.render(path=html_path)
        # adjust the window size seting
        file_handle = open(html_path, 'r')
        lines = file_handle.readlines()
        file_handle.close()
        # edit js line
        js_line = '<script type="text/javascript" src="' + \
                  os.path.join(js_folder, 'echarts.js') + '"></script>' + \
                  '<script src="' + os.path.join(js_folder, 'jquery.js') + '"></script>' + \
                  '<script src="qrc:///qtwebchannel/qwebchannel.js"></script>'
        lines[5] = js_line
        # edit style line
        style_line = lines[9]
        style_pos = style_line.find('style')
        style_line = style_line[
                     0:style_pos] + 'style="position: fixed; top: 0px; left: 5%;width:90%; height:' + str(
            self.ui.HTMLviewClone.h - 20) + 'px;"></div>'
        lines[9] = style_line
        insert_js = '<script type="text/javascript">$(document).ready(function() {' \
                    'new QWebChannel(qt.webChannelTransport, function(channel) {' \
                    'var my_object = channel.objects.connection;$("#download").click(function(){' \
                    'my_object.download(text);});$("#update").click(function(){' \
                    'my_object.updateSelection(text);});});});</script>'
        insert_btn = '<input id="download" type="button" value="" style="display:none;"/>' \
                     '<input id="update" type="button" value="" style="display:none;"/>'
        lines = lines[:6] + [insert_js] + lines[6:9] + [insert_btn] + lines[9:]

        if self.ui.tabWidgetFig.currentIndex() in [0, 1, 2, 6]:
            # insert click response function
            echart_init_line = lines[13]
            matchObj = re.match(r'.+var\s(\S+)\s=', echart_init_line)
            chart_id = matchObj.group(1)
            js_cmd = chart_id + ".on('click', function (params) {" \
                                "if(params.data['0'] == null){text = params.name + ',' + params.seriesName + ',0,0';}" \
                                "else{text = params.name + ',' + params.seriesName + ','+params.data['0']+','+params.data['1'];}" \
                                "$('#update').click();});"
            lines = lines[:-3] + [js_cmd] + lines[-3:]

        content = '\n'.join(lines)
        file_handle = open(html_path, 'w')
        file_handle.write(content)
        file_handle.close()
        # show local HTML
        #self.ui.HTMLviewClone.load(QUrl('file://' + html_path))
        url = QUrl.fromLocalFile(str(html_path))
        self.ui.HTMLviewClone.load(url)
        self.ui.HTMLviewClone.show()
        self.ui.HTMLviewClone.html = "loaded"
        self.ui.HTMLviewClone.resizeSignal.connect(self.resizeHTML)

        # try to export figures
        # make_snapshot(snapshot, my_pyecharts.render(), "/Users/leil/Documents/Projects/VGenes/test.png")
        # self.ui.HTMLview.page().view().toPlainText(self.ui.HTMLview._callable)
        # print(self.ui.HTMLview.html)

        # build qweb channel
        channelClone = QWebChannel(self.ui.HTMLviewClone.page())
        my_objectClone = MyObjectCls(self.ui.HTMLviewClone)
        channelClone.registerObject('connection', my_objectClone)
        self.ui.HTMLviewClone.page().setWebChannel(channelClone)
        my_objectClone.downloadFigSignal.connect(self.downloadSVGClone)

    def downloadSVGClone(self, msg):
        options = QtWidgets.QFileDialog.Options()
        save_file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                                  "My_svg",
                                                                  "My_svg",
                                                                  "Scalable Vector Graphics (*.svg);;All Files (*)",
                                                                  options=options)

        try:
            file_handle = open(save_file_name, 'w')
            file_handle.write(msg)
            file_handle.close()
        except:
            return

    def setupPNG(self):
        if self.ui.tabWidgetFig.currentIndex() in [0,1, 2,6,7,8]:
            pass
        else:
            QMessageBox.warning(self, 'Warning', 'This figure type does not have matplotlib version!',
                                QMessageBox.Ok, QMessageBox.Ok)
            self.ui.radioButtonPNG.setChecked(False)
            return

        sender = self.sender()
        if sender.isChecked():
            if self.ui.tabWidgetFig.currentIndex() == 2:
                self.ui.comboBoxBox2.setEnabled(False)
            elif self.ui.tabWidgetFig.currentIndex() == 6:
                self.ui.label_81.setEnabled(True)
                self.ui.label_82.setEnabled(True)
                self.ui.comboBoxXscale.setEnabled(True)
                self.ui.comboBoxYscale.setEnabled(True)
            self.ui.F.setVisible(True)
            self.ui.HTMLview.setVisible(False)
            self.ui.checkBoxUpdateSelection.setEnabled(False)
            self.ui.checkBoxFigLegend.setEnabled(False)
            self.ui.HTMLview.resizeSignal.disconnect()
            self.GenerateFigure()
        else:
            if self.ui.tabWidgetFig.currentIndex() == 2:
                self.ui.comboBoxBox2.setEnabled(True)
            elif self.ui.tabWidgetFig.currentIndex() == 6:
                self.ui.label_81.setEnabled(False)
                self.ui.label_82.setEnabled(False)
                self.ui.comboBoxXscale.setEnabled(False)
                self.ui.comboBoxYscale.setEnabled(False)
            self.ui.F.setVisible(False)
            self.ui.HTMLview.setVisible(True)
            self.ui.checkBoxUpdateSelection.setEnabled(True)
            self.ui.checkBoxFigLegend.setEnabled(True)
            self.ui.HTMLview.resizeSignal.connect(self.resizeHTML)

    def GenerateFigure(self):
        global DBFilename
        #global data
        print('GenerateFigure called!')

        if DontFindTwice:
            return
        # select data or not
        if self.ui.checkBoxSelection.isChecked():
            where_statement = 'WHERE SeqName IN '
            #selected_list = self.getTreeCheckedChild()
            selected_list = self.CheckedRecords
            if len(selected_list) == 0:
                Msg = 'No record has been selected! Will use the entire database!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                where_statement = 'WHERE 1'
            else:
                selected = "','".join(selected_list)
                where_statement = where_statement + "('" + selected + "')"
        else:
            where_statement = 'WHERE 1'

        PNG = False

        # pie chart
        if self.ui.tabWidgetFig.currentIndex() == 0:
            # get data
            field = self.ui.comboBoxPie.currentText()
            if field == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            field = re.sub(r'\(.+', '', field)
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if len(DataIn) == 0:
                Msg = 'No records can be fetched!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            if self.ui.radioButtonPNG.isChecked():
                PNG = True

                data = []
                for element in DataIn:
                    data.append(element[0])
                result = Counter(data)
                if self.ui.checkBoxPieOrderLabel.isChecked():
                    labels = sorted(result.keys())
                    values = [result[i] for i in labels]
                else:
                    sorted_list =  sorted(result.items(), key=lambda x: x[1], reverse=True)
                    labels = [x[0] for x in sorted_list]
                    values = [x[1] for x in sorted_list]

                colors = sns.color_palette("hls", len(values))

                font_size = 30/len(labels)
                if font_size > 8:
                    font_size = 8
                elif font_size < 4:
                    font_size = 4
                else:
                    font_size = int(font_size)

                col_num = int(len(labels)/25)
                if col_num == 0:
                    col_num = 1

                self.ui.figure.clf()
                # self.ui.figure.ax.remove()
                self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                self.ui.figure.ax.pie(values, colors=colors, radius=1.0, pctdistance=0.8, autopct='%1.1f%%', startangle=90)
                self.ui.figure.ax.legend(labels,loc="center left",bbox_to_anchor=(1, 0, 0.5, 1),prop={'size': font_size}, ncol = col_num)
                x = [1, 0, 0, 0]
                self.ui.figure.ax.pie(x, colors='w', radius=0.5)
                self.ui.F.draw()
            else:
                data = []
                for element in DataIn:
                    data.append(element[0])
                result = Counter(data)
                if self.ui.checkBoxPieOrderLabel.isChecked():
                    labels = sorted(result.keys())
                    values = [result[i] for i in labels]
                else:
                    sorted_list = sorted(result.items(), key=lambda x: x[1], reverse=True)
                    labels = [x[0] for x in sorted_list]
                    values = [x[1] for x in sorted_list]
    
                my_pyecharts = (
                    Pie(init_opts=opts.InitOpts(width= str(self.ui.HTMLview.w) + "px", height= str(self.ui.HTMLview.h) + "px", renderer='svg'))
                    .add('', [list(z) for z in zip(labels, values)], radius=["40%", "75%"])
                    .set_global_opts(
                        title_opts=opts.TitleOpts(title=""),
                        legend_opts=opts.LegendOpts(
                            is_show = self.ui.checkBoxFigLegend.isChecked()
                        ),
                    )
                    .set_series_opts(label_opts=opts.LabelOpts(formatter=" {b}: {c} ({d}%)"))
                )   #
        # Bar chart
        elif self.ui.tabWidgetFig.currentIndex() == 1:
            # get data
            field1 = self.ui.comboBoxCol1.currentText()
            field2 = self.ui.comboBoxCol2.currentText()
            if field1 == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            if field2 == field1:
                field2 = ''
                QMessageBox.warning(self, 'Warning', 'field1 = field2, Will only use field1!',
                                    QMessageBox.Ok, QMessageBox.Ok)

            field1 = re.sub(r'\(.+', '', field1)
            field2 = re.sub(r'\(.+', '', field2)

            multi_factor = False
            if field2 == "":
                field = field1
                sort_statement = ' ORDER BY ' + field1
            else:
                field = field1 + "," + field2
                sort_statement = ' ORDER BY ' + field2
                multi_factor = True
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement + sort_statement
            #SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            DataInClean = []
            for ele in DataIn:
                cur_data = list(map(str, ele))
                DataInClean.append(cur_data)

            if self.ui.radioButtonPNG.isChecked():
                PNG = True
                if multi_factor == True:
                    if self.ui.checkBoxStack.isChecked():
                        stack = "stack1"
                    else:
                        stack = None

                    if self.ui.checkBoxY.isChecked():
                        labels = []
                        values = []
                        try:
                            for element in DataInClean:
                                labels.append(element[0])
                                values.append(int(element[1]))
                        except:
                            QMessageBox.warning(self, 'Warning', 'Some values of your field2 are not numbers!',
                                                QMessageBox.Ok, QMessageBox.Ok)
                            return
                        labels.sort()

                        colors = sns.color_palette("hls", len(values))

                        font_size = 30 / len(labels)
                        if font_size > 8:
                            font_size = 8
                        elif font_size < 4:
                            font_size = 4
                        else:
                            font_size = int(font_size)

                        col_num = int(len(labels) / 25)
                        if col_num == 0:
                            col_num = 1

                        self.ui.figure.clf()
                        # self.ui.figure.ax.remove()
                        self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.15, 0.8, 0.8])
                        self.ui.figure.ax.bar(labels, values, color=colors)
                        self.ui.figure.ax.set_xticklabels(labels, rotation=-90)
                        self.ui.figure.ax.tick_params(labelsize=5)
                        self.ui.F.draw()

                    else:
                        label_data = []
                        for element in DataInClean:
                            label_data.append(element[0])

                        result = Counter(label_data)
                        labels = list(result.keys())
                        values = list(result.values())
                        labels.sort()

                        data = {}
                        for element in DataInClean:
                            if data.__contains__(element[1]):
                                data[element[1]] = data[element[1]] + [element[0]]
                            else:
                                data[element[1]] = [element[0]]

                        dic_keys = list(data.keys())

                        # for each sub group
                        font_size = 80 / len(dic_keys)
                        if font_size > 8:
                            font_size = 8
                        elif font_size < 4:
                            font_size = 4
                        else:
                            font_size = int(font_size)

                        col_num = int(len(labels) / 15)
                        if col_num == 0:
                            col_num = 1

                        lab_size = 30/len(labels)
                        if lab_size > 8:
                            lab_size = 8
                        elif lab_size < 4:
                            lab_size = 4
                        else:
                            lab_size = int(lab_size)

                        self.ui.figure.clf()
                        # self.ui.figure.ax.remove()
                        self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                        x = numpy.arange(len(labels))
                        if stack == None:
                            width = 0.9 / len(dic_keys)
                            i = 0
                            for sub_label in dic_keys:
                                sub_data = []
                                for label in labels:
                                    sub_data.append(data[sub_label].count(label))
                                self.ui.figure.ax.bar(x - width*(len(dic_keys)-1)/2 + i*width, sub_data, width, label=sub_label)
                                i += 1
                        else:
                            if self.ui.checkBoxBarPct.isChecked():
                                # count each label
                                label_count = {}
                                for ele in labels:
                                    this_ele_count = 0
                                    for sub_label in dic_keys:
                                        cur_data = data[sub_label]
                                        this_ele_count += cur_data.count(ele)
                                    label_count[ele] = this_ele_count

                                width = 0.8
                                bottom_list = [0] * len(labels)
                                for sub_label in dic_keys:
                                    sub_data = []
                                    for label in labels:
                                        cur_data_count = data[sub_label].count(label) / label_count[label] * 100
                                        sub_data.append(cur_data_count)
                                    self.ui.figure.ax.bar(x, sub_data, width, bottom=bottom_list, label=sub_label)
                                    for i in range(len(sub_data)):
                                        bottom_list[i] = bottom_list[i] + sub_data[i]
                            else:
                                width = 0.8
                                bottom_list = [0] * len(labels)
                                for sub_label in dic_keys:
                                    sub_data = []
                                    for label in labels:
                                        sub_data.append(data[sub_label].count(label))
                                    self.ui.figure.ax.bar(x, sub_data, width, bottom=bottom_list, label=sub_label)
                                    for i in range(len(sub_data)):
                                        bottom_list[i] = bottom_list[i] + sub_data[i]
                        self.ui.figure.ax.legend(prop={'size': font_size}, ncol = col_num)
                        self.ui.figure.ax.set_xticks(x)
                        self.ui.figure.ax.set_xticklabels(labels)
                        self.ui.figure.ax.tick_params(labelsize=lab_size)
                        if self.ui.checkBoxBarPct.isChecked():
                            self.ui.figure.ax.set_ylabel('Percent (%)')
                        else:
                            self.ui.figure.ax.set_ylabel('Count')
                        self.ui.F.draw()
                else:
                    data = []
                    for element in DataInClean:
                        data.append(element[0])

                    result = Counter(data)
                    labels = list(result.keys())
                    values = list(result.values())
                    colors = sns.color_palette("hls", len(values))
                    labels.sort()

                    font_size = 30/len(labels)
                    if font_size > 8:
                        font_size = 8
                    elif font_size < 4:
                        font_size = 4
                    else:
                        font_size = int(font_size)

                    col_num = int(len(labels)/25)
                    if col_num == 0:
                        col_num = 1

                    self.ui.figure.clf()
                    # self.ui.figure.ax.remove()
                    self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.15, 0.8, 0.8])
                    self.ui.figure.ax.bar(labels, values, color=colors)
                    self.ui.figure.ax.set_xticklabels(labels, rotation=-90)
                    self.ui.figure.ax.tick_params(labelsize=5)
                    self.ui.F.draw()
            else:
                if multi_factor == True:
                    if self.ui.checkBoxStack.isChecked():
                        stack = "stack1"
                    else:
                        stack = None

                    label_data = []
                    for element in DataInClean:
                        label_data.append(element[0])

                    result = Counter(label_data)
                    labels = list(result.keys())
                    values = list(result.values())
                    labels.sort()

                    if self.ui.checkBoxY.isChecked():
                        labels = []
                        values = []
                        try:
                            for element in DataInClean:
                                labels.append(element[0])
                                values.append(int(element[1]))
                        except:
                            QMessageBox.warning(self, 'Warning', 'Some values of your field2 are not numbers!',
                                                QMessageBox.Ok, QMessageBox.Ok)
                            return

                        my_pyecharts = (
                            Bar(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                                .add_xaxis(labels)
                                .add_yaxis(field2, values)
                                .set_global_opts(
                                title_opts=opts.TitleOpts(title=""),
                                legend_opts=opts.LegendOpts(
                                    is_show=self.ui.checkBoxFigLegend.isChecked()
                                ),
                            )
                                .set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {b}: {c}"))
                        )
                    else:
                        data = {}
                        for element in DataInClean:
                            if data.__contains__(element[1]):
                                data[element[1]] = data[element[1]] + [element[0]]
                            else:
                                data[element[1]] = [element[0]]
                        dic_keys = list(data.keys())
                        if self.ui.checkBoxBarPct.isChecked():  # scale to 100%
                            my_bar = Bar(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg')) \
                                .add_xaxis(labels) \
                                .set_global_opts(
                                title_opts=opts.TitleOpts(title=""),
                                legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                                xaxis_opts=opts.AxisOpts(
                                    name=field1,
                                    name_location='center',
                                    name_gap=30,
                                ),
                                yaxis_opts=opts.AxisOpts(
                                    name='Percent (%)',
                                    name_location='center',
                                    name_gap=30,
                                    max_=100,
                                    min_=0,
                                ),
                            )
                            
                            # count each label
                            label_count = {}
                            for ele in labels:
                                this_ele_count = 0
                                for group in dic_keys:
                                    cur_data = data[group]
                                    this_ele_count += cur_data.count(ele)
                                label_count[ele] = this_ele_count

                            # make data
                            for group in dic_keys:
                                cur_data = data[group]
                                group_data = []
                                group_sum = 0
                                for ele in labels:
                                    cur_data_count = cur_data.count(ele) / label_count[ele] * 100
                                    group_data.append(cur_data_count)
                                my_bar.add_yaxis(group, group_data, stack=stack)

                            my_bar.set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {a}: {c}"),
                                                   tooltip_opts=opts.TooltipOpts(formatter=" {a}: {c} %"))
                        else:
                            my_bar = Bar(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))\
                                .add_xaxis(labels)\
                                .set_global_opts(
                                    title_opts=opts.TitleOpts(title=""),
                                    legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                                    xaxis_opts=opts.AxisOpts(
                                        name=field1,
                                        name_location='center',
                                        name_gap=30,
                                    ),
                                    yaxis_opts=opts.AxisOpts(
                                        name='Count',
                                        name_location='center',
                                        name_gap=30,
                                    ),
                                )

                            for group in dic_keys:
                                cur_data = data[group]
                                group_data = []
                                for ele in labels:
                                    group_data.append(cur_data.count(ele))
                                my_bar.add_yaxis(group, group_data,stack=stack)
                            my_bar.set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {b}: {c}"))

                        my_pyecharts = (
                            my_bar
                        )
                else:
                    data = []
                    for element in DataInClean:
                        data.append(element[0])

                    result = Counter(data)
                    labels = list(result.keys())
                    values = list(result.values())
                    labels.sort()

                    my_pyecharts = (
                        Bar(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                            .add_xaxis(labels)
                            .add_yaxis(field1, values)
                            .set_global_opts(
                            title_opts=opts.TitleOpts(title=""),
                            legend_opts=opts.LegendOpts(
                                is_show=self.ui.checkBoxFigLegend.isChecked()
                            ),
                        )
                        .set_series_opts(label_opts=opts.LabelOpts(is_show=False, formatter=" {b}: {c}"))
                    )
        # Box plot
        elif self.ui.tabWidgetFig.currentIndex() == 2:
            # get data
            data_field = self.ui.comboBoxBoxData.currentText()
            field1 = self.ui.comboBoxBox1.currentText()
            field2 = self.ui.comboBoxBox2.currentText()

            data_field = re.sub(r'\(.+', '', data_field)
            field1 = re.sub(r'\(.+', '', field1)
            field2 = re.sub(r'\(.+', '', field2)

            if field1 == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            if field2 == field1:
                field2 = ''
                QMessageBox.warning(self, 'Warning', 'field1 = field2, Will only use field1!',
                                    QMessageBox.Ok, QMessageBox.Ok)

            multi_factor = False
            if field2 == "":
                field = data_field + "," + field1
                sort_statement = ' ORDER BY ' + field1
            else:
                field = data_field + "," + field1 + "," + field2
                sort_statement = ' ORDER BY ' + field1 + "," + field2
                multi_factor = True
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement + sort_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            if self.ui.radioButtonPNG.isChecked():
                PNG = True
                data_value = []
                data_group = []
                for element in DataIn:
                    try:
                        cur_val = float(element[0])
                        data_value.append(cur_val)
                        data_group.append(element[1])
                    except:
                        pass

                if len(data_value) == 0:
                    QMessageBox.warning(self, 'Warning', 'The data field is not numerical! Check your input!',
                                        QMessageBox.Ok, QMessageBox.Ok)
                    return

                df = pd.DataFrame({'data': data_value, 'group': data_group})
                group = 'group'
                column = 'data'
                grouped = df.groupby(group)

                names, vals, xs = [], [], []
                for i, (name, subdf) in enumerate(grouped):
                    names.append(name)
                    vals.append(subdf[column].tolist())
                    xs.append(numpy.random.normal(i + 1, 0.04, subdf.shape[0]))
                ngroup = len(vals)
                clevels = numpy.linspace(0., 1., ngroup)

                font_size = 80 / len(names)
                if font_size > 8:
                    font_size = 8
                elif font_size < 4:
                    font_size = 4
                else:
                    font_size = int(font_size)

                self.ui.figure.clf()
                # self.ui.figure.ax.remove()
                self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.15, 0.8, 0.8])
                self.ui.figure.ax.boxplot(vals, labels=names, showfliers=False)
                for x, val, clevel in zip(xs, vals, clevels):
                    self.ui.figure.ax.scatter(x, val, c=matplotlib.cm.prism(clevel), alpha=0.4)
                #self.ui.figure.ax.set_xticklabels(labels, rotation=-90)
                self.ui.figure.ax.tick_params(labelsize=font_size)
                self.ui.F.draw()
            else:
                DataInClean = []
                for ele in DataIn:
                    try:
                        cur_value = float(ele[0])
                        sub_data = [cur_value] + list(ele[1:])
                        DataInClean.append(sub_data)
                    except:
                        pass

                box_data = [i[0] for i in DataInClean]
                if len(box_data) == 0:
                    QMessageBox.warning(self, 'Warning', 'The data field is not numerical! Check your input!',
                                        QMessageBox.Ok, QMessageBox.Ok)
                    return

                if min(box_data) >= 0:
                    null_data = [0,0,0,0,0]
                else:
                    null_data = [min(box_data), min(box_data), min(box_data), min(box_data), min(box_data)]

                if multi_factor == True:
                    label_data = []
                    g2_label = []
                    for element in DataInClean:
                        label_data.append(str(element[1]))
                        g2_label.append(str(element[2]))

                    result = Counter(label_data)
                    labels = list(result.keys())
                    labels.sort()

                    g2_dict = {}
                    i = 0
                    for ele in g2_label:
                        if g2_dict.__contains__(ele):
                            g2_dict[ele] = g2_dict[ele] + [i]
                        else:
                            g2_dict[ele] = [i]
                        i += 1
                    g2_dict_keys = list(g2_dict.keys())
                    g2_dict_keys.sort()

                    my_bar = Boxplot(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))\
                        .add_xaxis(labels)\
                        .set_global_opts(
                            title_opts=opts.TitleOpts(title=""),
                            legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                            xaxis_opts=opts.AxisOpts(
                                name=field1,
                                name_location='center',
                                name_gap=30,
                            ),
                            yaxis_opts=opts.AxisOpts(
                                name='Count',
                                name_location='center',
                                name_gap=30,
                            ),
                            #toolbox_opts = opts.ToolboxOpts()
                        )

                    # for each group in field 2
                    for group in g2_dict_keys:
                        cur_box_data = []
                        cur_label_data = []
                        for i in g2_dict[group]:
                            cur_box_data.append(box_data[i])
                            cur_label_data.append(label_data[i])

                        sub_dict = {}
                        i = 0
                        for ele in cur_label_data:
                            if sub_dict.__contains__(ele):
                                sub_dict[ele] = sub_dict[ele] + [i]
                            else:
                                sub_dict[ele] = [i]
                            i += 1

                        data_v1 = []
                        for ele in labels:
                            if sub_dict.__contains__(ele):
                                cur_data = []
                                for i in sub_dict[ele]:
                                    cur_data.append(cur_box_data[i])
                                data_v1.append(cur_data)
                            else:
                                data_v1.append(null_data)

                        my_bar.add_yaxis(group, Boxplot.prepare_data(data_v1))

                    my_pyecharts = (
                        my_bar
                    )
                else:
                    data = []
                    for element in DataInClean:
                        data.append(str(element[1]))

                    result = Counter(data)
                    labels = list(result.keys())
                    labels.sort()

                    my_dict = {}
                    i = 0
                    for ele in data:
                        if my_dict.__contains__(ele):
                            my_dict[ele] = my_dict[ele] + [i]
                        else:
                            my_dict[ele] = [i]
                        i += 1

                    data_v1 = []
                    for ele in labels:
                        if my_dict.__contains__(ele):
                            cur_data  = []
                            for i in my_dict[ele]:
                                cur_data.append(box_data[i])
                            data_v1.append(cur_data)
                        else:
                            data_v1.append(null_data)

                    my_pyecharts = (
                        Boxplot(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                            .add_xaxis(labels)
                            .add_yaxis(field1, Boxplot.prepare_data(data_v1))
                            .set_global_opts(
                            title_opts=opts.TitleOpts(title=""),
                            legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                            xaxis_opts=opts.AxisOpts(
                                name=field1,
                                name_location='center',
                                name_gap=30,
                            ),
                            yaxis_opts=opts.AxisOpts(
                                name='Count',
                                name_location='center',
                                name_gap=30,
                            ),
                        )
                    )
        # Word Cloud
        elif self.ui.tabWidgetFig.currentIndex() == 3:
            # get data
            field = self.ui.comboBoxWord.currentText()

            field = re.sub(r'\(.+', '', field)

            if field == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            data = []
            for element in DataIn:
                data.append(element[0])
            result = Counter(data)
            keys = list(result)
            word_data = []
            for ele in keys:
                unit = (ele,result[ele])
                word_data.append(unit)
            my_pyecharts = (
                WordCloud(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                .add("", word_data, word_size_range=[40, 200], shape=SymbolType.DIAMOND)
                .set_global_opts(
                    title_opts=opts.TitleOpts(title=""),
                    legend_opts=opts.LegendOpts(
                        is_show=self.ui.checkBoxFigLegend.isChecked()
                    ),
                )
            )

            # load figure
            html_path = os.path.join(temp_folder,'figure.html')
            my_pyecharts.render(path=html_path)
            # adjust the window size seting
            file_handle = open(html_path, 'r')
            lines = file_handle.readlines()
            file_handle.close()
            # edit js line
            js_line = '<script type="text/javascript" src="' + \
                      os.path.join(js_folder,'echarts.js') + '"></script>' + \
                      '<script src="' + os.path.join(js_folder,'jquery.js') + '"></script>' + \
                      '<script src="qrc:///qtwebchannel/qwebchannel.js"></script>'
            lines[5] = js_line
            # edit style line
            style_line = lines[10]
            style_pos = style_line.find('style')
            style_line = style_line[
                         0:style_pos] + 'style="position: fixed; top: 0px; left: 5%;width:90%; height:' + str(
                self.ui.HTMLview.h - 20) + 'px;"></div>'
            lines[10] = style_line
            insert_js = '<script type="text/javascript">$(document).ready(function() {' \
                        'new QWebChannel(qt.webChannelTransport, function(channel) {' \
                        'var my_object = channel.objects.connection;$("#download").click(function(){' \
                        'my_object.download(text);});});});</script>'
            insert_btn = '<input id="download" type="button" value="" style="display:none;"/>'
            lines = lines[:6] + [insert_js] + lines[6:10] + [insert_btn] + lines[10:]
            content = '\n'.join(lines)
            file_handle = open(html_path, 'w')
            file_handle.write(content)
            file_handle.close()
            # show local HTML
            #self.ui.HTMLview.load(QUrl('file://' + html_path))
            url = QUrl.fromLocalFile(str(html_path))
            self.ui.HTMLview.load(url)
            self.ui.HTMLview.show()
            self.ui.HTMLview.html = "loaded"
            self.ui.HTMLview.resizeSignal.connect(self.resizeHTML)

            # build qweb channel
            channel = QWebChannel(self.ui.HTMLview.page())
            my_object = MyObjectCls(self.ui.HTMLview)
            channel.registerObject('connection', my_object)
            self.ui.HTMLview.page().setWebChannel(channel)
            my_object.downloadFigSignal.connect(self.downloadSVG)
            my_object.updateSelectionSignal.connect(self.updateSelection)
            return
        # River chart
        elif self.ui.tabWidgetFig.currentIndex() == 4:
            # get data
            field1 = self.ui.comboBoxRiver1.currentText()
            field2 = self.ui.comboBoxRiver2.currentText()

            field1 = re.sub(r'\(.+', '', field1)
            field2 = re.sub(r'\(.+', '', field2)

            if field1 == "" or field2 == "":
                QMessageBox.warning(self, 'Warning', 'Your data field or group field is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return

            field = field1 + "," + field2
            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            label_data = []
            time_data = []
            for element in DataIn:
                label_data.append(element[1])
                time_data.append(element[0])
            try:
                time_data = list(map(float, time_data))
            except:
                QMessageBox.warning(self, 'Warning', 'The data field is not numerical! Check your input!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return

            result = Counter(label_data)
            labels = list(result.keys())

            min_data = min(time_data)
            max_data = max(time_data)
            data_tick = 20
            step = (max_data - min_data)/data_tick
            
            data_river = []
            for i in range(0, 20):
                cur_tick = min_data + step * i
                cur_tick_end = min_data + step * (i + 1)
                data_in_range = []
                for element in DataIn:
                    cur_vbal = float(element[0])
                    if cur_vbal <= cur_tick_end and cur_vbal >= cur_tick:
                        data_in_range.append(element[1])
                res = Counter(data_in_range)
                for ele in labels:
                    if res.__contains__(ele):
                        unit = [int(cur_tick), res[ele], ele]
                    else:
                        unit = [int(cur_tick), 0, ele]
                    data_river.append(unit)

            my_pyecharts = (
                ThemeRiver(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                .add(
                    labels,
                    data_river,
                    singleaxis_opts=opts.SingleAxisOpts(type_='value', min_='dataMin', max_='dataMax'),
                )
                .set_global_opts(
                    title_opts=opts.TitleOpts(title=""),
                    legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                    xaxis_opts=opts.AxisOpts(
                        name=field1,
                        name_location='center',
                        name_gap=30,
                    ),
                    tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="line")
                )
            )
        # Tree Map
        elif self.ui.tabWidgetFig.currentIndex() == 5:
            group1 = self.ui.comboBoxTree1.currentText()
            group2 = self.ui.comboBoxTree2.currentText()
            group3 = self.ui.comboBoxTree3.currentText()

            group1 = re.sub(r'\(.+', '', group1)
            group2 = re.sub(r'\(.+', '', group2)
            group3 = re.sub(r'\(.+', '', group3)

            if group1 == "":
                QMessageBox.warning(self, 'Warning', 'Your Field1 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            if group2 == "":
                data = []

                field = group1
                SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                x_data = [d[0] for d in DataIn]

                x_data_res = Counter(x_data)
                for ele in x_data_res:
                    unit = {"value": x_data_res[ele], "name": ele}
                    data.append(unit)
            else:
                if group3 == "":
                    if group2 == group1:
                        QMessageBox.warning(self, 'Warning',
                                            'Please select different group factors for field1 and field2!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return
                    data = []

                    field = group1 + ',' + group2
                    SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    x_data = [d[0] for d in DataIn]
                    y_data = [d[1] for d in DataIn]

                    x_data_res = Counter(x_data)
                    x_labels = x_data_res.keys()

                    for x_label in x_labels:
                        cur_x_label_data = []
                        for i in range(0, len(x_data)):
                            if x_data[i] == x_label:
                                cur_x_label_data.append(y_data[i])
                        cur_data = []
                        cur_x_data_res = Counter(cur_x_label_data)
                        for ele in cur_x_data_res:
                            sub_unit = {"value": cur_x_data_res[ele], "name": ele}
                            cur_data.append(sub_unit)

                        unit = {"value": x_data_res[x_label], "name": x_label, "children": cur_data}
                        data.append(unit)

                else:
                    if group2 == group1 or group1 == group3 or group2 == group3:
                        QMessageBox.warning(self, 'Warning',
                                            'Please select different group factors for field1, field2, and field3!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return
                    data = []

                    field = group1 + ',' + group2 + ',' + group3
                    SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    x_data = [d[0] for d in DataIn]
                    y_data = [d[1] for d in DataIn]
                    z_data = [d[2] for d in DataIn]

                    x_data_res = Counter(x_data)
                    x_labels = x_data_res.keys()

                    # level 1
                    for x_label in x_labels:
                        cur_x_label_data = []
                        cur_z_data = []
                        for i in range(0, len(x_data)):
                            if x_data[i] == x_label:
                                cur_x_label_data.append(y_data[i])
                                cur_z_data.append(z_data[i])
                        cur_data = []
                        cur_x_data_res = Counter(cur_x_label_data)
                        y_labels = cur_x_data_res.keys()

                        # level 2
                        for y_label in y_labels:
                            cur_y_label_data = []
                            for i in range(0, len(cur_x_label_data)):
                                if cur_x_label_data[i] == y_label:
                                    cur_y_label_data.append(cur_z_data[i])
                            cur_sub_data = []
                            cur_y_data_res = Counter(cur_y_label_data)
                            for ele in cur_y_data_res:
                                sub_sub_unit = {"value": cur_y_data_res[ele], "name": ele}
                                cur_sub_data.append(sub_sub_unit)

                            sub_unit = {"value": cur_x_data_res[y_label], "name": y_label, "children": cur_sub_data}
                            cur_data.append(sub_unit)

                        unit = {"value": x_data_res[x_label], "name": x_label, "children": cur_data}
                        data.append(unit)

            if self.ui.radioButtonTree.isChecked():
                tree_data = [{"name":"MyData", "children":data}]
                my_pyecharts = (
                    Tree(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                        .add("MyData", tree_data)
                        .set_global_opts(
                        title_opts=opts.TitleOpts(title="Tree"),
                        legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                        #toolbox_opts=opts.ToolboxOpts()
                    )
                )
            else:
                my_pyecharts = (
                    TreeMap(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                    .add(
                        series_name="MyData",
                        data=data,
                        levels=[
                            opts.TreeMapLevelsOpts(
                                treemap_itemstyle_opts=opts.TreeMapItemStyleOpts(
                                    border_color="#555", border_width=4, gap_width=4
                                )
                            ),
                            opts.TreeMapLevelsOpts(
                                color_saturation=[0.3, 0.6],
                                treemap_itemstyle_opts=opts.TreeMapItemStyleOpts(
                                    border_color_saturation=0.7, gap_width=2, border_width=2
                                ),
                            ),
                            opts.TreeMapLevelsOpts(
                                color_saturation=[0.3, 0.5],
                                treemap_itemstyle_opts=opts.TreeMapItemStyleOpts(
                                    border_color_saturation=0.6, gap_width=1
                                ),
                            ),
                            opts.TreeMapLevelsOpts(color_saturation=[0.3, 0.5]),
                        ],
                        visual_min=300,
                        label_opts=opts.LabelOpts(position="inside"),
                    )
                    .set_global_opts(
                        title_opts=opts.TitleOpts(title="TreeMap"),
                        legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxFigLegend.isChecked()),
                        #toolbox_opts=opts.ToolboxOpts()
                    )
                )
        # Scatter Chart
        elif self.ui.tabWidgetFig.currentIndex() == 6:
            dim1 = self.ui.comboBoxScatterX.currentText()
            dim2 = self.ui.comboBoxScatterY.currentText()
            group = self.ui.comboBoxScatterGroup.currentText()

            dim1 = re.sub(r'\(.+', '', dim1)
            dim2 = re.sub(r'\(.+', '', dim2)
            group = re.sub(r'\(.+', '', group)

            if dim1 == "" or dim2 == "":
                QMessageBox.warning(self, 'Warning', 'Your dim1 or dim2 is empty!',
                                    QMessageBox.Ok, QMessageBox.Ok)
                return
            dotSize = self.ui.spinBoxDotSize.value()
            if self.ui.radioButtonPNG.isChecked():
                PNG = True
                if group == "":
                    field = dim1 + "," + dim2
                    SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                    x_data = []
                    y_data = []
                    err = False
                    for d in DataIn:
                        try:
                            x = float(d[0])
                            y = float(d[1])
                            x_data.append(x)
                            y_data.append(y)
                        except:
                            err = True
                    if err == True:
                        pass

                    if len(x_data) == 0:
                        QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return

                    self.ui.figure.clf()
                    # self.ui.figure.ax.remove()
                    self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                    self.ui.figure.ax.scatter(x_data, y_data, c='red', s = 15, alpha=0.5, edgecolors='black')
                    self.ui.figure.ax.set_yscale(self.ui.comboBoxYscale.currentText())
                    self.ui.figure.ax.set_xscale(self.ui.comboBoxXscale.currentText())
                    self.ui.figure.ax.set_ylim(min(y_data),max(y_data))
                    self.ui.figure.ax.set_xlim(min(x_data),max(x_data))
                    self.ui.figure.ax.set_xlabel(self.ui.comboBoxScatterX.currentText(), size = 6)
                    self.ui.figure.ax.set_ylabel(self.ui.comboBoxScatterY.currentText(), size = 6)
                    self.ui.figure.ax.tick_params(labelsize=6)
                    self.ui.figure.ax.grid(True)
                    self.ui.F.draw()
                else:
                    field = dim1 + "," + dim2 + "," + group
                    SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                    x_data = []
                    y_data = []
                    group_data = []
                    err = False
                    for d in DataIn:
                        try:
                            x = float(d[0])
                            y = float(d[1])
                            if self.ui.checkBoxScatterValueColor.isChecked():
                                z = float(d[2])
                            else:
                                z = str(d[2])
                            x_data.append(x)
                            y_data.append(y)
                            group_data.append(z)
                        except:
                            err = True
                    if err == True:
                        pass

                    if len(group_data) == 0:
                        QMessageBox.warning(self, 'Warning', 'No qualified records found!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return

                    if self.ui.checkBoxScatterValueColor.isChecked():
                        if self.ui.lineEditScatterMin.text() == '' and self.ui.lineEditScatterMax.text() == '':
                            self.ui.figure.clf()
                            # self.ui.figure.ax.remove()
                            self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                            i = self.ui.figure.ax.scatter(x_data, y_data, c=group_data, s=dotSize, alpha=0.8, edgecolors='black',
                                                      cmap='viridis')
                            self.ui.figure.ax.set_yscale(self.ui.comboBoxYscale.currentText())
                            self.ui.figure.ax.set_xscale(self.ui.comboBoxXscale.currentText())
                            self.ui.figure.ax.set_ylim(min(y_data), max(y_data))
                            self.ui.figure.ax.set_xlim(min(x_data), max(x_data))
                            colorbar_ax = self.ui.figure.add_axes([0.92, 0.1, 0.02, 0.8])
                            self.ui.figure.colorbar(i, cax=colorbar_ax)
                            self.ui.figure.ax.set_xlabel(self.ui.comboBoxScatterX.currentText(), size=6)
                            self.ui.figure.ax.set_ylabel(self.ui.comboBoxScatterY.currentText(), size=6)
                            self.ui.figure.ax.tick_params(labelsize=6)
                            self.ui.figure.ax.grid(True)
                            self.ui.F.draw()
                        else:
                            try:
                                scatterMin = float(self.ui.lineEditScatterMin.text())
                                scatterMax = float(self.ui.lineEditScatterMax.text())
                            except:
                                Msg = 'Please determine both min and max value! Must be numbers!'
                                QMessageBox.warning(self, 'warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                                return

                            self.ui.figure.clf()
                            # self.ui.figure.ax.remove()
                            self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                            i = self.ui.figure.ax.scatter(x_data, y_data, c=group_data, s=dotSize, alpha=0.8, edgecolors='black',cmap='viridis', vmin=scatterMin, vmax=scatterMax)
                            self.ui.figure.ax.set_yscale(self.ui.comboBoxYscale.currentText())
                            self.ui.figure.ax.set_xscale(self.ui.comboBoxXscale.currentText())
                            self.ui.figure.ax.set_ylim(min(y_data), max(y_data))
                            self.ui.figure.ax.set_xlim(min(x_data), max(x_data))
                            colorbar_ax = self.ui.figure.add_axes([0.92, 0.1, 0.02, 0.8])
                            self.ui.figure.colorbar(i, cax=colorbar_ax)
                            self.ui.figure.ax.set_xlabel(self.ui.comboBoxScatterX.currentText(), size=6)
                            self.ui.figure.ax.set_ylabel(self.ui.comboBoxScatterY.currentText(), size=6)
                            self.ui.figure.ax.tick_params(labelsize=6)
                            self.ui.figure.ax.grid(True)
                            self.ui.F.draw()
                    else:
                        result = Counter(group_data)
                        groups = list(result.keys())
                        groups.sort()
                        colors = sns.color_palette("hls", len(groups))

                        self.ui.figure.clf()
                        # self.ui.figure.ax.remove()
                        self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                        index = 0
                        for group in groups:
                            cur_x = []
                            cur_y = []
                            for i in range(len(group_data)):
                                if group_data[i] == group:
                                    cur_x.append(x_data[i])
                                    cur_y.append(y_data[i])
                            self.ui.figure.ax.scatter(cur_x, cur_y, c=colors[index], s=dotSize, alpha=0.8, edgecolors='black', label=group)
                            index += 1

                        font_size = 30 / len(groups)
                        if font_size > 8:
                            font_size = 8
                        elif font_size < 4:
                            font_size = 4
                        else:
                            font_size = int(font_size)

                        col_num = int(len(groups) / 20)
                        if col_num == 0:
                            col_num = 1

                        self.ui.figure.ax.set_yscale(self.ui.comboBoxYscale.currentText())
                        self.ui.figure.ax.set_xscale(self.ui.comboBoxXscale.currentText())
                        self.ui.figure.ax.set_ylim(min(y_data), max(y_data))
                        self.ui.figure.ax.set_xlim(min(x_data), max(x_data))
                        self.ui.figure.ax.legend(groups, loc="center left", bbox_to_anchor=(1, 0, 0.5, 1),
                                                prop={'size': font_size}, ncol=col_num)
                        self.ui.figure.ax.set_xlabel(self.ui.comboBoxScatterX.currentText(), size=6)
                        self.ui.figure.ax.set_ylabel(self.ui.comboBoxScatterY.currentText(), size=6)
                        self.ui.figure.ax.tick_params(labelsize=6)
                        self.ui.figure.ax.grid(True)
                        self.ui.F.draw()
            else:
                # create figure
                if self.ui.checkBoxScatterValueColor.isChecked():
                    if self.ui.lineEditScatterMin.text() == '' and self.ui.lineEditScatterMax.text() == '':
                        my_scatter = Scatter(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))\
                            .set_series_opts(label_opts=opts.LabelOpts(is_show=False))\
                            .set_global_opts(
                                xaxis_opts=opts.AxisOpts(
                                    type_="value",
                                    splitline_opts=opts.SplitLineOpts(is_show=False),
                                    name=dim1,
                                    name_location='center',
                                    name_gap=30,
                                ),
                                yaxis_opts=opts.AxisOpts(
                                    type_="value",
                                    name=dim2,
                                    name_location='center',
                                    name_gap=30,
                                    axistick_opts=opts.AxisTickOpts(is_show=True),
                                    splitline_opts=opts.SplitLineOpts(is_show=False),
                                ),
                                tooltip_opts=opts.TooltipOpts(
                                    is_show=True,
                                    formatter=JsCode("""
                                                        function(params) {
                                                            mydata = params.data;
                                                            return ' """ + dim1 + """: ' + mydata[0] + '<br>' + ' """ + dim2 + """ ' + ': ' + mydata[1] + '<br>' + ' """ + group + """ ' + ': ' + mydata[2];
                                                        }	
                                                    """),
                                    axis_pointer_type='cross'
                                ),
                                legend_opts=opts.LegendOpts(
                                    is_show=self.ui.checkBoxFigLegend.isChecked()
                                ),
                                visualmap_opts=opts.VisualMapOpts(dimension=2),
                            )
                    else:
                        try:
                            scatterMin = float(self.ui.lineEditScatterMin.text())
                            scatterMax = float(self.ui.lineEditScatterMax.text())
                        except:
                            Msg = 'Please determine both min and max value! Must be numbers!'
                            QMessageBox.warning(self, 'warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                            return

                        my_scatter = Scatter(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg')) \
                            .set_series_opts(label_opts=opts.LabelOpts(is_show=False)) \
                            .set_global_opts(
                            xaxis_opts=opts.AxisOpts(
                                type_="value",
                                splitline_opts=opts.SplitLineOpts(is_show=False),
                                name=dim1,
                                name_location='center',
                                name_gap=30,
                            ),
                            yaxis_opts=opts.AxisOpts(
                                type_="value",
                                name=dim2,
                                name_location='center',
                                name_gap=30,
                                axistick_opts=opts.AxisTickOpts(is_show=True),
                                splitline_opts=opts.SplitLineOpts(is_show=False),
                            ),
                            tooltip_opts=opts.TooltipOpts(
                                is_show=True,
                                formatter=JsCode("""
                                                    function(params) {
                                                        mydata = params.data;
                                                        return ' """ + dim1 + """: ' + mydata[0] + '<br>' + ' """ + dim2 + """ ' + ': ' + mydata[1] + '<br>' + ' """ + group + """ ' + ': ' + mydata[2];
                                                    }	
                                                """),
                                axis_pointer_type='cross'
                            ),
                            legend_opts=opts.LegendOpts(
                                is_show=self.ui.checkBoxFigLegend.isChecked()
                            ),
                            visualmap_opts=opts.VisualMapOpts(min_=scatterMin, max_=scatterMax, dimension=2),
                        )

                else:
                    my_scatter = Scatter(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg')) \
                        .set_series_opts(label_opts=opts.LabelOpts(is_show=False)) \
                        .set_global_opts(
                        xaxis_opts=opts.AxisOpts(
                            type_="value",
                            splitline_opts=opts.SplitLineOpts(is_show=False),
                            name=dim1,
                            name_location='center',
                            name_gap=30,
                        ),
                        yaxis_opts=opts.AxisOpts(
                            type_="value",
                            name=dim2,
                            name_location='center',
                            name_gap=30,
                            axistick_opts=opts.AxisTickOpts(is_show=True),
                            splitline_opts=opts.SplitLineOpts(is_show=False),
                        ),
                        tooltip_opts=opts.TooltipOpts(
                            is_show=True,
                            formatter=JsCode("""
                                                function(params) {
                                                    mydata = params.data;
                                                    return ' """ + dim1 + """: ' + mydata[0] + '<br>' + ' """ + dim2 + """ ' + ': ' + mydata[1] + '<br>' + ' """ + group + """ ' + ': ' + params.seriesName;
                                                }	
                                            """)
                        ),
                        legend_opts=opts.LegendOpts(
                            is_show=self.ui.checkBoxFigLegend.isChecked()
                        ),
                    )

                # load data
                if group == "":
                    field = dim1 + "," + dim2
                    SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                    x_data = []
                    y_data = []
                    err = False
                    for d in DataIn:
                        try:
                            x = float(d[0])
                            y = float(d[1])
                            x_data.append(x)
                            y_data.append(y)
                        except:
                            err = True
                    if err == True:
                        pass
                        #QMessageBox.information(self, 'Information', 'Non-numerical values/records have been removed from this figure!',
                        #                    QMessageBox.Ok, QMessageBox.Ok)

                    '''
                    x_data = [d[0] for d in DataIn]
                    y_data = [d[1] for d in DataIn]
                    
                    try:
                        x_data = list(map(float,x_data))
                        y_data = list(map(float, y_data))
                    except:
                        QMessageBox.warning(self, 'Warning', 'The dim1 or dim2 field is not numerical! Check your input!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return
                    '''

                    # attach data
                    my_scatter.add_xaxis(xaxis_data=x_data)
                    my_scatter.add_yaxis(series_name="Data", y_axis=y_data, label_opts=opts.LabelOpts(is_show=False), symbol_size=dotSize)

                else:
                    field = dim1 + "," + dim2 + "," + group
                    SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement
                    DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                    x_data = []
                    y_data = []
                    group_data = []
                    err = False
                    for d in DataIn:
                        try:
                            x = float(d[0])
                            y = float(d[1])
                            if self.ui.checkBoxScatterValueColor.isChecked():
                                z = float(d[2])
                            else:
                                z = str(d[2])
                            x_data.append(x)
                            y_data.append(y)
                            group_data.append(z)
                        except:
                            err = True
                    if err == True:
                        pass
                        #QMessageBox.information(self, 'Information',
                        #                    'Non-numerical values/records have been removed from this figure!',
                        #                    QMessageBox.Ok, QMessageBox.Ok)

                    '''
                    x_data = [d[0] for d in DataIn]
                    y_data = [d[1] for d in DataIn]
                    group_data = [d[2] for d in DataIn]
                    try:
                        x_data = list(map(float, x_data))
                        y_data = list(map(float, y_data))
                    except:
                        QMessageBox.warning(self, 'Warning', 'The dim1 or dim2 field is not numerical! Check your input!',
                                            QMessageBox.Ok, QMessageBox.Ok)
                        return
                    '''
                    if self.ui.checkBoxScatterValueColor.isChecked():
                        # attach data
                        my_scatter.add_xaxis(xaxis_data=x_data)
                        my_scatter.add_yaxis(series_name=group,
                                             y_axis=[list(z) for z in zip(y_data, group_data)],
                                             label_opts=opts.LabelOpts(is_show=False),symbol_size=dotSize
                                             )
                    else:
                        group_result = Counter(group_data)
                        groups = list(group_result.keys())
                        groups.sort()

                        for group in groups:
                            sub_x_data = []
                            sub_y_data = []
                            for i in range(0, len(group_data)):
                                if group_data[i] == group:
                                    sub_x_data.append(x_data[i])
                                    sub_y_data.append(y_data[i])

                            # attach data
                            my_scatter.add_xaxis(xaxis_data=sub_x_data)
                            my_scatter.add_yaxis(series_name=group, y_axis=sub_y_data, label_opts=opts.LabelOpts(is_show=False), symbol_size=dotSize)

                my_pyecharts = (
                    my_scatter
                )
        # Heatmap
        elif self.ui.tabWidgetFig.currentIndex() == 7:
            if len(self.HeatmapList) == 0:
                Msg = 'Please select at least one field!'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            field_list = [re.sub(r'\(.+', '', item) for item in self.HeatmapList]

            field = ",".join(field_list)
            if self.ui.comboBoxSortField.currentText() == '':
                sort_statement = ''
                field = field + ',SeqName'
            else:
                sort_field = re.sub(r'\(.+', '', self.ui.comboBoxSortField.currentText())
                sort_statement = ' ORDER BY ' + sort_field + ' ASC'
                field = field + ',' + sort_field

            SQLStatement = 'SELECT ' + field + ' FROM vgenesDB ' + where_statement + sort_statement
            try:
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            except:
                Msg = 'SQL error! Current SQL statemernt is:\n' + SQLStatement
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            if self.ui.radioButtonPNG.isChecked():
                PNG = True

                # parse out record with all null value
                if self.ui.checkBoxHideNull.isChecked():
                    index_remove = []
                    index = 0
                    for record in DataIn:
                        values = record[:len(record) - 1]
                        not_null = False
                        for value in values:
                            try:
                                float(value)
                                not_null = True
                                break
                            except:
                                pass

                        if not_null == False:
                            index_remove.append(index)
                        index += 1

                    # delete all null record
                    cnt = 0
                    for index in index_remove:
                        del DataIn[index - cnt]
                        cnt += 1

                num_row = len(DataIn)
                num_col = len(self.HeatmapList)

                if num_row == 0:
                    Msg = 'No record fetched!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return

                Data = []
                # scale data (centralize)
                min_value = 9999
                max_value = 0
                if self.ui.radioButtonScale.isChecked():
                    for feature in range(num_col):
                        values = []
                        for i in range(num_row):
                            try:
                                value = float(DataIn[i][feature])
                                values.append(value)
                            except:
                                pass

                        mean = statistics.mean(values)
                        std = statistics.stdev(values)

                        for i in range(num_row):
                            try:
                                value = float(DataIn[i][feature])
                                value = (value - mean) / std
                                if value < min_value:
                                    min_value = value
                                if value > max_value:
                                    max_value = value
                            except:
                                value = numpy.nan

                            if feature == 0:
                                Data.append([value])
                            else:
                                Data[i].append(value)
                else:
                    for record in DataIn:
                        new_reord = []
                        for i in range(num_col):
                            try:
                                value = float(record[i])
                                if value < min_value:
                                    min_value = value
                                if value > max_value:
                                    max_value = value
                            except:
                                value = numpy.nan
                            new_reord.append(value)
                        Data.append(new_reord)

                if min_value < -2:
                    min_value = -2
                    max_value = 2
                elif min_value > -1.5:
                    min_value = -1.5
                    max_value = 1.5
                else:
                    min_value = min_value
                    max_value = max_value * -1

                cbarlabel = 'Count'
                if self.ui.radioButtonScale.isChecked():
                    cbarlabel = 'Scaled value'
                if self.ui.radioButtonLog10.isChecked():
                    if min_value >= 0:
                        cbarlabel = 'Log10 Value'
                        Data = numpy.log10(Data)
                    else:
                        Msg = 'Negative values detected in your data! Log scale is not appliable!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return
                elif self.ui.radioButtonLog2.isChecked():
                    if min_value >= 0:
                        cbarlabel = 'Log2 Value'
                        Data = numpy.log2(Data)
                    else:
                        Msg = 'Negative values detected in your data! Log scale is not appliable!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                Data = numpy.array(Data)
                if num_row > num_col:
                    Data = numpy.transpose(Data)

                self.ui.figure.clf()
                # self.ui.figure.ax.remove()
                self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.1, 0.8, 0.8])
                if self.ui.radioButtonScale.isChecked():
                    im = heatmapNox(Data, field_list, '', ax=self.ui.figure.ax, aspect='auto',
                                    cmap="bwr", cbarlabel=cbarlabel, lab_size=5, vmax = 1.5, vmin=-1.5)
                else:
                    im = heatmapNox(Data, field_list, '', ax=self.ui.figure.ax,aspect='auto',
                                    cmap="YlGn", cbarlabel=cbarlabel, lab_size=5)

                self.ui.figure.ax.tick_params(labelsize=5)
                self.ui.F.draw()
            else:
                # parse out record with all null value
                if self.ui.checkBoxHideNull.isChecked():
                    index_remove = []
                    index = 0
                    for record in DataIn:
                        values = record[:len(record)-1]
                        not_null = False
                        for value in values:
                            try:
                                float(value)
                                not_null = True
                                break
                            except:
                                pass

                        if not_null == False:
                            index_remove.append(index)

                        index += 1

                    # delete all null record
                    cnt = 0
                    for index in index_remove:
                        del DataIn[index - cnt]
                        cnt += 1

                num_row = len(DataIn)
                num_col = len(self.HeatmapList)

                if num_row == 0:
                    Msg = 'No record fetched!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return

                Data = []
                # scale data (centralize)
                if self.ui.radioButtonScale.isChecked():
                    for feature in range(num_col):
                        values = []
                        for i in range(num_row):
                            try:
                                value = float(DataIn[i][feature])
                                values.append(value)
                            except:
                                pass

                        mean = statistics.mean(values)
                        std = statistics.stdev(values)

                        for i in range(num_row):
                            try:
                                value = float(DataIn[i][feature])
                                value = (value - mean)/std
                            except:
                                value = DataIn[i][feature]

                            if feature == 0:
                                Data.append([value])
                            else:
                                Data[i].append(value)

                    for i in range(num_row):
                        Data[i].append(DataIn[i][-1])
                else:
                    Data = DataIn
                '''
                try:
                    value = [[i, j, int(DataIn[i][j])] for i in range(num_row) for j in range(num_col)]
                    xaxis_data = [DataIn[i][-1] for i in range(num_row)]
                except:
                    Msg = 'Some values of your selected field/record are not numbers!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return
                    
                min_value = min(row[2] for row in value)
                max_value = max(row[2] for row in value)
                '''
                # replace all missing values by null
                value = []
                min_value = 9999
                max_value = 0
                for i in range(num_row):
                    for j in range(num_col):
                        try:
                            value.append([i, j, float(Data[i][j])])
                            if float(Data[i][j]) < min_value:
                                min_value = float(Data[i][j])
                            if float(Data[i][j]) > max_value:
                                max_value = float(Data[i][j])
                        except:
                            value.append([i, j, 'null'])
                xaxis_data = [Data[i][-1] for i in range(num_row)]

                if self.ui.radioButtonScale.isChecked():
                    #min_value = -2
                    max_value = min_value * (-1)

                if self.ui.radioButtonLog10.isChecked():
                    if min_value >= 0:
                        for i in range(len(value)):
                            try:
                                value[i][2] = numpy.log1p(value[i][2])/numpy.log(10)
                            except:
                                pass

                        min_value = numpy.log1p(min_value) / numpy.log(10)
                        max_value = numpy.log1p(max_value) / numpy.log(10)
                    else:
                        Msg = 'Negative values detected in your data! Log scale is not appliable!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return
                elif self.ui.radioButtonLog2.isChecked():
                    if min_value >= 0:
                        for i in range(len(value)):
                            try:
                                value[i][2] = numpy.log1p(value[i][2])/numpy.log(2)
                            except:
                                pass

                        min_value = numpy.log1p(min_value) / numpy.log(2)
                        max_value = numpy.log1p(max_value) / numpy.log(2)
                    else:
                        Msg = 'Negative values detected in your data! Log scale is not appliable!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                        return

                my_pyecharts = (
                    HeatMap(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                        .add_xaxis(xaxis_data)
                        .add_yaxis(
                        "My data selection",
                        self.HeatmapList,
                        value,
                        label_opts=opts.LabelOpts(is_show=False, position="inside"),
                    )
                        .set_global_opts(
                        title_opts=opts.TitleOpts(title="HeatMap"),
                        visualmap_opts=opts.VisualMapOpts(min_=min_value, max_=max_value),
                    )
                )
        # v(d)j heatmap
        elif self.ui.tabWidgetFig.currentIndex() == 8:
            # fetch data
            if self.ui.checkBoxLocus.isChecked():
                if self.ui.radioButtonDJ.isChecked():
                    SQLStatement = 'SELECT DLocus,JLocus FROM vgenesDB '
                elif self.ui.radioButtonVD.isChecked():
                    SQLStatement = 'SELECT VLocus,DLocus FROM vgenesDB '
                else:
                    SQLStatement = 'SELECT VLocus,JLocus FROM vgenesDB '
            else:
                if self.ui.radioButtonDJ.isChecked():
                    SQLStatement = 'SELECT D1,J1 FROM vgenesDB '
                elif self.ui.radioButtonVD.isChecked():
                    SQLStatement = 'SELECT V1,D1 FROM vgenesDB '
                else:
                    SQLStatement = 'SELECT V1,J1 FROM vgenesDB '

            SQLStatement = SQLStatement + where_statement

            try:
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            except:
                Msg = 'SQL error! Current SQL statemernt is:\n' + SQLStatement
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            
            if self.ui.radioButtonPNG.isChecked():
                PNG = True
                
                all_x = [i[0] for i in DataIn]
                all_y = [i[1] for i in DataIn]

                x_result = Counter(all_x)
                x_labels = list(x_result.keys())
                y_result = Counter(all_y)
                y_labels = list(y_result.keys())
                x_labels.sort()
                y_labels.sort()

                data = []
                for x in x_labels:
                    cur_data_list = []
                    y_for_cur_x = [i[1] for i in DataIn if i[0] == x]
                    for y in y_labels:
                        cur_data_list.append(y_for_cur_x.count(y))
                    data.append(cur_data_list)
                
                data = numpy.array(data)

                '''
                lab_size = 200 / max(len(x_labels), len(y_labels))
                if lab_size > 6:
                    lab_size = 6
                elif lab_size < 3:
                    lab_size = 3
                else:
                    lab_size = int(lab_size)
                #print(str(lab_size))
                '''
                lab_size = 4

                self.ui.figure.clf()
                #self.ui.figure.ax.remove()
                self.ui.figure.ax = self.ui.figure.add_axes([0.1, 0.03, 0.8, 0.8])
                if len(x_labels) > len(y_labels):
                    data = numpy.transpose(data)
                    im, cbar = heatmap(data,y_labels, x_labels, ax=self.ui.figure.ax,aspect='auto',
                                       cmap="YlGn", cbarlabel="Count", lab_size = lab_size)
                    #texts = annotate_heatmap(im, valfmt="{x}",fontsize=lab_size)
                else:
                    im, cbar = heatmap(data, x_labels, y_labels, ax=self.ui.figure.ax,aspect='auto',
                                       cmap="YlGn", cbarlabel="Count", lab_size = lab_size)
                    #texts = annotate_heatmap(im, valfmt="{x}",fontsize=lab_size)
                self.ui.figure.ax.tick_params(labelsize=5)
                self.ui.F.draw()
            else:
                # stat
                df = pd.DataFrame(DataIn,columns=['A','B'])
                gp = df.groupby(by=['A', 'B'])
                newdf = gp.size()
                newdf = newdf.reset_index(name='times')
                
                # make data
                xaxis_data = []
                yaxis_data = []
                my_dict = dict()
    
                for index in range(len(newdf)):
                    cur_a = newdf['A'][index]
                    cur_b = newdf['B'][index]
                    cur_count = newdf['times'][index]
                    if cur_a not in xaxis_data:
                        xaxis_data.append(cur_a)
                    if cur_b not in yaxis_data:
                        yaxis_data.append(cur_b)
                    
                    index_a = xaxis_data.index(cur_a)
                    index_b = yaxis_data.index(cur_b)
                    name = str(index_a) + '|' + str(index_b)
                    my_dict[name] = cur_count
    
                data = []
                min_value = 0
                max_value = 0
                for i in range(len(xaxis_data)):
                    for j in range(len(yaxis_data)):
                        name = str(i) + '|' + str(j)
                        if name in my_dict.keys():
                            num = int(my_dict[name].astype(numpy.int32))
                            unit = [i, j, num]
                            if num > max_value:
                                max_value = num
                        else:
                            unit = [i, j, 0]
                        data.append(unit)

                # min and max value setting
                min_value_ori = min_value
                max_value_ori = max_value
                if self.ui.lineEditMaxVDJ.text() != '':
                    try:
                        max_value1 = int(self.ui.lineEditMaxVDJ.text())
                        if max_value1 > 0:
                            max_value = max_value1
                        else:
                            Msg = 'Max value can not be negative! Will use the max value of this dataset!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    except:
                        Msg = 'Your max value setting is not a number! Will use the max value of this dataset!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

                if self.ui.lineEditMinVDJ.text() != '':
                    try:
                        min_value1 = int(self.ui.lineEditMinVDJ.text())
                        if min_value1 >= 0:
                            min_value = min_value1
                        else:
                            Msg = 'Min value can not be negative! Will use the min value of this dataset!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    except:
                        Msg = 'Your min value setting is not a number! Will use the min value of this dataset!'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                
                if min_value >= max_value:
                    min_value = min_value_ori
                    max_value = max_value_ori
                    Msg = 'Min value must be smaller than max value! Will use the min value of this dataset!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                
                # draw figure
                my_pyecharts = (
                    HeatMap(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                    .add_xaxis(xaxis_data)
                    .add_yaxis(
                        "My data selection",
                        yaxis_data,
                        data,
                        label_opts=opts.LabelOpts(is_show=False, position="inside"),
                    )
                    .set_global_opts(
                        title_opts=opts.TitleOpts(title="HeatMap"),
                        tooltip_opts=opts.TooltipOpts(
                            formatter=JsCode("""
                                                function(params) {
                                                    mydata = params.data;
                                                    return XdataName[mydata[0]] + '<br>' + YdataName[mydata[1]] + '<br>Count: ' + mydata[2];
                                                }	
                                            """)
                        ),
                        visualmap_opts=opts.VisualMapOpts(min_=min_value, max_=max_value, range_color=['#ffffcc','#006699']),
                        xaxis_opts=opts.AxisOpts(
                            type_="category",
                            axislabel_opts=opts.LabelOpts(rotate=-45, interval=0),
                            splitarea_opts=opts.SplitAreaOpts(
                                is_show=True, areastyle_opts=opts.AreaStyleOpts(opacity=1)
                            ),
                        ),
                    )
                )
        # Sankey Diagram
        elif self.ui.tabWidgetFig.currentIndex() == 9:
            '''
            data = asyncio.run(
                get_json_data(url="https://echarts.baidu.com/examples/data/asset/data/energy.json")
            )
            '''
            # fetch data
            f1 = self.ui.comboBoxSankey1.currentText()
            f2 = self.ui.comboBoxSankey2.currentText()
            f3 = self.ui.comboBoxSankey3.currentText()
            f4 = self.ui.comboBoxSankey4.currentText()
            
            f1 = re.sub(r'\(.+', '', f1)
            f2 = re.sub(r'\(.+', '', f2)
            f3 = re.sub(r'\(.+', '', f3)
            f4 = re.sub(r'\(.+', '', f4)

            fields = list(set([f1, f2, f3, f4]))
            if '' in fields:
                fields.remove('')
            if len(fields) < 2:
                Msg = 'Need at least two fields for Sankey Diagram!\n'
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            
            field_str = ''
            sankey_nodes = []
            for ele in [f1, f2, f3, f4]:
                if ele != '':
                    field_str += ele + ','
                    SQLStatement = 'SELECT distinct(' + ele + ') FROM vgenesDB '
                    SQLStatement = SQLStatement + where_statement
                    Data = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                    for record in Data:
                        if isinstance(record[0], str):
                            name = ele + '_' + record[0]
                            sankey_nodes.append({'name':name})

            field_str = field_str[:-1]

            SQLStatement = 'SELECT ' + field_str + ' FROM vgenesDB '
            SQLStatement = SQLStatement + where_statement

            try:
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            except:
                Msg = 'SQL error! Current SQL statemernt is:\n' + SQLStatement
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return
            
            # List to json
            sankey_links = MakeSankey(DataIn, field_str)

            ad = 1
            # draw figure
            my_pyecharts = (
                Sankey(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg'))
                    .add(
                    series_name="",
                    nodes=sankey_nodes,
                    links=sankey_links,
                    itemstyle_opts=opts.ItemStyleOpts(border_width=1, border_color="#aaa"),
                    linestyle_opt=opts.LineStyleOpts(color="source", curve=0.5, opacity=0.5),
                    tooltip_opts=opts.TooltipOpts(trigger_on="mousemove"),
                )
                    .set_global_opts(title_opts=opts.TitleOpts(title="Sankey Diagram"))
            )

        # render figures
        if PNG == True:
            print(self.ui.F.size())
        else:
            # load figure
            html_path = os.path.join(temp_folder,'figure.html')
            my_pyecharts.render(path=html_path)
            # adjust the window size seting
            file_handle = open(html_path, 'r')
            lines = file_handle.readlines()
            file_handle.close()
            # edit js line
            js_line = '<script type="text/javascript" src="' + \
                      os.path.join(js_folder, 'echarts.js') + '"></script>' + \
                      '<script src="' + os.path.join(js_folder, 'jquery.js') + '"></script>' + \
                      '<script src="qrc:///qtwebchannel/qwebchannel.js"></script>'
            if self.ui.tabWidgetFig.currentIndex() == 8:
                SeqdataLine = '<script>XdataName=["'
                SeqdataLine += '","'.join(xaxis_data)
                SeqdataLine += '"]</script>\n'
                SeqdataLine += '<script>YdataName=["'
                SeqdataLine += '","'.join(yaxis_data)
                SeqdataLine += '"]</script>\n'
                lines[5] = js_line + "\n" + SeqdataLine
            else:
                lines[5] = js_line
            # edit style line
            style_line = lines[9]
            style_pos = style_line.find('style')
            style_line = style_line[
                         0:style_pos] + 'style="position: fixed; top: 0px; left: 5%;width:90%; height:' + str(
                self.ui.HTMLview.h - 20) + 'px;"></div>'
            lines[9] = style_line
            insert_js = '<script type="text/javascript">$(document).ready(function() {' \
                        'new QWebChannel(qt.webChannelTransport, function(channel) {' \
                        'var my_object = channel.objects.connection;$("#download").click(function(){' \
                        'my_object.download(text);});$("#update").click(function(){' \
                        'my_object.updateSelection(text);});});});</script>'
            insert_btn = '<input id="download" type="button" value="" style="display:none;"/>' \
                         '<input id="update" type="button" value="" style="display:none;"/>'
            lines = lines[:6] + [insert_js] + lines[6:9] + [insert_btn] + lines[9:]

            if self.ui.tabWidgetFig.currentIndex() in [0,1,2,6,8]:
                # insert click response function
                echart_init_line = lines[13]
                matchObj = re.match(r'.+var\s(\S+)\s=', echart_init_line)
                chart_id = matchObj.group(1)
                js_cmd = chart_id + ".on('click', function (params) {" \
                                    "if(params.data['0'] == null){text = params.name + ',' + params.seriesName + ',0,0';}" \
                                    "else{text = params.name + ',' + params.seriesName + ','+params.data['0']+','+params.data['1'];}" \
                                    "$('#update').click();});"
                lines = lines[:-3] + [js_cmd] + lines[-3:]

            content = '\n'.join(lines)
            file_handle = open(html_path, 'w')
            file_handle.write(content)
            file_handle.close()
            # show local HTML
            #self.ui.HTMLview.load(QUrl('file://' + html_path))
            url = QUrl.fromLocalFile(str(html_path))
            self.ui.HTMLview.load(url)
            self.ui.HTMLview.show()
            self.ui.HTMLview.html = "loaded"
            self.ui.HTMLview.resizeSignal.connect(self.resizeHTML)

            # try to export figures
            #make_snapshot(snapshot, my_pyecharts.render(), "/Users/leil/Documents/Projects/VGenes/test.png")
            #self.ui.HTMLview.page().view().toPlainText(self.ui.HTMLview._callable)
            #print(self.ui.HTMLview.html)

            # build qweb channel
            channel = QWebChannel(self.ui.HTMLview.page())
            my_object = MyObjectCls(self.ui.HTMLview)
            channel.registerObject('connection', my_object)
            self.ui.HTMLview.page().setWebChannel(channel)
            my_object.downloadFigSignal.connect(self.downloadSVG)
            my_object.updateSelectionSignal.connect(self.updateSelection)

            # this section will add information for latest figure. The information will be used to update element selections on the left
            if self.ui.tabWidgetFig.currentIndex() == 0:
                self.ui.HTMLview.info = ['Pie', re.sub(r'\(.+', '', self.ui.comboBoxPie.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 1:
                self.ui.HTMLview.info = ['Bar', re.sub(r'\(.+', '', self.ui.comboBoxCol1.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxCol2.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 2:
                self.ui.HTMLview.info = ['Box', re.sub(r'\(.+', '', self.ui.comboBoxBoxData.currentText()), re.sub(r'\(.+', '',self.ui.comboBoxBox1.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxBox2.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 3:
                self.ui.HTMLview.info = ['Word', re.sub(r'\(.+', '', self.ui.comboBoxWord.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 4:
                self.ui.HTMLview.info = ['River', re.sub(r'\(.+', '', self.ui.comboBoxRiver1.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxRiver2.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 5:
                self.ui.HTMLview.info = ['Tree', re.sub(r'\(.+', '', self.ui.comboBoxTree1.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxTree2.currentText()) , re.sub(r'\(.+', '', self.ui.comboBoxTree3.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 6:
                self.ui.HTMLview.info = ['Scatter', re.sub(r'\(.+', '', self.ui.comboBoxScatterX.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxScatterY.currentText()) ,re.sub(r'\(.+', '', self.ui.comboBoxScatterGroup.currentText())]
            elif self.ui.tabWidgetFig.currentIndex() == 7:
                pass
            elif self.ui.tabWidgetFig.currentIndex() == 8:
                record = ['VDJ']
                if self.ui.checkBoxLocus.isChecked():
                    if self.ui.radioButtonDJ.isChecked():
                        record.append('DLocus')
                        record.append('JLocus')
                    elif self.ui.radioButtonVD.isChecked():
                        record.append('VLocus')
                        record.append('DLocus')
                    else:
                        record.append('VLocus')
                        record.append('JLocus')
                else:
                    if self.ui.radioButtonDJ.isChecked():
                        record.append('D1')
                        record.append('J1')
                    elif self.ui.radioButtonVD.isChecked():
                        record.append('V1')
                        record.append('D1')
                    else:
                        record.append('V1')
                        record.append('J1')
                record.append(xaxis_data)
                record.append(yaxis_data)
                self.ui.HTMLview.info = record
            elif self.ui.tabWidgetFig.currentIndex() == 9:
                self.ui.HTMLview.info = ['Sankey', re.sub(r'\(.+', '', self.ui.comboBoxSankey1.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxSankey2.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxSankey3.currentText()), re.sub(r'\(.+', '', self.ui.comboBoxSankey4.currentText())]

    def resizeHTML(self):
        if self.ui.HTMLview.html == '':
            return
        else:
            self.GenerateFigure()

    def resizeHTMLClone(self):
        if self.ui.HTMLviewClone.html == '':
            return
        else:
            self.GenerateFigureClone()

    def resizeHTMLSHM(self):
        if self.ui.HTMLviewSHM.html == '':
            return
        else:
            #print('re-generate figure')
            self.on_pushButtonSHM_draw_clicked()

    def updateSelection(self, msg):
        if self.ui.checkBoxUpdateSelection.isChecked():
            # split msg
            messages = msg.split(',')
            # fetch data record
            info = self.ui.HTMLview.info
            if info[0] == "Pie":
                field = info[1]
                where_statement = 'WHERE ' + field + " = '" + messages[0] + "'"
                SQLStatement = 'SELECT SeqName FROM vgenesDB ' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            elif info[0] == "Bar":
                field1 = info[1]
                field2 = info[2]
                if field2 == "":
                    where_statement = 'WHERE ' + field1 + " = '" + messages[0] + "'"
                else:
                    where_statement = 'WHERE ' + field1 + " = '" + messages[0] + "'" + ' AND ' + field2 + " = '" + messages[1] + "'"
                SQLStatement = 'SELECT SeqName FROM vgenesDB ' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            elif info[0] == "Box":
                field1 = info[2]
                field2 = info[3]
                if field2 == "":
                    where_statement = 'WHERE ' + field1 + " = '" + messages[0] + "'"
                else:
                    where_statement = 'WHERE ' + field1 + " = '" + messages[0] + "'" + ' AND ' + field2 + " = '" + messages[1] + "'"
                SQLStatement = 'SELECT SeqName FROM vgenesDB ' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            elif info[0] == "Scatter":
                fieldx = info[1]
                fieldy = info[2]
                field = info[3]
                if field == "":
                    where_statement = 'WHERE ' + fieldx + " = '" + messages[2] + "'" + \
                                      ' AND ' + fieldy + " = '" + messages[3] + "'"
                else:
                    where_statement = 'WHERE ' + fieldx + " = '" + messages[2] + "'" + \
                                      ' AND ' + fieldy + " = '" + messages[3] + "'" + \
                                      ' AND ' + field + " = '" + messages[1] + "'"
                SQLStatement = 'SELECT SeqName FROM vgenesDB ' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            elif info[0] == "VDJ":
                print(messages)
                fieldx = info[1]
                fieldy = info[2]
                
                valuex = messages[0]
                valuey = info[4][int(messages[3])]

                where_statement = 'WHERE ' + fieldx + " = '" + valuex + "'" + \
                                  ' AND ' + fieldy + " = '" + valuey + "'"
                SQLStatement = 'SELECT SeqName FROM vgenesDB ' + where_statement
                DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            else:
                return

            # already checked some records?
            if self.ui.treeWidget.isEnabled():
                checked_names = self.CheckedRecords
                num_checked = 0
                if len(checked_names) == 0:
                    # update the selection
                    self.clearTreeChecks()
                    NumFound = len(DataIn)
                    i = 0
                    for item in DataIn:
                        Seqname = item[0]
                        found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                        i += 1
                        for record in found:
                            if i == NumFound - 1:
                                wasClicked = True
                            record.setCheckState(0, Qt.Checked)
                            num_checked += 1
                else:
                    # update the selection
                    self.clearTreeChecks()
                    NumFound = len(DataIn)
                    i = 0
                    for item in DataIn:
                        Seqname = item[0]
                        if Seqname in checked_names:
                            found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                            i += 1
                            for record in found:
                                if i == NumFound - 1:
                                    wasClicked = True
                                record.setCheckState(0, Qt.Checked)
                                num_checked += 1

                NewLbl = str(num_checked) + ' records checked'
                self.ui.label_Name.setText(NewLbl)
                self.match_tree_to_table()

    def downloadSVG(self, msg):
        options = QtWidgets.QFileDialog.Options()
        save_file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                              "My_svg",
                                                              "My_svg",
                                                              "Scalable Vector Graphics (*.svg);;All Files (*)",
                                                              options=options)

        try:
            if msg[5] != 'x':
                svg_header = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full"'
                msg = svg_header + msg[4:]
            file_handle = open(save_file_name, 'w')
            file_handle.write(msg)
            file_handle.close()
        except:
            return

    def downloadFig(self):
        if self.ui.radioButtonPNG.isChecked():
            options = QtWidgets.QFileDialog.Options()
            save_file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self, "My_Fig", "My_Fig",
                                                                      "Portable Document Format (*.pdf);;"
                                                                      "Portable Network Graphics (*.png);;"
                                                                      "Earnings per share (*.eps);;"
                                                                      "Scalable Vector Graphics (*.svg);;"
                                                                      "All Files (*)",
                                                                      options=options)
            self.ui.figure.savefig(save_file_name, dpi=300, )
        else:
            js_cmd= 'text=document.getElementsByTagName("svg")[0].parentNode.innerHTML;$("#download").click();'

            #js_cmd= 'svg=document.getElementsByTagName("svg")[0];var a = document.createElement("a");a.href = svg.src;' \
            #        'a.download = "~/Downloads/test.svg";a.click();'
            self.ui.HTMLview.page().runJavaScript(js_cmd)

    def downloadFigClone(self):
        js_cmd= 'text=document.getElementsByTagName("svg")[0].parentNode.innerHTML;$("#download").click();'

        #js_cmd= 'svg=document.getElementsByTagName("svg")[0];var a = document.createElement("a");a.href = svg.src;' \
        #        'a.download = "~/Downloads/test.svg";a.click();'
        self.ui.HTMLviewClone.page().runJavaScript(js_cmd)

    def _callable(self, data):
        self.html = data

    def PopulateSpec(self):
        # if self.ui.radioButton_21.isChecked():
        self.ui.listViewSpecificity.setEditable(True)
        self.ui.listViewSpecificity_2.setEditable(True)



        SQLStatement = 'SELECT DISTINCT Specificity FROM vgenesDB'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        self.ui.listViewSpecificity.clear()


        entry  = ''
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) > 0:
            for item in DataIn:
                self.ui.listViewSpecificity.addItem(item[0])
        DataIn.clear()


        SQLStatement = 'SELECT DISTINCT Subspecificity FROM vgenesDB'

        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        self.ui.listViewSpecificity_2.clear()


        entry  = ''
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIn) > 0:
            for item in DataIn:
                self.ui.listViewSpecificity_2.addItem(item[0])
        DataIn.clear()
        global UpdateSpecific
        UpdateSpecific = False

    def MakeSQLStatement(self, fields):
        checkedProjects, checkedGroups, checkedSubGroups, checkedkids = self.getTreeChecked()

        SQLStatement = 'SELECT '

        if fields != 'All':
            fieldCount = len(fields)
            i = 1
            for field in fields:
                SQLStatement += field
                if i < fieldCount:
                    SQLStatement += ', '
                else:
                    SQLStatement += ' FROM vgenesDB'
                i += 1
        else:
            SQLStatement += '* FROM vgenesDB'

        firstmore = False

        if (len(checkedProjects) + len(checkedGroups) + len(checkedSubGroups) + len(
                checkedkids)) > 0:  # then somehting is seleected
            SQLStatement += ' WHERE '
            firstmore = True

        i = 1
        if len(checkedProjects) > 0:
            if firstmore == True:
                firstmore = False
            else:
                SQLStatement += ', '
                firstmore = False
            #project = self.ui.cboTreeOp1.currentText()
            #fieldname = self.TransLateFieldtoReal(project, True)
            fieldname = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
            SQLStatement = SQLStatement + fieldname + ' = '
            for item in checkedProjects:
                SQLStatement += ('"' + item)
                if i < len(checkedProjects):
                    SQLStatement += '" OR '
                else:
                    SQLStatement += '"'
                i += 1

            # if len(checkedGroups) > 0: SQLStatement += ', OR '

        i = 1
        if len(checkedGroups) > 0:
            if firstmore == True:
                firstmore = False
            else:
                if len(checkedProjects) > 0:
                    SQLStatement += ' OR '
                else:
                    SQLStatement += ', '

                firstmore = False
            #group = self.ui.cboTreeOp2.currentText()
            #fieldname = self.TransLateFieldtoReal(group, True)
            #project = self.ui.cboTreeOp1.currentText()
            #Projfieldname = self.TransLateFieldtoReal(project, True)
            fieldname = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
            Projfieldname = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())

            # SQLStatement = SQLStatement + fieldname + ' = "'
            for item in checkedGroups:
                statement = fieldname + ' = "' + item[1] + '" AND ' + Projfieldname + ' = "' + item[0]
                SQLStatement += statement
                if i < len(checkedGroups):
                    SQLStatement += '" OR '
                else:
                    SQLStatement += '"'
                i += 1

        i = 1
        if len(checkedSubGroups) > 0:
            if firstmore == True:
                firstmore = False
            else:
                if len(checkedProjects) > 0 or len(checkedGroups) > 0:
                    SQLStatement += ' OR '
                else:
                    SQLStatement += ', '
                firstmore = False
            #Subgroup = self.ui.cboTreeOp3.currentText()
            #fieldname = self.TransLateFieldtoReal(Subgroup, True)
            #group = self.ui.cboTreeOp2.currentText()
            #Groupfieldname = self.TransLateFieldtoReal(group, True)
            #project = self.ui.cboTreeOp1.currentText()
            #Projfieldname = self.TransLateFieldtoReal(project, True)
            fieldname = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
            Groupfieldname = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
            Projfieldname = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())

            # SQLStatement = SQLStatement + fieldname + ' = "'
            for item in checkedSubGroups:
                statement = fieldname + ' = "' + item[2] + '" AND ' + Groupfieldname + ' = "' + item[
                    1] + '" AND ' + Projfieldname + ' = "' + item[0]
                SQLStatement += statement
                if i < len(checkedSubGroups):
                    SQLStatement += '" OR '
                else:
                    SQLStatement += '"'
                i += 1

        i = 1
        if len(checkedkids) > 0:
            if firstmore == True:
                firstmore = False
            else:
                if len(checkedProjects) > 0 or len(checkedGroups) > 0 or len(checkedSubGroups) > 0:
                    SQLStatement += ' OR '
                else:
                    SQLStatement += ', '
                firstmore = False

            for item in checkedkids:
                SQLStatement += 'SeqName = "'
                SQLStatement += item
                if i < len(checkedkids):
                    SQLStatement += '" OR '
                else:
                    SQLStatement += '"'
                i += 1

        return SQLStatement

    def ShowVGenesTextEdit(self, textToShow, style):

        if style == 'aligned':
            FontIs = self.TextEdit.textEdit.currentFont()
            font = QFont(FontIs)

            # FontSize = int(font.pointSize())
            font.setPointSize(10)
            font.setFamily('Courier New')

            self.TextEdit.textEdit.setFont(font)

        elif style == 'standard':
            FontIs = self.TextEdit.textEdit.currentFont()
            font = QFont(FontIs)

            # FontSize = int(font.pointSize())
            font.setPointSize(10)
            font.setFamily('Lucida Grande')

            self.TextEdit.textEdit.setFont(font)

        elif style == 'standard-large':
            FontIs = self.TextEdit.textEdit.currentFont()
            font = QFont(FontIs)

            # FontSize = int(font.pointSize())
            font.setPointSize(15)
            font.setFamily('Lucida Grande')

            self.TextEdit.textEdit.setFont(font)

        elif style == 'ProteinReport':
            FontIs = self.TextEdit.textEdit.currentFont()
            font = QFont(FontIs)

            # FontSize = int(font.pointSize())
            font.setPointSize(6)
            font.setFamily('Courier New')

            self.TextEdit.textEdit.setFont(font)

        self.TextEdit.show()

        self.TextEdit.textEdit.setText(textToShow)

    def initializeTreeView(self, SQLFields):
        if self.ui.treeWidget.isEnabled():
            # clear tree
            self.ui.treeWidget.clear()
            # add all children
            self.TreeAddItems(self.ui.treeWidget.invisibleRootItem(), SQLFields)
            # rebuild name index
            self.buildNameidnex(SQLFields)
    
            global wasClicked
            wasClicked = True

    def buildNameidnex(self,SQLFields):
        global NameIndex

        field1, field2, field3 = SQLFields
        NameIndex.clear()
        if field1 != 'None' and field2 != 'None' and field3 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field1 + ', ' + field2 + ', ' + field3 + ', SeqName'
        elif field1 != 'None' and field2 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field1 + ', ' + field2 + ', SeqName'
        elif field1 != 'None' and field3 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field1 + ', ' + field3 + ', SeqName'
        elif field2 != 'None' and field3 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field2 + ', ' + field3 + ', SeqName'
        elif field1 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field1 + ', SeqName'
        elif field2 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field2 + ', SeqName'
        elif field3 != 'None':
            SQLStatement = 'select SeqName from vgenesdb ORDER BY ' + field3 + ', SeqName'
        else:
            SQLStatement = 'select SeqName from vgenesdb ORDER BY SeqName'

        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        Maxi = len(DataIs)
        for i in range(0, Maxi):
            NameIs = DataIs[i][0]
            NameIndex[NameIs] = i

    def TreeAddItems(self, parent, SQLFields):
        if self.ui.treeWidget.isEnabled():
            dirnamed, filenamed = os.path.split(DBFilename)

            FieldNum = 0
            Field1 = ''
            Field2 = ''
            Field3 = ''
            i1 = 0
            i2 = 0
            i3 = 0
            i4 = 0
            for sfield in SQLFields:
                if sfield != 'None' and sfield is not None:
                    if FieldNum == 0: Field1 = sfield
                    if FieldNum == 1: Field2 = sfield
                    if FieldNum == 2: Field3 = sfield
                    FieldNum += 1
                else:
                    if FieldNum == 0: Field1 = 'None'
                    if FieldNum == 1: Field2 = 'None'
                    if FieldNum == 2: Field3 = 'None'
                    FieldNum += 1

            # todo make header actaul values not field names

            HeaderLabel = Field1 + ' / ' + Field2 + ' / ' + Field3 + ':'
            self.ui.treeWidget.setHeaderLabel(HeaderLabel)

            column = 0
            VTree_item = self.addParent(parent, column, filenamed, 'Top parent')

            # Field 1 selection
            if Field1 != 'None':  # some organizing based on item 1
                SQLStatement = 'SELECT DISTINCT ' + Field1 + ' FROM vgenesDB ORDER BY ' + Field1
                FieldValues = VGenesSQL.readData(DBFilename, SQLStatement)
                for Vcolumn in FieldValues:
                    self.addChild(VTree_item, column, Vcolumn, 'Field-1')
                    # i += 1
            else:  # All classification fields marked 'None'
                SQLStatement = 'SELECT SeqName FROM vgenesDB ORDER BY Project, Grouping, SubGroup, SeqName'
                FieldValues = VGenesSQL.readData(DBFilename, SQLStatement)
                for Vcolumn in FieldValues:
                    self.addChild(VTree_item, column, Vcolumn, 'Field-1')
                self.addChild(VTree_item, column, ' ', ' ')
                return

            # Field 2
            I1 = 0
            if Field2 != 'None':  # There is selection criteria in field 2, iterates through for all Field1s
                for Vcolumn in FieldValues:
                    SQLStatement2 = 'SELECT DISTINCT ' + Field2 + ' FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                    FieldValues2 = VGenesSQL.readData(DBFilename, SQLStatement2)
                    for Vcolumn2 in FieldValues2:
                        self.addChild(VTree_item.child(i1), column, Vcolumn2, 'Field-2')
                    i1 += 1

            else:
                for Vcolumn in FieldValues:
                    SQLStatement2 = 'SELECT SeqName FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                    FieldValues2 = VGenesSQL.readData(DBFilename, SQLStatement2)
                    for Vcolumn2 in FieldValues2:
                        self.addChild(VTree_item.child(i1), column, Vcolumn2, 'Field-2')
                    i1 += 1
                    # self.addChild( VTree_item, column, ' ', ' ')
                return

            # Field 3
            i1 = 0
            i2 = 0
            if Field3 != 'None':  # There is selection criteris in field 2, iterates through for all Field1s
                for Vcolumn in FieldValues:
                    SQLStatement2 = 'SELECT DISTINCT ' + Field2 + ' FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                    FieldValues2 = VGenesSQL.readData(DBFilename, SQLStatement2)
                    i2 = 0
                    for Vcolumn2 in FieldValues2:
                        SQLStatement3 = 'SELECT DISTINCT ' + Field3 + ' FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" AND ' + Field2 + ' = "' + Vcolumn2 + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                        FieldValues3 = VGenesSQL.readData(DBFilename, SQLStatement3)
                        for Vcolumn3 in FieldValues3:
                            self.addChild(VTree_item.child(i1).child(i2), column, Vcolumn3, 'Field-3')
                        i2 += 1
                    i1 += 1

            else:
                for Vcolumn in FieldValues:
                    SQLStatement2 = 'SELECT DISTINCT ' + Field2 + ' FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                    FieldValues2 = VGenesSQL.readData(DBFilename, SQLStatement2)
                    i2 = 0
                    for Vcolumn2 in FieldValues2:
                        SQLStatement3 = 'SELECT SeqName FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" AND ' + Field2 + ' = "' + Vcolumn2 + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                        FieldValues3 = VGenesSQL.readData(DBFilename, SQLStatement3)
                        for Vcolumn3 in FieldValues3:
                            self.addChild(VTree_item.child(i1).child(i2), column, Vcolumn3, 'Field-3')
                        i2 += 1
                    i1 += 1
                return

            # Last set only done if all 3 others selected
            i1 = 0
            i2 = 0
            i3 = 0
            for Vcolumn in FieldValues:
                SQLStatement2 = 'SELECT DISTINCT ' + Field2 + ' FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                FieldValues2 = VGenesSQL.readData(DBFilename, SQLStatement2)
                i2 = 0
                for Vcolumn2 in FieldValues2:
                    SQLStatement3 = 'SELECT DISTINCT ' + Field3 + ' FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" AND ' + Field2 + ' = "' + Vcolumn2 + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                    FieldValues3 = VGenesSQL.readData(DBFilename, SQLStatement3)
                    i3 = 0
                    for Vcolumn3 in FieldValues3:
                        SQLStatement4 = 'SELECT SeqName FROM vgenesDB WHERE ' + Field1 + ' = "' + Vcolumn + '" AND ' + Field2 + ' = "' + Vcolumn2 + '" AND ' + Field3 + ' = "' + Vcolumn3 + '" ORDER BY Project, Grouping, SubGroup, SeqName'
                        FieldValues4 = VGenesSQL.readData(DBFilename, SQLStatement4)
                        for Vcolumn4 in FieldValues4:
                            self.addChild(VTree_item.child(i1).child(i2).child(i3), column, Vcolumn4, 'Field-4')
                            # self.addChild(VTree_item.child(i1).child(i2).child(i3), 1, 'test', 'Field-4')
                        # self.addChild(VTree_item.child(i1).child(i2).child(i3), column, 'Blank', 'Field-4')
                        i3 += 1
                    i2 += 1
                i1 += 1

    def addParent(self, parent, column, title, data):
        item = QtWidgets.QTreeWidgetItem(parent, [title])
        item.setData(column, Qt.UserRole, data)
        item.setChildIndicatorPolicy(QtWidgets.QTreeWidgetItem.ShowIndicator)
        item.setExpanded(True)
        return item

    def addChild(self, parent, column, title, data):
        item = QtWidgets.QTreeWidgetItem(parent, [title])
        item.setData(column, Qt.UserRole, data)
        item.setCheckState(column, Qt.Unchecked)
        return item

    @pyqtSlot()
    def treeWidgetClicked(self):
        global wasClicked
        wasClicked = True

    def handleChanged(self, item, column):
        global wasClicked

        if wasClicked == False:
            return

        wasClicked = False

        Selected = self.ui.treeWidget.selectedItems()
        NumSelected = len(Selected)
        if len(Selected) > 1:
            self.CheckMultiple()
            if item.checkState(column) == Qt.Checked:
                item.setCheckState(0, Qt.Unchecked)
            elif item.checkState(column) == Qt.Unchecked:
                item.setCheckState(0, Qt.Checked)
        else:
            if item.checkState(column) == Qt.Checked:
                self.CheckBelow(item, True)
                self.CheckUp(item, True)
                print("checked!")
            if item.checkState(column) == Qt.Unchecked:
                self.CheckBelow(item, False)
                self.CheckUp(item, False)
                print("unchecked")
        self.match_tree_to_table()
        self.tree_to_table_selection()

    def tree_to_table_selection(self):
        if self.ui.treeWidget.isEnabled():
            # find selection name
            Selected = self.ui.treeWidget.selectedItems()
            try:
                Selected = Selected[-1]
            except:
                return
            name = Selected.text(0)

            print(name)

            # try to match before re-generate table
            rows = self.ui.SeqTable.rowCount()
            for row in range(rows):
                cur_name = self.ui.SeqTable.item(row, 1).text()
                if cur_name == name:
                    self.ui.SeqTable.setCurrentCell(row,1)
                    return

            # loacte records in table and update table
            print('re-generate table!\n')
            field1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
            field2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
            field3 = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())

            orderStatement = "ORDER BY " + field1 + "," + field2 + "," + field3 + ",SeqName"
            #SQLStatement = 'SELECT * FROM (SELECT ROW_NUMBER () OVER ( ' + orderStatement + ') RowNum,SeqName FROM vgenesDB) WHERE `SeqName` = "' + name + '"'
            SQLStatement = 'SELECT SeqName FROM vgenesDB ' + orderStatement
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            name_list = [u[0] for u in DataIn]
            try:
                row_number = name_list.index(name) + 1
            except:
                row_number = 1

            pageSize = int(self.ui.spinBoxPageSize.text())
            PageNumber = math.ceil(row_number/pageSize)

            self.ui.labelCurPage.setText(str(PageNumber))
            self.load_table()

            # setup focus on seqTable
            rows = self.ui.SeqTable.rowCount()
            for row in range(rows):
                cur_name = self.ui.SeqTable.item(row, 1).text()
                if cur_name == name:
                    self.ui.SeqTable.setCurrentCell(row,1)
                    return

    def tree_to_table_selection_old(self):
        Selected = self.ui.treeWidget.selectedItems()
        try:
            Selected = Selected[-1]
        except:
            return
        name = Selected.text(0)

        print(name)

        rows = self.ui.SeqTable.rowCount()
        for row in range(rows):
            cur_name = self.ui.SeqTable.item(row, 1).text()
            if cur_name == name:
                self.ui.SeqTable.setCurrentCell(row,1)
                return

    def table_to_tree_selection(self):
        global from_table
        try:
            items = self.ui.SeqTable.selectedItems()
            item = items[-1]
            name = self.ui.SeqTable.item(self.ui.SeqTable.indexFromItem(item).row(), 1).text()

            print(name)

            if self.ui.treeWidget.isEnabled():
                found = self.ui.treeWidget.findItems(name, Qt.MatchRecursive, 0)
                if len(found) > 0:
                    found = found[0]
                    from_table = True
                    self.ui.treeWidget.setCurrentItem(found)
                    from_table = False
            else:
                MatchingIndex = NameIndex[name]
                self.DialScroll(MatchingIndex, False)
                self.updateF(MatchingIndex)
        except:
            return

    def select_tree_by_name(self, name):
        if self.ui.treeWidget.isEnabled():
            found = self.ui.treeWidget.findItems(name, Qt.MatchRecursive, 0)
            if len(found) > 0:
                found = found[0]
                self.ui.treeWidget.setCurrentItem(found)

    def getTreePathUp(self, item):
        path = []
        while item is not None:
            item = item.parent()
            if item is not None:
                path.append(str(item.text(0)))

        return path  # '/'.join(reversed(path))

    def CheckBelow(self, item, ToCheck):  # checks all items below
        while item is not None:

            if item.childCount() != 0:
                for index in range(item.childCount()):  # will iterate through all children
                    parent = item.child(index)
                    namehere = parent.text(0)
                    if ToCheck == True:
                        parent.setCheckState(0, Qt.Checked)
                        if parent.childCount() != 0:
                            for index in range(parent.childCount()):
                                child = parent.child(index)
                                namehere = child.text(0)
                                child.setCheckState(0, Qt.Checked)
                                if child.childCount() != 0:
                                    for index in range(child.childCount()):
                                        childschild = child.child(index)
                                        namehere = childschild.text(0)
                                        childschild.setCheckState(0, Qt.Checked)
                                        if childschild.childCount() != 0:
                                            for index in range(childschild.childCount()):
                                                childschildschild = childschild.child(index)
                                                namehere = childschildschild.text(0)
                                                childschildschild.setCheckState(0, Qt.Checked)
                                                # child = parent.child(index)
                    else:
                        parent.setCheckState(0, Qt.Unchecked)
                        if parent.childCount() != 0:
                            for index in range(parent.childCount()):
                                child = parent.child(index)
                                namehere = child.text(0)
                                child.setCheckState(0, Qt.Unchecked)
                                if child.childCount() != 0:
                                    for index in range(child.childCount()):
                                        childschild = child.child(index)
                                        namehere = childschild.text(0)
                                        childschild.setCheckState(0, Qt.Unchecked)
                                        if childschild.childCount() != 0:
                                            for index in range(childschild.childCount()):
                                                childschildschild = childschild.child(index)
                                                namehere = childschildschild.text(0)
                                                childschildschild.setCheckState(0, Qt.Unchecked)

            item = item.child(0)
            # if item is not None:
            #     path.append(str(item.text(0)))

    def CheckUp(self, item, ToCheck):  # checks all items below
        root = self.ui.treeWidget.invisibleRootItem()
        for index in range(root.childCount()):
            fileIs = root.child(index)

        # itemsChecked = 0
        # itemsTotal = 0
        fileIsChecks = 0
        for index in range(fileIs.childCount()):

            project = fileIs.child(index)  # project level
            # while item is not None:  # iterate through project level items


            if project.childCount() != 0:  # if project level exists
                ProjectChecks = 0
                for Pindex in range(project.childCount()):  # will iterate through group level
                    Group = project.child(Pindex)  # each group

                    if Group.childCount() != 0:  # if there is a subgroup level
                        GroupChecks = 0
                        for Gindex in range(Group.childCount()):  # will iterate through subgroup level
                            SubGroup = Group.child(Gindex)  # each subgroup

                            if SubGroup.childCount() != 0:  # if there is a record level
                                SubGroupChecks = 0
                                ChildCount = SubGroup.childCount()
                                for SGindex in range(SubGroup.childCount()):  # will iterate through record level
                                    Record = SubGroup.child(SGindex)  # each subgroup
                                    # itemsTotal +=1
                                    if Record.checkState(0) == Qt.Checked:
                                        # itemsChecked += 1
                                        SubGroupChecks += 1
                                if SubGroupChecks == 0:
                                    SubGroup.setCheckState(0, Qt.Unchecked)
                                elif SubGroupChecks == ChildCount:
                                    SubGroup.setCheckState(0, Qt.Checked)
                                elif SubGroupChecks < ChildCount:
                                    SubGroup.setCheckState(0, Qt.PartiallyChecked)

                            else:  # if group is lowest level
                                # itemsTotal +=1
                                if SubGroup.checkState(0) == Qt.Checked:
                                    # itemsChecked += 1
                                    GroupChecks += 1

                                if GroupChecks == 0:
                                    Group.setCheckState(0, Qt.Unchecked)
                                elif GroupChecks == Group.childCount():
                                    Group.setCheckState(0, Qt.Checked)
                                elif GroupChecks < Group.childCount():
                                    Group.setCheckState(0, Qt.PartiallyChecked)

                    else:  # if group is lowest level
                        # itemsTotal +=1
                        if Group.checkState(0) == Qt.Checked:
                            # itemsChecked += 1
                            ProjectChecks += 1
                        if ProjectChecks == 0:
                            project.setCheckState(0, Qt.Unchecked)
                        elif ProjectChecks == project.childCount():
                            project.setCheckState(0, Qt.Checked)
                        elif ProjectChecks < project.childCount():
                            project.setCheckState(0, Qt.PartiallyChecked)

            else:  # project is lowest (record) level
                # itemsTotal +=1
                if project.checkState(0) == Qt.Checked:
                    # itemsChecked += 1
                    fileIsChecks += 1

                if fileIsChecks == 0:
                    fileIs.setCheckState(0, Qt.Unchecked)
                elif fileIsChecks == fileIs.childCount():
                    fileIs.setCheckState(0, Qt.Checked)
                elif fileIsChecks < fileIs.childCount():
                    fileIs.setCheckState(0, Qt.PartiallyChecked)

        itemsTotal = 0
        itemsChecked = 0



        while item is not None:
            itemsTotal = 0
            itemsChecked = 0
            partiallyChecked = 0
            item = item.parent()

            if item is not None:
                Checktxt = item.text(0)
                for index in range(item.childCount()):  # will iterate through all children
                    itemsTotal += 1
                    child = item.child(index)
                    Checktxt = child.text(0)
                    if child.checkState(0) == Qt.Checked:
                        itemsChecked += 1
                    if child.checkState(0) == Qt.PartiallyChecked:
                        partiallyChecked += 1

                if item is not None:
                    if itemsTotal == itemsChecked:
                        item.setCheckState(0, Qt.Checked)
                    elif itemsChecked < itemsTotal:
                        if itemsChecked > 0 or partiallyChecked > 0:
                            item.setCheckState(0, Qt.PartiallyChecked)
                        else:
                            item.setCheckState(0, Qt.Unchecked)
                            # if item is not None:
                            #     path.append(str(item.text(0)))

    def CheckMultiple(self):
        if self.ui.treeWidget.isEnabled():
            Selected = self.ui.treeWidget.selectedItems()
            # i = 0
            for item in Selected:
                # if i == 0:
                #     currentitemIs = item.text(0)
                # i += 1
                if item.checkState(0) == Qt.Checked:
                    item.setCheckState(0, Qt.Unchecked)
                else:
                    item.setCheckState(0, Qt.Checked)

    def clearTreeChecks(self):
        if self.ui.treeWidget.isEnabled():
            global wasClicked
            wasClicked = False

            value = self.ui.treeWidget.selectedItems()
            # self.ui.treeWidget.selectedItems()
            currentitemIs = ''
            for item in value:
                currentitemIs = item.text(0)

            root = self.ui.treeWidget.invisibleRootItem()
            for index in range(root.childCount()):
                fileIs = root.child(index)
                fileIs.setCheckState(0,Qt.Unchecked)



            for index in range(fileIs.childCount()):
                project = fileIs.child(index)  # project level
                project.setCheckState(0,Qt.Unchecked)

                if project.childCount() != 0:  # if project level exists

                    for Pindex in range(project.childCount()):  # will iterate through group level
                        Group = project.child(Pindex)  # each group
                        Group.setCheckState(0,Qt.Unchecked)

                        if Group.childCount() != 0:  # if there is a subgroup level
                            for Gindex in range(Group.childCount()):  # will iterate through subgroup level
                                SubGroup = Group.child(Gindex)  # each subgroup
                                SubGroup.setCheckState(0,Qt.Unchecked)

                                if SubGroup.childCount() != 0:  # if there is a record level

                                    for SGindex in range(SubGroup.childCount()):  # will iterate through record level

                                        Record = SubGroup.child(SGindex)  # each subgroup
                                        Record.setCheckState(0,Qt.Unchecked)

    def TreeChecksAll(self):
        if self.ui.treeWidget.isEnabled():
            global wasClicked
            wasClicked = False

            value = self.ui.treeWidget.selectedItems()
            # self.ui.treeWidget.selectedItems()
            currentitemIs = ''
            for item in value:
                currentitemIs = item.text(0)

            root = self.ui.treeWidget.invisibleRootItem()
            for index in range(root.childCount()):
                fileIs = root.child(index)
                fileIs.setCheckState(0,Qt.Checked)



            for index in range(fileIs.childCount()):
                project = fileIs.child(index)  # project level
                project.setCheckState(0,Qt.Checked)

                if project.childCount() != 0:  # if project level exists

                    for Pindex in range(project.childCount()):  # will iterate through group level
                        Group = project.child(Pindex)  # each group
                        Group.setCheckState(0,Qt.Checked)

                        if Group.childCount() != 0:  # if there is a subgroup level
                            for Gindex in range(Group.childCount()):  # will iterate through subgroup level
                                SubGroup = Group.child(Gindex)  # each subgroup
                                SubGroup.setCheckState(0,Qt.Checked)

                                if SubGroup.childCount() != 0:  # if there is a record level

                                    for SGindex in range(SubGroup.childCount()):  # will iterate through record level

                                        Record = SubGroup.child(SGindex)  # each subgroup
                                        Record.setCheckState(0,Qt.Checked)

    def getTreePathDown(self, item):
        path = []
        checkedkids = []
        while item is not None:

            if item.childCount() != 0:
                for index in range(item.childCount()):  # will iterate through all children
                    parent = item.child(index)
                    namehere = parent.text(0)

            item = item.child(0)
            if item is not None:
                path.append(str(item.text(0)))

        return path  # '/'.join(reversed(path))

    def getTreeChecked(self):
        if self.ui.treeWidget.isEnabled():
            root = self.ui.treeWidget.invisibleRootItem()
            for index in range(root.childCount()):
                fileIs = root.child(index)

            checkedkids = []
            checkedProjects = []
            checkedGroups = []
            checkedSubGroups = []

            for index in range(fileIs.childCount()):
                project = fileIs.child(index)  # project level
                # while item is not None:  # iterate through project level items


                if project.childCount() != 0:  # if project level exists
                    if project.checkState(0) == Qt.Checked:
                        checkedProjects.append(project.text(0))

                    else:
                        for Pindex in range(project.childCount()):  # will iterate through group level
                            Group = project.child(Pindex)  # each group
                            checkName = Group.text(0)
                            # numkid =
                            if Group.childCount() != 0:  # if there is a subgroup level
                                if Group.checkState(0) == Qt.Checked:
                                    ProjName = project.text(0)
                                    GroupName = Group.text(0)
                                    SetGroup = (ProjName, GroupName)
                                    # checkedGroups.append(Group.text(0))
                                    checkedGroups.append(SetGroup)

                                else:
                                    for Gindex in range(Group.childCount()):  # will iterate through subgroup level
                                        SubGroup = Group.child(Gindex)  # each subgroup
                                        checkName = SubGroup.text(0)
                                        if SubGroup.childCount() != 0:  # if there is a record level
                                            if SubGroup.checkState(0) == Qt.Checked:
                                                ProjName = project.text(0)
                                                GroupName = Group.text(0)
                                                SubGroupName = SubGroup.text(0)
                                                SetGroup = (ProjName, GroupName, SubGroupName)
                                                # checkedSubGroups.append(SubGroup.text(0))
                                                checkedSubGroups.append(SetGroup)
                                            else:
                                                for SGindex in range(
                                                        SubGroup.childCount()):  # will iterate through record level
                                                    Record = SubGroup.child(SGindex)  # each subgroup
                                                    checkName = Record.text(0)
                                                    if Record.checkState(0) == Qt.Checked:
                                                        checkedkids.append(Record.text(0))


                                        else:  # if group is lowest level
                                            # for SGindex in range(SubGroup.childCount()):  # for each project if lowest level item
                                            #      Ritem = SubGroup.child(SGindex)
                                            if SubGroup.checkState(0) == Qt.Checked:
                                                checkedkids.append(SubGroup.text(0))

                            else:  # if group is lowest level
                                if Group.checkState(0) == Qt.Checked:
                                    checkedkids.append(Group.text(0))

                else:  # project is lowest (record) level
                    if project.checkState(0) == Qt.Checked:
                        checkedkids.append(project.text(0))

            return checkedProjects, checkedGroups, checkedSubGroups, checkedkids

    def getTreeCheckedChild(self):
        if self.ui.treeWidget.isEnabled():
            root = self.ui.treeWidget.invisibleRootItem()
            for index in range(root.childCount()):
                fileIs = root.child(index)

            checkedkids = []
            checkedProjects = []
            checkedGroups = []
            checkedSubGroups = []

            for index in range(fileIs.childCount()):
                project = fileIs.child(index)  # project level
                # while item is not None:  # iterate through project level items

                if project.childCount() != 0:  # if project level exists
                    if project.checkState(0) == Qt.Checked:
                        checkedProjects.append(project.text(0))
                    for Pindex in range(project.childCount()):  # will iterate through group level
                        Group = project.child(Pindex)  # each group
                        checkName = Group.text(0)
                        # numkid =
                        if Group.childCount() != 0:  # if there is a subgroup level
                            if Group.checkState(0) == Qt.Checked:
                                ProjName = project.text(0)
                                GroupName = Group.text(0)
                                SetGroup = (ProjName, GroupName)
                                # checkedGroups.append(Group.text(0))
                                checkedGroups.append(SetGroup)
                            for Gindex in range(Group.childCount()):  # will iterate through subgroup level
                                SubGroup = Group.child(Gindex)  # each subgroup
                                checkName = SubGroup.text(0)
                                if SubGroup.childCount() != 0:  # if there is a record level
                                    if SubGroup.checkState(0) == Qt.Checked:
                                        ProjName = project.text(0)
                                        GroupName = Group.text(0)
                                        SubGroupName = SubGroup.text(0)
                                        SetGroup = (ProjName, GroupName, SubGroupName)
                                        # checkedSubGroups.append(SubGroup.text(0))
                                        checkedSubGroups.append(SetGroup)
                                    for SGindex in range(SubGroup.childCount()):
                                        Record = SubGroup.child(SGindex)  # each subgroup
                                        checkName = Record.text(0)
                                        if Record.checkState(0) == Qt.Checked:
                                            checkedkids.append(Record.text(0))
                                else:  # if group is lowest level
                                    # for SGindex in range(SubGroup.childCount()):  # for each project if lowest level item
                                    #      Ritem = SubGroup.child(SGindex)
                                    if SubGroup.checkState(0) == Qt.Checked:
                                        checkedkids.append(SubGroup.text(0))
                        else:  # if group is lowest level
                            if Group.checkState(0) == Qt.Checked:
                                checkedkids.append(Group.text(0))
                else:  # project is lowest (record) level
                    if project.checkState(0) == Qt.Checked:
                        checkedkids.append(project.text(0))

            return checkedProjects, checkedGroups, checkedSubGroups, checkedkids

    @pyqtSlot()
    def on_actionGL_triggered(self):
        global GLMsg
        if self.ui.actionGL.isChecked() == True:
            if GLMsg == True:
                #question = 'Select a sequence to use for the predicted germline in a multiple alignment.'
                question = 'Will align predicted germline of your current selected sequence with all checked sequences.\n' \
                           'You can click (not check) the sequence on the left panel to determine the GL seq before you click alignment button.'
                buttons = 'OK'
                answer = informationMessage(self, question, buttons)

    def ModuleFind(self):
        from modulefinder import ModuleFinder
        from VGenesDialogues import openFile
        import os

        Pathname = openFile(self, 'CSV')

        workingdir, filename = os.path.split(Pathname)

        os.chdir(workingdir)
        # import filename

        finder = ModuleFinder()
        finder.run_script(filename)

        Doc = 'Loaded modules:\n'
        for name, mod in finder.modules.items():
            # Doc('%s: ' % name, end=''\n)
            Doc += (','.join(list(mod.globalnames.keys())[:3]))
            Doc += '\n'
            # Doc
        Doc += ('-' * 50)

    @pyqtSlot()
    def on_actionPrint_triggered(self):

        FontIs = self.TextEdit.textEdit.currentFont()
        font = QFont(FontIs)
        if self.ui.tabWidget.currentIndex() == 0:
            fields = ['SeqName', 'V1', 'D1', 'J1', 'VLocus', 'JLocus', 'productive', 'TotMut', 'CDR3DNA', 'CDR3AA',
                      'CDR3Length', 'CDR3pI', 'ClonalPool', 'Isotype', 'Sequence']
            # SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
            DataIs = [data[0], data[3], data[6], data[9], data[90], data[91], data[14], data[57], data[81], data[82],
                      str(data[83]), str(data[100]), str(data[88]), data[101],
                      data[79]]  # VGenesSQL.RunSQL(DBFilename, SQLStatement)
            NameList = []
            for item in fields:
                NameList.append(str(self.TransLateFieldtoReal(item, False)))
            NameList[7] = 'Mutations'
            NameList[11] = 'CDR3 pI'

            Document = ''
            i = 0
            for item in DataIs:
                Document += (NameList[i] + ': \t' + str(item) + '\n')
                i += 1
            Document += ('Protein: ' + self.ui.txtAASeq.toPlainText() + '\n')
            Document += '\n'
            Document += self.windowTitle()
            font.setPointSize(10)
            font.setFamily('Lucida Grande')
        elif self.ui.tabWidget.currentIndex() == 2:
            Document = data[0] + '\n'
            Document += ('DNA: ' + self.ui.txtDNASeq.toPlainText() + '\n')
            Document += ('Protein: ' + self.ui.txtAASeq.toPlainText() + '\n')
            Document += ('\n' + self.windowTitle())
            font.setPointSize(10)
            font.setFamily('Lucida Grande')
        elif self.ui.tabWidget.currentIndex() == 3:
            Document = data[0] + '\n'
            Document += self.ui.txtSeqAlignment.toPlainText()
            Document += ('\n' + self.windowTitle())
            font.setPointSize(7)
            font.setFamily('Courier New')
        else:
            Msg = 'Current page has nothing to print!\n ' \
                  'Print functions ony available for Tablulated Data, Sequences and Alignment page!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        self.TextEdit.textEdit.setFont(font)

        # self.TextEdit.show()

        self.TextEdit.textEdit.setText(Document)

        document = self.TextEdit.textEdit.document()
        printer = QPrinter()

        dlg = QPrintDialog(printer, self)
        if dlg.exec_() != QtWidgets.QDialog.Accepted:
            return

        if self.ui.tabWidget.currentIndex() == 3: printer.setOrientation(QPrinter.Landscape)
        document.print_(printer)

        self.statusBar().showMessage("Ready", 2000)

    @pyqtSlot()
    def on_btnDeleteRecord_clicked(self):
        self.on_actionDelete_record_triggered()

    @pyqtSlot()
    def on_actionDuplicate_current_triggered(self):
        SQLStatement = 'SELECT * FROM vgenesDB WHERE SeqName = "' + data[0] + '"'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        copy_data = list(DataIn[0])
        new_name = copy_data[0] + '_copy'
        copy_data[0] = new_name

        SQLStatement = 'SELECT ID FROM vgenesDB'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        id_list = [int(i[0]) for i in DataIn]
        copy_data[119] = str(max(id_list) + 1)
        my_list = ['?']*len(FieldList)

        CMD = 'INSERT INTO vgenesDB(' + ','.join(FieldList) + ') VALUES(' + ','.join(my_list) + ')'
        conn = db.connect(DBFilename)
        cursor = conn.cursor()
        try:
            cursor.execute(CMD, copy_data)
            conn.commit()  # saves data into file
            self.refreshDB()

            if self.ui.treeWidget.isEnabled():
                self.on_btnUpdateTree_clicked()
                found = self.ui.treeWidget.findItems(new_name, Qt.MatchRecursive, 0)
                if len(found) > 0:
                    found = found[0]
                    from_table = True
                    self.ui.treeWidget.setCurrentItem(found)
                    from_table = False
                    self.tree_to_table_selection()
        except:
            QMessageBox.warning(self, 'Warning', 'Failed to make a copy of current record!\nMost likely you already have a copy of current record!\nTo make a new copy, please rename the old copy first!',
                                    QMessageBox.Ok, QMessageBox.Ok)

        conn.close()
        
        # focus on the copy

    @pyqtSlot()
    def on_actionDelete_record_triggered(self):
        #sel_names = self.getTreeCheckedChild()
        sel_names = self.CheckedRecords

        if len(sel_names) == 0:
            question = 'You did not check any sequences, do you want delete current selected sequence?\n' + data[0]
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)

            if answer == 'Yes':
                SQLStatement = ' FROM vgenesDB WHERE SeqName = "' + data[0] + '"'
                VGenesSQL.deleterecords(DBFilename, SQLStatement)

                QMessageBox.information(self, 'Information', 'The selected record has been deleted!',
                                        QMessageBox.Ok, QMessageBox.Ok)
                if DBFilename != None:
                    if os.path.isfile(DBFilename):
                        self.LoadDB(DBFilename)
        else:
            '''
            question = 'Do you want delete current selected sequences?\n' + ','.join(sel_names)
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)

            if answer == 'Yes':
                SQLStatement = ' FROM vgenesDB WHERE SeqName IN ("' + '","'.join(sel_names) + '")'
                VGenesSQL.deleterecords(DBFilename, SQLStatement)

                QMessageBox.information(self, 'Information', 'The selected record has been deleted!',
                                        QMessageBox.Ok, QMessageBox.Ok)
                if DBFilename != None:
                    if os.path.isfile(DBFilename):
                        self.LoadDB(DBFilename)
                        self.on_btnUpdateTree_clicked()
            '''
            self.modalessDeleteDialog = deleteDialog()
            self.modalessDeleteDialog.ui.listWidget.addItems(sel_names)
            self.modalessDeleteDialog.deleteSignal.connect(self.delRecordsFromDB)
            self.modalessDeleteDialog.show()
                        
    def delRecordsFromDB(self, del_list, table):
        SQLStatement = ' FROM vgenesDB WHERE SeqName IN ("' + '","'.join(del_list) + '")'
        VGenesSQL.deleterecords(DBFilename, SQLStatement)

        QMessageBox.information(self, 'Information', 'The selected record has been deleted!',
                                QMessageBox.Ok, QMessageBox.Ok)

        if DBFilename != None:
            if os.path.isfile(DBFilename):
                self.LoadDB(DBFilename)
                self.on_btnUpdateTree_clicked()


    def RemoveDuplicates(self, DataList):
        from operator import itemgetter
        import itertools

        DataList.sort(key=itemgetter(1, 2, 3))

    @pyqtSlot()
    def SharedClones(self):
        ProjDict  = {}
        i = 1
        fields = ['Project'] #create name dictionary
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        SQLStatement = 'SELECT DISTINCT' + SQLStatement[6:] + ' ORDER BY Project'
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        for item in DataIs:
            NameP = 'P'+ str(i)
            ProjName = item[0]
            DayName =  ProjName[6:8]
            if DayName == 'DS':
                NameP = 'Pre'
            elif DayName == 'D0':
                NameP = 'D0'
            elif DayName == 'D1':
                NameP = 'D1'
            elif DayName == 'D3':
                NameP = 'D3'
            elif DayName == 'D7':
                NameP = 'D7'

            ProjDict[ProjName] = NameP
            i += 1

        fields = ['ClonalPool']
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        SQLStatement = 'SELECT DISTINCT' + SQLStatement[6:] + ' ORDER BY ClonalPool'

        #''SELECT DISTINCT ClonalPool FROM vgenesDB WHERE Project = "Abx09-D0_IgA" ORDER BY ClonalPool''
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        for item in DataIs:
            SharedName = ''
            ClPl = item[0]
            SQLStatement = 'SELECT DISTINCT Project FROM vgenesDB WHERE ClonalPool = ' + ClPl + ' ORDER BY Project'
            DataIs2 = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            for proj in DataIs2:
                if proj[0] in ProjDict:
                    Pname = ProjDict[proj[0]]
                SharedName += Pname + '_'
            SharedName  = SharedName[:(len(SharedName)-1)]
            if len(SharedName) <= 3:
                SharedName = 'Exclusive'
            elif SharedName == 'D0_D1_D3_D7_Pre':
                SharedName = 'All'


            SQLStatement = 'UPDATE vgenesDB SET Blank7 = "' + SharedName + '" WHERE ClonalPool = "' + ClPl + '"'

            foundRecs = VGenesSQL.UpdateMulti(SQLStatement, DBFilename)

        SQLStatement = 'UPDATE vgenesDB SET Blank7 = "Distinct" WHERE ClonalPool = 0'

        foundRecs = VGenesSQL.UpdateMulti(SQLStatement, DBFilename)
        print("Finished Shared analysis")

    @pyqtSlot()
    def on_actionFind_Clonal_triggered_old(self):
        global updateMarker
        from operator import itemgetter
        import itertools
        remove = False
        items = ('Clonal Pools', 'Annotate Duplicates', 'Remove Duplicates', 'Shared Clones')
        title = 'Choose analysis:'
        item = setItem(self, items, title)
        if item == 'Cancel':
            return
        elif item[:3] == 'Ann':
            Duplicates = True
        elif item[:3] == 'Rem':
            Duplicates = True
            query = 'This function will delete all but one duplicated sequences, annotating ' \
                    'the remaining with depth (in the "Quality" field) and the names of ' \
                    'duplicated sequences (in the "Comments" field), \nProceed with delete (Yes), or just annotate (No)'
            answer = questionMessage(self, query, 'YNC')
            if answer == 'Yes':
                remove = True
            elif answer == 'Cancel':
                return
        elif item[:3] == 'Sha':
            self.SharedClones()
            return
        else:
            Duplicates = False

        if self.ui.cboFindField.currentText() == 'Name': self.ui.cboFindField.setCurrentText('Project')
        # SeqName, Sequence, ClonalPool, GermlineSequence, Mutations
        answer = questionMessage(self,
                                 'Use a field to delineate multiple subjects (default = "Project")?\n\n "No" will process all selected as one subject.\n\n Press "Cancel" to choose field in the search panel before running analysis.',
                                 'YNC')
        if answer == 'Yes':
            #field = self.ui.cboFindField.currentText()
            #fieldsearch = self.TransLateFieldtoReal(field, True)
            fieldsearch = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
        elif answer == 'No':
            fieldsearch = 'None'
        elif answer == 'Cancel':
            return

        if fieldsearch == 'None':
            fields = ['SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence',
                      'ID', 'GVend', 'GJbeg', 'GD1beg', 'GD1end']
        else:
            fields = ['SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence',
                      'ID','GVend', 'GJbeg', 'GD1beg', 'GD1end', fieldsearch]

        a = data

        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first
        DataIs2 = []

        ProjName = data[75]

        ErLog = 'Clonal analysis for ' + ProjName + '\n'
        Errs = 0
        '''
        for item in DataIs:
            SeqName = item[0]
            self.findTreeItem(SeqName)
            try:
                if int(data[83]) != 0:
                    VGenesSQL.UpdateField(data[119], str(0), 'ClonalPool', DBFilename)
            except:
                print('stop')

            if int(item[6]) > 0:  # has CDR3 scored
                DataIs2.append(item)
            else:
                ErLog += SeqName + '\n'
                Errs += 1
        '''
        for item in DataIs:
            if int(item[6]) > 0:  # has CDR3 scored
                DataIs2.append(item)
            else:
                ErLog += item[0] + '\n'
                Errs += 1
        seq_name_list = [i[0] for i in DataIs]
        WhereStatement = '","'.join(seq_name_list)
        SQLStatement = 'UPDATE vgenesDB SET `ClonalPool` = "0" WHERE SeqName in ("' + WhereStatement + '")'
        VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

        TotSeqs = len(DataIs2)
        # if fieldsearch == 'None':
        #     DataIs2.sort(key=itemgetter(3))
        # else:
        #     DataIs2.sort(key=itemgetter(17))
        ClonalPool = []
        ClonalPools = []

        # fields = ['SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence', 'ID', fieldsearch]

        if answer == 'Yes':
            DataIs2.sort(key=itemgetter(14))
            for k, v in itertools.groupby(DataIs2, key=itemgetter(14)):  # first split out seperate clonal pools
                # i = int(k)

                if len(k) != 0:
                    for item in v:
                        ClonalPool.append(item)
                    CurrentPool = tuple(ClonalPool)
                    ClonalPools.append(CurrentPool)
                    ClonalPool.clear()
        else:
            ClonalPools.append(DataIs2)

        Currentrecord = self.ui.txtName.toPlainText()

        CPseqs = 0
        CPs = 0
        # identify all existing Clone IDs
        SQLStatement = 'SELECT DISTINCT(ClonalPool) FROM vgenesdb'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        existing_clone_list = [row[0] for row in DataIn]

        # initial clone ID
        i = 1
        while str(i) in existing_clone_list:
            i += 1

        for pool in ClonalPools:
            Pool = list(pool)
            start = time.time()
            CPList = VGenesCloneCaller.CloneCaller(Pool, Duplicates)
            end = time.time()
            print('Run time for VGenesCloneCaller: ' + str(end - start))

            for record in CPList:
                CPs += 1
                j = 1
                DupList = 'Sequences identical: '
                for item in record:

                    self.findTreeItem(item)
                    if Duplicates == False:
                        try:
                            VGenesSQL.UpdateField(data[119], str(i), 'ClonalPool', DBFilename)
                            existing_clone_list.append(str(i))
                        except:
                            print(item + ' caused error in finding clones at line 1798 and so was not annotated as a clone')

                    else:
                        if j == 1:
                            SeqName = 'Duplicate of:  ' + item
                            FirstOne = data[119]
                        else:
                            try:
                                if remove == False:
                                    VGenesSQL.UpdateField(data[119], SeqName, 'Quality', DBFilename)
                                else:
                                    VGenesSQL.UpdateField(data[119], 'Duplicate', 'Quality', DBFilename)
                                    VGenesSQL.UpdateField(data[119], 'Delete', 'Project', DBFilename)
                                DupList += (item + ', ')
                            except:
                                print('problem line 1810 with: ' + item)
                                

                        j += 1
                    CPseqs += 1
                depth = 'Depth = ' + str(j - 1)
                if Duplicates == True:
                    self.findTreeItem(FirstOne)
                    if DupList[(len(DupList) - 2):] == ', ':
                        DupList = DupList[:(len(DupList) - 2)]
                    if data[94] != ' ' or data[94] != 'Comments':
                        DupList = DupList + ', ' + data[94]

                    if data[95] != ' ' or data[95] != 'Quality':
                        depth = depth + '  ' + data[95]

                    VGenesSQL.UpdateField(FirstOne, DupList, 'Comments', DBFilename)
                    VGenesSQL.UpdateField(FirstOne, depth, 'Quality', DBFilename)
                
                while str(i) in existing_clone_list:
                    i += 1

        #model = self.ui.tableView.model()
        #model.refresh()

        '''
        if answer == 'Yes':
            if DBFilename != None:
                if os.path.isfile(DBFilename):
                    self.LoadDB(DBFilename)
        else:
        '''
        if re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText()) == 'Clonal Pool' \
                or re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText()) == 'Clonal Pool' \
                or re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText()) == 'Clonal Pool':
            self.on_btnUpdateTree_clicked()

        self.findTreeItem(Currentrecord)
        ErLog2 = str(CPs) + ' clonal pools containing ' + str(CPseqs) + ' sequences were identified from ' + str(
            TotSeqs) + ' total sequences analyzed.\n'

        SQLStatement = 'SELECT ClonalPool FROM vgenesDB'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        list1 = []
        for ele in DataIn:
            list1.append(ele[0])
        list_unique = list(set(list1))
        try:
            list_unique.remove('0')
        except:
            pass

        list_unique = [int(i) for i in list_unique]
        list_unique.sort()
        list_unique = ['Clone' + str(i) for i in list_unique]

        self.ui.comboBoxTree.clear()
        self.ui.comboBoxTree.addItems(list_unique)

        if remove == True:

            self.LoadDB(DBFilename)
            self.ui.txtFieldSearch.setText('Duplicate')
            self.ui.cboFindField.setCurrentText('Quality')
            done = self.on_btnFieldSearch_clicked()
            done = self.on_actionDelete_record_triggered()
            self.on_btnUpdateTree_clicked()

        if len(ErLog2) > 0:
            Erlog2 = ErLog2 + 'The following ' + str(
                Errs) + ' sequences could not be anaylzed for\nclonality because no CDR3s are indicated:\n' + ErLog
            ErlogFile = os.path.join(temp_folder, 'ErLog.txt')  # '/Applications/IgBlast/database/ErLog.txt'  # NoErrors  NoGoodSeqs

            with open(ErlogFile, 'w') as currentFile:
                currentFile.write(Erlog2)

            self.ShowVGenesText(ErlogFile)

        if self.ui.tabWidget.currentIndex() == 0:
            self.load_table()
            self.match_tree_to_table()
            self.tree_to_table_selection()
        else:
            updateMarker == True

        self.initial_Clone()

    @pyqtSlot()
    def on_actionFind_Clonal_triggered(self):
        self.myDialog = CloneOptionDialog()
        self.myDialog.optionSignal.connect(self.cloneOptionHandle)
        self.myDialog.show()
        
    def cloneOptionHandle(self, signal):    
        if signal == 1:
            self.ConventionalCloneIdentification()
        else:
            self.myDialog = ChangeODialog()
            self.myDialog.changeOSignal.connect(self.ClusteringCloneIdentification)
            self.myDialog.show()

    def ClusteringCloneIdentification(self, signal_int):
        # if sequence selected
        WhereStatement = '1'
        if len(self.CheckedRecords) == 0:
            msg = 'You did not selected any records, will identify clones from the entir dataset!'
            QMessageBox.information(self, 'Information', msg, QMessageBox.Ok, QMessageBox.Ok)
            WhereStatement = ' WHERE 1'
        else:
            WhereStatement = ' WHERE SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'
        
        # fetch sequence
        SQLStatement = 'SELECT SeqName, Sequence, Blank20, Species FROM vgenesDB' + WhereStatement
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        if signal_int == 1:
            output_path = saveFile(self, 'fmt7')
            if output_path == '' or output_path == None:
                return
            self.clone_Thread = CloneChangeOIgBlast_thread(self)
            self.clone_Thread.data = DataIs
            self.clone_Thread.file = output_path
            self.clone_Thread.Clone_progress.connect(self.progressLabel)
            self.clone_Thread.Clone_finish.connect(self.ShowMessageBox)
            self.clone_Thread.start()
        else:
            self.clone_Thread = CloneChangeO_thread(self)
            self.clone_Thread.data = DataIs
            self.clone_Thread.Clone_progress.connect(self.progressLabel)
            self.clone_Thread.Clone_finish.connect(self.ShowMessageBox)
            self.clone_Thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def ConventionalCloneIdentification(self):
        global updateMarker
        from operator import itemgetter
        import itertools
        remove = False
        items = ('Clonal Pools', 'Annotate Duplicates', 'Remove Duplicates', 'Shared Clones')
        title = 'Choose analysis:'
        item = setItem(Vgenes, items, title)
        if item == 'Cancel':
            return
        elif item[:3] == 'Ann':
            Duplicates = True
        elif item[:3] == 'Rem':
            Duplicates = True
            query = 'This function will delete all but one duplicated sequences, annotating ' \
                    'the remaining with depth (in the "Quality" field) and the names of ' \
                    'duplicated sequences (in the "Comments" field), \nProceed with delete (Yes), or just annotate (No)'
            answer = questionMessage(Vgenes, query, 'YNC')
            if answer == 'Yes':
                remove = True
            elif answer == 'Cancel':
                return
        elif item[:3] == 'Sha':
            self.SharedClones()
            return
        else:
            Duplicates = False

        if self.ui.cboFindField.currentText() == 'Name': Vgenes.ui.cboFindField.setCurrentText('Project')
        # SeqName, Sequence, ClonalPool, GermlineSequence, Mutations
        answer = questionMessage(Vgenes,
                                 'Use a field to delineate multiple subjects (default = "Project")?\n\n '
                                 '"No" will process all selected as one subject.\n\n '
                                 'Press "Cancel" to choose field in the search panel before running analysis.',
                                 'YNC')
        if answer == 'Yes':
            # field = self.ui.cboFindField.currentText()
            # fieldsearch = self.TransLateFieldtoReal(field, True)
            fieldsearch = re.sub(r'\(.+', '', Vgenes.ui.cboTreeOp1.currentText())
        elif answer == 'No':
            fieldsearch = 'None'
        elif answer == 'Cancel':
            return

        if fieldsearch == 'None':
            fields = ['SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence',
                      'ID', 'GVend', 'GJbeg', 'GD1beg', 'GD1end']
        else:
            fields = ['SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence',
                      'ID', 'GVend', 'GJbeg', 'GD1beg', 'GD1end', fieldsearch]

        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(Vgenes, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first
        DataIs2 = []

        ProjName = data[75]

        ErLog = 'Clonal analysis for ' + ProjName + '\n'
        Errs = 0
        for item in DataIs:
            if int(item[6]) > 0:  # has CDR3 scored
                DataIs2.append(item)
            else:
                ErLog += item[0] + '\n'
                Errs += 1
        seq_name_list = [i[0] for i in DataIs]
        WhereStatement = '","'.join(seq_name_list)
        SQLStatement = 'UPDATE vgenesDB SET `ClonalPool` = "0" WHERE SeqName in ("' + WhereStatement + '")'
        VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)

        TotSeqs = len(DataIs2)
        # if fieldsearch == 'None':
        #     DataIs2.sort(key=itemgetter(3))
        # else:
        #     DataIs2.sort(key=itemgetter(17))
        ClonalPool = []
        ClonalPools = []
        PoolNames = []
        # fields = ['SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence', 'ID', fieldsearch]

        if answer == 'Yes':
            DataIs2.sort(key=itemgetter(14))
            for k, v in itertools.groupby(DataIs2, key=itemgetter(14)):  # first split out seperate clonal pools
                # i = int(k)
                if len(k) != 0:
                    PoolNames.append(k)
                    for item in v:
                        ClonalPool.append(item)
                    CurrentPool = tuple(ClonalPool)
                    ClonalPools.append(CurrentPool)
                    ClonalPool.clear()
        else:
            ClonalPools.append(DataIs2)

        self.clone_Thread = Clone_thread(self)
        self.clone_Thread.ClonalPools = ClonalPools
        self.clone_Thread.Duplicates = Duplicates
        self.clone_Thread.remove = remove
        self.clone_Thread.TotSeqs = TotSeqs
        self.clone_Thread.Errs = Errs
        self.clone_Thread.ErLog = ErLog
        self.clone_Thread.PoolNames = PoolNames
        self.clone_Thread.Clone_progress.connect(self.progressLabel)
        self.clone_Thread.Clone_finish.connect(self.ShowMessageBox)
        self.clone_Thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()


    @pyqtSlot()
    def on_actionSimilarProtein_triggered(self):
        # open a dialog for settings
        if self.ui.txtName.toPlainText() == '':
            Msg = 'Please select a sequence first!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        else:
            self.myProteinSimilarDialog = ProteinSimilarDialog()

            self.myProteinSimilarDialog.DBFilename = DBFilename
            self.myProteinSimilarDialog.vgene = self
            
            # load details
            self.myProteinSimilarDialog.ui.lineEditName.setText(self.ui.txtName.toPlainText())
            self.myProteinSimilarDialog.ui.lineEditGeneType.setText(self.ui.txtGeneType.toPlainText())
            self.myProteinSimilarDialog.ui.lineEditIsotype.setText(self.ui.txtIsotype.toPlainText())
            self.myProteinSimilarDialog.ui.lineEditVgene.setText(self.ui.txtVgene.toPlainText())
            self.myProteinSimilarDialog.ui.lineEditDgene.setText(self.ui.txtDgene.toPlainText())
            self.myProteinSimilarDialog.ui.lineEditJgene.setText(self.ui.txtJgene.toPlainText())
            # load AA V(D)J seq
            SQLStatement = 'SELECT SeqName, Sequence, FR1From, Jend, Blank7 FROM vgenesDB WHERE SeqName = "' + self.ui.txtName.toPlainText() + '"'
            targetDataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            targetNTSeq = targetDataIn[0][1]
            targetVDJstart = int(targetDataIn[0][2])
            targetVDJend = int(targetDataIn[0][3])
            targetNTSeq = targetNTSeq[targetVDJstart - 1:targetVDJend]
            try:
                ORF = int(targetDataIn[0][4])
            except:
                ORF = 0
            targetAASeq, msg = Translator(targetNTSeq, ORF)
            targetAASeq = re.sub(r'~', '', targetAASeq)
            self.myProteinSimilarDialog.ui.textEdit.setText(targetAASeq)

            self.myProteinSimilarDialog.show()

    @pyqtSlot()
    def on_actionpyqtGraph_triggered(self):
        # open a dialog for settings
        self.myPyqtGraphDialog = PyqtGraphDialog()

        self.myPyqtGraphDialog.DBFilename = DBFilename

        fields_name = [""] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myPyqtGraphDialog.fields_name = fields_name
        #self.myPyqtGraphDialog.ui.comboBoxX.addItems(fields_name)
        #self.myPyqtGraphDialog.ui.comboBoxY.addItems(fields_name)
        #self.myPyqtGraphDialog.ui.comboBoxGroup.addItems(fields_name)
        #self.myPyqtGraphDialog.ui.comboBoxSize.addItems(fields_name)
        self.myPyqtGraphDialog.initLineedit(self.myPyqtGraphDialog.ui.lineEditSize, fields_name)
        self.myPyqtGraphDialog.initLineedit(self.myPyqtGraphDialog.ui.lineEditColor, fields_name)
        self.myPyqtGraphDialog.initLineedit(self.myPyqtGraphDialog.ui.lineEditX, fields_name)
        self.myPyqtGraphDialog.initLineedit(self.myPyqtGraphDialog.ui.lineEditY, fields_name)

        self.myPyqtGraphDialog.vgenes = self
        self.myPyqtGraphDialog.UpdateSelectionSignal.connect(self.updateSelectionFromDialog)

        self.myPyqtGraphDialog.show()

    @pyqtSlot()
    def on_actionHistViewer_triggered(self):
        self.on_pushButtonHistViewer_clicked()

    @pyqtSlot()
    def on_actionBoxPlotViewer_triggered(self):
        self.on_pushButtonBoxplotViewer_clicked()

    @pyqtSlot()
    def on_actionHeatmapViewer_triggered(self):
        self.on_pushButtonHeatmapViewer_clicked()

    @pyqtSlot()
    def on_actionReAnalyze_triggered(self):
        # determine selected sequences
        selected_names = self.CheckedRecords
        if len(selected_names) == 0:
            Msg = 'Please select some records first!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,QMessageBox.Ok)
            return
        
        # determine species
        species = 'Human'
        Question = 'Please select reference genomes:\n Yes for human\n No for Mouse\n Cancel to exit'
        options = 'YNC'
        answer = questionMessage(self, Question, options)
        if answer == 'Yes':
            species = 'Human'
        elif answer == 'No':
            species = 'Mouse'
        elif answer == 'Cancel':
            return
        else:
            return

        # determine BCR/TCR
        dataType = 'BCR'
        Question = 'Please select sequence type:\n Yes for BCR\n No for TCR\n Cancel to exit'
        options = 'YNC'
        answer = questionMessage(self, Question, options)
        if answer == 'Yes':
            dataType = 'BCR'
        elif answer == 'No':
            dataType = 'TCR'
        elif answer == 'Cancel':
            return
        else:
            return

        # fetch data
        WhereStatement = ' WHERE SeqName IN ("' + '","'.join(selected_names) + '")'
        SQLStatement = 'SELECT SeqName, Sequence, Blank20 FROM vgenesDB' + WhereStatement
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        seq_index = 1
        if len(DataIs) > 0:
            if len(DataIs[0][2]) > 50:
                seq_index = 2
        else:
            return
        
        # write sequences into FASTA file
        time_stamp = str(int(time.time() * 100)) + '.fasta'
        seq_pathname = os.path.join(temp_folder, time_stamp)
        with open(seq_pathname, 'w') as currentFile:
            for record in DataIs:
                currentFile.write('>' + record[0] + '\n')
                currentFile.write(record[seq_index] + '\n')
        
        # open a thread, run these records
        datalist = ['none','none','none',species,0,10000]

        workThread = WorkThread(self)
        workThread.item = seq_pathname
        workThread.datalist = datalist
        workThread.method = 'fast'
        workThread.datatype = dataType
        workThread.start()
        workThread.trigger.connect(self.reAnalyze_callback)
        workThread.loadProgress.connect(self.progressLabel)


    def reAnalyze_callback(self, signal, info):
        global IgBLASTAnalysis

        if signal == 1:
            QMessageBox.warning(self, 'Warning', info, QMessageBox.Ok, QMessageBox.Ok)
            try:
                self.progress.FeatProgressBar.setValue(100)
                self.progress.close()
            except:
                pass
            return

        #a = IgBLASTAnalysis

        # annotate the SQL DB using
        field_id_list = list(range(1,75)) + list(range(78,86)) + list(range(90,94)) + list(range(96,106))
        for record in IgBLASTAnalysis:
            SQLStatement = 'UPDATE vgenesDB SET '
            updateList = []
            for index in field_id_list:
                updateList.append(FieldList[index] + ' = "' + str(record[index]) + '"')
            SQLStatement += ','.join(updateList)
            SQLStatement += ' WHERE SeqName = "' + record[0] + '"'
            VGenesSQL.UpdateMulti(SQLStatement, DBFilename)

        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass
        
        Msg = 'ReAnalysis finished!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_actionAnalyze_Mutations_triggered(self):
        import VMapHotspots
        # setItem(self, items, title):
        items = ('Intraclonal Diversity', 'HS-Summary', "Standard", "Hotspots", 'Mutation Frequencies', 'Heat Map', 'GC-Heat Map',
                 'AnalysisDB Heat Map', 'Reanalyze Base Mutations', 'Make all vairiants')
        title = 'Choose report type:'
        item = setItem(self, items, title)


        if item == "Cancel":
            return
        if item == 'Intraclonal Diversity':
            self.AnalyzeMutations()
        elif item == 'Reanalyze Base Mutations':
            self.UpdateMutationAnalysis()
        elif item == 'Make all vairiants':
            self.MakeAllVairants()
        else:
            VMapHotspots.MapHotspots(self, item, DBFilename, data[0])

    def MakeAllVairants(self):
        SeqName = data[0]
        SeqMutstr = data[97]
        VHGene = data[3]
        Species = data[78]
        beg = int(data[67])
        end = int(data[68]) #todo currently to vend...should be to jend?
        seq  =  data[79]
        seq = seq[:end]

        OutList = []
        SeqNameAp = SeqName + '-1'
        Entry = (SeqNameAp, seq)
        OutList.append(Entry)

        GSeq = data[80][:end].upper()
        GseqName = SeqName + '-0'
        Entry = (GseqName, GSeq)
        OutList.append(Entry)

        SeqMutsR = []
        SeqMuts = VGenesSeq.RScaller(SeqMutstr, VHGene, Species, DBFilename)
        NumMuts = len(SeqMuts)
        for k in range(0, NumMuts - 1):
            Mutation = SeqMuts[k]
            MutDet = Mutation.split('-')
            RS = MutDet[3]
            MutPos = int(MutDet[1])

            if MutPos >= beg and MutPos <= end:
                if RS[0] == 'R':
                    SeqMutsR.append(Mutation)
        lenSeq  =len(seq)
        NumMuts = len(SeqMutsR)
        i = 2
        AnoNum = '-' + str(i)

        for k in range(0, NumMuts):
            SeqList = list(seq)
            GSeqList = list(GSeq)
            ModSeqList = SeqList
            Mutation = SeqMutsR[k]
            MutDet = Mutation.split('-')
            print(MutDet)
            SeqNameAp = SeqName + AnoNum

            ModSeqList[int(MutDet[1])-1] = MutDet[0] #remove the mutation
            ModSeq = ''.join(ModSeqList)
            Entry = (SeqNameAp, ModSeq)
            OutList.append(Entry)

            i += 1
            AnoNum = '-' + str(i)
            SeqNameAp = SeqName + AnoNum

            ModSeqList = GSeqList

            ModSeqList[int(MutDet[1])-1] = MutDet[2] #have only that mutation
            ModSeq = ''.join(ModSeqList)
            Entry = (SeqNameAp, ModSeq)
            OutList.append(Entry)

            # ModSeqList = GSeqList
            for j in range(k+1, NumMuts):  #now do with all other mutations
                Mutation1 = SeqMutsR[j]
                MutDet1 = Mutation1.split('-')
                i += 1
                AnoNum = '-' + str(i)
                SeqNameAp = SeqName + AnoNum
                ModSeqList1 = ModSeqList
                ModSeqList1[int(MutDet1[1])-1] = MutDet1[2] #have first above and next only has 1 and 2

                ModSeq = ''.join(ModSeqList1)
                Entry = (SeqNameAp, ModSeq)
                OutList.append(Entry)

                # for l in range(j+1, NumMuts-1): #now do first and second mutate with each consecutively
                # 	Mutation1 = SeqMutsR[l]
                # 	MutDet1 = Mutation1.split('-')
                # 	i += 1
                # 	AnoNum = '-' + str(i)
                # 	SeqNameAp = SeqName + AnoNum
                # 	ModSeqList1 = ModSeqList
                # 	ModSeqList1[int(MutDet1[1])-1] = MutDet1[2]  # have first above and next only has 1 and 2
                #
                # 	ModSeq = ''.join(ModSeqList1)
                # 	Entry = (SeqNameAp, ModSeq)
                # 	OutList.append(Entry)
        print('done')

    @pyqtSlot()
    def AnalyzeMutations(self):

        if self.ui.cboFindField.currentText() == 'Name': self.ui.cboFindField.setCurrentText('Project')
        # SeqName, Sequence, ClonalPool, GermlineSequence, Mutations
        answer = questionMessage(self,
                                 'Use a field to delineate multiple subjects (default = "Project")?\n\n "No" will compare all within each project/group/subgroup.\n\n Press "Cancel" to choose field in the search panel before running analysis.',
                                 'YNC')
        if answer == 'Yes':
            #field = self.ui.cboFindField.currentText()
            #fieldsearch = self.TransLateFieldtoReal(field, True)
            fieldsearch = re.sub(r'\(.+', '', self.ui.cboFindField.currentText())
        elif answer == 'No':
            fieldsearch = 'None'
        elif answer == 'Cancel':
            return

        if fieldsearch == 'None':
            fields = ['SeqName', 'Sequence', 'ClonalPool', 'GermlineSequence', 'Mutations', 'GVbeg', 'GVend', 'Species',
                      'V1', 'Project', 'Grouping', 'Isotype', 'Quality' , 'Subspecificity', 'Blank8']

        else:
            fields = ['SeqName', 'Sequence', 'ClonalPool', 'GermlineSequence', 'Mutations', 'GVbeg', 'GVend', 'Species',
                      'V1', fieldsearch]

        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])

        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first

        if answer == 'Yes':
            DataIn.sort(key=itemgetter(9))
        else:
            DataIn.sort(key=itemgetter(9,10,11))
        ClonalPool = []
        ClonalPools = []

        if answer == 'Yes':
            for k, v in itertools.groupby(DataIn, key=itemgetter(9)):  # first split out seperate clonal pools
                # i = int(k)

                if len(k) != 0:
                    for item in v:
                        ClonalPool.append(item)
                    CurrentPool = tuple(ClonalPool)
                    ClonalPools.append(CurrentPool)
                    ClonalPool.clear()
        else:
            for k, v in itertools.groupby(DataIn, key=itemgetter(9,10,11)):  # first split out seperate clonal pools
                # i = int(k)

                if len(k) != 0:
                    for item in v:
                        ClonalPool.append(item)
                    CurrentPool = tuple(ClonalPool)
                    ClonalPools.append(CurrentPool)
                    ClonalPool.clear()




            # ClonalPools.append(DataIn)

        f = saveFile(self, 'CSV')
        if f == '' or f == None:
            return
        tmp_path, tmp_file = os.path.split(f)
        if os.access(tmp_path, os.W_OK):
            pass
        else:
            Msg = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        with open(f, 'w') as currentfile:
            doc = 'Comparison, Project, Subject, Strain, Clonotype, Sequence 1, Sequence 2, Activity, Differences, R-Differences, S-Differences, \
                    Begin, End, Length,  Matches, Adjusted Matches,  \
                  Adjusted Differences, R-Matches, Adjusted R-Matches, Adjusted R-Diferences,  \
                  S-Matches, Adjusted S-Matches, Adjusted S-Differences, Warnings, R-Differences, R-Matches, S-Differences, S-Matches, Age\n'

            # CP, Name1, Name2, beg, end, lengthCompared, TotMatch, int(TotAdjMatch), TotDif, int(TotAdjDif), len(
            # 	RMatches),
            # int(RAdjMatch), len(RDifferences), int(RAdjDif), len(SMatches), int(SAdjMatch), len(SDifferences),
            # int(SAdjDif))


        for pool in ClonalPools:
            Pool = list(pool)

            result = VGenesSeq.Intraclonal(Pool, DBFilename)



            if len(result) > 0:

                with open(f, 'a') as currentfile:
                    # if answer == 'Yes':
                    # 	header = str(Pool[0][9]) + '\n'
                    # 	doc += header
                    # else:
                    # 	header = str(Pool[0][9]) + '_' + str(Pool[0][10]) + '_' + str(Pool[0][11]) + '\n'
                    # 	doc += header

                    for item in result:
                        for i in range(0, 29):
                            doc += (str(item[i]) + ', ')
                        doc += '\n'
                    currentfile.write(doc)
                    doc = ''

        self.ShowVGenesText(f)

    @pyqtSlot()
    def on_actionCreateAnalysisDB_triggered(self):
        filename = openFile(self, 'Nucleotide')
        VGenesSQL.CreateAnalysisDB(filename, DBFilename)

    @pyqtSlot()
    def on_actionMultiple_Alignement_triggered(self):
        self.AlignSequences('none')

    @pyqtSlot()
    def on_actionImport_Vgenes_database_triggered(self):
        filename = openFile(self, 'db')
        VGenesSQL.ImportVDB(filename, DBFilename)

    @pyqtSlot()
    def on_actionImportCluster_triggered(self):
        from operator import itemgetter  #from operator import itemgetter   #		SeqList.sort(key=itemgetter(0, 1, 2, 3))


        answerC = informationMessage(self,
                                    'Do you wish to import Seurat Clusters?',
                                    'YN')
        if answerC == 'Yes':
            typeOpen = 'csv'
            filename = openFile(self, typeOpen)

            if filename == None:
                return

            CSubjects = []
            CClusters = []
            CBarcodes = []

            # LastName = ''
            with open(filename, 'r') as currentfile:
                for row in currentfile:  # imports data from file
                    Rawentry = row.strip('\n')

                    entryFields = Rawentry.split(',')
                    if len(entryFields) == 2:
                        if entryFields[0] != 'Barcode' and entryFields[1] != 'Cluster':
                            CBarcodes.append(entryFields[0])
                            CClusters.append(entryFields[1])
                    elif len(entryFields) == 3:
                        if entryFields[0] != 'Subject' and entryFields[1] != 'Barcode' and entryFields[2] != 'Cluster':
                            CSubjects.append(entryFields[0])
                            CBarcodes.append(entryFields[1])
                            CClusters.append(entryFields[2])



            myClustersdict = {}

            if len(entryFields) == 2:
                for i in range(len(CBarcodes)):
                    myClustersdict[CBarcodes[i]] = CClusters[i]
            if len(entryFields) == 3:

                for i in range(len(CBarcodes)):
                    SjBarCode = CSubjects[i] + '-' + CBarcodes[i]
                    myClustersdict[SjBarCode] = CClusters[i]

            fields = ['SeqName', 'Id', 'GeneType', 'Blank10']

            # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
            SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first
            SaidItAlready = 'No'
            DataIn.sort(key=itemgetter(2,0))
            LastName = ''
            DoubletsList = []
            for item in DataIn:
                # doublet = False
                SkipUpdate = False
                SeqName = item[0]
                SeqNameShort = SeqName[:3]
                ID = item[1]
                genetypeis = item[2]
                RealBarCode = item[3]
                TestLen = len(RealBarCode)-2
                TestChar = RealBarCode[TestLen]
                if TestChar =='-':
                    RealBarCode = RealBarCode[:len(RealBarCode)-2]

                if len(entryFields) == 3:
                    RealBarCode = SeqNameShort + '-' + RealBarCode


                if answerC == 'Yes':
                    try:
                        RealCluster = myClustersdict[RealBarCode]
                    except:
                        RealCluster = 'unknown'
                else:
                    RealCluster = ''

                FieldName = 'Blank9'
                VGenesSQL.UpdateField(ID, RealCluster, FieldName, DBFilename)





        # import csv
        from operator import itemgetter
        CFilename = ''

    @pyqtSlot()
    def on_actionRename10x_triggered(self):
        global NameIndex

        from operator import itemgetter  #from operator import itemgetter   #		SeqList.sort(key=itemgetter(0, 1, 2, 3))

        QueryIS = 'Enter text to serve as the base name (i.e., subject number or name)'
        DefaultText = data[75]  # data[77] + '-Expressed'
        BaseName = setText(self, QueryIS, DefaultText)
        if BaseName == "Cancelled Action":
            return

        filename = os.path.join(working_prefix, '10x_barcodes.csv')
        with open(filename, 'r') as currentfile:
            # myCSVfile = csv.reader(currentfile)
            myCSVfile  = []
            # myCSVfile = currentfile.split(',')
            for row in currentfile:
                entry = row.strip('\n')
                myCSVfile.append(entry)

        # if not check any sequence, will import for all
        #checked_list = self.getTreeCheckedChild()
        checked_list = self.CheckedRecords

        if len(checked_list) == 0:
            root = self.ui.treeWidget.invisibleRootItem()
            self.CheckBelow(root, True)

        #filtered_contig_annotations.csv
        answer = informationMessage(self,
                                    'Select annotation file from same folder as consensus.fasta called "outs/filtered_contig_annotations.csv"',
                                    'OK')
        typeOpen = 'csv'
        filename =openFile(self, typeOpen)
        if filename == None:
            return
        LastBar = ''
        LastName = ''
        with open(filename, 'r') as currentfile:
            barcodeis = []
            NameIs = []
            AllRows = []

            for row in currentfile:  #imports data from file
                Rawentry = row.strip('\n')
                entryFields = Rawentry.split(',')
                if entryFields[0] != 'barcode' and entryFields[17] != 'None':
                    AllRows.append(entryFields)
            AllRows.sort(key=itemgetter(17))	#sorts by name so that seques with 2 barcodes can be identified

            for row in AllRows:
                if row[17] == LastName:
                    multiBar = LastBar + ',' + row[0]
                    LastBar = multiBar
                    barcodeis.append(multiBar)
                else:
                    barcodeis.append(row[0])
                    LastBar = row[0]

                NameIs.append(row[17])
                LastName  = row[17]
            myAnnotationsCSVdict = {}
            for i in range(len(barcodeis)):
                myAnnotationsCSVdict[NameIs[i]] = barcodeis[i]
        # answerC = 'No'
        answerC = informationMessage(self,
                                    'Do you wish to import CellRanger Clusters from 5-prime RNAseq data filename "outs/analysis/clustering/graphclust/clusters.csv"?',
                                    'YN')
        if answerC == 'Yes':
            typeOpen = 'csv'
            filename = openFile(self, typeOpen)
            if filename != None:
                CClusters = []
                CBarcodes = []

                # LastName = ''
                with open(filename, 'r') as currentfile:
                    for row in currentfile:  # imports data from file
                        Rawentry = row.strip('\n')

                        entryFields = Rawentry.split(',')
                        if entryFields[0] != 'Barcode' and entryFields[1] != 'Cluster':
                            CBarcodes.append(entryFields[0])
                            CClusters.append(entryFields[1])


                myClustersdict = {}

                for i in range(len(CBarcodes)):
                    myClustersdict[CBarcodes[i]] = CClusters[i]
            else:
                answerC == 'No'

        fields = ['SeqName', 'Id', 'GeneType']

        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        a = data

        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first
        SaidItAlready = 'No'
        DataIn.sort(key=itemgetter(2,0))
        LastName = ''
        DoubletsList = []
        for item in DataIn:
            doublet = False
            SkipUpdate = False
            SeqName = item[0]
            ID = item[1]
            genetypeis = item[2]
            if SeqName[:9]!= 'clonotype':
                barCode  = SeqName[:16]
                try:
                    BarCodeNum = myCSVfile.index(barCode)
                except:
                    if SaidItAlready == 'No':
                        answer = informationMessage(self,
                                                    'This function only renames barecoded sequences from 10x naming',
                                                    'OK')
                        SaidItAlready = 'yes'
                    SkipUpdate = True
            else:
                RealBarCode = myAnnotationsCSVdict[SeqName]
                RealBarCode = RealBarCode[:18]
                if answerC == 'Yes':
                    try:
                        RealCluster = myClustersdict[RealBarCode]
                    except:
                        RealCluster = 'unknown'
                else:
                    RealCluster = ''

                SeqNameParts = SeqName.split('_')
                barCode = SeqNameParts[0]
                barCode = str(barCode[9:])

            Contig = SeqName[len(SeqName)-1:]

            if SkipUpdate == False:
                if SeqName[:9] != 'clonotype':
                    newName = BaseName + '_' + str(BarCodeNum) + '_' + genetypeis[0] + str(Contig)
                else:
                    newName = BaseName + '_' + barCode + '_' + genetypeis[0] + str(Contig)

                if newName[:len(newName)-1] == LastName:
                    doublet = True
                    if genetypeis == 'Heavy':
                        DoubletsList.append(barCode)
                    FieldName = 'Quality'
                    VGenesSQL.UpdateField(LastID, 'doublet', FieldName, DBFilename)
                    FieldName = 'SubGroup'
                    VGenesSQL.UpdateField(LastID, 'doublet', FieldName, DBFilename)

                if genetypeis != 'Heavy':
                    try:
                        DoubleHCIndex = DoubletsList.index(barCode)

                    except ValueError:
                        print("OK")
                    else:
                        # doublet = True
                        FieldName = 'Quality'
                        VGenesSQL.UpdateField(ID, 'doublet HC', FieldName, DBFilename)
                        FieldName = 'SubGroup'
                        VGenesSQL.UpdateField(ID, 'doublet HC', FieldName, DBFilename)

                LastName = newName[:len(newName)-1]

                FieldName = 'Comments'
                VGenesSQL.UpdateField(ID, SeqName, FieldName, DBFilename)

                FieldName = 'SeqName'
                VGenesSQL.UpdateField(ID, newName, FieldName, DBFilename)

                #RealBarCode
                FieldName = 'Blank10'

                VGenesSQL.UpdateField(ID, RealBarCode, FieldName, DBFilename)

                FieldName = 'Blank8'
                VGenesSQL.UpdateField(ID, RealCluster, FieldName, DBFilename)

                if doublet == True:
                    FieldName = 'Quality'
                    VGenesSQL.UpdateField(ID, 'doublet', FieldName, DBFilename)
                    FieldName = 'SubGroup'
                    VGenesSQL.UpdateField(ID, 'doublet', FieldName, DBFilename)
                # LastName = newName
                LastID = ID
                #model = self.ui.tableView.model()
                #model.refresh()

        # update tree
        #SQLFields = (self.ui.cboTreeOp1.currentText(), self.ui.cboTreeOp2.currentText(),self.ui.cboTreeOp3.currentText())
        '''
        index1 = RealNameList.index(self.ui.cboTreeOp1.currentText())
        index2 = RealNameList.index(self.ui.cboTreeOp2.currentText())
        index3 = RealNameList.index(self.ui.cboTreeOp3.currentText())

        SQLFields = (FieldList[index1], FieldList[index2], FieldList[index3])
        '''
        SQLFields = (
            re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText()),
            re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText()),
            re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
        )

        self.initializeTreeView(SQLFields)
        self.ui.treeWidget.expandAll()

        # update table
        self.load_table()
        #answer = informationMessage(self, 'Close and restart database to see changes', 'OK')

    @pyqtSlot()
    def on_actionclearTrash_triggered(self):
        question = 'Clean all TEMP files?'
        buttons = 'YN'
        answer = questionMessage(self, question, buttons)
        if answer == 'No':
            return
        else:
            cmd = 'cd ' + temp_folder + '; rm -rf ' + temp_folder + '/*'
            try:
                os.system(cmd)
            except:
                QMessageBox.warning(self, 'Warning', 'Fail to clear TEMP folder!', QMessageBox.Ok,
                                    QMessageBox.Ok)
                return

            ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
            ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
            r = open(ErlogFile,'w')
            r.write('')
            r.close()
            r = open(ErlogFile2, 'w')
            r.write('')
            r.close()



    @pyqtSlot()
    def on_actionMergeMySeq_triggered(self):
        import shutil

        # WorkDir = '/Users/PCW-MacBookProRet/Applications/VGenes/FLASH-1.2.11/'

        try:
            filename = openfastq(self)

            read_1 = filename[0]
            read_2 = filename[1]

            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11', 'reads_1.fq')
            shutil.copy(read_1, WorkDir)
            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11', 'reads_2.fq')
            shutil.copy(read_2, WorkDir)

            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11')
            # (dirname, filename) = os.path.split(DBpathname)
            os.chdir(WorkDir)

            CommandLine = "./flash reads_1.fq reads_2.fq 2>&1 | tee flash.log"
            Result = os.popen(CommandLine)
            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11', 'out.extendedFrags.fastq')

            filename = saveFile(self, 'fastq')
            if filename == '' or filename == None:
                return
            tmp_path, tmp_file = os.path.split(filename)
            if os.access(tmp_path, os.W_OK):
                pass
            else:
                Msg = 'You do not have the write permission of this folder!\n' + tmp_path
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            shutil.copy(WorkDir, filename)
            filename2 = filename + 'Unmerged-1.fastq'
            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11',
                                   'out.notCombined_1.fastq')
            shutil.copy(WorkDir, filename2)
            filename2 = filename + 'Unmerged-2.fastq'
            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11',
                                   'out.notCombined_2.fastq')
            shutil.copy(WorkDir, filename2)


            WorkDir = os.path.join(working_prefix, 'FLASH-1.2.11', 'flash.log')
            self.ShowVGenesText(WorkDir)
        except:
            return

    #actionAnalyze_Isotypes   actionImport10XInfo
    @pyqtSlot()
    def on_actionImport10XInfo_triggered(self):
        print('10x code')

    @pyqtSlot()
    def on_actionAnalyze_Isotypes_triggered(self):

        fields = ['SeqName', 'Jend', 'Sequence', 'ID', 'Species']

        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        for record in  DataIs:
            Sequence = record[2]
            Jend = int(record[1])
            SeqName = record[0]
            species = record[4]
            IsoSeq = (Sequence[(Jend):])
            # print(SeqName)
            IsoSeq = IsoSeq.strip('N')
            AGCTs = IsoSeq.count('A') + IsoSeq.count('G') + IsoSeq.count('C') + IsoSeq.count('T')
            Isot = ''
            if AGCTs > 5:  # todo decide if can determine isotype from < 5 or need more then
                if species == 'Human':
                    Isotype = VGenesSeq.CallIsotype(IsoSeq)
                elif species == 'Mouse':
                    Isotype = VGenesSeq.CallIsotypeMouse(IsoSeq)
                else:
                    Msg = 'Your current species is: ' + species + \
                          '\nWe do not support this species!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return
                print(Isot)

            SQLStatement = 'UPDATE vgenesDB SET Isotype = "' + Isot + '" WHERE SeqName = "' + SeqName + '"'
            # 'UPDATE vgenesDB SET SubGroup = "all" WHERE Project = "Heavy"'
            foundRecs = VGenesSQL.UpdateMulti(SQLStatement, DBFilename)

    @pyqtSlot()
    def on_actionIsotypes_triggered(self):
        DataIs = []

        if self.ui.comboBoxSpecies.currentText() == 'Human':
            DataIs.append(('IgMSeq',
                           'GGAGTGCATCCGCCCCAACCCTTTTCCCCCTCGTCTCCTGTGAGAATTCCCCGTCGGATACGAGCAGCGTGGCCGTTGGCTGCCTCGCACAGGACTTCCTTCCCGACTCCATCACTTTGTCCTGGAAATACAAGAACAACTCTGACATCAGCAGTACCCGGGGCTTCCCATCAGTCCTGAGAGGGGGCAAGTACGCAGCCACCTCACAGGTGCTGCTGCCTTCCAAGGACGTCATGCAGGGCACAGACGAACACGTGGTGTGCAAAGTCCAGCACCCCAACGGCAACAAAGAAAAGAACGTGCCTCTTCCAG'))

            DataIs.append(('IgG1Seq',
                           'CCTCCACCAAGGGCCCATCGGTCTTCCCCCTGGCACCCTCCTCCAAGAGCACCTCTGGGGGCACAGCGGCCCTGGGCTGCCTGGTCAAGGACTACTTCCCCGAACCGGTGACGGTGTCGTGGAACTCAGGCGCCCTGACCAGCGGCGTGCACACCTTCCCGGCTGTCCTACAGTCCTCAGGACTCTACTCCCTCAGCAGCGTGGTGACCGTGCCCTCCAGCAGCTTGGGCACCCAGACCTACATCTGCAACGTGAATCACAAGCCCAGCAACACCAAGGTGGACAAGAAAGTTGAGCCCAAATCTTGTGACAAAACTCACACATGCCCACCGTGCCCAGCACCTGAACTCCTGGGGGGACCGTCAGTCTTCCTCTTCCCCCCAAAACCCAAGGACACCCTCATGATCTCCCGGACCCCTGAGGTCACATGCGTGGTGGTGGACGTGAGCCACGAAGACCCTGAGGTCAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCATAATGCCAAGACAAAGCCGCGGGAGGAGCAGTACAACAGCACGTACCGGGTGGTCAGCGTCCTCACCGTCCTGCACCAGGACTGGCTGAATGGCAAGGAGTACAAGTGCAAGGTCTCCAACAAAGCCCTCCCAGCCCCCATCGAGAAAACCATCTCCAAAGCCAAAGGGCAGCCCCGAGAACCACAGGTGTACACCCTGCCCCCATCCCGGGATGAGCTGACCAAGAACCAGGTCAGCCTGACCTGCCTGGTCAAAGGCTTCTATCCCAGCGACATCGCCGTGGAGTGGGAGAGCAATGGGCAGCCGGAGAACAACTACAAGACCACGCCTCCCGTGCTGGACTCCGACGGCTCCTTCTTCCTCTACAGCAAGCTCACCGTGGACAAGAGCAGGTGGCAGCAGGGGAACGTCTTCTCATGCTCCGTGATGCATGAGGCTCTGCACAACCACTACACGCAGAAGAGCCTCTCCCTGTCTCCGGGTAAATGA'))

            DataIs.append(('IgG2Seq',
                           'CCTCCACCAAGGGCCCATCGGTCTTCCCCCTGGCGCCCTGCTCCAGGAGCACCTCCGAGAGCACAGCCGCCCTGGGCTGCCTGGTCAAGGACTACTTCCCCGAACCGGTGACGGTGTCGTGGAACTCAGGCGCTCTGACCAGCGGCGTGCACACCTTCCCAGCTGTCCTACAGTCCTCAGGACTCTACTCCCTCAGCAGCGTGGTGACCGTGCCCTCCAGCAACTTCGGCACCCAGACCTACACCTGCAACGTAGATCACAAGCCCAGCAACACCAAGGTGGACAAGACAGTTGAGCGCAAATGTTGTGTCGAGTGCCCACCGTGCCCAGCACCACCTGTGGCAGGACCGTCAGTCTTCCTCTTCCCCCCAAAACCCAAGGACACCCTCATGATCTCCCGGACCCCTGAGGTCACGTGCGTGGTGGTGGACGTGAGCCACGAAGACCCCGAGGTCCAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCATAATGCCAAGACAAAGCCACGGGAGGAGCAGTTCAACAGCACGTTCCGTGTGGTCAGCGTCCTCACCGTTGTGCACCAGGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTCTCCAACAAAGGCCTCCCAGCCCCCATCGAGAAAACCATCTCCAAAACCAAAGGGCAGCCCCGAGAACCACAGGTGTACACCCTGCCCCCATCCCGGGAGGAGATGACCAAGAACCAGGTCAGCCTGACCTGCCTGGTCAAAGGCTTCTACCCCAGCGACATCGCCGTGGAGTGGGAGAGCAATGGGCAGCCGGAGAACAACTACAAGACCACACCTCCCATGCTGGACTCCGACGGCTCCTTCTTCCTCTACAGCAAGCTCACCGTGGACAAGAGCAGGTGGCAGCAGGGGAACGTCTTCTCATGCTCCGTGATGCATGAGGCTCTGCACAACCACTACACGCAGAAGAGCCTCTCCCTGTCTCCGGGTAAATGA'))

            DataIs.append(('IgG3Seq',
                           'CTTCCACCAAGGGCCCATCGGTCTTCCCCCTGGCGCCCTGCTCCAGGAGCACCTCTGGGGGCACAGCGGCCCTGGGCTGCCTGGTCAAGGACTACTTCCCCGAACCGGTGACGGTGTCGTGGAACTCAGGCGCCCTGACCAGCGGCGTGCACACCTTCCCGGCTGTCCTACAGTCCTCAGGACTCTACTCCCTCAGCAGCGTGGTGACCGTGCCCTCCAGCAGCTTGGGCACCCAGACCTACACCTGCAACGTGAATCACAAGCCCAGCAACACCAAGGTGGACAAGAGAGTTGAGCTCAAAACCCCACTTGGTGACACAACTCACACATGCCCACGGTGCCCAGAGCCCAAATCTTGTGACACACCTCCCCCGTGCCCACGGTGCCCAGAGCCCAAATCTTGTGACACACCTCCCCCATGCCCACGGTGCCCAGAGCCCAAATCTTGTGACACACCTCCCCCGTGCCCAAGGTGCCCAGCACCTGAACTCCTGGGAGGACCGTCAGTCTTCCTCTTCCCCCCAAAACCCAAGGATACCCTTATGATTTCCCGGACCCCTGAGGTCACGTGCGTGGTGGTGGACGTGAGCCACGAAGACCCCGAGGTCCAGTTCAAGTGGTACGTGGACGGCGTGGAGGTGCATAATGCCAAGACAAAGCCGCGGGAGGAGCAGTACAACAGCACGTTCCGTGTGGTCAGCGTCCTCACCGTCCTGCACCAGGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTCTCCAACAAAGCCCTCCCAGCCCCCATCGAGAAAACCATCTCCAAAACCAAAGGACAGCCCCGAGAACCACAGGTGTACACCCTGCCCCCATCCCGGGAGGAGATGACCAAGAACCAGGTCAGCCTGACCTGCCTGGTCAAAGGCTTCTACCCCAGCGACATCGCCGTGGAGTGGGAGAGCAGCGGGCAGCCGGAGAACAACTACAACACCACGCCTCCCATGCTGGACTCCGACGGCTCCTTCTTCCTCTACAGCAAGCTCACCGTGGACAAGAGCAGGTGGCAGCAGGGGAACATCTTCTCATGCTCCGTGATGCATGAGGCTCTGCACAACCGCTTCACGCAGAAGAGCCTCTCCCTGTCTCCGGGTAAATGA'))

            DataIs.append(('IgG4Seq',
                           'CTTCCACCAAGGGCCCATCCGTCTTCCCCCTGGCGCCCTGCTCCAGGAGCACCTCCGAGAGCACAGCCGCCCTGGGCTGCCTGGTCAAGGACTACTTCCCCGAACCGGTGACGGTGTCGTGGAACTCAGGCGCCCTGACCAGCGGCGTGCACACCTTCCCGGCTGTCCTACAGTCCTCAGGACTCTACTCCCTCAGCAGCGTGGTGACCGTGCCCTCCAGCAGCTTGGGCACGAAGACCTACACCTGCAACGTAGATCACAAGCCCAGCAACACCAAGGTGGACAAGAGAGTTGAGTCCAAATATGGTCCCCCATGCCCATCATGCCCAGCACCTGAGTTCCTGGGGGGACCATCAGTCTTCCTGTTCCCCCCAAAACCCAAGGACACTCTCATGATCTCCCGGACCCCTGAGGTCACGTGCGTGGTGGTGGACGTGAGCCAGGAAGACCCCGAGGTCCAGTTCAACTGGTACGTGGATGGCGTGGAGGTGCATAATGCCAAGACAAAGCCGCGGGAGGAGCAGTTCAACAGCACGTACCGTGTGGTCAGCGTCCTCACCGTCCTGCACCAGGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTCTCCAACAAAGGCCTCCCGTCCTCCATCGAGAAAACCATCTCCAAAGCCAAAGGGCAGCCCCGAGAGCCACAGGTGTACACCCTGCCCCCATCCCAGGAGGAGATGACCAAGAACCAGGTCAGCCTGACCTGCCTGGTCAAAGGCTTCTACCCCAGCGACATCGCCGTGGAGTGGGAGAGCAATGGGCAGCCGGAGAACAACTACAAGACCACGCCTCCCGTGCTGGACTCCGACGGCTCCTTCTTCCTCTACAGCAGGCTAACCGTGGACAAGAGCAGGTGGCAGGAGGGGAATGTCTTCTCATGCTCCGTGATGCATGAGGCTCTGCACAACCACTACACACAGAAGAGCCTCTCCCTGTCTCTGGGTAAATGA'))

            DataIs.append(('IgA1seq',
                           'CATCCCCGACCAGCCCCAAGGTCTTCCCGCTGAGCCTCTGCAGCACCCAGCCAGATGGGAACGTGGTCATCGCCTGCCTGGTCCAGGGCTTCTTCCCCCAGGAGCCACTCAGTGTGACCTGGAGCGAAAGCGGACAGGGCGTGACCGCCAGAAACTTCCCACCCAGCCAGGATGCCTCCGGGGACCTGTACACCACGAGCAGCCAGCTGACCCTGCCGGCCACACAGTGCCTAGCCGGCAAGTCCGTGACATGCCACGTGAAGCACTACACGAATCCCAGCCAGGATGTGACTGTGCCCTGCCCAGTTCCCTCAACTCCACCTACCCCATCTCCCTCAACTCCACCTACCCCATCTCCCTCATGCTGCCACCCCCGACTGTCACTGCACCGACCGGCCCTCGAGGACCTGCTCTTAGGTTCAGAAGCGAACCTCACGTGCACACTGACCGGCCTGAGAGATGCCTCAGGTGTCACCTTCACCTGGACGCCCTCAAGTGGGAAGAGCGCTGTTCAAGGACCACCTGAGCGTGACCTCTGTGGCTGCTACAGCGTGTCCAGTGTCCTGCCGGGCTGTGCCGAGCCATGGAACCATGGGAAGACCTTCACTTGCACTGCTGCCTACCCCGAGTCCAAGACCCCGCTAACCGCCACCCTCTCAAAATCCGGAAACACATTCCGGCCCGAGGTCCACCTGCTGCCGCCGCCGTCGGAGGAGCTGGCCCTGAACGAGCTGGTGACGCTGACGTGCCTGGCACGCGGCTTCAGCCCCAAGGACGTGCTGGTTCGCTGGCTGCAGGGGTCACAGGAGCTGCCCCGCGAGAAGTACCTGACTTGGGCATCCCGGCAGGAGCCCAGCCAGGGCACCACCACCTTCGCTGTGACCAGCATACTGCGCGTGGCAGCCGAGGACTGGAAGAAGGGGGACACCTTCTCCTGCATGGTGGGCCACGAGGCCCTGCCGCTGGCCTTCACACAGAAGACCATCGACCGCTTGGCGGGTAAACCCACCCATGTCAATGTGTCTGTTGTCATGGCGGAGGTGGACGGCACCTGCTACTGA'))

            DataIs.append(('IgA2seq',
                           'CATCCCCGACCAGCCCCAAGGTCTTCCCGCTGAGCCTCGACAGCACCCCCCAAGATGGGAACGTGGTCGTCGCATGCCTGGTCCAGGGCTTCTTCCCCCAGGAGCCACTCAGTGTGACCTGGAGCGAAAGCGGACAGAACGTGACCGCCAGAAACTTCCCACCTAGCCAGGATGCCTCCGGGGACCTGTACACCACGAGCAGCCAGCTGACCCTGCCGGCCACACAGTGCCCAGACGGCAAGTCCGTGACATGCCACGTGAAGCACTACACGAATCCCAGCCAGGATGTGACTGTGCCCTGCCCAGTTCCCCCACCTCCCCCATGCTGCCACCCCCGACTGTCGCTGCACCGACCGGCCCTCGAGGACCTGCTCTTAGGTTCAGAAGCGAACCTCACGTGCACACTGACCGGCCTGAGAGATGCCTCTGGTGCCACCTTCACCTGGACGCCCTCAAGTGGGAAGAGCGCTGTTCAAGGACCACCTGAGCGTGACCTCTGTGGCTGCTACAGCGTGTCCAGTGTCCTGCCTGGCTGTGCCCAGCCATGGAACCATGGGGAGACCTTCACCTGCACTGCTGCCCACCCCGAGTTGAAGACCCCACTAACCGCCAACATCACAAAATCCGGAAACACATTCCGGCCCGAGGTCCACCTGCTGCCGCCGCCGTCGGAGGAGCTGGCCCTGAACGAGCTGGTGACGCTGACGTGCCTGGCACGTGGCTTCAGCCCCAAGGATGTGCTGGTTCGCTGGCTGCAGGGGTCACAGGAGCTGCCCCGCGAGAAGTACCTGACTTGGGCATCCCGGCAGGAGCCCAGCCAGGGCACCACCACCTTCGCTGTGACCAGCATACTGCGCGTGGCAGCCGAGGACTGGAAGAAGGGGGACACCTTCTCCTGCATGGTGGGCCACGAGGCCCTGCCGCTGGCCTTCACACAGAAGACCATCGACCGCTTGGCGGGTAAACCCACCCATGTCAATGTGTCTGTTGTCATGGCGGAGGTGGACGGCACCTGCTACTGA'))

            DataIs.append(('IgEseq',
                           'CCTCCACACAGAGCCCATCCGTCTTCCCCTTGACCCGCTGCTGCAAAAACATTCCCTCCAATGCCACCTCCGTGACTCTGGGCTGCCTGGCCACGGGCTACTTCCCGGAGCCGGTGATGGTGACCTGCGACACAGGCTCCCTCAACGGGACAACTATGACCTTACCAGCCACCACCCTCACGCTCTCTGGTCACTATGCCACCATCAGCTTGCTGACCGTCTCGGGTGCGTGGGCCAAGCAGATGTTCACCTGCCGTGTGGCACACACTCCATCGTCCACAGACTGGGTCGACAACAAAACCTTCAGCGTCTGCTCCAGGGACTTCACCCCGCCCACCGTGAAGATCTTACAGTCGTCCTGCGACGGCGGCGGGCACTTCCCCCCGACCATCCAGCTCCTGTGCCTCGTCTCTGGGTACACCCCAGGGACTATCAACATCACCTGGCTGGAGGACGGGCAGGTCATGGACGTGGACTTGTCCACCGCCTCTACCACGCAGGAGGGTGAGCTGGCCTCCACACAAAGCGAGCTCACCCTCAGCCAGAAGCACTGGCTGTCAGACCGCACCTACACCTGCCAGGTCACCTATCAAGGTCACACCTTTGAGGACAGCACCAAGAAGTGTGCAGATTCCAACCCGAGAGGGGTGAGCGCCTACCTAAGCCGGCCCAGCCCGTTCGACCTGTTCATCCGCAAGTCGCCCACGATCACCTGTCTGGTGGTGGACCTGGCACCCAGCAAGGGGACCGTGAACCTGACCTGGTCCCGGGCCAGTGGGAAGCCTGTGAACCACTCCACCAGAAAGGAGGAGAAGCAGCGCAATGGCACGTTAACCGTCACGTCCACCCTGCCGGTGGGCACCCGAGACTGGATCGAGGGGGAGACCTACCAGTGCAGGGTGACCCACCCCCACCTGCCCAGGGCCCTCATGCGGTCCACGACCAAGACCAGCGGCCCGCGTGCTGCCCCGGAAGTCTATGCGTTTGCGACGCCGGAGTGGCCGGGGAGCCGGGACAAGCGCACCCTCGCCTGCCTGATCCAGAACTTCATGCCTGAGGACATCTCGGTGCAGTGGCTGCACAACGAGGTGCAGCTCCCGGACGCCCGGCACAGCACGACGCAGCCCCGCAAGACCAAGGGCTCCGGCTTCTTCGTCTTCAGCCGCCTGGAGGTGACCAGGGCCGAATGGGAGCAGAAAGATGAGTTCATCTGCCGTGCAGTCCATGAGGCAGCGAGCCCCTCACAGACCGTCCAGCGAGCGGTGTCTGTAAATCCCGGTAAATGA'))

            DataIs.append(('IgDseq',
                           'CACCCACCAAGGCTCCGGATGTGTTCCCCATCATATCAGGGTGCAGACACCCAAAGGATAACAGCCCTGTGGTCCTGGCATGCTTGATAACTGGGTACCACCCAACGTCCGTGACTGTCACCTGGTACATGGGGACACAGAGCCAGCCCCAGAGAACCTTCCCTGAGATACAAAGACGGGACAGCTACTACATGACAAGCAGCCAGCTCTCCACCCCCCTCCAGCAGTGGCGCCAAGGCGAGTACAAATGCGTGGTCCAGCACACCGCCAGCAAGAGTAAGAAGGAGATCTTCCGCTGGCCAGAGTCTCCAAAGGCACAGGCCTCCTCCGTGCCCACTGCACAACCCCAAGCAGAGGGCAGCCTCGCCAAGGCAACCACAGCCCCAGCCACCACCCGTAACACAGGAAGAGGAGGAGAAGAGAAGAAGAAGGAGAAGGAGAAAGAGGAACAAGAAGAGAGAGAGACAAAGACACCAGAGTGTCCGAGCCACACCCAGCCTCTTGGCGTCTACCTGCTAACCCCTGCAGTGCAGGACCTGTGGCTCCGGGACAAAGCCACCTTCACCTGCTTCGTGGTGGGCAGTGACCTGAAGGATGCTCACCTGACCTGGGAGGTGGCTGGGAAGGTCCCCACAGGGGGCGTGGAGGAAGGGCTGCTGGAGCGGCACAGCAACGGCTCCCAGAGCCAGCACAGCCGTCTGACCCTGCCCAGGTCCTTGTGGAACGCGGGGACCTCCGTCACCTGCACACTGAACCATCCCAGCCTCCCACCCCAGAGGTTGATGGCGCTGAGAGAACCCGCTGCGCAGGCACCCGTCAAGCTTTCTCTGAACCTGCTGGCCTCGTCTGACCCTCCCGAGGCGGCCTCGTGGCTCCTGTGTGAGGTGTCTGGCTTCTCGCCCCCCAACATCCTCCTGATGTGGCTGGAGGACCAGCGTGAGGTGAACACTTCTGGGTTTGCCCCCGCACGCCCCCCTCCACAGCCCAGGAGCACCACGTTCTGGGCCTGGAGTGTGCTGCGTGTCCCAGCCCCGCCCAGCCCTCAGCCAGCCACCTACACGTGTGTGGTCAGCCACGAGGACTCCCGGACTCTGCTCAACGCCAGCCGGAGCCTAGAAGTCAGCTACCTGGCCATGACCCCCCTGATCCCTCAGAGCAAGGATGAGAACAGCGATGACTACACGACCTTTGATGATGTGGGCAGCCTGTGGACCACCCTGTCCACGTTTGTGGCCCTCTTCATCCTCACCCTCCTCTACAGCGGCATTGTCACTTTCATCAAGGTGAAGTAG'))
        elif self.ui.comboBoxSpecies.currentText() == 'Mouse':
            DataIs.append(('IgMSeq',
                           'AGAGTCAGTCCTTCCCAAATGTCTTCCCCCTCGTCTCCTGCGAGAGCCCCCTGTCTGATAAGAATCTGGTGGCCATGGGCTGCCTGGCCCGGGACTTCCTGCCCAGCACCATTTCCTTCACCTGGAACTACCAGAACAACACTGAAGTCATCCAGGGTATCAGAACCTTCCCAACACTGAGGACAGGGGGCAAGTACCTAGCCACCTCGCAGGTCTTGCTGTCTCCCAAGAGCATCCTTGAAGGTTCAGATGAATACCTTGTATGCAAAATCCACTACGGAGGCAAAAACAGAGATCTGCATGTGCCCATTCCAGCTGTCGCAGAGATGAATCCCAATGTAAATGTGTTCGTCCCACCACGGGATGGCTTCTCTGGCCCTGCACCACGCAAGTCTAAACTCATCTGCGAGGCCACGAACTTCACTCCAAAACCGATCACAGTATCCTGGCTAAAGGATGGGAAGCTCGTGGAATCTGGCTTCACCACAGATCCGGTGACCATCGAGAACAAAGGATCCACACCCCAAACCTACAAGGTCATAAGCACACTTACCATCTCTGAAATCGACTGGCTGAACCTGAATGTGTACACCTGCCGTGTGGATCACAGGGGTCTCACCTTCTTGAAGAACGTGTCCTCCACATGTGCTGCCAGTCCCTCCACAGACATCCTAACCTTCACCATCCCCCCCTCCTTTGCCGACATCTTCCTCAGCAAGTCCGCTAACCTGACCTGTCTGGTCTCAAACCTGGCAACCTATGAAACCCTGAATATCTCCTGGGCTTCTCAAAGTGGTGAACCACTGGAAACCAAAATTAAAATCATGGAAAGCCATCCCAATGGCACCTTCAGTGCTAAGGGTGTGGCTAGTGTTTGTGTGGAAGACTGGAATAACAGGAAGGAATTTGTGTGTACTGTGACTCACAGGGATCTGCCTTCGCCACAGAAGAAATTCATCTCAAAACCCAATG'))

            DataIs.append(('IgG1Seq',
                           'CCAAAACGACACCCCCATCTGTCTATCCACTGGCCCCTGGATCTGCTGCCCAAACTAACTCCATGGTGACCCTGGGATGCCTGGTCAAGGGCTATTTCCCTGAGCCAGTGACAGTGACCTGGAACTCTGGATCCCTGTCCAGCGGTGTGCACACCTTCCCAGCTGTCCTGGAGTCTGACCTCTACACTCTGAGCAGCTCAGTGACTGTCCCCTCCAGCCCTCGGCCCAGCGAGACCGTCACCTGCAACGTTGCCCACCCGGCCAGCAGCACCAAGGTGGACAAGAAAATTGTGCCCAGGGATTGTGGTTGTAAGCCTTGCATATGTACAGTCCCAGAAGTATCATCTGTCTTCATCTTCCCCCCAAAGCCCAAGGATGTGCTCACCATTACTCTGACTCCTAAGGTCACGTGTGTTGTGGTAGACATCAGCAAGGATGATCCCGAGGTCCAGTTCAGCTGGTTTGTAGATGATGTGGAGGTGCACACAGCTCAGACGCAACCCCGGGAGGAGCAGTTCAACAGCACTTTCCGCTCAGTCAGTGAACTTCCCATCATGCACCAGGACTGGCTCAATGGCAAGGAGTTCAAATGCAGGGTCAACAGTGCAGCTTTCCCTGCCCCCATCGAGAAAACCATCTCCAAAACCAAAGGCAGACCGAAGGCTCCACAGGTGTACACCATTCCACCTCCCAAGGAGCAGATGGCCAAGGATAAAGTCAGTCTGACCTGCATGATAACAGACTTCTTCCCTGAAGACATTACTGTGGAGTGGCAGTGGAATGGGCAGCCAGCGGAGAACTACAAGAACACTCAGCCCATCATGAACACGAATGGCTCTTACTTCGTCTACAGCAAGCTCAATGTGCAGAAGAGCAACTGGGAGGCAGGAAATACTTTCACCTGCTCTGTGTTACATGAGGGCCTGCACAACCACCATACTGAGAAGAGCCTCTCCCACTCTCCTGGTAAA'))

            DataIs.append(('IgG2ASeq',
                           'CCAAAACAACAGCCCCATCGGTCTATCCACTGGCCCCTGTGTGTGGAGATACAACTGGCTCCTCGGTGACTCTAGGATGCCTGGTCAAGGGTTATTTCCCTGAGCCAGTGACCTTGACCTGGAACTCTGGATCCCTGTCCAGTGGTGTGCACACCTTCCCAGCTGTCCTGCAGTCTGACCTCTACACCCTCAGCAGCTCAGTGACTGTAACCTCGAGCACCTGGCCCAGCCAGTCCATCACCTGCAATGTGGCCCACCCGGCAAGCAGCACCAAGGTGGACAAGAAAATTGAGCCCAGAGGGCCCACAATCAAGCCCTGTCCTCCATGCAAATGCCCAGCACCTAACCTCTTGGGTGGACCATCCGTCTTCATCTTCCCTCCAAAGATCAAGGATGTACTCATGATCTCCCTGAGCCCCATAGTCACATGTGTGGTGGTGGATGTGAGCGAGGATGACCCAGATGTCCAGATCAGCTGGTTTGTGAACAACGTGGAAGTACACACAGCTCAGACACAAACCCATAGAGAGGATTACAACAGTACTCTCCGGGTGGTCAGTGCCCTCCCCATCCAGCACCAGGACTGGATGAGTGGCAAGGAGTTCAAATGCAAGGTCAACAACAAAGACCTCCCAGCGCCCATCGAGAGAACCATCTCAAAACCCAAAGGGTCAGTAAGAGCTCCACAGGTATATGTCTTGCCTCCACCAGAAGAAGAGATGACTAAGAAACAGGTCACTCTGACCTGCATGGTCACAGACTTCATGCCTGAAGACATTTACGTGGAGTGGACCAACAACGGGAAAACAGAGCTAAACTACAAGAACACTGAACCAGTCCTGGACTCTGATGGTTCTTACTTCATGTACAGCAAGCTGAGAGTGGAAAAGAAGAACTGGGTGGAAAGAAATAGCTACTCCTGTTCAGTGGTCCACGAGGGTCTGCACAATCACCACACGACTAAGAGCTTCTCCCGGACTCCGGGTAAA'))

            DataIs.append(('IgG2BSeq',
                           'CCAAAACAACACCCCCATCAGTCTATCCACTGGCCCCTGGGTGTGGAGATACAACTGGTTCCTCCGTGACCTCTGGGTGCCTGGTCAAGGGGTACTTCCCTGAGCCAGTGACTGTGACTTGGAACTCTGGATCCCTGTCCAGCAGTGTGCACACCTTCCCAGCTCTCCTGCAGTCTGGACTCTACACTATGAGCAGCTCAGTGACTGTCCCCTCCAGCACCTGGCCAAGTCAGACCGTCACCTGCAGCGTTGCTCACCCAGCCAGCAGCACCACGGTGGACAAAAAACTTGAGCCCAGCGGGCCCATTTCAACAATCAACCCCTGTCCTCCATGCAAGGAGTGTCACAAATGCCCAGCTCCTAACCTCGAGGGTGGACCATCCGTCTTCATCTTCCCTCCAAATATCAAGGATGTACTCATGATCTCCCTGACACCCAAGGTCACGTGTGTGGTGGTGGATGTGAGCGAGGATGACCCAGACGTCCAGATCAGCTGGTTTGTGAACAACGTGGAAGTACACACAGCTCAGACACAAACCCATAGAGAGGATTACAACAGTACTATCCGGGTGGTCAGCACCCTCCCCATCCAGCACCAGGACTGGATGAGTGGCAAGGAGTTCAAATGCAAGGTGAACAACAAAGACCTCCCATCACCCATCGAGAGAACCATCTCAAAAATTAAAGGGCTAGTCAGAGCTCCACAAGTATACACTTTGCCGCCACCAGCAGAGCAGTTGTCCAGGAAAGATGTCAGTCTCACTTGCCTGGTCGTGGGCTTCAACCCTGGAGACATCAGTGTGGAGTGGACCAGCAATGGGCATACAGAGGAGAACTACAAGGACACCGCACCAGTTCTTGACTCTGACGGTTCTTACTTCATATATAGCAAGCTCAATATGAAAACAAGCAAGTGGGAGAAAACAGATTCCTTCTCATGCAACGTGAGACACGAGGGTCTGAAAAATTACTACCTGAAGAAGACCATCTCCCGGTCTCCGGGTAAA'))

            DataIs.append(('IgG2CSeq',
                           'CCAAAACAACAGCCCCATCGGTCTATCCACTGGCCCCTGTGTGTGGAGGTACAACTGGCTCCTCGGTGACTCTAGGATGCCTGGTCAAGGGTTATTTCCCTGAGCCAGTGACCTTGACCTGGAACTCTGGATCCCTGTCCAGTGGTGTGCACACCTTCCCAGCTCTCCTGCAGTCTGGCCTCTACACCCTCAGCAGCTCAGTGACTGTAACCTCGAACACCTGGCCCAGCCAGACCATCACCTGCAATGTGGCCCACCCGGCAAGCAGCACCAAAGTGGACAAGAAAATTGAGCCCAGAGTGCCCATAACACAGAACCCCTGTCCTCCACTCAAAGAGTGTCCCCCATGCGCAGCTCCAGACCTCTTGGGTGGACCATCCGTCTTCATCTTCCCTCCAAAGATCAAGGATGTACTCATGATCTCCCTGAGCCCCATGGTCACATGTGTGGTGGTGGATGTGAGCGAGGATGACCCAGACGTCCAGATCAGCTGGTTTGTGAACAACGTGGAAGTACACACAGCTCAGACACAAACCCATAGAGAGGATTACAACAGTACTCTCCGGGTGGTCAGTGCCCTCCCCATCCAGCACCAGGACTGGATGAGTGGCAAGGAGTTCAAATGCAAGGTCAACAACAGAGCCCTCCCATCCCCCATCGAGAAAACCATCTCAAAACCCAGAGGGCCAGTAAGAGCTCCACAGGTATATGTCTTGCCTCCACCAGCAGAAGAGATGACTAAGAAAGAGTTCAGTCTGACCTGCATGATCACAGGCTTCTTACCTGCCGAAATTGCTGTGGACTGGACCAGCAATGGGCGTACAGAGCAAAACTACAAGAACACCGCAACAGTCCTGGACTCTGATGGTTCTTACTTCATGTACAGCAAGCTCAGAGTACAAAAGAGCACTTGGGAAAGAGGAAGTCTTTTCGCCTGCTCAGTGGTCCACGAGGTGCTGCACAATCACCTTACGACTAAGACCATCTCCCGGTCTCTGGGTAAA'))

            DataIs.append(('IgG3seq',
                           'CTACAACAACAGCCCCATCTGTCTATCCCTTGGTCCCTGGCTGCAGTGACACATCTGGATCCTCGGTGACACTGGGATGCCTTGTCAAAGGCTACTTCCCTGAGCCGGTAACTGTAAAATGGAACTATGGAGCCCTGTCCAGCGGTGTGCGCACAGTCTCATCTGTCCTGCAGTCTGGGTTCTATTCCCTCAGCAGCTTGGTGACTGTACCCTCCAGCACCTGGCCCAGCCAGACTGTCATCTGCAACGTAGCCCACCCAGCCAGCAAGACTGAGTTGATCAAGAGAATCGAGCCTAGAATACCCAAGCCCAGTACCCCCCCAGGTTCTTCATGCCCACCTGGTAACATCTTGGGTGGACCATCCGTCTTCATCTTCCCCCCAAAGCCCAAGGATGCACTCATGATCTCCCTAACCCCCAAGGTTACGTGTGTGGTGGTGGATGTGAGCGAGGATGACCCAGATGTCCATGTCAGCTGGTTTGTGGACAACAAAGAAGTACACACAGCCTGGACACAGCCCCGTGAAGCTCAGTACAACAGTACCTTCCGAGTGGTCAGTGCCCTCCCCATCCAGCACCAGGACTGGATGAGGGGCAAGGAGTTCAAATGCAAGGTCAACAACAAAGCCCTCCCAGCCCCCATCGAGAGAACCATCTCAAAACCCAAAGGAAGAGCCCAGACACCTCAAGTATACACCATACCCCCACCTCGTGAACAAATGTCCAAGAAGAAGGTTAGTCTGACCTGCCTGGTCACCAACTTCTTCTCTGAAGCCATCAGTGTGGAGTGGGAAAGGAACGGAGAACTGGAGCAGGATTACAAGAACACTCCACCCATCCTGGACTCAGATGGGACCTACTTCCTCTACAGCAAGCTCACTGTGGATACAGACAGTTGGTTGCAAGGAGAAATTTTTACCTGCTCCGTGGTGCATGAGGCTCTCCATAACCACCACACACAGAAGAACCTGTCTCGCTCCCCTGGTAAA'))

            DataIs.append(('IgAseq',
                           'AGTCTGCGAGAAATCCCACCATCTACCCACTGACACTCCCACCAGTCCTGTGCAGTGATCCCGTGATAATCGGCTGCCTGATTCACGATTACTTCCCTTTCGGCACGATGAATGTGACCTGGGGAAAGAGTGGGAAGGATATAACCACCGTGAACTTTCCACCTGCCCTCGCCTCTGGGGGACGGTACACCATGAGCAGCCAGTTAACCCTGCCAGCTGTCGAGTGCCCAGAAGGAGAGTCCGTGAAATGTTCCGTGCAACATGACTCTAACCCCGTCCAAGAATTGGATGTGAATTGCTCTGGTCCTACTCCTCCTCCTCCTATTACTATTCCTTCCTGCCAGCCCAGCCTGTCACTGCAGCGGCCAGCTCTTGAGGACCTGCTCCTGGGTTCAGATGCCAGCATCACATGTACTCTGAATGGCCTGAGAAATCCTGAGGGAGCTGCTTTCACCTGGGAGCCCTCCACTGGGAAGGATGCAGTGCAGAAGAAAGCTGCGCAGAATTCCTGCGGCTGCTACAGTGTGTCCAGCGTCCTGCCTGGCTGTGCTGAGCGCTGGAACAGTGGCGCATCATTCAAGTGCACAGTTACCCATCCTGAGTCTGGCACCTTAACTGGCACAATTGCCAAAGTCACAGTGAACACCTTCCCACCCCAGGTCCACCTGCTACCGCCGCCGTCGGAGGAGCTGGCCCTGAATGAGCTCTTGTCCCTGACATGCCTGGTGCGAGCTTTCAACCCTAAAGAAGTGCTGGTGCGATGGCTGCATGGAAATGAGGAGCTGTCCCCAGAAAGCTACCTAGTGTTTGAGCCCCTAAAGGAGCCAGGCGAGGGAGCCACCACCTACCTGGTGACAAGCGTGTTGCGTGTATCAGCTGAAACCTGGAAACAGGGTGACCAGTACTCCTGCATGGTGGGCCACGAGGCCTTGCCCATGAACTTCACCCAGAAGACCATCGACCGTCTGTCGGGTAAACCCACCAATGTCAGCGTGTCTGTGATCATGTCAGAGGGAGATGGCATCTGCTAC'))

            DataIs.append(('IgEseq',
                           'CCTCTATCAGGAACCCTCAGCTCTACCCCTTAAAGCCCTGTAAAGGCACTGCTTCCATGACCCTAGGCTGCCTAGTAAAGGACTACTTCCCTAATCCTGTGACTGTGACCTGGTATTCAGACTCCCTGAACATGAGCACTGTGAACTTCCCTGCCCTCGGTTCTGAACTCAAGGTCACCACCAGCCAAGTGACCAGCTGGGGCAAGTCAGCCAAGAACTTCACATGCCACGTGACACATCCTCCATCATTCAACGAAAGTAGGACTATCCTAGTTCGACCTGTCAACATCACTGAGCCCACCTTGGAGCTACTCCATTCATCCTGCGACCCCAATGCATTCCACTCCACCATCCAGCTGTACTGCTTCATTTATGGCCACATCCTAAATGATGTCTCTGTCAGCTGGCTAATGGACGATCGGGAGATAACTGATACACTTGCACAAACTGTTCTAATCAAGGAGGAAGGCAAACTAGCCTCTACCTGCAGTAAACTCAACATCACTGAGCAGCAATGGATGTCTGAAAGCACCTTCACCTGCAAGGTCACCTCCCAAGGCGTAGACTATTTGGCCCACACTCGGAGATGCCCAGATCATGAGCCACGGGGTGTGATTACCTACCTGATCCCACCCAGCCCCCTGGACCTGTATCAAAACGGTGCTCCCAAGCTTACCTGTCTGGTGGTGGACCTGGAAAGCGAGAAGAATGTCAATGTGACGTGGAACCAAGAGAAGAAGACTTCAGTCTCAGCATCCCAGTGGTACACTAAGCACCACAATAACGCCACAACTAGTATCACCTCCATCCTGCCTGTAGTTGCCAAGGACTGGATTGAAGGCTACGGCTATCAGTGCATAGTGGACCACCCTGATTTTCCCAAGCCCATTGTGCGTTCCATCACCAAGACCCCAGGCCAGCGCTCAGCCCCCGAGGTATATGTGTTCCCACCACCAGAGGAGGAGAGCGAGGACAAACGCACACTCACCTGTTTGATCCAGAACTTCTTCCCTGAGGATATCTCTGTGCAGTGGCTGGGGGATGGCAAACTGATCTCAAACAGCCAGCACAGTACCACAACACCCCTGAAATCCAATGGCTCCAATCAAGGCTTCTTCATCTTCAGTCGCCTAGAGGTCGCCAAGACACTCTGGACACAGAGAAAACAGTTCACCTGCCAAGTGATCCATGAGGCACTTCAGAAACCCAGGAAACTGGAGAAAACAATATCCACAAGCCTTGGTAACACCTCCCTCCGTCCCTCC'))

            DataIs.append(('IgDseq',
                           'GTGATAAAAAGGAACCTGACATGTTCCTCCTCTCAGAGTGCAAAGCCCCAGAGGAAAATGAAAAGATAAACCTGGGCTGTTTAGTAATTGGAAGTCAGCCACTGAAAATCAGCTGGGAGCCAAAGAAGTCAAGTATAGTTGAACATGTCTTCCCCTCTGAAATGAGAAATGGCAATTATACAATGGTCCTCCAGGTCACTGTGCTGGCCTCAGAACTGAACCTCAACCACACTTGCACCATAAATAAACCCAAAAGGAAAGAAAAACCTTTCAAGTTTCCTGAGTCATGGGATTCCCAGTCCTCTAAGAGAGTCACTCCAACTCTCCAAGCAAAGAATCACTCCACAGAAGCCACCAAAGCTATTACCACCAAAAAGGACATAGAAGGGGCCATGGCACCCAGCAACCTCACTGTGAACATCCTGACCACATCCACCCATCCTGAGATGTCATCTTGGCTCCTGTGTGAAGTATCTGGCTTCTTCCCGGAAAATATCCACCTCATGTGGCTGGGTGTCCACAGTAAAATGAAGTCTACAAACTTTGTCACTGCAAACCCCACCGCCCAGCCTGGGGGCACATTCCAGACCTGGAGTGTCCTGAGACTACCAGTCGCTCTGAGCTCATCACTTGACACTTACACATGTGTGGTGGAACATGAGGCCTCAAAGACAAAGCTTAATGCCAGCAAGAGCCTAGCAATTAGTG'))
        else:
            return

        self.AlignSequences(DataIs)

    def AlignSequences(self, DataIn):
        # import tempfile
        import os
        global GLMsg

        QApplication.setOverrideCursor(Qt.WaitCursor)

        if DataIn == 'none':
            fields = ['SeqName', 'Sequence', 'GermlineSequence']
            # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
            SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
            DataIsTMP = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first

            DataIs = [(ele[0],ele[1]) for ele in DataIsTMP]

            if len(DataIs) == 1:
                self.ui.actionGL.setChecked(True)
                GLMsg = True
                GermSeq = DataIsTMP[0][2].upper()
                Germline = ('Germline', GermSeq)
                DataIs.append(Germline)
            else:
                if self.ui.actionGL.isChecked() == True:
                    GLMsg = True
                    GermSeq = DataIsTMP[0][2].upper()
                    Germline = ('Germline', GermSeq)
                    DataIs.append(Germline)
        elif DataIn == 'edit':
            DataIn = 'none'
            DataIs = []

            SeqName = data[0]

            DNAseq = self.ui.txtDNASeq.toPlainText()
            Sequence = (SeqName, DNAseq)
            DataIs.append(Sequence)

            if len(DataIs) == 1:
                GLMsg = False
                self.ui.actionGL.setChecked(True)
                GLMsg = True
                GermSeq = data[80].upper()
                Germline = ('Germline', GermSeq)
                DataIs.append(Germline)
        else:
            self.ui.actionGL.setChecked(False)
            DataIs = DataIn

        # import subprocess


        # (fd, outfilename) = tempfile.mkstemp()
        try:


            outfilename = VGenesSeq.ClustalO(DataIs, 80, True)




            lenName = 0
            longestName = 0
            alignmentText = ''
            germseq = ''
            germpeptide = ''

            each = ()
            all = []
            if self.ui.actionGL.isChecked() == False:
                # each.append('Consensus: ')
                longestName = 11
            else:
                # each.append('Germline: ')
                longestName = 10

            # each.append('') #DNA
            # each.append('') #AA
            peptide = ''
            SeqName = ''
            StartAll = False
            if os.path.isfile(outfilename):
                with open(outfilename, 'r') as currentfile:
                    for line in currentfile:
                        Readline = line.replace('\n', '').replace('\r', '').replace('-', '.')
                        Readline = Readline.strip()
                        if Readline[0] == '>':
                            if StartAll == True:
                                all.append(each)
                            StartAll = True
                            # each.clear()
                            SeqName = Readline[1:] + ':'
                            lenName = len(SeqName)
                            if lenName > longestName:
                                longestName = lenName + 2

                                # if SeqName != 'Germline':
                                #     each.append(SeqName)

                        else:

                            if self.ui.actionAA.isChecked() == True:
                                AASeq, ErMessage = VGenesSeq.Translator(Readline, 0)
                                peptide = ''
                                for res in AASeq:
                                    peptide += (' ' + res + ' ')
                            peptide = peptide[0:len(Readline)]
                            if SeqName != 'Germline:':
                                each = (SeqName, Readline, peptide)
                                # each.append(Readline)
                                # each.append(peptide)
                            else:
                                germseq = Readline
                                germpeptide = peptide
                                StartAll = False
                if StartAll == True:
                    all.append(each)
            else:
                return
            # todo add header that says what germline based on
        except:
            print('no')

        finally:
            os.remove(outfilename)

        if self.ui.actionGL.isChecked() == True:
            consensusDNA = germseq
            consensusAA = germpeptide

        else:
            firstOne = all[1]
            seqlen = len(firstOne[1])
            if self.ui.actionDNA.isChecked() == True:
                consensusDNA = ''
                tester = ''
                # testl = []
                for i in range(0, seqlen - 1):
                    tester = ''
                    Cnuc = ''
                    for item in all:
                        seq = item[1]
                        tester += seq[i]

                    frequencies = [(c, tester.count(c)) for c in set(tester)]
                    Cnuc = max(frequencies, key=lambda x: x[1])[0]
                    consensusDNA += Cnuc

            if self.ui.actionAA.isChecked() == True:
                consensusAA = ''
                tester = ''
                firstOne = all[1]
                seqlen = len(firstOne[1])
                # testl = []
                for i in range(0, seqlen - 1):
                    tester = ''
                    Caa = ''
                    for item in all:
                        seq = item[2]
                        tester += seq[i]

                    frequencies = [(c, tester.count(c)) for c in set(tester)]
                    Caa = max(frequencies, key=lambda x: x[1])[0]
                    consensusAA += Caa


                    # need build numberring lines also
                    # first record is germline or consensus whatever used and empty seq and AA
                    # need to use ones produced above
                    # also longestName is longest and need code to ensure all that long with ': '
                    # build alignment with name and 50 per

        header = 'VGenes multiple alignment using Clustal Omega. \n'
        if self.ui.actionGL.isChecked() == False:
            ConName = 'Consensus: '

        else:
            ConName = 'Germline: '
            header += 'Alignment relative to the predicted germline gene for ' + data[0] + '.\n'

        while len(ConName) < longestName:
            ConName += ' '

        AASpaces = ''
        while len(AASpaces) < longestName:
            AASpaces += ' '

        if self.ui.actionDNA.isChecked() == False and self.ui.actionAA.isChecked() == False:
            self.ui.actionDNA.setChecked(True)

        alignmentText = header
        i = 0
        endSeg = 0
        done = False
        ConAdd = True

        # for j in range[0,longestName]:
        #     AASpaces += ' '
        if self.ui.actionDNA.isChecked() == True:
            maxLen = len(consensusDNA)
        else:
            NewConAA = consensusAA.replace(' ', '')

            # canAA = False
            maxLen = len(NewConAA)

        # canAA = True
        while endSeg <= maxLen - 1:
            if i + 60 < maxLen:
                # if i == 0:
                #     endSeg = 49
                # else:
                endSeg = i + 60
            else:
                endSeg = maxLen

            for seq in all:
                SeqName = seq[0]
                DNASeq = seq[1]
                AASeq = seq[2]
                NewAA = AASeq.replace(' ', '')
                while len(SeqName) < longestName:
                    SeqName += ' '
                # todo can build num line even add CDR if align relative to germline instead just number as end
                toSpace = len(str(maxLen))
                endLabel = str(endSeg)
                while len(endLabel) < toSpace:
                    endLabel += ' '
                endLabel = '  ' + endLabel

                if self.ui.actionDNA.isChecked() == True:

                    ConSegDNA = consensusDNA[i:endSeg]
                    DNASeqSeg = DNASeq[i:endSeg]
                    DNAArt = ''
                    for n in range(0, len(ConSegDNA)):
                        if DNASeqSeg[n] == ConSegDNA[n]:
                            if DataIn == 'none':
                                DNAArt += '-'
                            else:
                                char = DNASeqSeg[n]
                                char = char.upper()
                                DNAArt += char
                        else:
                            if DataIn == 'none':
                                DNAArt += DNASeqSeg[n]
                            else:
                                char = DNASeqSeg[n]
                                char = char.lower()
                                DNAArt += char

                    ConSegDNA = ConName + ConSegDNA + endLabel
                    DNASeqSeg = SeqName + DNAArt + endLabel
                    if self.ui.actionAA.isChecked() == True:
                        AArt = ''
                        ConSegAA = consensusAA[i:endSeg]
                        AASeqSeg = AASeq[i:endSeg]

                        for n in range(0, len(ConSegAA)):
                            if AASeqSeg[n] == ConSegAA[n]:
                                AArt += ' '
                            else:
                                AArt += AASeqSeg[n]

                        AASeqSeg = AASpaces + AArt  # + endLabel
                        ConSegAA = AASpaces + ConSegAA
                        if ConAdd == True:
                            alignmentText += '\n' + ConSegAA + '\n'
                            alignmentText += ConSegDNA + '\n'
                            ConAdd = False
                        alignmentText += AASeqSeg + '\n'
                        alignmentText += DNASeqSeg + '\n'
                    else:
                        if ConAdd == True:
                            alignmentText += '\n' + ConSegDNA + '\n'
                            ConAdd = False
                        alignmentText += DNASeqSeg + '\n'

                else:
                    if self.ui.actionAA.isChecked() == True:
                        AArt = ''
                        ConSegAA = NewConAA[i:endSeg]
                        AASeqSeg = NewAA[i:endSeg]

                        for n in range(0, len(ConSegAA)):
                            if AASeqSeg[n] == ConSegAA[n]:
                                AArt += '-'
                            else:
                                AArt += AASeqSeg[n]

                        AASeqSeg = SeqName + AArt + endLabel
                        ConSegAA = ConName + ConSegAA
                        if ConAdd == True:
                            alignmentText += '\n' + ConSegAA + '\n'

                            ConAdd = False
                        alignmentText += AASeqSeg + '\n'

            i += 60
            ConAdd = True
            alignmentText += '\n'




        Style = 'aligned'

        self.ShowVGenesTextEdit(alignmentText, Style)


        QApplication.restoreOverrideCursor()

        # for item in Aligned:


        print('done')

    @pyqtSlot()
    def on_pushButtonCloneAlignTXT_clicked(self):
        # fetch sequence names of this clone
        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        if n_member == 0:
            Msg = 'Please select at lease one clone!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())

        WhereState = 'SeqName IN ("' + '","'.join(member_names) + '")'

        SQLStatement = 'SELECT SeqName,Sequence,GermlineSequence FROM vgenesDB WHERE ' + WhereState
        DataIsTMP = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        DataIs = [(ele[0], ele[1]) for ele in DataIsTMP]

        if len(DataIs) == 1:
            self.ui.actionGL.setChecked(True)
            GLMsg = True
            GermSeq = DataIsTMP[0][2].upper()
            Germline = ('Germline', GermSeq)
            DataIs.append(Germline)
        else:
            if self.ui.actionGL.isChecked() == True:
                GLMsg = True
                GermSeq = DataIsTMP[0][2].upper()
                Germline = ('Germline', GermSeq)
                DataIs.append(Germline)

        # run alignment
        self.AlignSequences(DataIs)

    def getTreeSelected(self):
        if self.ui.treeWidget.isEnabled():
            root = self.ui.treeWidget.invisibleRootItem()
            ListSelected = []
            for item in self.ui.treeWidget.selectedItems():
                ListSelected.append(str(item.text(0)))
                # (item.parent() or root).removeChild(item)

            return ListSelected

    @pyqtSlot()
    def TreeSelectChanged(self):
        if self.ui.treeWidget.isEnabled():
            global from_table

            value = self.ui.treeWidget.selectedItems()

            name = ''
            for item in value:
                name = item.text(0)
            try:
                MatchingIndex = NameIndex[name]
                self.DialScroll(MatchingIndex, False)
            except:
                print('wrong')
                return
            SelectedItems = self.getTreeSelected()
            NumSelected = len(SelectedItems)
            if NumSelected > 1:
                NewHead = str(NumSelected) + ' items selected'
                self.ui.label_Name.setText(NewHead)

    def MatchingValue(self, IndexIs):
        try:
            return list(NameIndex.keys())[list(NameIndex.values()).index(int(IndexIs))]
        except:
            return 'None'

    def TreeviewOptions(self):
        global DontFindTwice
        if DontFindTwice == True:
            return
        try:
            sender = self.sender()
            if sender.id == 'TreeOp1':
                Option1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
                self.ui.cboTreeOp1.setToolTip('Press update tree to implement changes')
                if Option1 == 'None':
                    DontFindTwice = True
                    self.ui.cboTreeOp2.setCurrentText('None')
                    self.ui.cboTreeOp3.setCurrentText('None')
                    DontFindTwice = False
            elif sender.id == 'TreeOp2':
                Option1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
                self.ui.cboTreeOp1.setToolTip('Press update tree to implement changes')
                if Option1 == 'None':
                    DontFindTwice = True
                    self.ui.cboTreeOp2.setCurrentText('None')
                    self.ui.cboTreeOp3.setCurrentText('None')
                    DontFindTwice = False
                    Msg = 'Upper level grouping factor is empty!\nPlease determine grouping factors from the upper level!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return
                self.ui.cboTreeOp2.setToolTip('Press update tree to implement changes')
                Option2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
                if Option2 == 'None':
                    DontFindTwice = True
                    self.ui.cboTreeOp3.setCurrentText('None')
                    DontFindTwice = False
            else:
                Option2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
                self.ui.cboTreeOp2.setToolTip('Press update tree to implement changes')
                Option3 = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
                if Option3 == 'None':
                    pass
                elif Option2 == 'None':
                    DontFindTwice = True
                    self.ui.cboTreeOp3.setCurrentText('None')
                    DontFindTwice = False
                    Msg = 'Upper level grouping factor is empty!\nPlease determine grouping factors from the upper level!'
                    QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    return
                self.ui.cboTreeOp3.setToolTip('Press update tree to implement changes')
        except:
            pass

    def ApplicationStarted(self):
        StartUpOptions = StartUpDialogue()
        StartUpOptions.exec_()

    @pyqtSlot()
    def StartUpClicked(self, backup):
        self.show()

        # adjust the window size according to current resolution
        self.desktop = QApplication.desktop()
        self.screenRect = self.desktop.screenGeometry()
        self.height = self.screenRect.height()
        self.width = self.screenRect.width()
        if self.width > 1800:
            self.resize(1680, 1200)
        else:
            self.resize(1440, 800)


        global DBFilename
        if StartUpAnswer == 'New':
            self.on_action_New_triggered()

        elif StartUpAnswer == 'Open':
            self.on_action_Open_triggered()

        elif StartUpAnswer[0:6] == 'Recent':

            DBFilename = StartUpAnswer[6:]
            # Vgenes.on_action_Open_triggered()
            # self.LoadDB(DBFilename)

            # Vgenes.InputSeqQuery(self)
            if os.path.isfile(DBFilename):
                self.LoadDB(DBFilename)
            else:
                VGenesSQL.creatnewDB(DBFilename)
            self.UpdateRecentList(DBFilename, True)
        if backup == True:
            print('Save backup!')
            self.SaveBackup()

    @pyqtSlot()
    def on_action_New_triggered(self):  # how to activate menu and toolbar actions!!!

        options = QtWidgets.QFileDialog.Options()
        global DBFilename
        # options |= QtWidgets.QFileDialog.DontUseNativeDialog
        DBFilename, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                              "New Database",
                                                              "New database",
                                                              "VGenes database Files (*.vdb);;All Files (*)",
                                                              options=options)

        a = DBFilename
        if DBFilename != None and DBFilename != '':
            (dirname, filename) = os.path.split(DBFilename)
            (shortname, extension) = os.path.splitext(filename)

            if extension != '.vdb':
                DBFilename = shortname + '.vdb'

            VGenesSQL.creatnewDB(DBFilename)

            self.UpdateRecentList(DBFilename, True)
            question = 'Would you like to enter sequences into your new database?'
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)
            if answer == 'Yes':
                self.ImportOptions.show()

            if os.path.isfile(DBFilename):
                self.LoadDB(DBFilename)
        else:
            pass
            #self.hide()
            #self.ApplicationStarted()
            # self.EditableSqlModel.refresh()

    def UpdateRecentList(self, DBFilename, AddOne):
        # todo need to make this filename fall in VGenes directory upon deployment
        # todo may need to switch this to configparser which is python modle to save ini files
        # todo change to app folder
        try:
            filename = os.path.join(working_prefix, 'Conf', 'RecentPaths.vtx')
            with open(filename, 'r') as currentfile:
                vv = currentfile

        except:
            filename = 'RecentPaths.vtx'

        newfile = ''
        linemove = 0

        if AddOne == True:
            exists = False
            i = 0
            if os.path.isfile(DBFilename):
                with open(filename, 'r') as currentfile:
                    for line in currentfile:

                        line = line.replace('\n', '')
                        if line == DBFilename:
                            exists = True
                            linemove = i

                        i += 1
                i = 0

                if exists == False:
                    DBFilename += '\n'
                    newfile = DBFilename
                    with open(filename, 'r') as currentfile:
                        for line in currentfile:
                            if i < 14:
                                newfile += line
                            i += 1

                elif exists == True:  # then move that file name to the top of the recents list, but no more then 15
                    DBFilename += '\n'
                    newfile = DBFilename

                    with open(filename, 'r') as currentfile:
                        for line in currentfile:
                            if i != linemove and i < 14:
                                newfile += line
                            i += 1
                with open(filename, 'w') as currentfile:
                    currentfile.write(newfile)
        elif AddOne == False:
            exists = False

            with open(filename, 'r') as currentfile:
                for line in currentfile:

                    # line = line.replace('\n', '')
                    if line == DBFilename:
                        exists = True

            if exists == True:  # then move that file name to the top of the recents list, but no more then 15
                # DBFilename += '\n'
                newfile = ''

                with open(filename, 'r') as currentfile:
                    for line in currentfile:
                        if DBFilename != line:
                            newfile += line

            with open(filename, 'w') as currentfile:
                currentfile.write(newfile)

    def DecoratePeptide(self):
        Decoration = self.ui.cboDecorate.currentText()

        AASeq = self.ui.txtAASeq.toPlainText()
        GDNAseq = data[80].upper()

        if data[98] == 'Insertion' or data[98] == 'Both':
            mutate = data[97]
            mutations = mutate.split(',')
            for item in mutations:
                if item[:9] == 'Insertion':
                    Ievent = item
                    Iparts = Ievent.split('-')
                    AddAt = int(Iparts[1])
                    SeqToAdd = Iparts[2]
                    GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

        GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, 0)

        if len(AASeq) > len(GAASeq):
            LenTo = len(GAASeq)
            AASeq = AASeq[:LenTo]
        else:
            LenTo = len(AASeq)

        for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
            if AASeq[i] != GAASeq[i]:
                if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                    AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]
            elif AASeq[i] == GAASeq[i]:
                if AASeq[i] == '.' or AASeq[i] == '~':
                    AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                    GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

        AASeq = AASeq.replace('~', '').replace('.', '')

        ColorMap = []
        WindowSize = self.ui.spinBox.value()
        cursor = self.ui.txtAASeq.textCursor()
        if Decoration == 'None':

            # Setup the desired format for matches
            format = QTextCharFormat()
            format.setForeground(QBrush(QColor("black")))
            format.setBackground(QBrush(QColor("white")))
            format.setFontUnderline(False)
            cursor.setPosition(0)
            cursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
            cursor.mergeCharFormat(format)

            cursor.setPosition(0)

            self.ui.lblScale.setEnabled(False)
            self.ui.lblScaleH.setEnabled(False)
            self.ui.lblScaleL.setEnabled(False)

        elif Decoration == 'Hydrophobicity':
            self.ui.lblScale.setEnabled(True)
            self.ui.lblScaleH.setEnabled(True)
            self.ui.lblScaleL.setEnabled(True)
            if WindowSize == 0: self.ui.spinBox.setValue(5)
            WindowSize = self.ui.spinBox.value()
            CurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, False)
            if len(ColorMap) != len(AASeq) - WindowSize + 1:
                sys.stderr.write('Sequence has errors and could not be decorated')
                return
            Scale = (-4.5, 4.5)  # based on tests paramators
            self.DecorateText(ColorMap, Scale, CurPos, cursor)


        elif Decoration == 'Hydrophilicity':
            self.ui.lblScale.setEnabled(True)
            self.ui.lblScaleH.setEnabled(True)
            self.ui.lblScaleL.setEnabled(True)
            if WindowSize == 0: self.ui.spinBox.setValue(5)
            WindowSize = self.ui.spinBox.value()
            CurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, False)
            if len(ColorMap) != len(AASeq) - WindowSize + 1:
                sys.stderr.write('Sequence has errors and could not be decorated')
                return
            Scale = (-3.4, 3.0)  # based on tests paramators
            self.DecorateText(ColorMap, Scale, CurPos, cursor)

        elif Decoration == 'Flexibility':
            self.ui.lblScale.setEnabled(True)
            self.ui.lblScaleH.setEnabled(True)
            self.ui.lblScaleL.setEnabled(True)
            if WindowSize == 0: self.ui.spinBox.setValue(9)
            WindowSize = 9
            CurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, False)
            if len(ColorMap) != len(AASeq) - WindowSize + 1:
                sys.stderr.write('Sequence has errors and could not be decorated')
                return
            Scale = (0.904, 1.102)  # based on tests paramators
            self.DecorateText(ColorMap, Scale, CurPos, cursor)

        elif Decoration == 'Surface':
            self.ui.lblScale.setEnabled(True)
            self.ui.lblScaleH.setEnabled(True)
            self.ui.lblScaleL.setEnabled(True)
            if WindowSize == 0: self.ui.spinBox.setValue(5)
            WindowSize = self.ui.spinBox.value()
            CurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, False)
            if len(ColorMap) != len(AASeq) - WindowSize + 1:
                sys.stderr.write('Sequence has errors and could not be decorated')
                return
            Scale = (0.394, 1.545)  # based on tests paramators
            self.DecorateText(ColorMap, Scale, CurPos, cursor)

        elif Decoration == 'Isoelectric Point (pI)':
            self.ui.lblScale.setEnabled(True)
            self.ui.lblScaleH.setEnabled(True)
            self.ui.lblScaleL.setEnabled(True)
            if WindowSize < 5: self.ui.spinBox.setValue(5)
            WindowSize = self.ui.spinBox.value()
            CurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, False)
            if ColorMap == 0: return
            if len(ColorMap) != len(AASeq) - WindowSize + 1:
                sys.stderr.write('Sequence has errors and could not be decorated')
                return
            Scale = (0, 14)  # based on tests paramators
            self.DecorateText(ColorMap, Scale, CurPos, cursor)

        elif Decoration == 'Instability':
            self.ui.lblScale.setEnabled(True)
            self.ui.lblScaleH.setEnabled(True)
            self.ui.lblScaleL.setEnabled(True)
            if WindowSize < 8: self.ui.spinBox.setValue(8)
            WindowSize = self.ui.spinBox.value()
            CurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, False)
            if len(ColorMap) != len(AASeq) - WindowSize + 1:
                sys.stderr.write('Sequence has errors and could not be decorated')
                return

            # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
            Highest = max(ColorMap)
            Lowest = min(ColorMap)
            maxi = ((40 - Lowest) / 8) * 11
            Scale = (Lowest, maxi)  # based on tests paramators
            self.DecorateText(ColorMap, Scale, CurPos, cursor)
            # Analysis = VGenesSeq.OtherParam(AASeq, Param, WindowSize)

    def DecorateText(self, ColorMap, Scale, CurPos, cursor):
        # o in colormap is black text on white background
        #  cursor is cursor from textbox being decorated, i.e.:
        # cursor = self.ui.txtAASeq.textCursor()   when from sequence panel
        #  need provide cursor strat as well...so starts color mid window:
        #          CurPos = (WindowSize // 2)      when from sequence panel
        #  CurPos and cursor will allow me to run through entire text of
        # any window with different paramaters and colormaps

        maxi = Scale[1]
        mini = Scale[0]
        increment = (maxi - mini) / 11

        # Setup the desired format for matches
        format = QTextCharFormat()

        for valueIs in ColorMap:
            if valueIs == 0:
                format.setBackground(QBrush(QColor("white")))
                format.setForeground(QBrush(QColor("black")))
            elif valueIs > mini + (increment * 10):
                format.setBackground(QBrush(QColor("darkred")))
                format.setForeground(QBrush(QColor("white")))
            elif valueIs > mini + (increment * 9) and valueIs <= (mini + (increment * 10)):
                format.setBackground(QBrush(QColor("darkMagenta")))
                format.setForeground(QBrush(QColor("white")))
            elif valueIs > mini + (increment * 8) and valueIs <= (mini + (increment * 9)):
                format.setBackground(QBrush(QColor("red")))
                format.setForeground(QBrush(QColor("black")))
            elif valueIs > mini + (increment * 7) and valueIs <= (mini + (increment * 8)):
                format.setBackground(QBrush(QColor("Magenta")))
                format.setForeground(QBrush(QColor("black")))
            elif valueIs > mini + (increment * 6) and valueIs <= (mini + (increment * 7)):
                format.setBackground(QBrush(QColor("yellow")))
                format.setForeground(QBrush(QColor("black")))
            elif valueIs > mini + (increment * 5) and valueIs <= (mini + (increment * 6)):
                format.setBackground(QBrush(QColor("white")))
                format.setForeground(QBrush(QColor("black")))
            elif valueIs > mini + (increment * 4) and valueIs <= (mini + (increment * 5)):
                format.setBackground(QBrush(QColor("green")))
                format.setForeground(QBrush(QColor("white")))
            elif valueIs > mini + (increment * 3) and valueIs <= (mini + (increment * 4)):
                format.setBackground(QBrush(QColor("darkGreen")))
                format.setForeground(QBrush(QColor("lightGray")))
            elif valueIs > mini + (increment * 2) and valueIs <= (mini + (increment * 3)):
                format.setBackground(QBrush(QColor("blue")))
                format.setForeground(QBrush(QColor("white")))
            elif valueIs > mini + (increment) and valueIs <= (mini + (increment * 2)):
                format.setBackground(QBrush(QColor("darkBlue")))
                format.setForeground(QBrush(QColor("white")))
            elif valueIs <= mini + increment:
                format.setBackground(QBrush(QColor("black")))
                format.setForeground(QBrush(QColor("white")))

            cursor.setPosition(CurPos)
            cursor.setPosition(CurPos + 1, QTextCursor.KeepAnchor)
            cursor.mergeCharFormat(format)

            CurPos += 1


            # Move to the next match

    @pyqtSlot(int)
    def on_spinBox_valueChanged(self):
        if self.ui.cboDecorate.currentText() != "None":
            self.DecoratePeptide()

    @pyqtSlot()
    def on_action_actionCopy_triggered(self):
        # shortcut=QKeySequence.Cut,
        # statusTip="Cut the current selection's contents to the clipboard",
        if self.ui.tabWidget.currentIndex() == 2:
            self.ui.txtDNASeq.copy()
        elif self.ui.tabWidget.currentIndex() == 1:
            self.ui.txtSeqAlignment.copy()

    @pyqtSlot()
    def on_action_Open_triggered(self):  # how to activate menu and toolbar actions!!!
        self.GOOpen(True)

    def GOOpen(self, GetName):
        global DBFilename
        if GetName == True:
            DBFilename = ''
            typeOpen = 'db'
            DBFilename = openFile(self, typeOpen)
            if DBFilename == None:
                return

        if DBFilename != None:
            if os.path.isfile(DBFilename):
                self.LoadDB(DBFilename)
            else:
                VGenesSQL.creatnewDB(DBFilename)

            self.UpdateRecentList(DBFilename, True)
            #if GetName == True:
                #self.SaveBackup()
        else:
            self.hide()
            #self.ApplicationStarted()

    @pyqtSlot()
    def on_action_Import_triggered(self):
        #self.ImportOptions = ImportDialogue()
        self.ImportOptions = ImportDataDialogue()
        self.ImportOptions.show()

    @pyqtSlot()
    def on_actionGenerate_from_file_triggered(self):  # how to activate menu and toolbar actions!!!
        fileNames = openFiles(self, 'seq')
        if fileNames != '' and fileNames != None:
            self.ProcessSeqFiles(fileNames)

    def ShowVGenesText(self, filename):

        self.TextEdit.show()
        if filename != '':
            self.TextEdit.loadFile(filename)

    def on_comboBoxSpecies_editTextChanged(self):  # had to connect above as couldn't figure signal
        # species = self.ui.comboBoxSpecies.currentText()
        print('clicked')

    @pyqtSlot(int)
    def on_dial_valueChanged(self, value):  # how to handle dial signals
        FieldCheck = self.FieldChangeCheck()
        if FieldCheck == 'exit':
            return

        val = value  # could also refer directly to control instead of value: self.ui.spinBox.value()
        self.ui.horizontalScrollBar.setValue(self.ui.dial.value())
        # self.ui.txtName.setText("Changed to " + str(val))

    @pyqtSlot(int)
    def on_horizontalScrollBar_valueChanged(self, value):  # how to handle slider and lcdNumber signals
        val = value  # could also refer directly to control instead of value: self.ui.spinBox.value()
        self.ui.dial.setValue(self.ui.horizontalScrollBar.value())
        self.ui.lcdNumber_current.display(val)
        self.DialScroll(value, True)

    @pyqtSlot(int)
    def DialScroll(self, value, update):
        global from_table

        records = len(NameIndex)
        if value < records and value > -1:
            self.updateF(value)
            if update:
                if from_table:
                    return
                else:
                    NameIs = self.MatchingValue(value)
                    self.select_tree_by_name(NameIs)
                    self.tree_to_table_selection()

    def findTableViewRecord(self, FieldName):

        # # todo way to find records in TableView but not connected
        model = self.ui.tableView.model()
        proxy = QSortFilterProxyModel
        proxy.setSourceModel(model)
        proxy.setFilterKeyColumn(0)
        proxy.setFilterFixedString(FieldName)
        MatchingIndex = proxy.mapToSource(proxy.index(0, 0))  # (QSortFilterProxyModel,0,0))
        # self.ui.tableView.scrollTo(MatchingIndex)
        self.ui.tableView.setCurrentIndex(MatchingIndex)

        # todo old code to update fields after tree clicked using Name Index now

        try:
            self.SeqButton(LastPushed)
        except:
            self.SeqButton('v')
        JustMoved = False

    @pyqtSlot()
    def on_actionMove_Up_triggered(self):  # how to activate menu and toolbar actions!!!
        self.MoveRecord('up')

    @pyqtSlot()
    def on_actionIncrease_font_size_triggered(self):

        if self.ui.tabWidget.currentIndex() == 3:
            val = int(self.ui.spnAlignFont.value())
            val += 1
            self.ui.spnAlignFont.setValue(val)
        elif self.ui.tabWidget.currentIndex() == 2:
            FontIs = self.ui.txtDNASeq.currentFont()
            font = QFont(FontIs)

            FontSize = int(font.pointSize())
            if FontSize < 36:
                FontSize += 1
            font.setPointSize(FontSize)
            font.setFamily('Lucida Grande')

            self.ui.txtDNASeq.setFont(font)
            self.ui.txtAASeq.setFont(font)

        elif self.ui.tabWidget.currentIndex() == 1:
            pass
            #FontIs = self.ui.tableView.font()
            #font = QFont(FontIs)

            #FontSize = int(font.pointSize())
            #if FontSize > 7:
            #	FontSize += 1
            #font.setPointSize(FontSize)
            #font.setFamily('Lucida Grande')

            #self.ui.tableView.setFont(font)
            # self.ui.tableView.resizeColumnsToContents()
        elif self.ui.tabWidget.currentIndex() == 4:
            pass
            FontIs = self.ui.txtProtein.currentFont()
            FontSize = int(FontIs.pointSize())
            if FontSize < 36:
                FontSize += 1
            FontIs.setPointSize(FontSize)
            FontIs.setFamily('Courier New')
            self.ui.txtProtein.setFont(FontIs)
        else:
            pass

    @pyqtSlot()
    def on_actionDecrease_font_size_triggered(self):

        if self.ui.tabWidget.currentIndex() == 3:
            val = int(self.ui.spnAlignFont.value())
            val -= 1
            self.ui.spnAlignFont.setValue(val)
        elif self.ui.tabWidget.currentIndex() == 2:
            FontIs = self.ui.txtDNASeq.currentFont()
            font = QFont(FontIs)

            FontSize = int(font.pointSize())
            if FontSize > 7:
                FontSize -= 1
            font.setPointSize(FontSize)
            font.setFamily('Lucida Grande')

            self.ui.txtDNASeq.setFont(font)
            self.ui.txtAASeq.setFont(font)
        elif self.ui.tabWidget.currentIndex() == 1:
            pass
            #FontIs = self.ui.tableView.font()
            #font = QFont(FontIs)

            #FontSize = int(font.pointSize())
            #if FontSize > 7:
            #	FontSize -= 1
            #font.setPointSize(FontSize)
            #font.setFamily('Lucida Grande')

            #self.ui.tableView.setFont(font)

            # self.ui.tableView.resizeColumnsToContents()
        elif self.ui.tabWidget.currentIndex() == 4:
            pass
            FontIs = self.ui.txtProtein.currentFont()
            FontSize = int(FontIs.pointSize())
            if FontSize > 7:
                FontSize -= 1
            FontIs.setPointSize(FontSize)
            FontIs.setFamily('Courier New')
            self.ui.txtProtein.setFont(FontIs)

    @pyqtSlot()
    def on_pushButtonSHM_saveFig_clicked(self):
        print('download')
        js_cmd = 'text=document.getElementsByTagName("svg")[0].parentNode.innerHTML;$("#download").click();'
        self.ui.HTMLviewSHM.page().runJavaScript(js_cmd)

    @pyqtSlot()
    def on_pushButtonSHM_draw_clicked(self):
        # fetch raw data
        raw_data = copy.copy(self.SHM_STAT_res)

        # fetch config
        if self.ui.radioButtonSHM_all.isChecked():
            mutation_type = 'all'
        elif self.ui.radioButtonSHM_NonS.isChecked():
            mutation_type = 'nons'
        else:
            mutation_type = 's'

        region = ''
        if self.ui.checkBoxSHM_Vregion.isChecked():
            region = 'all'
        else:
            if self.ui.checkBoxSHM_FR1.isChecked():
                region += ',FR1'
            if self.ui.checkBoxSHM_CDR1.isChecked():
                region += ',CDR1'
            if self.ui.checkBoxSHM_FR2.isChecked():
                region += ',FR2'
            if self.ui.checkBoxSHM_CDR2.isChecked():
                region += ',CDR2'
            if self.ui.checkBoxSHM_FR3.isChecked():
                region += ',FR3'
            region = re.sub(r'^,','',region)

        if self.ui.listWidgetSHM_groups.currentItem() == None:
            group = ''
        else:
            group = self.ui.listWidgetSHM_groups.currentItem().text()
            group = re.sub(r'\(.+', "", group)
        if group == '':
            pass
        else:
            names = [record[0] for record in raw_data]
            WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(names) + '")'
            SQLStatement = 'SELECT SeqName,' + group + ' FROM vgenesDB' + WHEREStatement

            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            groups = [i[1] for i in DataIn]
            result = Counter(groups)
            group_labels = list(result.keys())
            if len(group_labels) > 10:
                QueryIS = 'Your selected group factor has more than 10 levels, are you sure?'
                buttons = 'YN'
                answer = questionMessage(self, QueryIS, buttons)
                if answer == 'No':
                    return
            keys = [i[0] for i in DataIn]
            values = [i[1] for i in DataIn]
            group_dictionary = dict(zip(keys, values))

        # generate data
        format_data = []
        for line in raw_data:
            if mutation_type == 'all':
                if region == 'all':
                    data_count = sum(line[1:11])
                    data_group1 = 'V-region combined'
                    if group == '':
                        data_group2 = 'All'
                    else:
                        data_group2 = str(group_dictionary[line[0]])
                        if data_group2 == '':
                            data_group2 = 'Empty value'
                    ele = [data_count, data_group1, data_group2]
                    format_data.append(ele)
                else:
                    regions = region.split(',')
                    for region_name in regions:
                        if region_name == 'FR1':
                            data_count = line[1] + line[6]
                            data_group1 = 'FR1'
                        elif region_name == 'CDR1':
                            data_count = line[2] + line[7]
                            data_group1 = 'CDR1'
                        elif region_name == 'FR2':
                            data_count = line[3] + line[8]
                            data_group1 = 'FR2'
                        elif region_name == 'CDR2':
                            data_count = line[4] + line[9]
                            data_group1 = 'CDR2'
                        elif region_name == 'FR3':
                            data_count = line[5] + line[10]
                            data_group1 = 'FR3'
                        if group == '':
                            data_group2 = 'All'
                        else:
                            data_group2 = str(group_dictionary[line[0]])
                            if data_group2 == '':
                                data_group2 = 'Empty value'
                        ele = [data_count, data_group1, data_group2]
                        format_data.append(ele)
            elif mutation_type == 'nons':
                if region == 'all':
                    data_count = sum(line[6:11])
                    data_group1 = 'V-region combined'
                    if group == '':
                        data_group2 = 'All'
                    else:
                        data_group2 = str(group_dictionary[line[0]])
                        if data_group2 == '':
                            data_group2 = 'Empty value'
                    ele = [data_count, data_group1, data_group2]
                    format_data.append(ele)
                else:
                    regions = region.split(',')
                    for region_name in regions:
                        if region_name == 'FR1':
                            data_count = line[6]
                            data_group1 = 'FR1'
                        elif region_name == 'CDR1':
                            data_count = line[7]
                            data_group1 = 'CDR1'
                        elif region_name == 'FR2':
                            data_count = line[8]
                            data_group1 = 'FR2'
                        elif region_name == 'CDR2':
                            data_count = line[9]
                            data_group1 = 'CDR2'
                        elif region_name == 'FR3':
                            data_count = line[10]
                            data_group1 = 'FR3'
                        if group == '':
                            data_group2 = 'All'
                        else:
                            data_group2 = str(group_dictionary[line[0]])
                            if data_group2 == '':
                                data_group2 = 'Empty value'
                        ele = [data_count, data_group1, data_group2]
                        format_data.append(ele)
            else:
                if region == 'all':
                    data_count = sum(line[1:6])
                    data_group1 = 'V-region combined'
                    if group == '':
                        data_group2 = 'All'
                    else:
                        data_group2 = str(group_dictionary[line[0]])
                        if data_group2 == '':
                            data_group2 = 'Empty value'
                    ele = [data_count, data_group1, data_group2]
                    format_data.append(ele)
                else:
                    regions = region.split(',')
                    for region_name in regions:
                        if region_name == 'FR1':
                            data_count = line[1]
                            data_group1 = 'FR1'
                        elif region_name == 'CDR1':
                            data_count = line[2]
                            data_group1 = 'CDR1'
                        elif region_name == 'FR2':
                            data_count = line[3]
                            data_group1 = 'FR2'
                        elif region_name == 'CDR2':
                            data_count = line[4]
                            data_group1 = 'CDR2'
                        elif region_name == 'FR3':
                            data_count = line[5]
                            data_group1 = 'FR3'
                        if group == '':
                            data_group2 = 'All'
                        else:
                            data_group2 = str(group_dictionary[line[0]])
                            if data_group2 == '':
                                data_group2 = 'Empty value'
                        ele = [data_count, data_group1, data_group2]
                        format_data.append(ele)

        # make pycharts
        box_data = [i[0] for i in format_data]
        if min(box_data) >= 0:
            null_data = [0, 0, 0, 0, 0]
        else:
            null_data = [min(box_data), min(box_data), min(box_data), min(box_data), min(box_data)]

        label_data = []
        g2_label = []
        for element in format_data:
            label_data.append(element[1])
            g2_label.append(element[2])

        result = Counter(label_data)
        labels = list(result.keys())
        labels.sort()

        g2_dict = {}
        i = 0
        for ele in g2_label:
            if g2_dict.__contains__(ele):
                g2_dict[ele] = g2_dict[ele] + [i]
            else:
                g2_dict[ele] = [i]
            i += 1
        g2_dict_keys = list(g2_dict.keys())

        my_bar = Boxplot(init_opts=opts.InitOpts(width="380px", height="380px", renderer='svg')) \
            .add_xaxis(labels) \
            .set_global_opts(
            title_opts=opts.TitleOpts(title=""),
            legend_opts=opts.LegendOpts(is_show=self.ui.checkBoxSHM_legend.isChecked()),
            xaxis_opts=opts.AxisOpts(
                name='V gene region',
                name_location='center',
                name_gap=30,
            ),
            yaxis_opts=opts.AxisOpts(
                name='SHM count',
                name_location='center',
                name_gap=30,
            ),
            # toolbox_opts = opts.ToolboxOpts()
        )

        # for each group in field 2
        for group in sorted(g2_dict_keys):
            cur_box_data = []
            cur_label_data = []
            for i in g2_dict[group]:
                cur_box_data.append(box_data[i])
                cur_label_data.append(label_data[i])

            sub_dict = {}
            i = 0
            for ele in cur_label_data:
                if sub_dict.__contains__(ele):
                    sub_dict[ele] = sub_dict[ele] + [i]
                else:
                    sub_dict[ele] = [i]
                i += 1

            data_v1 = []
            for ele in labels:
                if sub_dict.__contains__(ele):
                    cur_data = []
                    for i in sub_dict[ele]:
                        cur_data.append(cur_box_data[i])
                    data_v1.append(cur_data)
                else:
                    data_v1.append(null_data)

            #my_bar.add_yaxis(group, Boxplot.prepare_data(data_v1),itemstyle_opts=opts.ItemStyleOpts(color='green'))
            my_bar.add_yaxis(group, Boxplot.prepare_data(data_v1))

        my_pyecharts = (
            my_bar
        )

        # load figure
        html_path = os.path.join(temp_folder, 'shm_figure.html')
        my_pyecharts.render(path=html_path)
        # adjust the window size seting
        file_handle = open(html_path, 'r')
        lines = file_handle.readlines()
        file_handle.close()
        # edit js line
        js_line = '<script type="text/javascript" src="' + \
                  os.path.join(js_folder, 'echarts.js') + '"></script>' + \
                  '<script src="' + os.path.join(js_folder, 'jquery.js') + '"></script>' + \
                  '<script src="qrc:///qtwebchannel/qwebchannel.js"></script>'
        lines[5] = js_line
        # edit style line
        style_line = lines[9]
        style_pos = style_line.find('style')
        style_line = style_line[
                     0:style_pos] + 'style="position: fixed; top: 0px; left: 5%;width:90%; height:' + str(
            self.ui.HTMLviewSHM.h - 20) + 'px;"></div>'
        lines[9] = style_line
        insert_js = '<script type="text/javascript">$(document).ready(function() {' \
                    'new QWebChannel(qt.webChannelTransport, function(channel) {' \
                    'var my_object = channel.objects.connection;$("#download").click(function(){' \
                    'my_object.download(text);});$("#update").click(function(){' \
                    'my_object.updateSelection(text);});});});</script>'
        insert_btn = '<input id="download" type="button" value="" style="display:none;"/>' \
                     '<input id="update" type="button" value="" style="display:none;"/>'
        lines = lines[:6] + [insert_js] + lines[6:9] + [insert_btn] + lines[9:]

        content = '\n'.join(lines)
        file_handle = open(html_path, 'w')
        file_handle.write(content)
        file_handle.close()
        # show local HTML
        #self.ui.HTMLviewSHM.load(QUrl('file://' + html_path))
        url = QUrl.fromLocalFile(str(html_path))
        self.ui.HTMLviewSHM.load(url)
        self.ui.HTMLviewSHM.show()
        self.ui.HTMLviewSHM.html = "loaded"
        #self.ui.HTMLview.resizeSignal.connect(self.resizeHTML)

        # build qweb channel
        channel = QWebChannel(self.ui.HTMLviewSHM.page())
        my_object = MyObjectCls(self.ui.HTMLviewSHM)
        channel.registerObject('connection', my_object)
        self.ui.HTMLviewSHM.page().setWebChannel(channel)
        my_object.downloadFigSignal.connect(self.downloadSVG)

        # enable save figure function
        self.ui.pushButtonSHM_saveFig.setEnabled(True)


    @pyqtSlot()
    def on_pushButtonSHM_table_clicked(self):
        self.mySHMtableDialog = SHMtableDialog()

        horizontalHeader = ['Seq Name', 'mut_FR1_S', 'mut_CDR1_S', 'mut_FR2_S', 'mut_CDR2_S', 'mut_FR3_S',
                            'mut_FR1_NonS', 'mut_CDR1_NonS', 'mut_FR2_NonS', 'mut_CDR2_NonS', 'mut_FR3_NonS']

        num_row = len(self.SHM_STAT_res)
        num_col = len(horizontalHeader)
        self.mySHMtableDialog.ui.tableWidget.setRowCount(num_row)
        self.mySHMtableDialog.ui.tableWidget.setColumnCount(num_col)
        self.mySHMtableDialog.ui.tableWidget.setHorizontalHeaderLabels(horizontalHeader)
        self.mySHMtableDialog.ui.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.mySHMtableDialog.ui.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.mySHMtableDialog.ui.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)

        for i in range(len(self.SHM_STAT_res)):
            record = self.SHM_STAT_res[i]
            for j in range(len(record)):
                item = QTableWidgetItem(str(record[j]))
                self.mySHMtableDialog.ui.tableWidget.setItem(i, j, item)

        # disable edit
        self.mySHMtableDialog.ui.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # resize table
        self.mySHMtableDialog.ui.tableWidget.resizeColumnsToContents()
        self.mySHMtableDialog.ui.tableWidget.resizeRowsToContents()

        # set signal
        self.mySHMtableDialog.ui.tableWidget.currentCellChanged.connect(self.mySHMtableDialog.updateSelection)
        self.mySHMtableDialog.SHMUpdateSelectionSignal.connect(self.select_tree_by_name)

        self.mySHMtableDialog.show()

    @pyqtSlot()
    def on_pushButtonSHManalysis_clicked(self):
        ErrMes = ''
        if len(self.CheckedRecords) == 0:
            Msg = 'Please check some records first!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        # get all checked records
        WHEREStatement = 'WHERE SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'
        SQLStatement = "SELECT SeqName,SeqAlignment FROM vgenesDB " + WHEREStatement
        #print(SQLStatement)
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        # SHM STAT
        SHM_STAT_res = []
        for record in DataIn:
            try:
                detail_shm_s, detail_shm_nons = MutationalAnalysis(record[1])
                stat_s = self.SHM_STAT(detail_shm_s)
                stat_nons = self.SHM_STAT(detail_shm_nons)
                stat = [record[0]] + stat_s + stat_nons
                SHM_STAT_res.append(stat)
            except:
                ErrMes += record[0] + "\n"

        self.SHM_STAT_res = SHM_STAT_res
        # prepare UI and notice user
        self.ui.pushButtonSHM_draw.setEnabled(True)
        self.ui.pushButtonSHM_table.setEnabled(True)

        fields_name = [''] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.ui.listWidgetSHM_groups.clear()
        self.ui.listWidgetSHM_groups.addItems(fields_name)

        if ErrMes != '':
            Style = 'standard-large'
            ErrMes = 'SHM analysis finished!\n\n Found errors in the following sequences (records have been ignored): \n' + ErrMes
            self.ShowVGenesTextEdit(ErrMes, Style)
        else:
            Msg = 'SHM analysis finished!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_pushButtonAID_clicked(self):
        ErrMes = ''
        if len(self.CheckedRecords) == 0:
            Msg = 'Please check some records first!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        # get all checked records
        WHEREStatement = 'WHERE SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'

        SQLStatement = "SELECT SeqName,Sequence FROM vgenesDB " + WHEREStatement
        # print(SQLStatement)
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        # SHM STAT
        SHM_STAT_res = []
        for record in DataIn:
            mutman = MutMap(record[1])
            a = 1

    def SHM_STAT(self, input):
        # accept input from MutationalAnalysis function
        my_list = [u[7] for u in input]

        FR1_MUT_count = my_list.count('FR1')
        FR2_MUT_count = my_list.count('FR2')
        FR3_MUT_count = my_list.count('FR3')
        CDR1_MUT_count = my_list.count('CDR1')
        CDR2_MUT_count = my_list.count('CDR2')

        res_stat = [FR1_MUT_count, CDR1_MUT_count, FR2_MUT_count, CDR2_MUT_count, FR3_MUT_count]
        return res_stat

    def on_spnAlignFont_valueChanged(self, value):
        self.AlignFont()

    def AlignFont(self):
        FontSize = int(self.ui.spnAlignFont.text())
        font = QFont()
        font.setFamily("Courier New")
        font.setPointSize(FontSize)

        self.ui.txtSeqAlignment.setFont(font)

    def on_spinBoxProteinFont_valueChanged(self, value):
        font = QFont()
        font.setFamily("Courier New")
        font.setPointSize(int(value))
        self.ui.txtProtein.setFont(font)
        print('change font size')

    @pyqtSlot()
    def on_actionMove_Down_triggered(self):  # how to activate menu and toolbar actions!!!
        self.MoveRecord('down')

    @pyqtSlot()
    def on_actionTop_triggered(self):  # how to activate menu and toolbar actions!!!
        self.MoveRecord('top')

    @pyqtSlot()
    def on_actionBottom_triggered(self):  # how to activate menu and toolbar actions!!!
        self.MoveRecord('bottom')

    def TransLateFieldtoReal(self, FieldName, ToField):
        i = 0
        if ToField == True:
            for field in RealNameList:
                if FieldName == field:
                    return (FieldList[i])
                i += 1
        elif ToField == False:
            for field in FieldList:
                if FieldName == field:
                    return (RealNameList[i])
                i += 1

    def FieldChangeCheck(self):

        if FieldChanged == True:
            # msg = 'Changes were made to this record, save them (if no the changes will be lost)?'
            # buttons = 'YN'
            # answer = questionMessage(self, msg, buttons)
            answer = 'No'
            if answer == 'Yes':
                self.on_action_Save_triggered()
                return "exit"
            else:
                FieldsChanged.clear

    def MoveRecord(self, direction):
        if self.ui.treeWidget.isEnabled():
            FieldCheck = self.FieldChangeCheck()
            if FieldCheck == 'exit':
                return

            Selected = self.ui.treeWidget.selectedItems()
            Selected = Selected[-1]
            name = Selected.text(0)
            currentRow = NameIndex[name]

            records = len(NameIndex)

            if direction == 'up':
                if currentRow > 0:
                    currentRow -= 1

            elif direction == 'down':
                if currentRow < records:
                    currentRow += 1

                else:
                    currentRow = records
            elif direction == 'top':
                currentRow = 0

            elif direction == 'bottom':
                currentRow = records - 1
            global JustMoved
            JustMoved = True

            if currentRow == -1:
                currentRow = 0

            name = list(NameIndex.keys())[list(NameIndex.values()).index(int(currentRow))]
            found = self.ui.treeWidget.findItems(name, Qt.MatchRecursive, 0)
            if len(found) > 0:
                found = found[0]
                self.ui.treeWidget.setCurrentItem(found)
            self.tree_to_table_selection()
            self.ui.radioButtonSeqView.setChecked(True)

            try:
                self.SeqButton(LastPushed)
            except:
                self.SeqButton('v')
            JustMoved = False

    def createView(self, model):
        # def createView(title, model):
        global views
        views = []
        view = self.ui.tableView
        # self.ui.tableView.keyPressEvent()
        views.append(view)
        view.setModel(model)

    def LoadDB(self, inputDBFilename):
        time_start = time.time()
        global DBFilename
        global FieldList
        global FieldCommentList
        global FieldTypeList
        global RealNameList

        if not self.createConnection(inputDBFilename):
            sys.exit(1)

        DBFilename = inputDBFilename
        VGenesSQL.checkFieldTable(inputDBFilename)
        SQLSATEMENT = 'SELECT * FROM fieldsname ORDER BY ID'
        Records = VGenesSQL.RunSQL(inputDBFilename, SQLSATEMENT)

        FieldList = [i[1] for i in Records]
        RealNameList = [i[2] for i in Records]
        FieldTypeList = [i[3] for i in Records]
        FieldCommentList = [i[4] for i in Records]

        a = FieldList
        b = RealNameList
        c = FieldTypeList
        d = FieldCommentList
        time_end = time.time()
        print('Load DB, step1 time cost: ', time_end - time_start, 's')
        time_start = time.time()
        self.OnOpen()
        time_end = time.time()
        print('Load DB, step2 time cost: ', time_end - time_start, 's')
        titletext = 'VGenes - ' + inputDBFilename
        self.setWindowTitle(titletext)

        #self.load_table()
        #self.initial_Clone()

    def GenerateNameIndex(self):
        global NameIndex

        model = self.ui.tableView.model()
        index = model.index(0, 0)
        self.ui.tableView.setCurrentIndex(index)
        Maxi = model.rowCount()

        for i in range(0, Maxi):
            index = model.index(i, 0)
            NameIs = str(model.data(index))
            NameIndex[NameIs] = i

    def OnOpen(self):
        time_start = time.time()
        global MoveNotChange
        global DontFindTwice
        MoveNotChange = True
        DontFindTwice = True

        self.ui.lcdNumber_current.display(1)

        self.ui.cboFindField.clear()
        self.ui.cboFindField1.clear()
        self.ui.cboTreeOp1.clear()
        self.ui.cboTreeOp2.clear()
        self.ui.cboTreeOp3.clear()

        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.ui.cboFindField.addItems(field_list)
        self.ui.cboFindField1.addItems(field_list)
        self.ui.cboTreeOp1.addItems(field_list)
        self.ui.cboTreeOp2.addItems(field_list)
        self.ui.cboTreeOp3.addItems(field_list)

        index = 2
        self.ui.cboFindField.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')
        self.ui.cboFindField1.setCurrentText(FieldList[index] + '(' + RealNameList[index] + ')')

        self.ui.cboTreeOp1.addItem('None')
        self.ui.cboTreeOp2.addItem('None')
        self.ui.cboTreeOp3.addItem('None')
        self.ui.cboTreeOp1.setCurrentText(FieldList[75] + '(' + RealNameList[75] + ')')
        self.ui.cboTreeOp2.setCurrentText(FieldList[76] + '(' + RealNameList[76] + ')')
        self.ui.cboTreeOp3.setCurrentText(FieldList[77] + '(' + RealNameList[77] + ')')

        MoveNotChange = False
        DontFindTwice = False
        time_end = time.time()
        print('\tOn open, step1 time cost: ', time_end - time_start, 's')
        try:
            SQLFields = ('Project', 'Grouping', 'SubGroup')
            time_start = time.time()
            # if the database is too big
            SQLStatement = 'select count(*) from vgenesdb'
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            NumRows = DataIn[0][0]
            if NumRows > 2000000:
                self.ui.radioButtonEnableTree.setChecked(False)
                self.ui.treeWidget.clear()
                self.ui.treeWidget.setEnabled(False)
                self.ui.groupBox_2.setEnabled(False)
                time_end = time.time()
                print('\tOn open, initializeTreeView time cost: ', time_end - time_start, 's')
                time_start = time.time()
                self.updateF(-2)
                time_end = time.time()
                print('\tOn open, updateF time cost: ', time_end - time_start, 's')
                time_start = time.time()
                time_end = time.time()
                print('\tOn open, findTreeItem time cost: ', time_end - time_start, 's')
            else:
                self.initializeTreeView(SQLFields)
                time_end = time.time()
                print('\tOn open, initializeTreeView time cost: ', time_end - time_start, 's')
                time_start = time.time()
                self.updateF(-2)
                time_end = time.time()
                print('\tOn open, updateF time cost: ', time_end - time_start, 's')
                time_start = time.time()
                self.findTreeItem(data[0])
                time_end = time.time()
                print('\tOn open, findTreeItem time cost: ', time_end - time_start, 's')
        except:
            return

    def createConnection(self, DBFilename):

        db = QSqlDatabase.addDatabase('QSQLITE')
        # db.setDatabaseName(':memory:')
        db.setDatabaseName(DBFilename)
        if not db.open():
            QMessageBox.critical(None, "Cannot open database",
                                 "Unable to establish a database connection.\n",
                                 QMessageBox.Cancel)
            return False

        return True

    def initializeModel(self, model):

        model.setQuery('select * from vgenesdb ORDER BY Project, Grouping, SubGroup, SeqName')
        while model.canFetchMore():
            model.fetchMore()
        NumRows = model.rowCount()

        i = 0
        for item in FieldList:
            model.setHeaderData(i, Qt.Horizontal, item)

        model.setHeaderData(0, Qt.Horizontal, "SeqName")

    def makeFieldName(self, field):
        index = FieldList.index(field)
        cur_field = FieldList[index] + '(' + RealNameList[index] + ')'
        return cur_field

    @pyqtSlot()
    def on_radioButtonGermView_clicked(self):
        germline_nt = data[80].upper()
        self.ui.txtDNASeq.setText(germline_nt)
        AASeq, ErMessage = VGenesSeq.Translator(germline_nt, 0)
        self.ui.txtAASeq.setText(AASeq)
        try:
            self.SeqButton(LastPushed)
        except:
            self.SeqButton('v')

    def on_txtVgene_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtVgene.toPlainText()
        LastSelected = ('V1', valueis)
        field = LastSelected[0]
        #Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'V gene 1', valueis])

    def on_txtDgene_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtDgene.toPlainText()
        LastSelected = ('D1', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'D gene 1', valueis])

    def on_txtName_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtName.toPlainText()
        LastSelected = ('SeqName', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'D gene 1', valueis])

    def on_txtJgene_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtJgene.toPlainText()
        LastSelected = ('J1', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'J gene 1', valueis])

    # todo need to put LastSelected for rest of fields

    def on_txtVLocus_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtVLocus.toPlainText()
        LastSelected = ('VLocus', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'VLocus', valueis])

    def on_txtDLocus_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtDLocus.toPlainText()
        LastSelected = ('DLocus', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'DLocus', valueis])

    def on_txtJLocus_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtJLocus.toPlainText()
        LastSelected = ('JLocus', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'JLocus', valueis])

    def on_textBarcode_selectionChanged(self):
        global LastSelected
        valueis = self.ui.textBarcode.toPlainText()
        LastSelected = ('Blank10', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Barcode', valueis])

    def on_textCluster_selectionChanged(self):
        global LastSelected
        valueis = self.ui.textCluster.toPlainText()
        LastSelected = ('Blank8', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, '10X cluster', valueis])

    def on_textEdit_selectionChanged(self):
        global LastSelected
        valueis = self.ui.textEdit.toPlainText()
        LastSelected = ('Blank9', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Seurat cluster', valueis])

    def on_txtPopulation_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtPopulation.toPlainText()
        LastSelected = ('Blank11', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Population', valueis])

    def on_textMutations_selectionChanged(self):
        global LastSelected
        valueis = self.ui.textMutations.toPlainText()
        LastSelected = ('TotMut', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'TotMut', valueis])

    @pyqtSlot()
    def on_txtProject_textChanged(self):

        valueTo = self.ui.txtProject.toPlainText()
        FieldIS = 'Project'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtProject_2_textChanged(self):

        valueTo = self.ui.txtProject_2.toPlainText()
        FieldIS = 'Project'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtGroup_textChanged(self):

        valueTo = self.ui.txtGroup.toPlainText()
        FieldIS = 'Grouping'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtGroup_2_textChanged(self):

        valueTo = self.ui.txtGroup_2.toPlainText()
        FieldIS = 'Grouping'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtSubGroup_textChanged(self):

        valueTo = self.ui.txtSubGroup.toPlainText()
        FieldIS = 'SubGroup'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtSubGroup_2_textChanged(self):

        valueTo = self.ui.txtSubGroup_2.toPlainText()
        FieldIS = 'SubGroup'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtName_textChanged(self):

        valueTo = self.ui.txtName.toPlainText()
        FieldIS = 'SeqName'
        # self.NameChange(valueTo)
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtName_2_textChanged(self):

        valueTo = self.ui.txtName_2.toPlainText()
        FieldIS = 'SeqName'

        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def NameChange(self, ToName):
        if self.ui.treeWidget.isEnabled():
            item = self.ui.treeWidget.currentItem()
            # global OldName
            OldName = str(item.text(0))
            TreeIndex = NameIndex[OldName]
            del NameIndex[OldName]
            NameIndex[ToName] = TreeIndex

            item.setText(0, ToName)

    @pyqtSlot()
    def on_txtReadingFrame_textChanged(self):

        valueTo = self.ui.txtReadingFrame.toPlainText()
        FieldIS = 'ReadingFrame'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtID_textChanged(self):

        valueTo = self.ui.txtID.toPlainText()
        FieldIS = 'IDEvent'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtStop_textChanged(self):

        valueTo = self.ui.txtStop.toPlainText()
        FieldIS = 'StopCodon'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtProductive_textChanged(self):

        valueTo = self.ui.txtProductive.toPlainText()
        FieldIS = 'productive'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtVgene_textChanged(self):

        valueTo = self.ui.txtVgene.toPlainText()
        FieldIS = 'V1'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtVgeneSeq_textChanged(self):

        valueTo = self.ui.txtVGeneSeq.toPlainText()
        FieldIS = 'V1'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtDgene_textChanged(self):

        valueTo = self.ui.txtDgene.toPlainText()
        FieldIS = 'D1'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtDgeneSeq_textChanged(self):

        valueTo = self.ui.txtDGeneSeq.toPlainText()
        FieldIS = 'D1'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtJgene_textChanged(self):

        valueTo = self.ui.txtJgene.toPlainText()
        FieldIS = 'J1'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtComments_textChanged(self):

        valueTo = self.ui.txtComments.toPlainText()
        FieldIS = 'Comments'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtJgeneSeq_textChanged(self):

        valueTo = self.ui.txtJGeneSeq.toPlainText()
        FieldIS = 'J1'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtVLocus_textChanged(self):

        valueTo = self.ui.txtVLocus.toPlainText()
        FieldIS = 'VLocus'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtDLocus_textChanged(self):

        valueTo = self.ui.txtDLocus.toPlainText()
        FieldIS = 'DLocus'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtJLocus_textChanged(self):

        valueTo = self.ui.txtJLocus.toPlainText()
        FieldIS = 'JLocus'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_textBarcode_textChanged(self):

        valueTo = self.ui.textBarcode.toPlainText()
        FieldIS = 'Blank10'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_textCluster_textChanged(self):

        valueTo = self.ui.textCluster.toPlainText()
        FieldIS = 'Blank8'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtPopulation_textChanged(self):

        valueTo = self.ui.txtPopulation.toPlainText()
        FieldIS = 'Blank11'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_textMutations_textChanged(self):

        valueTo = self.ui.textMutations.toPlainText()
        FieldIS = 'TotMut'
        self.FieldChanger(valueTo, FieldIS)


    @pyqtSlot()
    def on_textEdit_textChanged(self):

        valueTo = self.ui.textEdit.toPlainText()
        FieldIS = 'Blank9'
        self.FieldChanger(valueTo, FieldIS)

    # @pyqtSlot()
    # def on_txtStatus_textChanged(self):
    #
    # 	valueTo = self.ui.txtStatus.toPlainText()
    # 	FieldIS = 'Blank13'
    # 	self.FieldChanger(valueTo, FieldIS)
    #
    # @pyqtSlot()
    # def on_txtLabel_textChanged(self):
    #
    # 	valueTo = self.ui.txtLabel.toPlainText()
    # 	FieldIS = 'Blank12'
    # 	self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtQuality_textChanged(self):

        valueTo = self.ui.txtQuality.toPlainText()
        FieldIS = 'Quality'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtLabel_textChanged(self):

        valueTo = self.ui.txtLabel.toPlainText()
        FieldIS = 'Blank12'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_txtStatus_textChanged(self):

        valueTo = self.ui.txtStatus.toPlainText()
        FieldIS = 'Blank13'
        self.FieldChanger(valueTo, FieldIS)

    # @pyqtSlot()
    def on_sbJend_valueChanged(self):

        valueTo = str(self.ui.sbJend.value())
        FieldIS = 'Jend'
        self.FieldChanger(valueTo, FieldIS)
        Jend = int(valueTo)
        Jbeg = int(data[73])
        VSeq = data[79]
        #JendSeq = VSeq[Jend-10:Jend] # J-end is difficult to determine
        #JendAASeq, ErMessage = VGenesSeq.Translator(JendSeq, 0)
        Jseq = VSeq[Jbeg - 1:Jend - 1]
        Jseq = Jseq[0:len(Jseq) // 3 * 3]
        if len(Jseq) >= 9:
            JendSeq = Jseq[-9:]
            JendAASeq, ErMessage = VGenesSeq.Translator(JendSeq, 0)
            JendDisplay = ' ' + JendAASeq[0] + '   ' + JendAASeq[1] + '   ' + JendAASeq[2] + ' \n' + JendSeq[0:3] + ' ' + JendSeq[3:6] + ' ' + JendSeq[6:9]
        else:
            JendDisplay = "Too short Jend\n Check Ig Alignment!"

        self.ui.txtJend_2.setText(JendDisplay)

    @pyqtSlot()
    def on_txtQuality_2_textChanged(self):

        valueTo = self.ui.txtQuality_2.toPlainText()
        FieldIS = 'Quality'
        self.FieldChanger(valueTo, FieldIS)

    def FieldChanger(self, valueTo, FieldIS):
        global FieldChanged, UpdateSpecific
        if JustMovedIt == False:
            FieldChanged = True
            self.UpdateFChanges(data[119], valueTo, FieldIS)
            if FieldIS == 'SeqName':
                self.NameChange(valueTo)
            if FieldIS == 'Specificity' or FieldIS == 'Subspecificity':
                UpdateSpecific = True

    def UpdateFChanges(self, IDIs, valueTo, FieldIs):
        IsThere = False
        i = 0
        ListItem = ()
        for item in FieldsChanged:
            if item[0] == IDIs and item[2] == FieldIs:
                if item[1] != valueTo:
                    ListItem = (IDIs, valueTo, FieldIs)
                    FieldsChanged[i] = ListItem
                IsThere = True
            i += 1

        if IsThere == False:
            ListItem = (IDIs, valueTo, FieldIs)
            FieldsChanged.append(ListItem)

    def on_action_Save_triggered(self):
        self.on_btnSaveChange_clicked()

    @pyqtSlot()
    def on_actionFixNames_triggered(self):
        fields = ['SeqName', 'Id', 'GeneType']

        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])

        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)  # returns list of tuples where seqname is first

        DataIn.sort(key=itemgetter(2,0))




        for item in DataIn:

            SkipUpdate = False
            SeqName = item[0]
            ID = item[1]
            IsCL = SeqName[4:6]
            if IsCL == 'Cl':
                NewName = SeqName[:4] + SeqName[6:]
                VGenesSQL.UpdateField(ID, NewName, 'SeqName', DBFilename)

        #self.model.refresh()

    def updateSearchField(self, data):
        if self.ui.radioButtonUpdateSearch.isChecked():
            self.ui.cboFindField.setCurrentText(data[0])
            self.ui.fieldLine.setText(data[1])
            self.ui.valueLine.setText(data[2])

    def on_txtProject_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtProject.toPlainText()
        LastSelected = ('Project', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Project', valueis])

    def on_txtGroup_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtGroup.toPlainText()
        LastSelected = ('Grouping', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Grouping', valueis])

    def on_txtGeneType_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtGeneType.toPlainText()
        LastSelected = ('GeneType', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'GeneType', valueis])

    def on_txtSubGroup_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtSubGroup.toPlainText()
        LastSelected = ('SubGroup', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'SubGroup', valueis])

    def on_txtVend_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtVend.toPlainText()
        LastSelected = ('VSeqend', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'VSeqend', valueis])

    def on_txtD_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtD.toPlainText()
        LastSelected = ('Dregion', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Dregion', valueis])

    def on_txtVD_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtVD.toPlainText()
        LastSelected = ('VDJunction', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'VDJunction', valueis])

    def on_txtDJ_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtDJ.toPlainText()
        LastSelected = ('DJJunction', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'DJJunction', valueis])

    def on_txtJend_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtJend.toPlainText()
        LastSelected = ('begJ', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'begJ', valueis])

    def on_txtCDR3DNA_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtCDR3DNA.toPlainText()
        LastSelected = ('CDR3DNA', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'CDR3DNA', valueis])

    def on_txtIsotype_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtIsotype.toPlainText()
        LastSelected = ('Isotype', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Isotype', valueis])

    def on_txtCDR3AA_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtCDR3AA.toPlainText()
        LastSelected = ('CDR3AA', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'CDR3AA', valueis])

    def on_txtCDR3Length_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtCDR3Length.toPlainText()
        LastSelected = ('CDR3Length', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'CDR3Length', valueis])

    def on_txtCDR3pI_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtCDR3pI.toPlainText()
        LastSelected = ('CDR3pI', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'CDR3pI', valueis])

    def on_txtCDR3MW_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtCDR3MW.toPlainText()
        LastSelected = ('CDR3MW', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'CDR3MW', valueis])

    def on_txtProductive_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtProductive.toPlainText()
        LastSelected = ('productive', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'productive', valueis])

    def on_txtReadingFrame_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtReadingFrame.toPlainText()
        LastSelected = ('ReadingFrame', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'ReadingFrame', valueis])

    def on_txtStop_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtStop.toPlainText()
        LastSelected = ('StopCodon', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'StopCodon', valueis])

    def on_txtQuality_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtQuality.toPlainText()
        LastSelected = ('Quality', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Quality', valueis])

    def on_txtQuality_2_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtQuality_2.toPlainText()
        LastSelected = ('Quality', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Quality', valueis])

    def on_txtStatus_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtStatus.toPlainText()
        LastSelected = ('Blank13', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Status', valueis])

    def on_txtLabel_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtLabel.toPlainText()
        LastSelected = ('Blank12', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'Label', valueis])

    def on_txtID_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtID.toPlainText()
        LastSelected = ('IDEvent', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'IDEvent', valueis])

    def on_txtClonalPool_selectionChanged(self):
        global LastSelected
        valueis = self.ui.txtClonalPool.toPlainText()
        LastSelected = ('ClonalPool', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.updateSearchField([Fiedlvalue, 'ClonalPool', valueis])

    @pyqtSlot()
    def on_txtClonalPool_textChanged(self):
        valueTo = self.ui.txtClonalPool.toPlainText()
        FieldIS = 'ClonalPool'
        self.FieldChanger(valueTo, FieldIS)
        # if data[88] != 'None':
        # 	try:
        # 		if type(int(self.ui.txtClonalPool.toPlainText())) != int:
        # 			msg = 'Please enter integers only for clonal pool number.'
        # 			QtWidgets.QMessageBox.critical(None, "Integers only", msg, QtWidgets.QMessageBox.Cancel)
        # 			self.ui.txtClonalPool.setPlainText('0')
        # 	except:
        #
        # 		msg = 'Please enter integers only for clonal pool number.'
        # 		QtWidgets.QMessageBox.critical(None, "Integers only", msg, QtWidgets.QMessageBox.Cancel)
        # 		self.ui.txtClonalPool.setPlainText('0')

                # LastSelected = ('ClonalPool', valueis)

    @pyqtSlot()
    def on_cboFindField_currentTextChanged(self):
        global MoveNotChange
        global RememberUserSelection

        if self.ui.cboFindField.currentText() == 'Specificity':
            self.SpecSet()
        if self.ui.cboFindField.currentText() == 'Subspecificity':
            self.SubspecSet()
        if self.ui.cboFindField.currentText() == 'Autoreactivity':
            self.AutoRXSet()

        self.ui.cboFindField1.setCurrentText(self.ui.cboFindField.currentText())

        # update value list for auto complete
        # get value list
        cur_field = re.sub(r'\(.+', '', self.ui.cboFindField.currentText())
        if cur_field != '':
            if self.ui.rdoLocal.isChecked():
                WHEREStatement = ' WHERE SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'
            else:
                WHEREStatement = ''

            SQLStatement = 'SELECT DISTINCT(' + cur_field + '),COUNT(*) FROM vgenesdb' + WHEREStatement + ' GROUP BY ' + cur_field
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            value_list = [str(row[0]) + "\t(Count=" + str(row[1]) + ")" for row in DataIn]
            if MoveNotChange == False:
                if len(value_list) > 10000:
                    if self.ui.cboFindField.currentText() in RememberUserSelection:
                        pass
                    else:
                        RememberUserSelection.append(self.ui.cboFindField.currentText())
                        Msg = 'This field have ' + str(len(value_list)) + ' distinct values, the auto complete function will be slow, please be patient!\n'
                        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            # link value list to lineEdit
            self.init_lineedit(self.ui.txtFieldSearch, value_list)

    def init_lineedit(self, lineEdit, items_list):
        # add auto complete
        self.completer = QCompleter(items_list)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        # set match mode
        self.completer.setFilterMode(Qt.MatchContains)
        # set complete mode
        self.completer.setCompletionMode(QCompleter.PopupCompletion)
        # set QCompleter for lineEdit
        lineEdit.setCompleter(self.completer)

    def SpecSet(self):
        global LastSelected

        # if JustMoved == False:
        valueis = self.ui.listViewSpecificity.currentText()
        LastSelected = ('Specificity', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.ui.cboFindField.setCurrentText(Fiedlvalue)

    def SubspecSet(self):
        global LastSelected


        # if JustMoved == False:
        valueis = self.ui.listViewSpecificity_2.currentText()
        LastSelected = ('Subspecificity', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.ui.cboFindField.setCurrentText(Fiedlvalue)

    def AutoRXSet(self):
        global LastSelected


        # if JustMoved == False:
        valueis = self.ui.Autoreactivity.currentText()
        LastSelected = ('Blank6', valueis)
        field = LastSelected[0]
        # Fiedlvalue = self.TransLateFieldtoReal(field, False)
        Fiedlvalue = self.makeFieldName(field)
        self.ui.cboFindField.setCurrentText(Fiedlvalue)

    # @pyqtSlot()
    def on_listViewSpecificity_currentTextChanged(self):
        valueTo = self.ui.listViewSpecificity.currentText()
        FieldIS = 'Specificity'
        self.FieldChanger(valueTo, FieldIS)
    #
    # @pyqtSlot()
    # def on_lblSpecificity_clicked(self):
        self.ui.cboFindField.setCurrentText('Specificity')

    # @pyqtSlot()
    def on_listViewSpecificity_2_currentTextChanged(self):
        valueTo = self.ui.listViewSpecificity_2.currentText()
        FieldIS = 'Subspecificity'
        self.FieldChanger(valueTo, FieldIS)


    def on_Autoreactivity_currentTextChanged(self):
        valueTo = self.ui.Autoreactivity.currentText()
        FieldIS = 'Blank6'
        self.FieldChanger(valueTo, FieldIS)

    @pyqtSlot()
    def on_btnClearTreeChecks_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        self.clearTreeChecks()
        self.match_tree_to_table()
        self.ui.checkBoxAll.setChecked(False)

    @pyqtSlot()
    def on_actionSuggestCanonical_triggered(self):
        if self.ui.treeWidget.isEnabled():
            self.ui.treeWidget.expandAll()

            # fields = self.ui.cboTreeOp1.currentText()
            # field1 = self.TransLateFieldtoReal(fields, True)
            field1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
            i = 0
            for item in FieldList:
                if field1 == item:
                    field1Value = data[i]
                i += 1

            # fields = self.ui.cboTreeOp2.currentText()
            # field2 = self.TransLateFieldtoReal(fields, True)
            field2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
            i = 0
            for item in FieldList:
                if field2 == item:
                    field2Value = data[i]
                i += 1

            # fields = self.ui.cboTreeOp3.currentText()
            # field3 = self.TransLateFieldtoReal(fields, True)
            field3 = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
            i = 0
            for item in FieldList:
                if field3 == item:
                    field3Value = data[i]
                i += 1

            if field1 == '': field1 = 'None'
            if field2 == '': field1 = 'None'
            if field3 == '': field1 = 'None'


            fields = ['SeqName', 'Sequence', 'VLocus', 'JLocus', 'Vbeg', 'Jend', 'SubGroup']
            # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
            SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
            # DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            # SQLStatement = 'SELECT SeqName FROM vgenesDB WHERE ' + fieldsearch + ' = "' + search + '" AND ' + field1 + ' = "' + field1Value + '"' # AND ' + Field3 + ' = "' + Vcolumn3 + '" ORDER BY Project, Grouping, SubGroup, SeqName'
            foundRecs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            NumFound = len(foundRecs)
            # foundRecs.sort(key=itemgetter(0))
            i = 0
            Genes = []
            gene = []
            ToCLustalgene = []
            ToClustal = []
            LastSeq = 'FirstOne'  # ('FirstOne', 'x', 'x', 'x', 'x', 'x')
            ErrMes = ''
            self.clearTreeChecks()
            foundRecs.sort(key=itemgetter(0))
            NumRecords = len(foundRecs)
            NumDone = 0

            for item in foundRecs:
                NumDone += 1
                gene.clear()
                for i in range(0, 6):
                    gene.append(item[i])
                SeqName = item[0]
                if NumDone == 1:
                    currentitemIs = SeqName

                # Sequence = item[1]
                # Vgene = item[2]
                # Jgene = item[3]
                # Vbeg = item[4]
                # Jend = item[5]
                # if SeqName  == 'A116_1F02H-3':
                #     print('stop')
                if SeqName[len(SeqName) - 2] == '-':
                    NameComp = SeqName[:len(SeqName) - 2]
                elif SeqName[len(SeqName) - 3] == '-':
                    NameComp = SeqName[:len(SeqName) - 3]
                else:
                    answer = informationMessage(self,
                                                'Make sure individual sequence sets are named the same\nwith only "-#" at the end as in: "045-2B06-1, 045-2B05-2"',
                                                'OK')
                    return

                if LastSeq != 'FirstOne':
                    # if LastSeq[len(LastSeq)-2] == '-':
                    #     LastSeqC = LastSeq[:len(LastSeq)-2]
                    # elif LastSeq[len(LastSeq)-3] == '-':
                    #     LastSeqC = LastSeq[:len(LastSeq)-3]


                    if NameComp == LastSeq:
                        Genes.append(tuple(gene))

                    else:
                        #         code to compare sequences and then clear genes and start with current one
                        if len(Genes) > 1:
                            longest = 0
                            Nucs = {'As': 0, 'Gs': 0, 'Cs': 0, 'Ts': 0, 'Ns': 0}
                            LostCon = False
                            Consensus = ''
                            for i in range(0, len(Genes)):  # first get start and end
                                SeqName = Genes[i][0]
                                Sequence = Genes[i][1]
                                Sequence = Sequence[(int(Genes[i][4])):(int(Genes[i][5]))]
                                Sequence = Sequence.upper()
                                # if len(Sequence)>longest: longest = len(Sequence)
                                ToCLustalgene.append(SeqName)
                                ToCLustalgene.append(Sequence)
                                ToClustal.append(tuple(ToCLustalgene))
                                ToCLustalgene.clear()

                            outfilename = VGenesSeq.ClustalO(ToClustal, 1000, True)
                            # ClustalOut = VGenesSeq.ClustalO(ToClustal, 1000, False)
                            ToClustal.clear()
                            # outfilename = os.path.join(os.path.expanduser('~'), 'Applications', 'VGenes', 'ClustalOmega',
                            #                            'my-out-seqs.fa')
                            Aligned = VGenesSeq.readClustalOutput(outfilename)

                            os.remove(outfilename)

                            Genes.clear()
                            GeneDict = {}
                            for i in range(0, len(Aligned)):
                                SeqName = Aligned[i][0]
                                Seq = Aligned[i][1]
                                longest = len(Seq)
                                GeneDict.update({SeqName: 0})
                            # x.update({3:4})
                            for j in range(0, longest):  # build consensus
                                Nucs = {'A': 0, 'G': 0, 'C': 0, 'T': 0, 'N': 0}
                                for i in range(0, len(Aligned)):
                                    try:
                                        nuc = Aligned[i][1][j]
                                    except:
                                        print('stop')
                                    if nuc == 'A' or nuc == 'a':
                                        Nucs['A'] += 1
                                    elif nuc == 'G' or nuc == 'g':
                                        Nucs['G'] += 1
                                    elif nuc == 'C' or nuc == 'c':
                                        Nucs['C'] += 1
                                    elif nuc == 'T' or nuc == 't':
                                        Nucs['T'] += 1
                                    else:
                                        Nucs['N'] += 1
                                Cnuc = max(Nucs, key=Nucs.get)
                                Cfreq = Nucs[Cnuc]
                                PerC = Cfreq / len(Aligned)
                                if Cfreq / len(Aligned) >= 0.5:
                                    Consensus += Cnuc
                                else:
                                    if LastSeq == 'LastOne':
                                        print('stop')

                                    ErrMes += LastSeq + ' has no consensus sequence.\n'
                                    LostCon = True
                                    Consensus += 'X'

                            for j in range(0, longest):

                                for i in range(0, len(Aligned)):
                                    SeqName = Aligned[i][0]
                                    try:
                                        nuc = Aligned[i][1][j]
                                    except:
                                        print('stop')
                                    ConNuc = Consensus[j]
                                    # SetVal = int(Genes[i][1])
                                    if nuc != ConNuc:
                                        GeneDict[SeqName] += 1
                                        # SetVal = int(Genes[i][1])
                                        # SetVal += 1
                                        # Genes[i][1] = SetVal

                            NumRecs = len(Aligned)
                            ConFound = False
                            for i in range(0, NumRecs):
                                SeqName = Aligned[i][0]
                                # if SeqName  == 'A116_1E01H-1':
                                #     print('it')
                                Mutations = GeneDict[SeqName]
                                if Mutations == 0:
                                    found = self.ui.treeWidget.findItems(SeqName, Qt.MatchRecursive, 0)
                                    ConFound = True
                                    for record in found:
                                        record.setCheckState(0, Qt.Checked)
                                    break
                            if ConFound == False:
                                if LastSeq == 'LastOne':
                                    print('stop')
                                ErrMes += LastSeq + ' has no consensus sequence.\n'
                        else:
                            if LastSeq == 'LastOne':
                                print('stop')
                            ErrMes += LastSeq + ' has no consensus sequence.\n'
                            LostCon = True

                        Genes.clear()
                        Genes.append(tuple(gene))

                else:
                    Genes.append(tuple(gene))

                LastSeq = NameComp
                if NumDone == NumRecords - 1:
                    LastSeq = "LastOne"


                    # def on_btnFieldBulk_clicked(self):
                    #     search = self.ui.txtFieldSearch.toPlainText()
                    #     field = self.ui.cboFindField.currentText()

            QueryIS = 'Would you like to move the sequences selected for expression to a new Subgroup?'
            buttons = 'YN'
            answer = questionMessage(self, QueryIS, buttons)

            if answer == 'Yes':
                QueryIS = 'Enter text to be concatenated to the sub group name'
                DefaultText = '-Expressed'  # data[77] + '-Expressed'
                EditSubgroup = setText(self, QueryIS, DefaultText)

            elif answer == 'No':
                EditSubgroup = 'Cancelled Action'

            if EditSubgroup != 'Cancelled Action':
                fields = ['SeqName', 'SubGroup']
                # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
                SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
                foundRecs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                for item in foundRecs:
                    SeqName = item[0]
                    Subgroup = item[1]
                    NewSub = Subgroup + EditSubgroup

                    # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
                    SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])

                    WhereStart = SQLStatement.find('WHERE')
                    WhereState = SQLStatement[WhereStart - 1:]  # + ' AND '
                    SQLStatement = 'UPDATE vgenesDB SET Subgroup = "' + NewSub + '" WHERE SeqName = "' + SeqName + '"'

                    foundRecs = VGenesSQL.UpdateMulti(SQLStatement, DBFilename)

                #model = self.ui.tableView.model()
                #model.refresh()

                self.on_btnUpdateTree_clicked()
                # self.ui.txtFieldSearch.setPlainText(EditSubgroup)
                # self.ui.cboFindField.setCurrentText('Subgroup')
                # Doit = self.on_btnFieldBulk_clicked()
                # self.on_btnUpdateTree_clicked()

            if ErrMes != '':
                Style = 'standard'

                self.ShowVGenesTextEdit(ErrMes, Style)
            self.ui.treeWidget.collapseAll()

            if currentitemIs:
                self.findTreeItem(currentitemIs)

    @pyqtSlot()
    def on_pushButtonSimilar_clicked(self):
        global wasClicked
        wasClicked = False

        if LastSelected:
            fieldsearch = LastSelected[0]
        else:
            answer = informationMessage(self,
                                        'No field was seleceted.\nClick a field from the Record tab and records with similar values will be checked.',
                                        'OK')
            return
        search = LastSelected[1]
        if self.ui.rdoLocal.isChecked():
            WHEREStatement = ' AND SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'
        else:
            WHEREStatement = ''

        SQLStatement = 'SELECT SeqName FROM vgenesDB WHERE ' + fieldsearch + ' = "' + search + '"' + WHEREStatement
        foundRecs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        self.clearTreeChecks()
        self.CheckedRecords = []

        num_checked = 0
        NumFound = len(foundRecs)
        i = 0
        for item in foundRecs:
            Seqname = item[0]
            self.CheckedRecords.append(Seqname)
            if self.ui.treeWidget.isEnabled():
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                i += 1
                for record in found:
                    if i == NumFound - 1:
                        wasClicked = True
                    record.setCheckState(0, Qt.Checked)
                    num_checked += 1

        if self.ui.treeWidget.isEnabled():
            NewLbl = str(num_checked) + ' records checked'
            self.ui.label_Name.setText(NewLbl)
        
        Msg = 'Matched records have been checked!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_btnFieldSearch_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        global wasClicked

        search = self.ui.txtFieldSearch.text()
        search = re.sub(r'[\s\r\n\t]','',search)
        if search == '':
            Msg = 'Your search key word is empty!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        field = self.ui.cboFindField.currentText()
        fieldsearch = re.sub(r'\(.+', '', field)

        #     if search != '':
        #         SQLstatement = 'select * from vgenesdb WHERE ' + fieldsearch + ' LIKE ' + search + ' ORDER BY ' + fieldsearch + ', Project, Grouping, SubGroup, SeqName'
        # #         todo select one if exact or if no then all similar items in tree and table...best if tree checkable

        if self.ui.rdoLocal.isChecked():
            WHEREStatement = ' AND SeqName IN ("' + '","'.join(self.CheckedRecords) + '")'
        else:
            WHEREStatement = ''

        SQLStatement = 'SELECT SeqName FROM vgenesDB WHERE ' + fieldsearch + ' = "' + search + '"' + WHEREStatement
        foundRecs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        NumFound = len(foundRecs)

        # if precise match fails, try fuzzy match
        if NumFound == 0:
            SQLStatement = 'SELECT SeqName FROM vgenesDB WHERE ' + fieldsearch + ' LIKE "%' + search + '%"'  + WHEREStatement
            foundRecs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            NumFound = len(foundRecs)

        # if still no match, quite with messages
        if NumFound == 0:
            Msg = 'No related records found in your current search range!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        # if matched something...
        global wasClicked
        wasClicked = False

        self.clearTreeChecks()
        self.CheckedRecords = []

        i = 0
        FindName = ''
        for item in foundRecs:
            i += 1
            Seqname = item[0]
            self.CheckedRecords.append(Seqname)
            if i == 1:
                FindName = Seqname
            if self.ui.treeWidget.isEnabled():
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                for record in found:
                    # global wasClicked
                    # wasClicked = True
                    if i == NumFound - 1:
                        wasClicked = True
                    record.setCheckState(0, Qt.Checked)

        if self.ui.treeWidget.isEnabled():
            self.findTreeItem(FindName)
            NewLbl = self.ui.label_Name.text()
            NewLbl += ', ' + str(NumFound) + ' selected'
            self.ui.label_Name.setText(NewLbl)

    @pyqtSlot()
    def on_pushButtonStat_clicked(self):
        self.myStatDialog = StatCheckDialog()
        self.myStatDialog.initial = 0
        # self.myStatDialog.load_data(value_list)
        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myStatDialog.ui.comboBox.addItems(field_list)
        self.myStatDialog.initial = 1
        self.myStatDialog.ui.comboBox.setCurrentText(field_list[2])
        self.myStatDialog.BatchSignal.connect(self.updateSelectionFromDialog)
        #checked_names = self.getTreeCheckedChild()
        self.myStatDialog.checkList = self.CheckedRecords
        self.myStatDialog.show()
        self.myStatDialog.initial = 2
        self.myStatDialog.resize(1200, 700)

    @pyqtSlot()
    def on_pushButtonAdvance_clicked(self):
        self.myAdvanceSelectioDialog = AdvanceSelectioDialog()

        # self.myStatDialog.load_data(value_list)
        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        field_list = [''] + field_list
        self.myAdvanceSelectioDialog.initial = 1
        self.myAdvanceSelectioDialog.ui.comboBox1.addItems(field_list)
        self.myAdvanceSelectioDialog.ui.comboBox2.addItems(field_list)
        self.myAdvanceSelectioDialog.ui.comboBox3.addItems(field_list)
        self.myAdvanceSelectioDialog.ui.comboBox4.addItems(field_list)
        self.myAdvanceSelectioDialog.ui.comboBox5.addItems(field_list)
        self.myAdvanceSelectioDialog.ui.comboBox6.addItems(field_list)

        self.myAdvanceSelectioDialog.BatchSignal.connect(self.updateSelectionFromDialog)

        self.myAdvanceSelectioDialog.show()
        self.myAdvanceSelectioDialog.initial = 2

    @pyqtSlot()
    def on_pushButtonScatter_clicked(self):
        self.on_actionpyqtGraph_triggered()

    @pyqtSlot()
    def on_pushButtonHistViewer_clicked(self):
        # open a dialog for settings
        self.myHistGramDialog = HistGramDialog()
        self.myHistGramDialog.DBFilename = DBFilename
        self.myHistGramDialog.vgenes = self
        fields_name = [""] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myHistGramDialog.fields_name = fields_name
        self.myHistGramDialog.initLineedit(self.myHistGramDialog.ui.lineEdit, fields_name)
        self.myHistGramDialog.show()

    @pyqtSlot()
    def on_pushButtonBoxplotViewer_clicked(self):
        # open a dialog for settings
        self.myBeesWarmPlotDialog = BeesWarmPlotDialog()
        self.myBeesWarmPlotDialog.DBFilename = DBFilename
        self.myBeesWarmPlotDialog.vgenes = self
        fields_name = [""] + [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myBeesWarmPlotDialog.fields_name = fields_name
        self.myBeesWarmPlotDialog.initLineedit(self.myBeesWarmPlotDialog.ui.lineEditData, fields_name)
        self.myBeesWarmPlotDialog.initLineedit(self.myBeesWarmPlotDialog.ui.lineEditGroup, fields_name)
        self.myBeesWarmPlotDialog.show()

    @pyqtSlot()
    def on_pushButtonHeatmapViewer_clicked(self):
        # open a dialog for settings
        self.myHeatmapViewerDialog = HeatmapViewerDialog()
        self.myHeatmapViewerDialog.DBFilename = DBFilename
        self.myHeatmapViewerDialog.vgenes = self
        # set up table
        '''
        tableHeader = ['', 'Feature']
        self.myHeatmapViewerDialog.ui.tableWidget.setColumnCount(len(tableHeader))
        self.myHeatmapViewerDialog.ui.tableWidget.setRowCount(len(FieldList))
        self.myHeatmapViewerDialog.ui.tableWidget.setHorizontalHeaderLabels(tableHeader)
        for i in range(len(FieldList)):
            featureName = FieldList[i] + '(' + RealNameList[i] + ')'
            myCheckbox = QCheckBox()
            myCheckbox.setChecked(False)
            myCheckbox.row = i
            myCheckbox.stateChanged.connect(self.myHeatmapViewerDialog.updateText)
            self.myHeatmapViewerDialog.ui.tableWidget.setCellWidget(i,0,myCheckbox)
            unit0 = QTableWidgetItem('')
            self.myHeatmapViewerDialog.ui.tableWidget.setItem(i, 0, unit0)
            unit = QTableWidgetItem(featureName)
            self.myHeatmapViewerDialog.ui.tableWidget.setItem(i, 1, unit)

        self.myHeatmapViewerDialog.ui.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.myHeatmapViewerDialog.ui.tableWidget.setColumnWidth(0,30)
        self.myHeatmapViewerDialog.ui.tableWidget.verticalHeader().hide()
        # disable edit
        self.myHeatmapViewerDialog.ui.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        # show sort indicator
        self.myHeatmapViewerDialog.ui.tableWidget.horizontalHeader().setSortIndicatorShown(True)
        # connect sort indicator to slot function
        self.myHeatmapViewerDialog.ui.tableWidget.horizontalHeader().sectionClicked.connect(self.myHeatmapViewerDialog.sortTable)
        '''
        fields_name = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myHeatmapViewerDialog.fields_name = fields_name
        self.myHeatmapViewerDialog.initLineedit(self.myHeatmapViewerDialog.ui.lineEditGroup, fields_name)
        self.myHeatmapViewerDialog.initLineedit(self.myHeatmapViewerDialog.ui.lineEditFeature, fields_name)
        self.myHeatmapViewerDialog.show()

    def updateSelectionFromDialog(self, data):
        self.CheckedRecords = data
        if self.ui.treeWidget.isEnabled():
            self.clearTreeChecks()
            num_checked = len(data)
    
            for item in data:
                Seqname = item
                found = self.ui.treeWidget.findItems(Seqname, Qt.MatchRecursive, 0)
                for record in found:
                    record.setCheckState(0, Qt.Checked)
    
            NewLbl = str(num_checked) + ' records checked'
            self.ui.label_Name.setText(NewLbl)
        self.match_tree_to_table()
        Msg = 'Update finished!'
        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_pushButtonBatch_clicked(self):
        global DontFindTwice
        cur_field = re.sub(r'\(.+', '', self.ui.cboFindField1.currentText())
        '''
        if cur_field in RealNameList:
            index = RealNameList.index(cur_field)
            cur_field = FieldList[index]
        else:
            answer = informationMessage(self, 'The field name you determined is not exist!', 'OK')
            return
        '''
        SQLStatement = 'SELECT DISTINCT(' + cur_field + ') FROM vgenesdb'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        value_list = [row[0] for row in DataIn]

        if len(value_list) > 30:
            question = 'Distinct values of this field seems too many (number =  ' + str(len(value_list)) + ')\nAre you sure?'
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)
            if answer == 'No':
                return

        self.myBatchDialog = BatchDialog()
        self.myBatchDialog.initial = 0
        #self.myBatchDialog.load_data(value_list)
        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myBatchDialog.ui.comboBox.addItems(field_list)
        self.myBatchDialog.vgene = self
        self.myBatchDialog.initial = 1
        self.myBatchDialog.ui.comboBox.setCurrentText(self.ui.cboFindField1.currentText())
        self.myBatchDialog.BatchSignal.connect(self.updateFieldBatch)
        self.myBatchDialog.show()
        self.myBatchDialog.initial = 2
        self.myBatchDialog.resize(1200, 700)

    @pyqtSlot()
    def on_ShowTable_clicked(self):
        if self.ui.SeqTable.columnCount() > 0:
            self.ui.SeqTable.itemChanged.disconnect(self.EditTableItem)
            self.ui.SeqTable.setColumnCount(0)
            self.ui.SeqTable.setRowCount(0)
        else:
            max_number = self.ui.lcdNumber_max.value()
            if max_number > 5000000:
                message = 'Your current DB has more than 5000000 records (' + str(int(max_number)) + \
                          '), loading a table with all details could be time-consuming ' \
                          'and cause slow UI response，are you sure to display the table?\n'
                buttons = 'YN'
                answer = questionMessage(self, message, buttons)
                if answer == 'No':
                    return
                else:
                    self.load_table()
                    self.match_tree_to_table()
                    self.tree_to_table_selection()
            else:
                self.load_table()
                self.match_tree_to_table()
                self.tree_to_table_selection()

    @pyqtSlot()
    def on_StatUpdate_clicked(self):
        self.myBatchDialog = BatchDialog()
        self.myBatchDialog.initial = 0
        # self.myBatchDialog.load_data(value_list)
        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myBatchDialog.ui.comboBox.addItems(field_list)
        self.myBatchDialog.vgene = self
        self.myBatchDialog.initial = 1
        self.myBatchDialog.ui.comboBox.setCurrentText(field_list[2])
        self.myBatchDialog.BatchSignal.connect(self.updateFieldBatch)
        self.myBatchDialog.show()
        self.myBatchDialog.initial = 2
        self.myBatchDialog.resize(1200, 700)

    @pyqtSlot()
    def on_StatUpdate1_clicked(self):
        self.myBatchDialog = BatchDialog()
        self.myBatchDialog.initial = 0
        # self.myBatchDialog.load_data(value_list)
        field_list = [FieldList[i] + '(' + RealNameList[i] + ')' for i in range(len(FieldList))]
        self.myBatchDialog.ui.comboBox.addItems(field_list)
        self.myBatchDialog.vgene = self
        self.myBatchDialog.initial = 1
        self.myBatchDialog.ui.comboBox.setCurrentText(field_list[2])
        self.myBatchDialog.BatchSignal.connect(self.updateFieldBatch)
        self.myBatchDialog.show()
        self.myBatchDialog.initial = 2
        self.myBatchDialog.resize(1200, 700)

    def updateFieldBatch(self, indicator, field, dict):
        if indicator == 1:
            Msg = 'You did not specific any value! Do nothing!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            for key in dict:
                SQLStatement = 'UPDATE vgenesdb SET ' + field + ' = "' + dict[key] + '" WHERE ' + field + ' = "' + key + '"'
                print(SQLStatement)
                VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
            Msg = 'Update finished!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

            self.refreshDB()
            value = self.ui.dial.value()
            self.updateF(value)

    @pyqtSlot()
    def on_btnFieldBulk_clicked(self):
        # find ID for all selected items
        #selected_name = self.getTreeCheckedChild()
        selected_name = self.CheckedRecords

        if len(selected_name) == 0:
            Msg = 'Please check at least one record you want to edit!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        SQLStatement = 'SELECT ID FROM vgenesdb WHERE SeqName IN ("' + '","'.join(selected_name) + '")'
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        cur_field = re.sub(r'\(.+', '', self.ui.cboFindField1.currentText())
        '''
        if cur_field in RealNameList:
            index = RealNameList.index(cur_field)
            cur_field = FieldList[index]
        else:
            answer = informationMessage(self, 'The field name you determined is not exist!', 'OK')
            return
        '''

        str_target = self.ui.lineEditTarget.text()
        if str_target == "":
            question = "Your target field is empty, will update the whole cell, OK?"
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)
            if answer == 'No':
                return

        str_replace = self.ui.lineEditReplace.text()
        if str_replace == '':
            question = "Your replace field is empty, will clear everything match target field, OK?"
            buttons = 'YN'
            answer = questionMessage(self, question, buttons)
            if answer == 'No':
                return

        # update each records
        for record in DataIn:
            id = record[0]
            SQLStatement = ""
            if str_target == "":
                SQLStatement = "UPDATE vgenesdb SET " + cur_field + " = '" + str_replace + "' WHERE ID = " + str(id)
            else:
                SQLStatement = 'SELECT ' + cur_field + ' FROM vgenesdb WHERE ID = ' + str(id)
                thisData = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                thisData = thisData[0][0]

                if self.ui.radioButtonReg.isChecked():
                    regx = re.compile(str_target)
                    new_str = re.sub(regx, str_replace, thisData)
                else:
                    new_str = re.sub(str_target, str_replace, thisData)

                if new_str != thisData:
                    SQLStatement = "UPDATE vgenesdb SET " + cur_field + " = '" + new_str + "' WHERE ID = " + str(id)

            try:
                VGenesSQL.RunUpdateSQL(DBFilename, SQLStatement)
            except:
                Msg = 'SQL ERROR! Current CMD:\n' + SQLStatement
                QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

        #SQLFields = (
        #	self.ui.cboTreeOp1.currentText(), self.ui.cboTreeOp2.currentText(), self.ui.cboTreeOp3.currentText())
        '''
        index1 = RealNameList.index(self.ui.cboTreeOp1.currentText())
        index2 = RealNameList.index(self.ui.cboTreeOp2.currentText())
        index3 = RealNameList.index(self.ui.cboTreeOp3.currentText())

        SQLFields = (FieldList[index1], FieldList[index2], FieldList[index3])
        '''
        SQLFields = (
            re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText()),
            re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText()),
            re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
        )

        if self.ui.treeWidget.isEnabled():
            self.initializeTreeView(SQLFields)
            self.ui.treeWidget.expandAll()
        self.refreshDB()

    @pyqtSlot()
    def on_btnEditLock_clicked(self):
        if self.enableEdit == True:
            lock_icon = QIcon()
            lock_icon.addPixmap(QPixmap(":/PNG-Icons/locked.png"), QIcon.Normal, QIcon.Off)
            self.ui.btnEditLock.setIcon(lock_icon)

            self.ui.btnSaveChange.setEnabled(False)

            self.ui.txtDateTime.setReadOnly(True)
            self.ui.txtGroup.setReadOnly(True)
            self.ui.txtLabel.setReadOnly(True)
            self.ui.txtName.setReadOnly(False)
            self.ui.txtProject.setReadOnly(True)
            self.ui.txtQuality.setReadOnly(True)
            self.ui.txtStatus.setReadOnly(True)
            self.ui.txtSubGroup.setReadOnly(True)
            self.ui.comboBoxSpecies.setEnabled(False)
            
            self.ui.txtDLocus.setReadOnly(True)
            self.ui.txtDgene.setReadOnly(True)
            self.ui.txtVLocus.setReadOnly(True)
            self.ui.txtVgene.setReadOnly(True)
            self.ui.txtJLocus.setReadOnly(True)
            self.ui.txtJgene.setReadOnly(True)
            self.ui.txtIsotype.setReadOnly(True)
            self.ui.txtID.setReadOnly(True)
            self.ui.txtStop.setReadOnly(True)

            self.ui.textBarcode.setReadOnly(True)
            self.ui.textCluster.setReadOnly(True)
            self.ui.textMutations.setReadOnly(True)
            self.ui.textEdit.setReadOnly(True)
            self.ui.txtPopulation.setReadOnly(True)

            self.ui.txtD.setReadOnly(True)
            self.ui.txtDJ.setReadOnly(True)
            self.ui.txtJend.setReadOnly(True)
            self.ui.txtVD.setReadOnly(True)
            self.ui.txtVend.setReadOnly(True)
            self.ui.txtClonalPool.setReadOnly(True)
            self.ui.txtClonalRank.setReadOnly(True)
            self.ui.txtProductive.setReadOnly(True)
            self.ui.txtReadingFrame.setReadOnly(True)
            self.ui.txtCDR3AA.setReadOnly(True)
            self.ui.txtCDR3DNA.setReadOnly(True)
            self.ui.txtCDR3Length.setReadOnly(True)
            self.ui.txtCDR3MW.setReadOnly(True)
            self.ui.txtCDR3pI.setReadOnly(True)

            self.ui.radioButton_21.setEnabled(False)
            self.ui.radioButton_22.setEnabled(False)
            self.ui.radioButton_23.setEnabled(False)
            self.ui.Autoreactivity.setEnabled(False)
            self.ui.listViewSpecificity.setEnabled(False)
            self.ui.listViewSpecificity_2.setEnabled(False)

            self.ui.txtComments.setReadOnly(True)

            self.enableEdit = False

        else:
            unlock_icon = QIcon()
            unlock_icon.addPixmap(QPixmap(":/PNG-Icons/unlocked.png"), QIcon.Normal, QIcon.Off)
            self.ui.btnEditLock.setIcon(unlock_icon)

            self.ui.btnSaveChange.setEnabled(True)

            self.ui.txtDateTime.setReadOnly(False)
            self.ui.txtGroup.setReadOnly(False)
            self.ui.txtLabel.setReadOnly(False)
            self.ui.txtName.setReadOnly(False)
            self.ui.txtProject.setReadOnly(False)
            self.ui.txtQuality.setReadOnly(False)
            self.ui.txtStatus.setReadOnly(False)
            self.ui.txtSubGroup.setReadOnly(False)
            self.ui.comboBoxSpecies.setEnabled(True)

            self.ui.txtDLocus.setReadOnly(False)
            self.ui.txtDgene.setReadOnly(False)
            self.ui.txtVLocus.setReadOnly(False)
            self.ui.txtVgene.setReadOnly(False)
            self.ui.txtJLocus.setReadOnly(False)
            self.ui.txtJgene.setReadOnly(False)
            self.ui.txtIsotype.setReadOnly(False)
            self.ui.txtID.setReadOnly(False)
            self.ui.txtStop.setReadOnly(False)

            self.ui.textBarcode.setReadOnly(False)
            self.ui.textCluster.setReadOnly(False)
            self.ui.textMutations.setReadOnly(False)
            self.ui.textEdit.setReadOnly(False)
            self.ui.txtPopulation.setReadOnly(False)

            self.ui.txtD.setReadOnly(False)
            self.ui.txtDJ.setReadOnly(False)
            self.ui.txtJend.setReadOnly(False)
            self.ui.txtVD.setReadOnly(False)
            self.ui.txtVend.setReadOnly(False)
            self.ui.txtClonalPool.setReadOnly(False)
            self.ui.txtClonalRank.setReadOnly(False)
            self.ui.txtProductive.setReadOnly(False)
            self.ui.txtReadingFrame.setReadOnly(False)
            self.ui.txtCDR3AA.setReadOnly(False)
            self.ui.txtCDR3DNA.setReadOnly(False)
            self.ui.txtCDR3Length.setReadOnly(False)
            self.ui.txtCDR3MW.setReadOnly(False)
            self.ui.txtCDR3pI.setReadOnly(False)

            self.ui.radioButton_21.setEnabled(True)
            self.ui.radioButton_22.setEnabled(True)
            self.ui.radioButton_23.setEnabled(True)
            self.ui.Autoreactivity.setEnabled(True)
            self.ui.listViewSpecificity.setEnabled(True)
            self.ui.listViewSpecificity_2.setEnabled(True)

            self.ui.txtComments.setReadOnly(False)

            self.enableEdit = True

    @pyqtSlot()
    def on_pushButtonLock_clicked(self):
        if self.ui.btnFieldBulk.isEnabled() == True:
            lock_icon = QIcon()
            lock_icon.addPixmap(QPixmap(":/PNG-Icons/locked.png"), QIcon.Normal, QIcon.Off)
            self.ui.pushButtonLock.setIcon(lock_icon)
            self.ui.btnFieldBulk.setEnabled(False)
            #self.ui.pushButtonBatch.setEnabled(False)
        else:
            unlock_icon = QIcon()
            unlock_icon.addPixmap(QPixmap(":/PNG-Icons/unlocked.png"), QIcon.Normal, QIcon.Off)
            self.ui.pushButtonLock.setIcon(unlock_icon)
            self.ui.btnFieldBulk.setEnabled(True)
            #self.ui.pushButtonBatch.setEnabled(True)

    @pyqtSlot()
    def on_btnSaveChange_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        global updateMarker
        if self.enableEdit == True:
            SETStatement = 'SET '
            SETStatement += 'Project = "' + self.ui.txtProject.toPlainText() + '",'
            SETStatement += 'Grouping = "' + self.ui.txtGroup.toPlainText() + '",'
            SETStatement += 'SubGroup = "' + self.ui.txtSubGroup.toPlainText() + '",'
            # SETStatement += 'SeqName = "' + self.ui.txtName.toPlainText() + '",'
            SETStatement += 'Species = "' + self.ui.comboBoxSpecies.currentText() + '",'
            SETStatement += 'DateEntered = "' + self.ui.txtDateTime.toPlainText() + '",'
            SETStatement += 'Quality = "' + self.ui.txtQuality.toPlainText() + '",'
            SETStatement += 'Blank12 = "' + self.ui.txtLabel.toPlainText() + '",'
            SETStatement += 'Blank12 = "' + self.ui.txtLabel.toPlainText() + '",'
            SETStatement += 'Blank13 = "' + self.ui.txtStatus.toPlainText() + '",'
            SETStatement += 'V1 = "' + self.ui.txtVgene.toPlainText() + '",'
            SETStatement += 'VLocus = "' + self.ui.txtVLocus.toPlainText() + '",'
            SETStatement += 'D1 = "' + self.ui.txtDgene.toPlainText() + '",'
            SETStatement += 'DLocus = "' + self.ui.txtDLocus.toPlainText() + '",'
            SETStatement += 'J1 = "' + self.ui.txtJgene.toPlainText() + '",'
            SETStatement += 'JLocus = "' + self.ui.txtJLocus.toPlainText() + '",'
            SETStatement += 'Isotype = "' + self.ui.txtIsotype.toPlainText() + '",'
            SETStatement += 'IDEvent = "' + self.ui.txtID.toPlainText() + '",'
            SETStatement += 'StopCodon = "' + self.ui.txtStop.toPlainText() + '",'
            SETStatement += 'Blank8 = "' + self.ui.textCluster.toPlainText() + '",'
            SETStatement += 'Blank9 = "' + self.ui.textEdit.toPlainText() + '",'
            SETStatement += 'TotMut = "' + self.ui.textMutations.toPlainText() + '",'
            SETStatement += 'Blank10 = "' + self.ui.textBarcode.toPlainText() + '",'
            SETStatement += 'Blank11 = "' + self.ui.txtPopulation.toPlainText() + '",'
            SETStatement += 'VSeqend = "' + self.ui.txtVend.toPlainText() + '",'
            SETStatement += 'VDJunction = "' + self.ui.txtVD.toPlainText() + '",'
            SETStatement += 'Dregion = "' + self.ui.txtD.toPlainText() + '",'
            SETStatement += 'DJJunction = "' + self.ui.txtDJ.toPlainText() + '",'
            SETStatement += 'begJ = "' + self.ui.txtJend.toPlainText() + '",'
            SETStatement += 'CDR3DNA = "' + self.ui.txtCDR3DNA.toPlainText() + '",'
            SETStatement += 'CDR3AA = "' + self.ui.txtCDR3AA.toPlainText() + '",'
            SETStatement += 'CDR3Length = "' + self.ui.txtCDR3Length.toPlainText() + '",'
            SETStatement += 'CDR3pI = "' + self.ui.txtCDR3pI.toPlainText() + '",'
            SETStatement += 'CDR3MW = "' + self.ui.txtCDR3MW.toPlainText() + '",'
            SETStatement += 'productive = "' + self.ui.txtProductive.toPlainText() + '",'
            SETStatement += 'ReadingFrame = "' + self.ui.txtReadingFrame.toPlainText() + '",'
            SETStatement += 'ClonalPool = "' + self.ui.txtClonalPool.toPlainText() + '",'
            SETStatement += 'ClonalRank = "' + self.ui.txtClonalRank.toPlainText() + '",'
            SETStatement += 'Specificity = "' + self.ui.listViewSpecificity.currentText() + '",'
            SETStatement += 'Subspecificity = "' + self.ui.listViewSpecificity_2.currentText() + '",'
            SETStatement += 'Blank6 = "' + self.ui.Autoreactivity.currentText() + '",'
            SETStatement += 'Comments = "' + self.ui.txtComments.toPlainText() + '" '

            name = data[0]
            WHEREStatement = 'WHERE SeqName = "' + name + '"'

            SQLStatement = 'UPDATE vgenesDB ' + SETStatement + WHEREStatement
            foundRecs = VGenesSQL.UpdateMulti(SQLStatement, DBFilename)

            if name == self.ui.txtName.toPlainText():
                pass
            else:
                # update name index
                NameIndex[self.ui.txtName.toPlainText()] = NameIndex[name]
                del NameIndex[name]
                # refresh model
                #model = self.ui.tableView.model()
                #model.refresh()
                # update database marker
                updateMarker = True
                # update tree
                #SQLFields = (
                #	self.ui.cboTreeOp1.currentText(), self.ui.cboTreeOp2.currentText(), self.ui.cboTreeOp3.currentText())
                '''
                index1 = RealNameList.index(self.ui.cboTreeOp1.currentText())
                index2 = RealNameList.index(self.ui.cboTreeOp2.currentText())
                index3 = RealNameList.index(self.ui.cboTreeOp3.currentText())

                SQLFields = (FieldList[index1], FieldList[index2], FieldList[index3])
                '''
                SQLFields = (
                    re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText()),
                    re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText()),
                    re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
                )

                if self.ui.treeWidget.isEnabled():
                    self.initializeTreeView(SQLFields)
                    self.ui.treeWidget.expandAll()
                self.refreshDB()

            Msg = 'Change saved!'
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
        else:
            Msg = 'Please switch to edit mode first!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

    @pyqtSlot()
    def ReportOptions(self):
        # self.ui.cboReportOptions.currentIndexChanged()  'FASTA Nucleotide Rename file'
        option = self.ui.cboReportOptions.currentText()
        if option == 'FASTA Nucleotide file':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)

        if option == '10x Synthesis report':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)

        if option == 'FASTA Nucleotide Rename file':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)

        if option == 'FASTA Amino Acid file':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)

        if option == 'FASTA Germline Nucleotide file':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)

        if option == 'FASTA Germline Amino Acid file':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)


        elif option == 'AbVec cloning PCR':
            self.ui.ckReportCSV.setDisabled(False)
            self.ui.ckReportCSV.setChecked(True)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(False)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(False)

        elif option == 'Sequence summary':
            self.ui.ckReportCSV.setDisabled(False)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(False)
            self.ui.ckReportDisplay.setChecked(True)
            self.ui.ckReportText.setDisabled(False)
            self.ui.ckReportText.setChecked(True)


        elif option == 'Comma seperated values (.csv)':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(True)
            self.ui.ckReportDisplay.setDisabled(True)
            self.ui.ckReportDisplay.setChecked(False)
            self.ui.ckReportText.setDisabled(True)
            self.ui.ckReportText.setChecked(False)

        elif option == 'CSV format Entire VDB':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(True)
            self.ui.ckReportDisplay.setDisabled(True)
            self.ui.ckReportDisplay.setChecked(False)
            self.ui.ckReportText.setDisabled(True)
            self.ui.ckReportText.setChecked(False)

        elif option == 'Custom report':
            self.ui.ckReportCSV.setDisabled(True)
            self.ui.ckReportCSV.setChecked(False)
            self.ui.ckReportDisplay.setDisabled(True)
            self.ui.ckReportDisplay.setChecked(False)
            self.ui.ckReportText.setDisabled(True)
            self.ui.ckReportText.setChecked(False)

    @pyqtSlot()
    def on_btnQuery_clicked(self):
        option = ''

        # if self.ui.rdoReport.isChecked():
        option = self.ui.cboReportOptions.currentText()

        VReports.StandardReports(self, option, data[0], DBFilename)

    @pyqtSlot()
    def SaveBackup(self):
        Backfilename = os.path.join(working_prefix, 'BackUP.vdb')
        global DBFilename

        try:
            if DBFilename != None:
                #shutil.copy(DBFilename, Backfilename)
                print('Bcak up current DB!')
                shutil.copyfile(DBFilename, Backfilename)
                print('Bcak up finished!')
        except:
            return

    @pyqtSlot()
    def on_actionRevert_to_previous_triggered(self):
        import shutil

        buttons = 'OKC'
        answer = informationMessage(self, 'Any work done since opening this instance of VGenes will be lost.', buttons)
        if answer == 'Cancel':
            return

        Backfilename = os.path.join(working_prefix, 'BackUP.vdb')

        self.GOOpen(False)
        shutil.move(Backfilename, DBFilename)
        self.GOOpen(False)

        self.refreshDB()
        Msg = 'VGene Database resumed!'
        QMessageBox.information(self, 'information', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)

    @pyqtSlot()
    def on_actionExport_triggered(self):
        buttons = 'OKC'
        answer = informationMessage(self, 'This function will only export FASTA format sequences\nFor more formats, please use Generate report function.\nContinue?', buttons)
        if answer == 'Cancel':
            return

        #selected = self.getTreeCheckedChild()
        selected = self.CheckedRecords

        if len(selected) == 0:
            Msg = 'Please select at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                    QMessageBox.Ok)
            return

        SQLStatement = 'SELECT SeqName,Sequence FROM vgenesdb WHERE SeqName IN ("' + '","'.join(selected) + '")'
        
        filename = saveFile(self, 'Nucleotide')
        if filename == '' or filename == None:
            return
        tmp_path, tmp_file = os.path.split(filename)
        if os.access(tmp_path, os.W_OK):
            pass
        else:
            Msg = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        f = open(filename, 'w')
        DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        for record in DataIn:
            f.write('>' + record[0] + '\n' + record[1] + '\n')
        f.close()

        Msg = 'Sequences exported!'
        QMessageBox.information(self, 'information', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)

    @pyqtSlot()
    def on_btnCopyRecords_clicked(self):

        New = False
        self.MoveRecords(New)


    @pyqtSlot()
    def on_btnExtractRecords_clicked(self):
        self.on_actionRecordToNew_triggered()
        '''
        global DBFilename
        global temp_folder

        #New = True
        #self.MoveRecords(New)
        #checkedItems = self.getTreeCheckedChild()
        checkedItems = self.CheckedRecords
        dump_sql_file = VGenesSQL.DumpDB(DBFilename, temp_folder, checkedItems)

        filename = saveFile(self, 'db')
        tmp_path, tmp_file = os.path.split(filename)
        if os.access(tmp_path, os.W_OK):
            pass
        else:
            Msg = 'You do not have the write permission of this folder!\n' + tmp_path
            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        SuccessMsg = VGenesSQL.ImportDB(filename, dump_sql_file)
        if SuccessMsg == False:
            Msg = 'Something wrong when import your selected records into new DB!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                    QMessageBox.Ok)

        msg = 'Open ' + filename + '?'
        buttons = 'YN'
        answer = questionMessage(self, msg, buttons)
        if answer == 'Yes':
            DBFilename = filename
            self.GOOpen(False)
        '''

    @pyqtSlot()
    def on_action_Help_triggered(self):
        Msg = 'VGene was developed and supported by Wilson Lab. Please refer to \nhttp://Wilsonlab.uchicago.edu\n' \
              'for more information'
        QMessageBox.information(self, 'information', Msg, QMessageBox.Ok,
                                QMessageBox.Ok)

    @pyqtSlot()
    def MoveRecords(self, New):
        global DBFilename
        IgBLASTAnalysis = []
        fields = ['*']
        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        if len(DataIs) > 0:
            for item in DataIs:
                IgBLASTAnalysis.append(list(item[:119]))

            if New == True:
                filename = saveFile(self, 'db')
            else:
                filename = openFile(self, 'db')

            if filename == '' or filename == None:
                return
            tmp_path, tmp_file = os.path.split(filename)
            if os.access(tmp_path, os.W_OK):
                pass
            else:
                Msg = 'You do not have the write permission of this folder!\n' + tmp_path
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            answer3 = 'No'

            Startprocessed = len(IgBLASTAnalysis)
            if Startprocessed == 0: return
            if New == True:
                VGenesSQL.creatnewDB(filename)

            Processed, answer, dup_msg = VGenesSQL.enterData(self, filename, IgBLASTAnalysis, answer3, ErlogFile)

            if dup_msg[0] == 'd':
                dup_msg = "Find some duplicated sequence names! We did some midifications:\n" + dup_msg
                QMessageBox.information(self, 'Information', dup_msg, QMessageBox.Ok, QMessageBox.Ok)
            if dup_msg[0] == 'e':
                QMessageBox.warning(self, 'Warning', dup_msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            # todo need code to verify a database is open before you can import sequences.

            msg = 'Open ' + filename + '?'
            buttons = 'YN'
            answer = questionMessage(self, msg, buttons)
            if answer == 'Yes':

                DBFilename = filename
                self.GOOpen(False)

    @pyqtSlot()
    def on_chkSelectAllProt_clicked(self):
        if self.ui.chkSelectAllProt.isChecked():
            self.ui.chkFlexibility.setChecked(True)
            self.ui.chkHydrophilicity.setChecked(True)
            self.ui.chkHydrophobicity.setChecked(True)
            self.ui.chkInstability.setChecked(True)
            self.ui.chkpI.setChecked(True)
            self.ui.chkSurface.setChecked(True)
        else:
            self.ui.chkFlexibility.setChecked(False)
            self.ui.chkHydrophilicity.setChecked(False)
            self.ui.chkHydrophobicity.setChecked(False)
            self.ui.chkInstability.setChecked(False)
            self.ui.chkpI.setChecked(False)
            self.ui.chkSurface.setChecked(False)

    @pyqtSlot()
    def on_pushButtonCloneAlignHTML_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        # fetch sequence names of this clone
        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())

        self.Alignment_thread = Alignment_thread(self)
        self.Alignment_thread.DBFilename = DBFilename
        self.Alignment_thread.checkRecords = member_names
        self.Alignment_thread.HCLC_progress.connect(self.result_display)
        self.Alignment_thread.HCLC_finish.connect(self.handle_alignment_html_clone)
        self.Alignment_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()
    
    def handle_alignment_html_clone(self, res):
        global VGenesTextWindows

        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        # check results
        if res[0] != 'OK':
            QMessageBox.warning(self, 'Warning', res[0], QMessageBox.Ok, QMessageBox.Ok)

        # display
        if self.ui.radioButtonCloneMSA.isChecked():
            # delete close window objects
            del_list = []
            for id, obj in VGenesTextWindows.items():
                if obj.isVisible() == False:
                    del_list.append(id)
            for id in del_list:
                del_obj = VGenesTextWindows.pop(id)

            window_id = int(time.time() * 100)
            VGenesTextWindows[window_id] = htmlDialog()
            VGenesTextWindows[window_id].id = window_id
            layout = QGridLayout(VGenesTextWindows[window_id])
            view = QWebEngineView(self)
            url = QUrl.fromLocalFile(str(res[1]))
            view.load(url)
            view.show()
            layout.addWidget(view)
            VGenesTextWindows[window_id].show()
        else:
            url = QUrl.fromLocalFile(str(res[1]))
            self.ui.HTMLviewClone.load(url)
            self.ui.HTMLviewClone.html = ''
            self.ui.HTMLviewClone.show()

    @pyqtSlot()
    def on_pushButtonAAlogoClone_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        # fetch sequence names of this clone
        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())

        self.SeqLogo_thread = SeqLogo_thread(self)
        self.SeqLogo_thread.DBFilename = DBFilename
        self.SeqLogo_thread.checkRecords = member_names
        self.SeqLogo_thread.type = 'AA'
        self.SeqLogo_thread.color = self.ui.comboBoxClonelogoAAColor.currentText()
        self.SeqLogo_thread.field = self.ui.comboBoxClonelogo.currentText()
        self.SeqLogo_thread.HCLC_progress.connect(self.result_display)
        self.SeqLogo_thread.HCLC_finish.connect(self.handle_logo_html_clone)
        self.SeqLogo_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    @pyqtSlot()
    def on_pushButtonNTlogoClone_clicked(self):
        if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
            return

        # fetch sequence names of this clone
        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())

        self.SeqLogo_thread = SeqLogo_thread(self)
        self.SeqLogo_thread.DBFilename = DBFilename
        self.SeqLogo_thread.checkRecords = member_names
        self.SeqLogo_thread.type = 'NT'
        self.SeqLogo_thread.color = self.ui.comboBoxClonelogoNTColor.currentText()
        self.SeqLogo_thread.field = self.ui.comboBoxClonelogo.currentText()
        self.SeqLogo_thread.HCLC_progress.connect(self.result_display)
        self.SeqLogo_thread.HCLC_finish.connect(self.handle_logo_html_clone)
        self.SeqLogo_thread.start()

        self.progress = ProgressBar(self)
        self.progress.show()

    def handle_logo_html_clone(self, res):
        # close ProgressBar
        try:
            self.progress.FeatProgressBar.setValue(100)
            self.progress.close()
        except:
            pass

        # check results
        if res[0] != 'OK':
            QMessageBox.warning(self, 'Warning', res[0], QMessageBox.Ok, QMessageBox.Ok)
            return
        
        data = res[1]
        format = res[2]
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        if self.ui.radioButtonClonePop.isChecked():
            eps = eps_formatter(data, format)
            if system() == 'Windows':
                options = QtWidgets.QFileDialog.Options()
                out_eps, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                                   "New NT logo",
                                                                   "New NT logo",
                                                                   "Encapsulated PostScript Files (*.eps);;All Files (*)",
                                                                   options=options)
                if out_eps != 'none':
                    with open(out_eps, 'wb') as f:
                        f.write(eps)
                    Msg = 'You sequence logo EPS file has been saved at ' + out_eps
                    QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

                return
            elif system() == 'Darwin':
                out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                with open(out_eps, 'wb') as f:
                    f.write(eps)
                cmd = 'open ' + out_eps  # mac
            # cmd = 'open ' + out_eps  # mac
            elif system() == 'Linux':
                out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                with open(out_eps, 'wb') as f:
                    f.write(eps)
                cmd = 'nautilus' + out_eps  # Linux
            else:
                return
            bot1 = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True,
                         env={"LANG": "en_US.UTF-8", "LC_ALL": "en_US.UTF-8"})
        else:
            error = 0
            try:
                svg = svg_formatter(data, format)
                svg = svg.decode("utf-8")

                out_svg = os.path.join(temp_folder, "out-" + time_stamp + ".html")
                with open(out_svg, 'w') as f:
                    f.write('<!DOCTYPE html>\n<html>\n<body style="margin-left: 0px;\n">')
                    f.write(svg)
                    f.write('\n</body>\n</html>')

                # display
                url = QUrl.fromLocalFile(str(out_svg))
                self.ui.HTMLviewClone.load(url)
                self.ui.HTMLviewClone.html = ''
                self.ui.HTMLviewClone.show()
            except:
                error = 1

            if error == 1:
                try:
                    # generate eps and png
                    eps = eps_formatter(data, format)
                    out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                    with open(out_eps, 'wb') as f:
                        f.write(eps)

                    im = Image.open(out_eps)
                    im.load(scale=4)
                    out_png = os.path.join(temp_folder, "out-" + time_stamp + ".png")
                    im.save(out_png)

                    # load png to HMTL
                    out_html = os.path.join(temp_folder, "out-" + time_stamp + ".html")
                    with open(out_html, 'w') as f:
                        f.write('<!DOCTYPE html>\n<html>\n<body style="margin-left: 0px;\n">')
                        f.write('<p><img src="' + out_png + '" width="960">')
                        f.write('</p>')
                        f.write('\n</body>\n</html>')

                    url = QUrl.fromLocalFile(str(out_html))
                    self.ui.HTMLviewClone.load(url)
                    self.ui.HTMLviewClone.html = ''
                    self.ui.HTMLviewClone.show()
                except:
                    eps = eps_formatter(data, format)
                    if system() == 'Windows':
                        options = QtWidgets.QFileDialog.Options()
                        out_eps, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                                           "New NT logo",
                                                                           "New NT logo",
                                                                           "Encapsulated PostScript Files (*.eps);;All Files (*)",
                                                                           options=options)
                        if out_eps != 'none':
                            with open(out_eps, 'wb') as f:
                                f.write(eps)
                            Msg = 'You sequence logo EPS file has been saved at ' + out_eps
                            QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)

                        return
                    elif system() == 'Darwin':
                        out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                        with open(out_eps, 'wb') as f:
                            f.write(eps)
                        cmd = 'open ' + out_eps  # mac
                        bot1 = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True,
                                     env={"LANG": "en_US.UTF-8", "LC_ALL": "en_US.UTF-8"})
                        Msg = 'Supporting package missed! Will show sequence logo in a file!\n' + out_eps
                        QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                    # cmd = 'open ' + out_eps  # mac
                    elif system() == 'Linux':
                        out_eps = os.path.join(temp_folder, "out-" + time_stamp + ".eps")
                        with open(out_eps, 'wb') as f:
                            f.write(eps)
                        cmd = 'nautilus' + out_eps  # Linux
                        bot1 = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True,
                                     env={"LANG": "en_US.UTF-8", "LC_ALL": "en_US.UTF-8"})
                    else:
                        return

    @pyqtSlot()
    def on_pushButtonProteinHC_clicked(self):
        # step 1: fetch data
        fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
                  'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend', 'Blank7']

        member_names = []
        for row in range(self.ui.tableWidgetHC.rowCount()):
            member_names.append(self.ui.tableWidgetHC.item(row, 0).text())

        if len(member_names) == 0:
            Msg = 'Please check at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif len(member_names) > 100:
            Msg = 'You checked too many sequences!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        WhereState = 'SeqName IN ("' + '","'.join(member_names) + '")'
        SQLStatement = 'SELECT ' + ','.join(fields) + ' FROM vgenesDB WHERE ' + WhereState
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        ## filter out bad sequences
        FilterDataIs = []
        badNumber = 0
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        with open(ErlogFile2, 'w') as currentFile:
            for record in DataIs:
                try:
                    tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                    FilterDataIs.append(record)
                except:
                    errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                    currentFile.write(errMsg)
                    badNumber += 1

        if badNumber > 0:
            self.ShowVGenesText(ErlogFile2)

        # Step 2: make sequences, scores, details
        CDR1beg = 0
        CDR1end = 0
        CDR2beg = 0
        CDR2end = 0
        CDR3beg = 0
        CDR3end = 0
        CDR1len = 0
        CDR2len = 0
        CDR3len = 0
        FW1len = 0
        FW2len = 0
        FW3len = 0
        FW4len = 0

        NameLength = 0
        SeqLength = 0
        SeqArray = []
        AllSeqs = []

        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
        for item in FilterDataIs:
            SeqArray.clear()
            SeqName = item[0]
            SeqArray.append(SeqName)

            # make CDR1beg, CDR1end, just 3 Cs and NameLength
            DNASeq = item[1]
            GDNAseq = item[2]
            mutations = item[10]
            IDEvents = item[11]

            try:
                ORF = int(item[15])
            except:
                ORF = 0

            # unfixed version
            AASeq, ErMessage = VGenesSeq.Translator(DNASeq, ORF)

            if IDEvents == 'Insertion' or IDEvents == 'Both':
                mutate = mutations
                mutations = mutate.split(',')
                for mut in mutations:
                    if mut[:9] == 'Insertion':
                        Ievent = mut
                        Iparts = Ievent.split('-')
                        AddAt = int(Iparts[1])
                        SeqToAdd = Iparts[2]
                        GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

            GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, ORF)

            if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
                GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

            if int(item[4]) != 0:
                SeqArray.append(int((int(item[4]) - 1) / 3))  # 'c1b'
            else:
                SeqArray.append(int((int(GCDRs[2]) - 1) / 3))

            if int(item[5]) != 0:
                SeqArray.append(int((int(item[5])) / 3))  # c1e
            else:
                SeqArray.append(int(int(GCDRs[3]) / 3))

            if int(item[6]) != 0:
                SeqArray.append(int((int(item[6]) - 1) / 3))
            else:
                SeqArray.append(int((int(GCDRs[6]) - 1) / 3))

            if int(item[7]) != 0:
                SeqArray.append(int((int(item[7])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[7]) / 3))

            if int(item[8]) != 0:
                SeqArray.append(int((int(item[8])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[9]) / 3))

            if int(item[9]) != 0:
                SeqArray.append(int((int(item[9])) / 3))
            else:
                SeqArray.append(len(GAASeq))

            if int(item[9]) != 0:
                Jend = int(int(item[14]) / 3)
                SeqArray.append(Jend)
            else:
                SeqArray.append(len(GAASeq))
            # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

            CDR1beg = int(SeqArray[1])
            CDR1end = int(SeqArray[2])
            CDR2beg = int(SeqArray[3])
            CDR2end = int(SeqArray[4])
            CDR3beg = int(SeqArray[5])
            CDR3end = int(SeqArray[6])

            if len(SeqName) > NameLength: NameLength = len(SeqName)

            if len(AASeq) > len(GAASeq):
                LenTo = len(GAASeq)
                AASeq = AASeq[:LenTo]
            else:
                LenTo = len(AASeq)

            SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

            for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
                if AASeq[i] == GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~':
                        AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                        GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

            for i in range(0, LenTo - 1):
                if AASeq[i] != GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                        AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

            AASeq = AASeq.replace('~', '').replace('.', '')

            if len(AASeq) > SeqLength: SeqLength = len(AASeq)

            if CDR1beg > FW1len: FW1len = CDR1beg
            if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
            if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
            if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
            if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
            if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
            if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

            WindowSize = self.ui.spnHydrophobicity.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnHydrophobicity.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnHydrophobicity.setValue(len(AASeq) - 1)
            PhobCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, True)

            PhobScale = (-4.5, 4.5)  # based on tests paramators

            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnHydrophilicity.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnHydrophilicity.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnHydrophilicity.setValue(len(AASeq) - 1)

            PhilCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, True)

            PhilScale = (-3.4, 3.0)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnFlexibility.value()
            if WindowSize < 9:
                WindowSize = 9
                self.ui.spnFlexibility.setValue(9)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnFlexibility.setValue(len(AASeq) - 1)
            FlexCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, True)

            FlexScale = (0.904, 1.102)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnSurface.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnSurface.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnSurface.setValue(len(AASeq) - 1)
            SurfCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, True)

            SurfScale = (0.394, 1.545)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnpI.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnpI.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnpI.setValue(len(AASeq) - 1)
            pICurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, True)

            pIScale = (0, 14)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnInstability.value()
            if WindowSize < 8:
                WindowSize = 8
                self.ui.spnInstability.setValue(8)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnInstability.setValue(len(AASeq) - 1)
            InsCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, True)

            # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
            if ColorMap != 0:
                Highest = max(ColorMap)
                Lowest = min(ColorMap)
                maxi = ((40 - Lowest) / 8) * 11
                InsScale = (Lowest, maxi)  # based on tests paramators
            else:
                InsScale = (0, 1)
            SeqArray.append(ColorMap)

            AllSeqs.append(tuple(SeqArray))

        # Step 3: Make HTML viewers from current data
        ## copy protein viewer template
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        out_html_file = os.path.join(temp_folder, time_stamp + '.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_ProteinViewer.html')
        shutil.copyfile(header_file, out_html_file)

        html_content = '<ul class = "seq_container" style="margin-top: 40px; padding-top: 10px;">\n'
        ## make HTML for each report type
        html_content += '<li>\n<h3 class="title0" >Hydrophobicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 9, PhobScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Hydrophilicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 10, PhilScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Flexibility</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 11, FlexScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Surface liklihood</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 12, SurfScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Isoelectric point (pI)</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 13, pIScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Instability</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 14, InsScale, [])
        html_content += '</li>\n\n'

        html_content += '</ul>\n</body>\n</html>\n'
        ## write content to HTML file
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(html_content)
        out_file_handle.close()

        # Step 4: show HTML on a pop-up window
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        # view.load(QUrl("file://" + out_html_file))
        url = QUrl.fromLocalFile(str(out_html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    @pyqtSlot()
    def on_pushButtonProteinLC_clicked(self):
        # step 1: fetch data
        fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
                  'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend', 'Blank7']

        member_names = []
        for row in range(self.ui.tableWidgetLC.rowCount()):
            member_names.append(self.ui.tableWidgetLC.item(row, 0).text())

        if len(member_names) == 0:
            Msg = 'Please check at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif len(member_names) > 100:
            Msg = 'You checked too many sequences!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        WhereState = 'SeqName IN ("' + '","'.join(member_names) + '")'
        SQLStatement = 'SELECT ' + ','.join(fields) + ' FROM vgenesDB WHERE ' + WhereState
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        ## filter out bad sequences
        FilterDataIs = []
        badNumber = 0
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        with open(ErlogFile2, 'w') as currentFile:
            for record in DataIs:
                try:
                    tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                    FilterDataIs.append(record)
                except:
                    errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                    currentFile.write(errMsg)
                    badNumber += 1

        if badNumber > 0:
            self.ShowVGenesText(ErlogFile2)

        # Step 2: make sequences, scores, details
        CDR1beg = 0
        CDR1end = 0
        CDR2beg = 0
        CDR2end = 0
        CDR3beg = 0
        CDR3end = 0
        CDR1len = 0
        CDR2len = 0
        CDR3len = 0
        FW1len = 0
        FW2len = 0
        FW3len = 0
        FW4len = 0

        NameLength = 0
        SeqLength = 0
        SeqArray = []
        AllSeqs = []

        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
        for item in FilterDataIs:
            SeqArray.clear()
            SeqName = item[0]
            SeqArray.append(SeqName)

            # make CDR1beg, CDR1end, just 3 Cs and NameLength
            DNASeq = item[1]
            GDNAseq = item[2]
            mutations = item[10]
            IDEvents = item[11]

            try:
                ORF = int(item[15])
            except:
                ORF = 0

            # unfixed version
            AASeq, ErMessage = VGenesSeq.Translator(DNASeq, ORF)

            if IDEvents == 'Insertion' or IDEvents == 'Both':
                mutate = mutations
                mutations = mutate.split(',')
                for mut in mutations:
                    if mut[:9] == 'Insertion':
                        Ievent = mut
                        Iparts = Ievent.split('-')
                        AddAt = int(Iparts[1])
                        SeqToAdd = Iparts[2]
                        GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

            GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, ORF)

            if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
                GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

            if int(item[4]) != 0:
                SeqArray.append(int((int(item[4]) - 1) / 3))  # 'c1b'
            else:
                SeqArray.append(int((int(GCDRs[2]) - 1) / 3))

            if int(item[5]) != 0:
                SeqArray.append(int((int(item[5])) / 3))  # c1e
            else:
                SeqArray.append(int(int(GCDRs[3]) / 3))

            if int(item[6]) != 0:
                SeqArray.append(int((int(item[6]) - 1) / 3))
            else:
                SeqArray.append(int((int(GCDRs[6]) - 1) / 3))

            if int(item[7]) != 0:
                SeqArray.append(int((int(item[7])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[7]) / 3))

            if int(item[8]) != 0:
                SeqArray.append(int((int(item[8])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[9]) / 3))

            if int(item[9]) != 0:
                SeqArray.append(int((int(item[9])) / 3))
            else:
                SeqArray.append(len(GAASeq))

            if int(item[9]) != 0:
                Jend = int(int(item[14]) / 3)
                SeqArray.append(Jend)
            else:
                SeqArray.append(len(GAASeq))
            # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

            CDR1beg = int(SeqArray[1])
            CDR1end = int(SeqArray[2])
            CDR2beg = int(SeqArray[3])
            CDR2end = int(SeqArray[4])
            CDR3beg = int(SeqArray[5])
            CDR3end = int(SeqArray[6])

            if len(SeqName) > NameLength: NameLength = len(SeqName)

            if len(AASeq) > len(GAASeq):
                LenTo = len(GAASeq)
                AASeq = AASeq[:LenTo]
            else:
                LenTo = len(AASeq)

            SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

            for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
                if AASeq[i] == GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~':
                        AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                        GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

            for i in range(0, LenTo - 1):
                if AASeq[i] != GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                        AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

            AASeq = AASeq.replace('~', '').replace('.', '')

            if len(AASeq) > SeqLength: SeqLength = len(AASeq)

            if CDR1beg > FW1len: FW1len = CDR1beg
            if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
            if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
            if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
            if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
            if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
            if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

            WindowSize = self.ui.spnHydrophobicity.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnHydrophobicity.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnHydrophobicity.setValue(len(AASeq) - 1)
            PhobCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, True)

            PhobScale = (-4.5, 4.5)  # based on tests paramators

            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnHydrophilicity.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnHydrophilicity.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnHydrophilicity.setValue(len(AASeq) - 1)

            PhilCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, True)

            PhilScale = (-3.4, 3.0)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnFlexibility.value()
            if WindowSize < 9:
                WindowSize = 9
                self.ui.spnFlexibility.setValue(9)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnFlexibility.setValue(len(AASeq) - 1)
            FlexCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, True)

            FlexScale = (0.904, 1.102)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnSurface.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnSurface.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnSurface.setValue(len(AASeq) - 1)
            SurfCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, True)

            SurfScale = (0.394, 1.545)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnpI.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnpI.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnpI.setValue(len(AASeq) - 1)
            pICurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, True)

            pIScale = (0, 14)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnInstability.value()
            if WindowSize < 8:
                WindowSize = 8
                self.ui.spnInstability.setValue(8)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnInstability.setValue(len(AASeq) - 1)
            InsCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, True)

            # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
            if ColorMap != 0:
                Highest = max(ColorMap)
                Lowest = min(ColorMap)
                maxi = ((40 - Lowest) / 8) * 11
                InsScale = (Lowest, maxi)  # based on tests paramators
            else:
                InsScale = (0, 1)
            SeqArray.append(ColorMap)

            AllSeqs.append(tuple(SeqArray))

        # Step 3: Make HTML viewers from current data
        ## copy protein viewer template
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        out_html_file = os.path.join(temp_folder, time_stamp + '.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_ProteinViewer.html')
        shutil.copyfile(header_file, out_html_file)

        html_content = '<ul class = "seq_container" style="margin-top: 40px; padding-top: 10px;">\n'
        ## make HTML for each report type
        html_content += '<li>\n<h3 class="title0" >Hydrophobicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 9, PhobScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Hydrophilicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 10, PhilScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Flexibility</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 11, FlexScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Surface liklihood</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 12, SurfScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Isoelectric point (pI)</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 13, pIScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Instability</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 14, InsScale, [])
        html_content += '</li>\n\n'

        html_content += '</ul>\n</body>\n</html>\n'
        ## write content to HTML file
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(html_content)
        out_file_handle.close()

        # Step 4: show HTML on a pop-up window
        window_id = int(time.time() * 100)
        VGenesTextWindows[window_id] = htmlDialog()
        VGenesTextWindows[window_id].id = window_id
        layout = QGridLayout(VGenesTextWindows[window_id])
        view = QWebEngineView(self)
        # view.load(QUrl("file://" + out_html_file))
        url = QUrl.fromLocalFile(str(out_html_file))
        view.load(url)
        view.show()
        layout.addWidget(view)
        VGenesTextWindows[window_id].show()

    @pyqtSlot()
    def on_pushButtonCloneProtein_clicked(self):
        # step 1: fetch data
        fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
                  'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend', 'Blank7']

        member_names = []
        n_member = self.ui.listWidgetCloneMember.count()
        for i in range(n_member):
            item = self.ui.listWidgetCloneMember.item(i)
            member_names.append(item.text())

        if len(member_names) == 0:
            Msg = 'Please check at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif len(member_names) > 100:
            Msg = 'You checked too many sequences!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        WhereState = 'SeqName IN ("' + '","'.join(member_names) + '")'
        SQLStatement = 'SELECT ' + ','.join(fields) + ' FROM vgenesDB WHERE ' + WhereState
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        ## filter out bad sequences
        FilterDataIs = []
        badNumber = 0
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        with open(ErlogFile2, 'w') as currentFile:
            for record in DataIs:
                try:
                    tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                    FilterDataIs.append(record)
                except:
                    errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                    currentFile.write(errMsg)
                    badNumber += 1

        if badNumber > 0:
            self.ShowVGenesText(ErlogFile2)

        # Step 2: make sequences, scores, details
        CDR1beg = 0
        CDR1end = 0
        CDR2beg = 0
        CDR2end = 0
        CDR3beg = 0
        CDR3end = 0
        CDR1len = 0
        CDR2len = 0
        CDR3len = 0
        FW1len = 0
        FW2len = 0
        FW3len = 0
        FW4len = 0

        NameLength = 0
        SeqLength = 0
        SeqArray = []
        AllSeqs = []

        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
        for item in FilterDataIs:
            SeqArray.clear()
            SeqName = item[0]
            SeqArray.append(SeqName)

            # make CDR1beg, CDR1end, just 3 Cs and NameLength
            DNASeq = item[1]
            GDNAseq = item[2]
            mutations = item[10]
            IDEvents = item[11]

            try:
                ORF = int(item[15])
            except:
                ORF = 0

            # unfixed version
            AASeq, ErMessage = VGenesSeq.Translator(DNASeq, ORF)

            if IDEvents == 'Insertion' or IDEvents == 'Both':
                mutate = mutations
                mutations = mutate.split(',')
                for mut in mutations:
                    if mut[:9] == 'Insertion':
                        Ievent = mut
                        Iparts = Ievent.split('-')
                        AddAt = int(Iparts[1])
                        SeqToAdd = Iparts[2]
                        GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

            GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, ORF)

            if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
                GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

            if int(item[4]) != 0:
                SeqArray.append(int((int(item[4]) - 1) / 3))  # 'c1b'
            else:
                SeqArray.append(int((int(GCDRs[2]) - 1) / 3))

            if int(item[5]) != 0:
                SeqArray.append(int((int(item[5])) / 3))  # c1e
            else:
                SeqArray.append(int(int(GCDRs[3]) / 3))

            if int(item[6]) != 0:
                SeqArray.append(int((int(item[6]) - 1) / 3))
            else:
                SeqArray.append(int((int(GCDRs[6]) - 1) / 3))

            if int(item[7]) != 0:
                SeqArray.append(int((int(item[7])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[7]) / 3))

            if int(item[8]) != 0:
                SeqArray.append(int((int(item[8])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[9]) / 3))

            if int(item[9]) != 0:
                SeqArray.append(int((int(item[9])) / 3))
            else:
                SeqArray.append(len(GAASeq))

            if int(item[9]) != 0:
                Jend = int(int(item[14]) / 3)
                SeqArray.append(Jend)
            else:
                SeqArray.append(len(GAASeq))
            # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

            CDR1beg = int(SeqArray[1])
            CDR1end = int(SeqArray[2])
            CDR2beg = int(SeqArray[3])
            CDR2end = int(SeqArray[4])
            CDR3beg = int(SeqArray[5])
            CDR3end = int(SeqArray[6])

            if len(SeqName) > NameLength: NameLength = len(SeqName)

            if len(AASeq) > len(GAASeq):
                LenTo = len(GAASeq)
                AASeq = AASeq[:LenTo]
            else:
                LenTo = len(AASeq)

            SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

            for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
                if AASeq[i] == GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~':
                        AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                        GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

            for i in range(0, LenTo - 1):
                if AASeq[i] != GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                        AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

            AASeq = AASeq.replace('~', '').replace('.', '')

            if len(AASeq) > SeqLength: SeqLength = len(AASeq)

            if CDR1beg > FW1len: FW1len = CDR1beg
            if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
            if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
            if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
            if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
            if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
            if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

            WindowSize = self.ui.spnHydrophobicity.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnHydrophobicity.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnHydrophobicity.setValue(len(AASeq) - 1)
            PhobCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, True)

            PhobScale = (-4.5, 4.5)  # based on tests paramators

            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnHydrophilicity.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnHydrophilicity.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnHydrophilicity.setValue(len(AASeq) - 1)

            PhilCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, True)

            PhilScale = (-3.4, 3.0)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnFlexibility.value()
            if WindowSize < 9:
                WindowSize = 9
                self.ui.spnFlexibility.setValue(9)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnFlexibility.setValue(len(AASeq) - 1)
            FlexCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, True)

            FlexScale = (0.904, 1.102)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnSurface.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnSurface.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnSurface.setValue(len(AASeq) - 1)
            SurfCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, True)

            SurfScale = (0.394, 1.545)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnpI.value()
            if WindowSize < 2:
                WindowSize = 2
                self.ui.spnpI.setValue(2)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnpI.setValue(len(AASeq) - 1)
            pICurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, True)

            pIScale = (0, 14)  # based on tests paramators
            SeqArray.append(ColorMap)

            WindowSize = self.ui.spnInstability.value()
            if WindowSize < 8:
                WindowSize = 8
                self.ui.spnInstability.setValue(8)
            elif WindowSize > len(AASeq) - 1:
                WindowSize = len(AASeq) - 1
                self.ui.spnInstability.setValue(len(AASeq) - 1)
            InsCurPos = (WindowSize // 2)
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, True)

            # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
            if ColorMap != 0:
                Highest = max(ColorMap)
                Lowest = min(ColorMap)
                maxi = ((40 - Lowest) / 8) * 11
                InsScale = (Lowest, maxi)  # based on tests paramators
            else:
                InsScale = (0, 1)
            SeqArray.append(ColorMap)

            AllSeqs.append(tuple(SeqArray))

        # Step 3: Make HTML viewers from current data
        ## copy protein viewer template
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        out_html_file = os.path.join(temp_folder, time_stamp + '.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_ProteinViewer.html')
        shutil.copyfile(header_file, out_html_file)

        html_content = '<ul class = "seq_container" style="margin-top: 40px; padding-top: 10px;">\n'
        ## make HTML for each report type
        html_content += '<li>\n<h3 class="title0" >Hydrophobicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 9, PhobScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Hydrophilicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 10, PhilScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Flexibility</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 11, FlexScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Surface liklihood</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 12, SurfScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Isoelectric point (pI)</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 13, pIScale, [])
        html_content += '</li>\n\n'

        html_content += '<li>\n<h3 class="title0" >Instability</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 14, InsScale, [])
        html_content += '</li>\n\n'

        html_content += '</ul>\n</body>\n</html>\n'
        ## write content to HTML file
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(html_content)
        out_file_handle.close()

        # Step 4: show HTML on VGenes or pop-up window
        if self.ui.radioButtonCloneMSA.isChecked():
            # display
            window_id = int(time.time() * 100)
            VGenesTextWindows[window_id] = htmlDialog()
            VGenesTextWindows[window_id].id = window_id
            layout = QGridLayout(VGenesTextWindows[window_id])
            view = QWebEngineView(self)
            # view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(out_html_file))
            view.load(url)
            view.show()
            layout.addWidget(view)
            VGenesTextWindows[window_id].show()
        else:
            # display
            url = QUrl.fromLocalFile(str(out_html_file))
            self.ui.HTMLviewClone.load(url)
            self.ui.HTMLviewClone.html = ''
            self.ui.HTMLviewClone.show()

    def proteinFunctions(self):
        # make array of fixed seqs to decorate
        # then run through DNASeq and make arrays for each decoration
        # build document with delineated regions and header line...need to run through
        # datais first to see where regions begin and end to get proper spacing...highest for each section (devided by 3)

        # step 1: fetch data
        fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
                  'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend', 'Blank7']

        #checkedItems = self.getTreeCheckedChild()
        checkedItems = self.CheckedRecords
        if len(checkedItems) == 0:
            Msg = 'Please check at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif len(checkedItems) > 100:
            Msg = 'You checked too many sequences!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        SQLStatement = VGenesSQL.MakeSQLStatementNew(self, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        ## filter out bad sequences
        FilterDataIs = []
        badNumber = 0
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        with open(ErlogFile2, 'w') as currentFile:
            for record in DataIs:
                try:
                    tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                    FilterDataIs.append(record)
                except:
                    errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                    currentFile.write(errMsg)
                    badNumber += 1

        if badNumber > 0:
            self.ShowVGenesText(ErlogFile2)
        
        # Step 2: make sequences, scores, details
        CDR1beg = 0
        CDR1end = 0
        CDR2beg = 0
        CDR2end = 0
        CDR3beg = 0
        CDR3end = 0
        CDR1len = 0
        CDR2len = 0
        CDR3len = 0
        FW1len = 0
        FW2len = 0
        FW3len = 0
        FW4len = 0

        NameLength = 0
        SeqLength = 0
        SeqArray = []
        AllSeqs = []

        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
        for item in FilterDataIs:
            SeqArray.clear()
            SeqName = item[0]
            SeqArray.append(SeqName)

            # make CDR1beg, CDR1end, just 3 Cs and NameLength
            DNASeq = item[1]
            GDNAseq = item[2]
            mutations = item[10]
            IDEvents = item[11]

            try:
                ORF = int(item[15])
            except:
                ORF = 0

            # unfixed version
            AASeq, ErMessage = VGenesSeq.Translator(DNASeq, ORF)

            if IDEvents == 'Insertion' or IDEvents == 'Both':
                mutate = mutations
                mutations = mutate.split(',')
                for mut in mutations:
                    if mut[:9] == 'Insertion':
                        Ievent = mut
                        Iparts = Ievent.split('-')
                        AddAt = int(Iparts[1])
                        SeqToAdd = Iparts[2]
                        GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

            GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, ORF)

            if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
                GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

            if int(item[4]) != 0:
                SeqArray.append(int((int(item[4]) - 1) / 3))  # 'c1b'
            else:
                SeqArray.append(int((int(GCDRs[2]) - 1) / 3))

            if int(item[5]) != 0:
                SeqArray.append(int((int(item[5])) / 3))  # c1e
            else:
                SeqArray.append(int(int(GCDRs[3]) / 3))

            if int(item[6]) != 0:
                SeqArray.append(int((int(item[6]) - 1) / 3))
            else:
                SeqArray.append(int((int(GCDRs[6]) - 1) / 3))

            if int(item[7]) != 0:
                SeqArray.append(int((int(item[7])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[7]) / 3))

            if int(item[8]) != 0:
                SeqArray.append(int((int(item[8])) / 3))
            else:
                SeqArray.append(int(int(GCDRs[9]) / 3))

            if int(item[9]) != 0:
                SeqArray.append(int((int(item[9])) / 3))
            else:
                SeqArray.append(len(GAASeq))

            if int(item[9]) != 0:
                Jend = int(int(item[14]) / 3)
                SeqArray.append(Jend)
            else:
                SeqArray.append(len(GAASeq))
            # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

            CDR1beg = int(SeqArray[1])
            CDR1end = int(SeqArray[2])
            CDR2beg = int(SeqArray[3])
            CDR2end = int(SeqArray[4])
            CDR3beg = int(SeqArray[5])
            CDR3end = int(SeqArray[6])

            if len(SeqName) > NameLength: NameLength = len(SeqName)

            if len(AASeq) > len(GAASeq):
                LenTo = len(GAASeq)
                AASeq = AASeq[:LenTo]
            else:
                LenTo = len(AASeq)

            SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

            for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
                if AASeq[i] == GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~':
                        AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                        GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

            for i in range(0, LenTo - 1):
                if AASeq[i] != GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                        AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

            AASeq = AASeq.replace('~', '').replace('.', '')

            if len(AASeq) > SeqLength: SeqLength = len(AASeq)

            if CDR1beg > FW1len: FW1len = CDR1beg
            if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
            if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
            if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
            if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
            if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
            if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

            if self.ui.chkHydrophobicity.isChecked() == True:

                WindowSize = self.ui.spnHydrophobicity.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnHydrophobicity.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnHydrophobicity.setValue(len(AASeq) - 1)
                PhobCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, True)

                PhobScale = (-4.5, 4.5)  # based on tests paramators

                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkHydrophilicity.isChecked() == True:
                WindowSize = self.ui.spnHydrophilicity.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnHydrophilicity.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnHydrophilicity.setValue(len(AASeq) - 1)

                PhilCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, True)

                PhilScale = (-3.4, 3.0)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkFlexibility.isChecked() == True:
                WindowSize = self.ui.spnFlexibility.value()
                if WindowSize < 9:
                    WindowSize = 9
                    self.ui.spnFlexibility.setValue(9)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnFlexibility.setValue(len(AASeq) - 1)
                FlexCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, True)

                FlexScale = (0.904, 1.102)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkSurface.isChecked() == True:
                WindowSize = self.ui.spnSurface.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnSurface.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnSurface.setValue(len(AASeq) - 1)
                SurfCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, True)

                SurfScale = (0.394, 1.545)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkpI.isChecked() == True:
                WindowSize = self.ui.spnpI.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnpI.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnpI.setValue(len(AASeq) - 1)
                pICurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, True)

                pIScale = (0, 14)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkInstability.isChecked() == True:
                WindowSize = self.ui.spnInstability.value()
                if WindowSize < 8:
                    WindowSize = 8
                    self.ui.spnInstability.setValue(8)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnInstability.setValue(len(AASeq) - 1)
                InsCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, True)

                # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
                if ColorMap != 0:
                    Highest = max(ColorMap)
                    Lowest = min(ColorMap)
                    maxi = ((40 - Lowest) / 8) * 11
                    InsScale = (Lowest, maxi)  # based on tests paramators
                else:
                    InsScale = (0, 1)
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            AllSeqs.append(tuple(SeqArray))

        # Step 3: Make HTML viewers from current data
        ## copy protein viewer template
        time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
        out_html_file = os.path.join(temp_folder, time_stamp + '.html')
        header_file = os.path.join(working_prefix, 'Data', 'template_ProteinViewer.html')
        shutil.copyfile(header_file, out_html_file)
        
        html_content = '<ul class = "seq_container" style="margin-top: 40px; padding-top: 10px;">\n'
        ## make HTML for each report type
        if self.ui.chkHydrophobicity.isChecked() == True:

            html_content += '<li>\n<h3 class="title0" >Hydrophobicity</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 9, PhobScale, [])
            html_content += '</li>\n\n'

        if self.ui.chkHydrophilicity.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Hydrophilicity</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 10, PhilScale, [])
            html_content += '</li>\n\n'

        if self.ui.chkFlexibility.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Flexibility</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 11, FlexScale, [])
            html_content += '</li>\n\n'

        if self.ui.chkSurface.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Surface liklihood</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 12, SurfScale, [])
            html_content += '</li>\n\n'

        if self.ui.chkpI.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Isoelectric point (pI)</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 13, pIScale, [])
            html_content += '</li>\n\n'

        if self.ui.chkInstability.isChecked() == True:
            html_content += '<li>\n<h3 class="title0" >Instability</h3>\n'
            html_content += makeProteinHTML(AllSeqs, 14, InsScale, [])
            html_content += '</li>\n\n'
        
        html_content += '</ul>\n</body>\n</html>\n'
        ## write content to HTML file
        out_file_handle = open(out_html_file, 'a')
        out_file_handle.write(html_content)
        out_file_handle.close()

        # Step 4: show HTML on VGenes or pop-up window
        if self.ui.chkShowInEditor.isChecked():
            # display
            window_id = int(time.time() * 100)
            VGenesTextWindows[window_id] = htmlDialog()
            VGenesTextWindows[window_id].id = window_id
            layout = QGridLayout(VGenesTextWindows[window_id])
            view = QWebEngineView(self)
            #view.load(QUrl("file://" + out_html_file))
            url = QUrl.fromLocalFile(str(out_html_file))
            view.load(url)
            view.show()
            layout.addWidget(view)
            VGenesTextWindows[window_id].show()
        else:
            # display
            url = QUrl.fromLocalFile(str(out_html_file))
            self.ui.HTMLViewProtein.load(url)
            self.ui.HTMLViewProtein.show()

    @pyqtSlot()
    def on_btnGenerateReport_clicked(self):
        self.proteinFunctions()

    def proteinFunctionsOld(self):
        # get info and seqs from checked
        # build text file and colormap to decorate or just CSV of colormap...
        # use 'repaired' aa sequence for color mapping...see decoratepeptide for example
        # as in:      1,0,.5,0.7,3.2,\n

        # first get list of seqs and info as tuple from DB:
        fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
                  'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend']
        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()

        #checkedItems = self.getTreeCheckedChild()
        checkedItems = self.CheckedRecords
        if len(checkedItems) == 0:
            Msg = 'Please check at least one sequence!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return
        elif len(checkedItems) > 100:
            Msg = 'You checked too many sequences!'
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
            return

        SQLStatement = VGenesSQL.MakeSQLStatementNew(self, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        # filter out bad sequences
        FilterDataIs = []
        badNumber = 0
        ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
        with open(ErlogFile2, 'w') as currentFile:
            for record in DataIs:
                try:
                    tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                    FilterDataIs.append(record)
                except:
                    errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                    currentFile.write(errMsg)
                    badNumber += 1

        if badNumber > 0:
            self.ShowVGenesText(ErlogFile2)

        #  make array of fixed seqs to decorate
        # then run through DNASeq and make arrays for each decoration
        # build document with delineated regions and header line...need to run through
        # datais first to see where regions begin and end to get proper spacing...highest for each section (devided by 3)
        CDR1beg = 0
        CDR1end = 0
        CDR2beg = 0
        CDR2end = 0
        CDR3beg = 0
        CDR3end = 0
        CDR1len = 0
        CDR2len = 0
        CDR3len = 0
        FW1len = 0
        FW2len = 0
        FW3len = 0
        FW4len = 0

        NameLength = 0
        SeqLength = 0
        SeqArray = []
        AllSeqs = []

        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
        for item in FilterDataIs:
            SeqArray.clear()
            SeqName = item[0]
            SeqArray.append(SeqName)

            # make CDR1beg, CDR1end, just 3 Cs and NameLength

            DNASeq = item[1]
            GDNAseq = item[2]
            mutations = item[10]
            IDEvents = item[11]

            # unfixed version

            AASeq, ErMessage = VGenesSeq.Translator(DNASeq, 0)

            if IDEvents == 'Insertion' or IDEvents == 'Both':
                mutate = mutations
                mutations = mutate.split(',')
                for mut in mutations:
                    if mut[:9] == 'Insertion':
                        Ievent = mut
                        Iparts = Ievent.split('-')
                        AddAt = int(Iparts[1])
                        SeqToAdd = Iparts[2]
                        GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

            GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, 0)

            if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
                GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

            # GCDRs = [FW1beg, F1e,CDR1b, CDR1end, f2b,f2e, c2b.c2e,f3b,f3e]

            if int(item[4]) != 0:
                SeqArray.append((int(item[4]) - 1) / 3)  # 'c1b'
            else:
                SeqArray.append((int(GCDRs[2]) - 1) / 3)
            if int(item[5]) != 0:
                SeqArray.append((int(item[5])) / 3)  # c1e
            else:
                SeqArray.append(int(GCDRs[3]) / 3)

            if int(item[6]) != 0:
                SeqArray.append((int(item[6]) - 1) / 3)
            else:
                SeqArray.append((int(GCDRs[6]) - 1) / 3)

            if int(item[7]) != 0:
                SeqArray.append((int(item[7])) / 3)
            else:
                SeqArray.append(int(GCDRs[7]) / 3)

            if int(item[8]) != 0:
                SeqArray.append((int(item[8])) / 3)
            else:
                SeqArray.append(int(GCDRs[9]) / 3)

            if int(item[9]) != 0:
                SeqArray.append((int(item[9])) / 3)
            else:
                SeqArray.append(len(GAASeq))

            if int(item[9]) != 0:
                Jend = int(item[14]) / 3
            else:
                SeqArray.append(len(GAASeq))
            # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

            CDR1beg = int(SeqArray[1])
            CDR1end = int(SeqArray[2])
            CDR2beg = int(SeqArray[3])
            CDR2end = int(SeqArray[4])
            CDR3beg = int(SeqArray[5])
            CDR3end = int(SeqArray[6])

            if len(SeqName) > NameLength: NameLength = len(SeqName)

            if len(AASeq) > len(GAASeq):
                LenTo = len(GAASeq)
                AASeq = AASeq[:LenTo]
            else:
                LenTo = len(AASeq)

            SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

            for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
                if AASeq[i] == GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~':
                        AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                        GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

            for i in range(0, LenTo - 1):
                if AASeq[i] != GAASeq[i]:
                    if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                        AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

            AASeq = AASeq.replace('~', '').replace('.', '')

            if len(AASeq) > SeqLength: SeqLength = len(AASeq)

            if CDR1beg > FW1len: FW1len = CDR1beg
            if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
            if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
            if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
            if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
            if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
            if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

            if self.ui.chkHydrophobicity.isChecked() == True:

                WindowSize = self.ui.spnHydrophobicity.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnHydrophobicity.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnHydrophobicity.setValue(len(AASeq) - 1)
                PhobCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', WindowSize, True)

                PhobScale = (-4.5, 4.5)  # based on tests paramators

                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkHydrophilicity.isChecked() == True:
                WindowSize = self.ui.spnHydrophilicity.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnHydrophilicity.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnHydrophilicity.setValue(len(AASeq) - 1)

                PhilCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', WindowSize, True)

                PhilScale = (-3.4, 3.0)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkFlexibility.isChecked() == True:
                WindowSize = self.ui.spnFlexibility.value()
                if WindowSize < 9:
                    WindowSize = 9
                    self.ui.spnFlexibility.setValue(9)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnFlexibility.setValue(len(AASeq) - 1)
                FlexCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', WindowSize, True)

                FlexScale = (0.904, 1.102)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkSurface.isChecked() == True:
                WindowSize = self.ui.spnSurface.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnSurface.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnSurface.setValue(len(AASeq) - 1)
                SurfCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', WindowSize, True)

                SurfScale = (0.394, 1.545)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkpI.isChecked() == True:
                WindowSize = self.ui.spnpI.value()
                if WindowSize < 2:
                    WindowSize = 2
                    self.ui.spnpI.setValue(2)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnpI.setValue(len(AASeq) - 1)
                pICurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', WindowSize, True)

                pIScale = (0, 14)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            if self.ui.chkInstability.isChecked() == True:
                WindowSize = self.ui.spnInstability.value()
                if WindowSize < 8:
                    WindowSize = 8
                    self.ui.spnInstability.setValue(8)
                elif WindowSize > len(AASeq) - 1:
                    WindowSize = len(AASeq) - 1
                    self.ui.spnInstability.setValue(len(AASeq) - 1)
                InsCurPos = (WindowSize // 2)
                ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', WindowSize, True)

                # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
                if ColorMap != 0:
                    Highest = max(ColorMap)
                    Lowest = min(ColorMap)
                    maxi = ((40 - Lowest) / 8) * 11
                    InsScale = (Lowest, maxi)  # based on tests paramators
                SeqArray.append(ColorMap)
            else:
                SeqArray.append('None')

            AllSeqs.append(tuple(SeqArray))

        nameIS = '{message: <{width}}'.format(message='', width=NameLength)
        FW1 = '{message: <{width}}'.format(message='FWR1', width=FW1len)
        CW1 = '{message: <{width}}'.format(message='CDR1', width=CDR1len)
        FW2 = '{message: <{width}}'.format(message='FWR2', width=FW2len)
        CW2 = '{message: <{width}}'.format(message='CDR2', width=CDR2len)
        FW3 = '{message: <{width}}'.format(message='FWR3', width=FW3len)
        CW3 = '{message: <{width}}'.format(message='CDR3', width=CDR3len)
        FW4 = '{message: <{width}}'.format(message='FWR4', width=FW4len)
        HeaderLine = nameIS + ' | ' + FW1 + ' | ' + CW1 + ' | ' + FW2 + ' | ' + CW2 + ' | ' + FW3 + ' | ' + CW3 + ' | ' + FW4 + ' |\n'

        HLen = len(HeaderLine)

        # Colorhead = '{message:0<{width}}'.format(message='', width=HLen)

        NameLength = len(nameIS)

        HydroPhob = []
        HydroPhil = []
        flexi = []
        surface = []
        pI = []
        Instab = []
        CurrentSeq = ''
        if self.ui.chkHydrophobicity.isChecked() == True:
            for i in range(0, HLen - 1):
                HydroPhob.append(0)

        if self.ui.chkHydrophilicity.isChecked() == True:
            for i in range(0, HLen - 1):
                HydroPhil.append(0)

        if self.ui.chkFlexibility.isChecked() == True:
            for i in range(0, HLen - 1):
                flexi.append(0)

        if self.ui.chkSurface.isChecked() == True:
            for i in range(0, HLen - 1):
                surface.append(0)

        if self.ui.chkpI.isChecked() == True:
            for i in range(0, HLen - 1):
                pI.append(0)

        if self.ui.chkInstability.isChecked() == True:
            for i in range(0, HLen - 1):
                Instab.append(0)

        SeqSet = HeaderLine

        for Sequence in AllSeqs:
            PC1b = int(Sequence[1])
            PC1e = int(Sequence[2])
            PC2b = int(Sequence[3])
            PC2e = int(Sequence[4])
            PC3b = int(Sequence[5])
            PC3e = int(Sequence[6])

            AASeq = Sequence[7]

            SeqName = Sequence[0]
            SeqName.replace('|', '-')
            nameIS = '{message: <{width}}'.format(message=SeqName, width=NameLength)

            Segment = AASeq[0:PC1b]

            FW1 = '{message: <{width}}'.format(message=Segment, width=FW1len)
            FW1len2 = len(Segment)
            Segment = AASeq[PC1b:PC1e]
            CW1 = '{message: <{width}}'.format(message=Segment, width=CDR1len)
            CDR1len2 = len(Segment)
            Segment = AASeq[PC1e:PC2b]
            FW2 = '{message: <{width}}'.format(message=Segment, width=FW2len)
            FW2len2 = len(Segment)
            Segment = AASeq[PC2b:PC2e]
            CW2 = '{message: <{width}}'.format(message=Segment, width=CDR2len)
            CDR2len2 = len(Segment)
            Segment = AASeq[PC2e:PC3b]
            FW3 = '{message: <{width}}'.format(message=Segment, width=FW3len)
            FW3len2 = len(Segment)
            Segment = AASeq[PC3b:PC3e]
            CW3 = '{message: <{width}}'.format(message=Segment, width=CDR3len)
            CDR3len2 = len(Segment)
            Segment = AASeq[PC3e:]
            FW4 = '{message: <{width}}'.format(message=Segment, width=FW4len)
            FW4len2 = len(Segment)

            StartNew = len(SeqSet)
            CurrentSeq = nameIS + ' | ' + FW1 + ' | ' + CW1 + ' | ' + FW2 + ' | ' + CW2 + ' | ' + FW3 + ' | ' + CW3 + ' | ' + FW4 + ' |\n'
            SeqSet += CurrentSeq
            LenSeq = len(CurrentSeq)
            CurPos = ''

            for i in range(8, 14):

                if Sequence[i] != 'None':
                    ColorPart = Sequence[i]

                    # make list
                    n = 0
                    j = 0
                    if i == 8:

                        FW1len2 -= PhobCurPos

                        while len(HydroPhob) != StartNew - 1:
                            HydroPhob.append(0)

                        while CurPos != '|':
                            CurPos = SeqSet[StartNew]
                            HydroPhob.append(0)
                            StartNew += 1

                        for j in range(0, 2):  # for window size
                            HydroPhob.append(0)
                            StartNew += 1

                        for j in range(0, FW1len2):
                            if ColorPart != 0:
                                HydroPhob.append(ColorPart[j])
                            else:
                                HydroPhob.append(0)
                            n += 1

                        for j in range(FW1len2, (len(FW1) - PhobCurPos) + 3):  # for end of match and spacer
                            HydroPhob.append(0)

                        for j in range(n, n + CDR1len2):
                            if ColorPart != 0:
                                HydroPhob.append(ColorPart[j])
                            else:
                                HydroPhob.append(0)
                            n += 1
                        for j in range(CDR1len2, len(CW1) + 3):  # for spacer
                            HydroPhob.append(0)

                        for j in range(n, n + FW2len2):
                            if ColorPart != 0:
                                HydroPhob.append(ColorPart[j])
                            else:
                                HydroPhob.append(0)
                            n += 1
                        for j in range(FW2len2, len(FW2) + 3):  # for spacer
                            HydroPhob.append(0)

                        for j in range(n, n + CDR2len2):
                            if ColorPart != 0:
                                HydroPhob.append(ColorPart[j])
                            else:
                                HydroPhob.append(0)
                            n += 1
                        for j in range(CDR2len2, len(CW2) + 3):  # for spacer
                            HydroPhob.append(0)

                        for j in range(n, n + FW3len2):
                            try:
                                if ColorPart != 0:
                                    HydroPhob.append(ColorPart[j])
                                else:
                                    HydroPhob.append(0)
                            except:
                                print('tried2973')
                            n += 1
                        for j in range(FW3len2, len(FW3) + 3):  # for spacer
                            HydroPhob.append(0)

                        for j in range(n, n + CDR3len2):
                            try:
                                if ColorPart != 0:
                                    HydroPhob.append(ColorPart[j])
                                else:
                                    HydroPhob.append(0)
                                n += 1
                            except:
                                print('tried2987')
                        for j in range(CDR3len2, len(CW3) + 3):  # for spacer
                            HydroPhob.append(0)

                        for j in range(n, n + FW4len2 - 1):
                            try:
                                if ColorPart != 0:
                                    HydroPhob.append(ColorPart[j])
                                else:
                                    HydroPhob.append(0)
                                n += 1
                            except:
                                print('done')


                                # while len(HydroPhob) < LenSeq:
                                #     HydroPhob.append(0)


                    elif i == 9:

                        FW1len2 -= 2

                        while len(HydroPhil) != StartNew - 1:
                            HydroPhil.append(0)

                        while CurPos != '|':
                            CurPos = SeqSet[StartNew]
                            HydroPhil.append(0)
                            StartNew += 1

                        for j in range(0, 2):  # for window size
                            HydroPhil.append(0)
                            StartNew += 1

                        for j in range(0, FW1len2):
                            if ColorPart != 0:
                                HydroPhil.append(ColorPart[j])
                            else:
                                HydroPhil.append(0)
                            n += 1

                        for j in range(FW1len2, (len(FW1) - PhilCurPos) + 3):  # for end of match and spacer
                            HydroPhil.append(0)

                        for j in range(n, n + CDR1len2):
                            if ColorPart != 0:
                                HydroPhil.append(ColorPart[j])
                            else:
                                HydroPhil.append(0)
                            n += 1
                        for j in range(CDR1len2, len(CW1) + 3):  # for spacer
                            HydroPhil.append(0)

                        for j in range(n, n + FW2len2):
                            if ColorPart != 0:
                                HydroPhil.append(ColorPart[j])
                            else:
                                HydroPhil.append(0)
                            n += 1
                        for j in range(FW2len2, len(FW2) + 3):  # for spacer
                            HydroPhil.append(0)

                        for j in range(n, n + CDR2len2):
                            if ColorPart != 0:
                                HydroPhil.append(ColorPart[j])
                            else:
                                HydroPhil.append(0)
                            n += 1
                        for j in range(CDR2len2, len(CW2) + 3):  # for spacer
                            HydroPhil.append(0)

                        for j in range(n, n + FW3len2):
                            try:
                                if ColorPart != 0:
                                    HydroPhil.append(ColorPart[j])
                                else:
                                    HydroPhil.append(0)
                            except:
                                print('tried3075')
                            n += 1
                        for j in range(FW3len2, len(FW3) + 3):  # for spacer
                            HydroPhil.append(0)

                        for j in range(n, n + CDR3len2):
                            try:
                                if ColorPart != 0:
                                    HydroPhil.append(ColorPart[j])
                                else:
                                    HydroPhil.append(0)
                                n += 1
                            except:
                                print('tried3089')
                        for j in range(CDR3len2, len(CW3) + 3):  # for spacer
                            HydroPhil.append(0)

                        for j in range(n, n + FW4len2 - 1):
                            try:
                                if ColorPart != 0:
                                    HydroPhil.append(ColorPart[j])
                                else:
                                    HydroPhil.append(0)
                                n += 1
                            except:
                                print('done')

                                # while len(HydroPhil) < len(SeqSet):
                                #     HydroPhil.append(0)


                    elif i == 10:

                        FW1len2 -= 2

                        while len(flexi) != StartNew - 1:
                            flexi.append(0)

                        while CurPos != '|':
                            CurPos = SeqSet[StartNew]
                            flexi.append(0)
                            StartNew += 1

                        for j in range(0, 2):  # for window size
                            flexi.append(0)
                            StartNew += 1

                        for j in range(0, FW1len2):
                            if ColorPart != 0:
                                flexi.append(ColorPart[j])
                            else:
                                flexi.append(0)
                            n += 1

                        for j in range(FW1len2, (len(FW1) - FlexCurPos) + 3):  # for end of match and spacer
                            flexi.append(0)

                        for j in range(n, n + CDR1len2):
                            if ColorPart != 0:
                                flexi.append(ColorPart[j])
                            else:
                                flexi.append(0)
                            n += 1
                        for j in range(CDR1len2, len(CW1) + 3):  # for spacer
                            flexi.append(0)

                        for j in range(n, n + FW2len2):
                            if ColorPart != 0:
                                flexi.append(ColorPart[j])
                            else:
                                flexi.append(0)
                            n += 1
                        for j in range(FW2len2, len(FW2) + 3):  # for spacer
                            flexi.append(0)

                        for j in range(n, n + CDR2len2):
                            if ColorPart != 0:
                                flexi.append(ColorPart[j])
                            else:
                                flexi.append(0)
                            n += 1
                        for j in range(CDR2len2, len(CW2) + 3):  # for spacer
                            flexi.append(0)

                        for j in range(n, n + FW3len2):
                            try:
                                if ColorPart != 0:
                                    flexi.append(ColorPart[j])
                                else:
                                    flexi.append(0)
                            except:
                                print('tried3176')
                            n += 1
                        for j in range(FW3len2, len(FW3) + 3):  # for spacer
                            flexi.append(0)

                        for j in range(n, n + CDR3len2):
                            try:
                                if ColorPart != 0:
                                    flexi.append(ColorPart[j])
                                else:
                                    flexi.append(0)
                                n += 1
                            except:
                                print('tried3190')
                        for j in range(CDR3len2, len(CW3) + 3):  # for spacer
                            flexi.append(0)

                        for j in range(n, n + FW4len2 - 1):
                            try:
                                if ColorPart != 0:
                                    flexi.append(ColorPart[j])
                                else:
                                    flexi.append(0)
                                n += 1
                            except:
                                print('done')
                                # while len(flexi) < len(SeqSet):
                                #     flexi.append(0)


                    elif i == 11:

                        FW1len2 -= 2

                        while len(surface) != StartNew - 1:
                            surface.append(0)

                        while CurPos != '|':
                            CurPos = SeqSet[StartNew]
                            surface.append(0)
                            StartNew += 1

                        for j in range(0, 2):  # for window size
                            surface.append(0)
                            StartNew += 1

                        for j in range(0, FW1len2):
                            if ColorPart != 0:
                                surface.append(ColorPart[j])
                            else:
                                surface.append(0)
                            n += 1

                        for j in range(FW1len2, (len(FW1) - SurfCurPos) + 3):  # for end of match and spacer
                            surface.append(0)

                        for j in range(n, n + CDR1len2):
                            if ColorPart != 0:
                                surface.append(ColorPart[j])
                            else:
                                surface.append(0)
                            n += 1
                        for j in range(CDR1len2, len(CW1) + 3):  # for spacer
                            surface.append(0)

                        for j in range(n, n + FW2len2):
                            if ColorPart != 0:
                                surface.append(ColorPart[j])
                            else:
                                surface.append(0)
                            n += 1
                        for j in range(FW2len2, len(FW2) + 3):  # for spacer
                            surface.append(0)

                        for j in range(n, n + CDR2len2):
                            if ColorPart != 0:
                                surface.append(ColorPart[j])
                            else:
                                surface.append(0)
                            n += 1
                        for j in range(CDR2len2, len(CW2) + 3):  # for spacer
                            surface.append(0)

                        for j in range(n, n + FW3len2):
                            try:
                                if ColorPart != 0:
                                    surface.append(ColorPart[j])
                                else:
                                    surface.append(0)
                            except:
                                print('tried3276')
                            n += 1
                        for j in range(FW3len2, len(FW3) + 3):  # for spacer
                            surface.append(0)

                        for j in range(n, n + CDR3len2):
                            try:
                                if ColorPart != 0:
                                    surface.append(ColorPart[j])
                                else:
                                    surface.append(0)
                                n += 1
                            except:
                                print('tried3290')
                        for j in range(CDR3len2, len(CW3) + 3):  # for spacer
                            surface.append(0)

                        for j in range(n, n + FW4len2 - 1):
                            try:
                                if ColorPart != 0:
                                    surface.append(ColorPart[j])
                                else:
                                    surface.append(0)
                                n += 1
                            except:
                                print('done')
                                # while len(surface) < len(SeqSet):
                                #     surface.append(0)

                    elif i == 12:

                        FW1len2 -= 2

                        while len(pI) != StartNew - 1:
                            pI.append(0)

                        while CurPos != '|':
                            CurPos = SeqSet[StartNew]
                            pI.append(0)
                            StartNew += 1

                        for j in range(0, 2):  # for window size
                            pI.append(0)
                            StartNew += 1

                        for j in range(0, FW1len2):
                            if ColorPart != 0:
                                pI.append(ColorPart[j])
                            else:
                                pI.append(0)
                            n += 1

                        for j in range(FW1len2, (len(FW1) - pICurPos) + 3):  # for end of match and spacer
                            pI.append(0)

                        for j in range(n, n + CDR1len2):
                            if ColorPart != 0:
                                pI.append(ColorPart[j])
                            else:
                                pI.append(0)
                            n += 1
                        for j in range(CDR1len2, len(CW1) + 3):  # for spacer
                            pI.append(0)

                        for j in range(n, n + FW2len2):
                            if ColorPart != 0:
                                pI.append(ColorPart[j])
                            else:
                                pI.append(0)
                            n += 1
                        for j in range(FW2len2, len(FW2) + 3):  # for spacer
                            pI.append(0)

                        for j in range(n, n + CDR2len2):
                            if ColorPart != 0:
                                pI.append(ColorPart[j])
                            else:
                                pI.append(0)
                            n += 1
                        for j in range(CDR2len2, len(CW2) + 3):  # for spacer
                            pI.append(0)

                        for j in range(n, n + FW3len2):
                            try:
                                if ColorPart != 0:
                                    pI.append(ColorPart[j])
                                else:
                                    pI.append(0)
                            except:
                                print('tried3374')
                            n += 1
                        for j in range(FW3len2, len(FW3) + 3):  # for spacer
                            pI.append(0)

                        for j in range(n, n + CDR3len2):
                            try:
                                if ColorPart != 0:
                                    pI.append(ColorPart[j])
                                else:
                                    pI.append(0)
                                n += 1
                            except:
                                print('tried3388')
                        for j in range(CDR3len2, len(CW3) + 3):  # for spacer
                            pI.append(0)

                        for j in range(n, n + FW4len2 - 1):
                            try:
                                if ColorPart != 0:
                                    pI.append(ColorPart[j])
                                else:
                                    pI.append(0)
                                n += 1
                            except:
                                print('done')
                                # while len(pI) < len(SeqSet):
                                #     pI.append(0)

                    elif i == 13:

                        FW1len2 -= 2

                        while len(Instab) != StartNew - 1:
                            Instab.append(0)

                        while CurPos != '|':
                            CurPos = SeqSet[StartNew]
                            Instab.append(0)
                            StartNew += 1

                        for j in range(0, InsCurPos):  # for window size
                            Instab.append(0)
                            StartNew += 1

                        for j in range(0, 2):
                            if ColorPart != 0:
                                Instab.append(ColorPart[j])
                            else:
                                Instab.append(0)
                            n += 1

                        for j in range(FW1len2, (len(FW1) - InsCurPos) + 3):  # for end of match and spacer
                            Instab.append(0)

                        for j in range(n, n + CDR1len2):
                            if ColorPart != 0:
                                Instab.append(ColorPart[j])
                            else:
                                Instab.append(0)
                            n += 1
                        for j in range(CDR1len2, len(CW1) + 3):  # for spacer
                            Instab.append(0)

                        for j in range(n, n + FW2len2):
                            if ColorPart != 0:
                                Instab.append(ColorPart[j])
                            else:
                                Instab.append(0)
                            n += 1
                        for j in range(FW2len2, len(FW2) + 3):  # for spacer
                            Instab.append(0)

                        for j in range(n, n + CDR2len2):
                            if ColorPart != 0:
                                Instab.append(ColorPart[j])
                            else:
                                Instab.append(0)
                            n += 1
                        for j in range(CDR2len2, len(CW2) + 3):  # for spacer
                            Instab.append(0)

                        for j in range(n, n + FW3len2):
                            try:
                                if ColorPart != 0:
                                    Instab.append(ColorPart[j])
                                else:
                                    Instab.append(0)
                            except:
                                print('tried3472')
                            n += 1
                        for j in range(FW3len2, len(FW3) + 3):  # for spacer
                            Instab.append(0)

                        for j in range(n, n + CDR3len2):
                            try:
                                if ColorPart != 0:
                                    Instab.append(ColorPart[j])
                                else:
                                    Instab.append(0)
                                n += 1
                            except:
                                print('tried3486')
                        for j in range(CDR3len2, len(CW3) + 3):  # for spacer
                            Instab.append(0)

                        for j in range(n, n + FW4len2 - 1):
                            try:
                                if ColorPart != 0:
                                    Instab.append(ColorPart[j])
                                else:
                                    Instab.append(0)
                                n += 1
                            except:
                                print('done')

                                # while len(Instab) < len(SeqSet):
                                #     Instab.append(0)






                                # self.DecorateText(FinalMap, Scale, CurPos, cursor)

                                # FW1 = '{message:0<{width}}'.format(message=Segment, width=FW1len) #the 0 is fill character
        FinalDoc = 'Protein properties report\n\n'

        FinalMap = []  # '000000000000000000000000000'
        FinalMap.clear
        for i in range(0, len(FinalDoc)):
            FinalMap.append(0)

        CurPos = 0

        if self.ui.chkHydrophobicity.isChecked() == True:
            FinalDoc += 'Hydrophobicity:\n' + SeqSet + '\n'
            # testLen = len(FinalDoc)
        if self.ui.chkHydrophilicity.isChecked() == True:
            FinalDoc += 'Hydrophilicity:\n' + SeqSet + '\n'
            # testLen = len(FinalDoc)
        if self.ui.chkFlexibility.isChecked() == True:
            FinalDoc += 'Flexibility:\n' + SeqSet + '\n'

        if self.ui.chkSurface.isChecked() == True:
            FinalDoc += 'Surface liklihood:\n' + SeqSet + '\n'

        if self.ui.chkpI.isChecked() == True:
            FinalDoc += 'Isoelectric point (pI):\n' + SeqSet + '\n'

        if self.ui.chkInstability.isChecked() == True:
            FinalDoc += 'Instability:\n' + SeqSet + '\n'

        FinalDoc += 'Scale: Low-> -5|-4|-3|-2|-1| 0 |+1|+2|+3|+4|+5  ->high'
        
        # load doc text into text editor
        if self.ui.chkShowInEditor.isChecked() == True:
            Style = 'ProteinReport'
            self.ShowVGenesTextEdit(FinalDoc, Style)
            cursor = self.TextEdit.textEdit.textCursor()
        else:
            self.ui.txtProtein.setText(FinalDoc)
            cursor = self.ui.txtProtein.textCursor()

        # color decorate
        if self.ui.chkHydrophobicity.isChecked() == True:

            for i in range(0, 16):
                FinalMap.append(0)

            for item in HydroPhob:
                FinalMap.append(item)

            testS = FinalDoc[CurPos]
            CurPos += PhobCurPos
            Scale = PhobScale

            testS = FinalDoc[CurPos]
            self.DecorateText(FinalMap, Scale, CurPos, cursor)
            CurPos += len(FinalMap)
            testS = FinalDoc[CurPos]
            while testS != '|':
                testS = FinalDoc[CurPos]
                CurPos += 1
            CurPos += 1 # the space line

            testS = FinalDoc[CurPos]
            FinalMap.clear()

        if self.ui.chkHydrophilicity.isChecked() == True:

            for i in range(0, 16):
                FinalMap.append(0)

            for item in HydroPhil:
                FinalMap.append(item)

            testS = FinalDoc[CurPos]
            if CurPos == 0:
                CurPos += PhilCurPos
            else:
                CurPos += PhilCurPos - 1
            Scale = PhilScale

            testS = FinalDoc[CurPos]
            self.DecorateText(FinalMap, Scale, CurPos, cursor)
            CurPos += len(FinalMap)
            testS = FinalDoc[CurPos]
            while testS != '|':
                testS = FinalDoc[CurPos]
                CurPos += 1
            CurPos += 1 # the space line

            testS = FinalDoc[CurPos]
            FinalMap.clear()

        if self.ui.chkFlexibility.isChecked() == True:

            for i in range(0, 13):
                FinalMap.append(0)

            for item in flexi:
                FinalMap.append(item)

            if CurPos == 0:
                CurPos += FlexCurPos
            else:
                CurPos += PhilCurPos - 1
            Scale = FlexScale

            self.DecorateText(FinalMap, Scale, CurPos, cursor)
            CurPos += len(FinalMap)
            testS = FinalDoc[CurPos]
            while testS != '|':
                testS = FinalDoc[CurPos]
                CurPos += 1
            CurPos += 1
            FinalMap.clear()

        if self.ui.chkSurface.isChecked() == True:

            for i in range(0, 19):
                FinalMap.append(0)

            for item in surface:
                FinalMap.append(item)

            if CurPos == 0:
                CurPos += SurfCurPos
            else:
                CurPos += SurfCurPos - 1
            Scale = SurfScale

            self.DecorateText(FinalMap, Scale, CurPos, cursor)
            CurPos += len(FinalMap)
            testS = FinalDoc[CurPos]
            while testS != '|':
                testS = FinalDoc[CurPos]
                CurPos += 1
            CurPos += 1
            FinalMap.clear()

        if self.ui.chkpI.isChecked() == True:

            for i in range(0, 25):
                FinalMap.append(0)

            for item in pI:
                FinalMap.append(item)

            if CurPos == 0:
                CurPos += pICurPos
            else:
                CurPos += pICurPos - 1
            Scale = pIScale

            self.DecorateText(FinalMap, Scale, CurPos, cursor)
            CurPos += len(FinalMap)
            testS = FinalDoc[CurPos]
            while testS != '|':
                testS = FinalDoc[CurPos]
                CurPos += 1
            CurPos += 1
            FinalMap.clear()

        if self.ui.chkInstability.isChecked() == True:

            for i in range(0, 13):
                FinalMap.append(0)

            for item in Instab:
                FinalMap.append(item)

            if CurPos == 0:
                CurPos += InsCurPos
            else:
                CurPos += InsCurPos - 1
            Scale = InsScale

            self.DecorateText(FinalMap, Scale, CurPos, cursor)
            #CurPos += len(FinalMap)
            #testS = FinalDoc[CurPos]
            #while testS != '|':
            #	testS = FinalDoc[CurPos]
            #	CurPos += 1
            #CurPos += 1
            FinalMap.clear()

        # Decorate the scale
        Scale = (-5, 5)
        CurPos = len(FinalDoc) - 55
        # 'Scale: Low-> -5|-4|-3|-2|-1| 0 |+1|+2|+3|+4|+5  ->high'
        for i in range(0, 14):
            FinalMap.append(0)  # 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,10,0,0,0,0,0,0,0)
        for i in range(-5, 6):
            for j in range(0, 3):
                FinalMap.append(i)
        FinalMap.append(10)
        for i in range(0, 7):
            FinalMap.append(0)

        self.DecorateText(FinalMap, Scale, CurPos, cursor)

        # slightly resize the UI to refresh
        size_w = self.size().width()
        size_h = self.size().height()
        offset_pool = [-1, 1]
        offset = offset_pool[random.randint(0, 1)]
        self.resize(size_w + offset, size_h + offset)

    @pyqtSlot()
    def on_btnUpdateTree_clicked(self):
        if self.ui.treeWidget.isEnabled():
            if DBFilename == '' or DBFilename == 'none' or DBFilename == None:
                return
            '''
            fields = self.ui.cboTreeOp1.currentText()
            field1Index = self.ui.cboTreeOp1.currentIndex()
    
            value = self.ui.treeWidget.selectedItems()
            currentitemIs = ''
    
            for item in value:
                currentitemIs = item.text(0)
    
            field1 = self.TransLateFieldtoReal(fields, True)
    
            fields = self.ui.cboTreeOp2.currentText()
    
            field2 = self.TransLateFieldtoReal(fields, True)
            field2Index = self.ui.cboTreeOp2.currentIndex()
    
            fields = self.ui.cboTreeOp3.currentText()
    
            # self.ui.lblTreeOtions3.setText(data[self.ui.cboTreeOp3.currentIndex()])
            field3 = self.TransLateFieldtoReal(fields, True)
            field3Index = self.ui.cboTreeOp3.currentIndex()
            if field1 == '': field1 = 'None'
            if field2 == '': field1 = 'None'
            if field3 == '': field1 = 'None'
            '''

            field1 = re.sub(r'\(.+', '', self.ui.cboTreeOp1.currentText())
            '''
            i = 0
            for item in FieldList:
                if field1 == item:
                    field1Value = data[i]
                i += 1
            '''
            field2 = re.sub(r'\(.+', '', self.ui.cboTreeOp2.currentText())
            '''
            i = 0
            for item in FieldList:
                if field2 == item:
                    field2Value = data[i]
                i += 1
            '''
            field3 = re.sub(r'\(.+', '', self.ui.cboTreeOp3.currentText())
            '''
            i = 0
            for item in FieldList:
                if field3 == item:
                    field3Value = data[i]
                i += 1
            '''
            if field1 == '': field1 = 'None'
            if field2 == '': field1 = 'None'
            if field3 == '': field1 = 'None'

            SQLFields = []
            SQLFields.append(field1)
            SQLFields.append(field2)
            SQLFields.append(field3)

            value = self.ui.treeWidget.selectedItems()
            currentitemIs = ''

            for item in value:
                currentitemIs = item.text(0)

            #model = self.ui.tableView.model()

            # global RefreshSQL
            if field1 == 'None' or field1 is None:
                RefreshSQL = 'select * from vgenesdb ORDER BY SeqName'
            elif field2 == 'None' or field2 is None:
                RefreshSQL = 'select * from vgenesdb ORDER BY ' + field1 + ', SeqName'
            elif field3 == 'None' or field3 is None:
                RefreshSQL = 'select * from vgenesdb ORDER BY ' + field1 + ', ' + field2 + ', SeqName'
            else:
                RefreshSQL = 'select * from vgenesdb ORDER BY ' + field1 + ', ' + field2 + ', ' + field3 + ', SeqName'

            #model.refresh()

            #self.ui.tableView.sortByColumn(field1Index, Qt.AscendingOrder)
            #self.ui.tableView.sortByColumn(0, Qt.AscendingOrder)
            #self.ui.tableView.sortByColumn(field3Index, Qt.AscendingOrder)
            #self.ui.tableView.sortByColumn(field2Index, Qt.AscendingOrder)

            self.initializeTreeView(SQLFields)
            global DontFindTwice
            DontFindTwice = True
            self.findTreeItem(currentitemIs)
            self.tree_to_table_selection()
            # self.ui.treeWidget.
            DontFindTwice = False

            self.ui.checkBoxAll.setChecked(False)
            self.ui.checkBoxAll1.setChecked(False)
            self.ui.treeWidget.expandAll()

    def findTreeItem(self, ChildName):
        if self.ui.treeWidget.isEnabled():
            found = self.ui.treeWidget.findItems(ChildName, Qt.MatchRecursive, 0)

            for item in found:
                currentRecord = item.text(0)
                if len(found) > 1: break
    
                # print(currentRecord)
            if len(found) > 0:
                self.ui.treeWidget.setCurrentItem(item)
            try:
                return item
            except:
                print("error!")

    def on_radioButtonSeqView_clicked(self):
        global JustMoved
        JustMoved = True
        self.ui.txtDNASeq.setText(data[79])

        try:
            self.SeqButton(LastPushed)
        except:
            self.SeqButton('v')

    def updateF(self, nID):
        ID =int(nID)
        if ID == -1 or ID == -2:
            global PreVID
            PreVID = 0

        # clear fields\
        global JustMovedIt
        global FirstupdateF
        JustMovedIt = True
        # JustMoved = True
        if PreVID != ID:
            if ID != -1:
                data.clear()

                self.ui.txtVbeg.clear()
                self.ui.txtVExp.clear()
                self.ui.txtJend_2.clear()
                self.ui.txtJExp.clear()

                #if FirstupdateF == False and ID > -1:
                # MatchingIndex = NameIndex[name]
                if ID == -2: ID = 0
                try:
                    newID = list(NameIndex.keys())[list(NameIndex.values()).index(ID)]
                except:
                    return
                SQLStatement = 'SELECT * FROM vgenesDB WHERE SeqName = "' + str(newID) + '"'
                DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
                for record in DataIs:
                    for item in record:
                        data.append(str(item))
                #else:
                #	model = self.ui.tableView.model()
                #	if ID == -2: ID = 0
                #	for i in range(0, 120):
                #		index = model.index(ID, i)
                #		data.append(str(model.data(index)))

                #	FirstupdateF = False

                PreVID = ID

                if data[78] == 'Human':
                    self.ui.comboBoxSpecies.setCurrentText('Human')
                elif data[78] == 'Mouse':
                    self.ui.comboBoxSpecies.setCurrentText('Mouse')
                else:
                    self.ui.comboBoxSpecies.setCurrentText('Others')
                
                self.ui.txtName.setText(data[0])
                self.ui.txtName_2.setText(data[0])
                self.ui.label_Name.setText(data[0])

                self.ui.txtGeneType.setText(data[2])
                self.ui.txtVgene.setText(data[3])
                self.ui.txtDgene.setText(data[6])
                self.ui.txtJgene.setText(data[9])
                self.ui.txtVGeneSeq.setText(data[3])
                self.ui.txtDGeneSeq.setText(data[6])
                self.ui.txtJGeneSeq.setText(data[9])
                self.ui.txtStop.setText(data[12])

                self.ui.txtVLocus.setText(data[90])
                self.ui.txtDLocus.setText(data[92])
                self.ui.txtJLocus.setText(data[91])
                if data[108] != 'Blank10':
                    self.ui.textBarcode.setText(data[108])
                if data[106] != 'Blank8':
                    self.ui.textCluster.setText(data[106])

                if data[107] != 'Blank9':
                    self.ui.textEdit.setText(data[107])

                if data[109] != 'Blank11':
                    self.ui.txtPopulation.setText(data[109])
                else:
                    self.ui.txtPopulation.setText("")

                VSeq = data[79]
                GVSeq = data[80].upper()
                # AASeq, ErMessage = VGenesSeq.Translator(VGenesSeq, 0)
                try:
                    ORF = int(data[105])
                except:
                    ORF = 0
                try:
                    Vbeg = int(data[67])
                    GVbeg = int(data[59])
                    self.ui.sbVbeg.setValue(Vbeg)
                    Vend = int(data[68])
                    self.ui.sbVend.setValue(Vend)

                    VBegSeq = VSeq[0:9+ORF]
                    VBegAASeq, ErMessage = VGenesSeq.Translator(VBegSeq, ORF)
                except:
                    print('none error')
                try:
                    if ORF == 0:
                        VbegDisplay = ' ' + VBegAASeq[0] + '   ' + VBegAASeq[1] + '   ' + VBegAASeq[2] + ' \n' + VBegSeq[0:3] + ' ' + VBegSeq[3:6] + ' ' + VBegSeq[6:9]
                    elif ORF ==1:
                        VbegDisplay = '   ' + VBegAASeq[0] + '   ' + VBegAASeq[1] + '   ' + VBegAASeq[
                            2] + ' \n' + VBegSeq[0:1] + ' ' + VBegSeq[1:4] + ' ' + VBegSeq[4:7] + ' ' + VBegSeq[7:10]
                    elif ORF == 2:
                        VbegDisplay = '    ' + VBegAASeq[0] + '   ' + VBegAASeq[1] + '   ' + VBegAASeq[
                            2] + ' \n' + VBegSeq[0:2] + ' ' + VBegSeq[2:5] + ' ' + VBegSeq[5:8] + ' ' + VBegSeq[8:11]
                except:
                    print('oops')

                GVBegSeq = GVSeq[0:9+ORF]
                GVBegAASeq, ErMessage = VGenesSeq.Translator(GVBegSeq, ORF)
                try:
                    if ORF == 0:
                        GVbegDisplay = ' ' + GVBegAASeq[0] + '   ' + GVBegAASeq[1] + '   ' + GVBegAASeq[2] + ' \n' + GVBegSeq[0:3] + ' ' + GVBegSeq[3:6] + ' ' + GVBegSeq[6:9]
                    elif ORF == 1:
                        GVbegDisplay = '   ' + GVBegAASeq[0] + '   ' + GVBegAASeq[1] + '   ' + GVBegAASeq[
                            2] + ' \n' + GVBegSeq[0:1] + ' ' + GVBegSeq[1:4] + ' ' + GVBegSeq[4:7] + ' ' + GVBegSeq[7:10]
                    elif ORF == 2:
                        GVbegDisplay = '    ' + GVBegAASeq[0] + '   ' + GVBegAASeq[1] + '   ' + GVBegAASeq[
                            2] + ' \n' + GVBegSeq[0:2] + ' ' + GVBegSeq[2:5] + ' ' + GVBegSeq[5:8] + ' ' + GVBegSeq[8:11]
                except:
                    print('oops')

                try:
                    Dbeg = int(data[69])
                    self.ui.sbDbeg.setValue(Dbeg)
                    Dend = int(data[70])
                    self.ui.sbDend.setValue(Dend)
                except:
                    print('D error')

                try:
                    self.ui.txtVbeg.setText(VbegDisplay)
                    self.ui.txtVExp.setText(GVbegDisplay)

                    Jbeg = int(data[73])
                    self.ui.sbJbeg.setValue(Jbeg)
                    Jend = int(data[74])

                    self.ui.sbJend.setValue(Jend)

                    #JendSeq = VSeq[Jend-10:Jend]    # why last 11bp?
                    #JendAASeq, ErMessage = VGenesSeq.Translator(JendSeq, 0)
                    cur_orf = (3 - (Jbeg - 1)%3)%3 + ORF
                    Jseq = VSeq[Jbeg -1 + cur_orf:Jend]
                    Jseq = Jseq[0:len(Jseq)//3*3]
                    JendSeq = Jseq[-9:]
                    JendAASeq, ErMessage = VGenesSeq.Translator(JendSeq, 0)
                    JendDisplay = ' ' + JendAASeq[0] + '   ' + JendAASeq[1] + '   ' + JendAASeq[2] + ' \n' + JendSeq[0:3] + ' ' + JendSeq[3:6] + ' ' + JendSeq[6:9]
                    print(cur_orf, Jseq)
                    self.ui.txtJend_2.setText(JendDisplay)
                except:
                    print('J error')

                try:
                    cur_orf = (3 - (Jbeg - 1) % 3) % 3 + ORF
                    GJseq = GVSeq[Jbeg -1 + cur_orf:Jend]
                    GJseq = GJseq[0:len(GJseq) // 3 * 3]
                    GJendSeq = GJseq[-9:]
                    GJendAASeq, ErMessage = VGenesSeq.Translator(GJendSeq, 0)
                    GJendDisplay = ' ' + GJendAASeq[0] + '   ' + GJendAASeq[1] + '   ' + GJendAASeq[2] + ' \n' + GJendSeq[0:3] + ' ' + GJendSeq[3:6] + ' ' + GJendSeq[6:9]

                    self.ui.txtJExp.setText(GJendDisplay)
                except:
                    print('GJ error')


                self.ui.txtProject.setText(data[75])
                self.ui.textMutations.setText(data[57])


                self.ui.txtProject_2.setText(data[75])
                self.ui.txtGroup.setText(data[76])
                self.ui.txtGroup_2.setText(data[76])

                #self.ui.cboTreeOp1.setCurrentText(data[75])
                #self.ui.cboTreeOp2.setCurrentText(data[76])
                #self.ui.cboTreeOp3.setCurrentText(data[77])
                #self.ui.cboTreeOp1.setCurrentText(FieldList[75] + '(' + RealNameList[75] + ')')
                #self.ui.cboTreeOp2.setCurrentText(FieldList[76] + '(' + RealNameList[76] + ')')
                #self.ui.cboTreeOp3.setCurrentText(FieldList[77] + '(' + RealNameList[77] + ')')

                self.ui.txtSubGroup.setText(data[77])
                self.ui.txtSubGroup_2.setText(data[77])

                # self.ui.txtStop.setText(data[12])

                self.ui.txtReadingFrame.setText(data[13])
                self.ui.txtProductive.setText(data[14])
                self.ui.txtVend.setText(data[16])
                self.ui.txtVD.setText(data[17])
                self.ui.txtD.setText(data[18])

                self.ui.txtDJ.setText(data[19])
                self.ui.txtJend.setText(data[20])
                self.ui.txtSeqAlignment.setText(data[58])
                global JustMoved
                JustMoved = True
                try:
                    if UpdateSpecific == True:
                        self.PopulateSpec()
                except:
                    print('NoTree')
                self.ui.listViewSpecificity.setCurrentText(data[86])
                self.ui.listViewSpecificity_2.setCurrentText(data[87])
                self.ui.Autoreactivity.setCurrentText(data[104])

                if self.ui.btnEditSeq.isChecked():
                    msg = 'Sequence edit mode was activated, do you want to save changes and re-analyze this sequence before proceeding?'
                    buttons = 'YN'
                    answer = questionMessage(self, msg, buttons)
                    if answer == 'Yes':
                        self.ui.btnEditSeq.setChecked(False)
                        self.UpdateSeqAnalysis()

                        self.ui.btnEditSeq.setText("Edit Mode")
                        msg = 'Press "Edit Mode" to edit sequence.'

                        self.ui.lblSeq2.setText(msg)

                    elif answer == 'No':
                        self.ui.btnEditSeq.setChecked(False)
                        self.ui.btnEditSeq.setText("Edit Mode")
                        msg = 'Prese "Edit Mode" to edit sequence.'

                self.ui.txtDNASeq.setText(data[79])
                self.SeqButton(LastPushed)
                # self.ui.txtDNASeq.setReadOnly(True)
                JustMoved = False
                self.ui.txtCDR3DNA.setText(data[81])
                self.ui.txtCDR3AA.setText(data[82])
                self.ui.txtCDR3Length.setText(data[83])

                # if data[88] is int:
                self.ui.txtClonalPool.setPlainText(data[88])
                # if data[89] is int:
                self.ui.txtClonalRank.setPlainText(data[89])
                self.ui.txtDateTime.setText(data[93])
                self.ui.txtQuality.setText(data[95])
                self.ui.txtQuality_2.setText(data[95])

                if data[110] != 'Blank12':
                    self.ui.txtLabel.setText(data[110])
                else:
                    self.ui.txtLabel.setText('')

                if data[111] != 'Blank13':
                    self.ui.txtStatus.setText(data[111])
                else:
                    self.ui.txtStatus.setText('')



                self.ui.txtComments.setText(data[94])
                self.ui.txtID.setText(data[98])
                self.ui.txtCDR3MW.setText(data[99])
                self.ui.txtCDR3pI.setText(data[100])
                self.ui.txtIsotype.setText(data[101])
                self.ui.txtIsotypeSeq.setText(data[101])

                valueToR = int(self.ui.sbPairRight.value())
                valueToL = int(self.ui.sbPairLeft.value())
                BarCode = data[0]
                BarCode = BarCode[:len(BarCode)- valueToR]
                BarCode = BarCode[valueToL:]
                self.ui.txtPairNames.setText(BarCode)
                # self.IncrementDials()


                # if DontFindTwice == False:
                #     self.findTreeItem(data[0])
                #currentRecord = self.ui.tableView.currentIndex().row()
                #maxRecords = self.ui.tableView.model().rowCount()
                #self.ui.horizontalScrollBar.setMaximum(maxRecords)
                #self.ui.dial.setMaximum(maxRecords)

                currentRecord = ID
                maxRecords = len(NameIndex)
                self.ui.horizontalScrollBar.setMaximum(maxRecords)
                self.ui.dial.setMaximum(maxRecords)

                self.ui.lcdNumber_max.display(maxRecords)
                self.ui.horizontalScrollBar.setValue(currentRecord)
                self.ui.dial.setValue(currentRecord)
                currentRecord += 1
                self.ui.lcdNumber_current.display(currentRecord)
                self.on_cboFindField_currentTextChanged()

                if self.ui.tabWidget.currentIndex() == 2:
                    self.GenerateTableView()

                # self.ui.tableViewFeatures.setModel(model)

                # self.ui.tableViewFeatures.setModel(tabledata, header, self)
                # self.ui.tableView.setCurrentIndex(ID)

                JustMovedIt = False
            #  0 SeqName, 1 SeqLen, 2 GeneType, 3 V1, 4 V2, 5 V3, 6 D1, 7 D2, 8 D3, 9 J1, 10 J2, 11 J3,
            # 12 StopCodon, 13 ReadingFrame, 14 productive, 15 Strand, 16 VSeqend, 17 VDJunction,
            # 18 Dregion, 19 DJJunction, 20 begJ, 21 VJunction, 22 FR1From, 23 FR1To, 24 FR1length,
            # 25 FR1matches, 26 FR1mis, 27 FR1gaps, 28 FR1PercentIdentity, 29 CDR1From, 30 CDR1To, 
            # 31 CDR1length, 32 CDR1matches, 33 CDR1mis, 34 CDR1gaps, 35 CDR1PercentIdentity,
            # 36 FR2From, 37 FR2To, 38 FR2length, 39 FR2matches, 40 FR2mis, 41 FR2gaps, 42 FR2PercentIdentity,
            # 43 CDR2From, 44 CDR2To, 45 CDR2length, 46 CDR2matches, 47 CDR2mis, 48 CDR2gaps, 49 CDR2PercentIdentity,
            # 50 FR3From, 51 FR3To, 52 FR3length, 53 FR3matches, 54 FR3mis, 55 FR3gaps, 56 FR3PercentIdentity, 57 TotMut, 
            # 58 SeqAlignment, 59 GVbeg, 60 GVend, 61 GD1beg, 62 GD1end, 63 GD2beg, 64 GD2end, 65 GJbeg,
            #  66 GJend, 67 Vbeg, 68 Vend, 69 D1beg, 70 D1end, 71 D2beg, 72  D2end, 73 Jbeg, 74 Jend, 75 Project,
            #  76 Grouping, 77 SubGroup, 78 Species, 79 Sequence, 80 GermlineSequence, 81 CDR3DNA, 82 CDR3AA,
            #  83 CDR3Length, 84 CDR3beg, 85 CDRend, 86 Specificity, 87 Subspecificity, 88 ClonalPool, 89 ClonalRank,
            #  90 VLocus, 91 JLocus, 92 DLocus, 93 DateEntered, 94 Comments, 95 Quality, 96 TotalMuts, 97 Mutations, 98 IDEvent, CDR3MW, CDR3pI, Isotype, Blank4, Blank5, Blank6, Blank7, Blank8, Blank9, Blank10, Blank11, Blank12, Blank13, Blank14, Blank15, Blank16, Blank17, Blank18, Blank19, Blank20, 99 ID

    @pyqtSlot()
    def on_actiontranslate_triggered(self):
        self.myTranslateDialog = TranslateDialog()
        self.myTranslateDialog.show()

    @pyqtSlot()
    def on_actionaddABlist_triggered(self):
        self.addToABlist()

    def addToABlist(self):
        #listItems = self.getTreeCheckedChild()
        listItems = self.CheckedRecords

        if len(listItems) == 0:
            QMessageBox.warning(self, 'Warning', 'Please check sequence from active sequence panel!',
                                QMessageBox.Ok,
                                QMessageBox.Ok)
            return

        # get notice for this batch
        notice = VGenesDialogues.setText(self, 'Please write notes for this batch of sequences, e.g. clones', '')
        if notice == 'Cancelled Action':
            return

        shared = list(set(listItems).intersection(self.AntibodyCandidates))
        novel_ele = list(set(listItems).difference(self.AntibodyCandidates))

        # warn redundant sequences
        if len(shared) > 0:
            Msg = "Those sequences are already in the list:\n" + ", ".join(shared)
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

        # update Antibody Candidate list if there is new sequences
        if len(novel_ele) > 0:
            self.AntibodyCandidates = self.AntibodyCandidates + novel_ele

            WhereState = 'SeqName IN ("' + '","'.join(novel_ele) + '")'

            SQLStatement = 'SELECT SeqName,GeneType,ClonalPool,V1,D1,J1,TotalMuts,Isotype,Blank10 FROM vgenesDB WHERE ' + WhereState
            DataIn = VGenesSQL.RunSQL(DBFilename, SQLStatement)
            for item in DataIn:
                SeqName = item[0]
                Genetype = item[1]
                Clone = item[2]
                Vgene = item[3]
                Dgene = item[4]
                Jgene = item[5]
                TotalMuts = item[6]
                Isotype = item[7]
                barcode = item[8]

                if Genetype in ['Heavy', 'Beta', 'Delta']:
                    rowPosition = self.ui.tableWidgetHC.rowCount()
                    self.ui.tableWidgetHC.insertRow(rowPosition)
                    self.ui.tableWidgetHC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetHC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetHC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 4, QTableWidgetItem(Dgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 5, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetHC.setItem(rowPosition, 6, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetHC.setItem(rowPosition, 7, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetHC.setItem(rowPosition, 8, QTableWidgetItem(barcode))
                    self.ui.tableWidgetHC.setItem(rowPosition, 9, QTableWidgetItem(notice))
                else:
                    rowPosition = self.ui.tableWidgetLC.rowCount()
                    self.ui.tableWidgetLC.insertRow(rowPosition)
                    self.ui.tableWidgetLC.setItem(rowPosition, 0, QTableWidgetItem(SeqName))
                    self.ui.tableWidgetLC.setItem(rowPosition, 1, QTableWidgetItem(Genetype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 2, QTableWidgetItem(Clone))
                    self.ui.tableWidgetLC.setItem(rowPosition, 3, QTableWidgetItem(Vgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 4, QTableWidgetItem(Jgene))
                    self.ui.tableWidgetLC.setItem(rowPosition, 5, QTableWidgetItem(TotalMuts))
                    self.ui.tableWidgetLC.setItem(rowPosition, 6, QTableWidgetItem(Isotype))
                    self.ui.tableWidgetLC.setItem(rowPosition, 7, QTableWidgetItem(barcode))
                    self.ui.tableWidgetLC.setItem(rowPosition, 8, QTableWidgetItem(notice))

            self.ui.tableWidgetHC.resizeColumnsToContents()
            self.ui.tableWidgetHC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetHC.horizontalHeader().sectionClicked.connect(self.sortHCtable)

            self.ui.tableWidgetLC.resizeColumnsToContents()
            self.ui.tableWidgetLC.horizontalHeader().setSortIndicatorShown(True)
            self.ui.tableWidgetLC.horizontalHeader().sectionClicked.connect(self.sortLCtable)

        # switch current tab to antibody candidate tab
        self.ui.tabWidget.setCurrentIndex(11)

    def sortHCtable(self, index):
        self.ui.tableWidgetHC.sortByColumn(index, self.ui.tableWidgetHC.horizontalHeader().sortIndicatorOrder())

    def sortLCtable(self, index):
        self.ui.tableWidgetLC.sortByColumn(index, self.ui.tableWidgetLC.horizontalHeader().sortIndicatorOrder())

    @pyqtSlot()
    def on_actionCreateVDJdb_triggered(self):
        Msg = 'This function is disabled! Please see user guide for details about updating IMGT reference DB!'
        QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)
        return

        Pathname = openFile(self, 'Nucleotide')
        if Pathname == None:
            return
        VGenesSQL.CreateVDJDB(Pathname)

    @pyqtSlot()
    def on_btnV_clicked(self):
        global LastPushed
        self.SeqButton('v')
        LastPushed = 'v'

    @pyqtSlot()
    def on_btnD_clicked(self):
        global LastPushed
        LastPushed = 'd'
        self.SeqButton('d')

    @pyqtSlot()
    def on_btnJ_clicked(self):
        global LastPushed
        LastPushed = 'j'
        self.SeqButton('j')

    @pyqtSlot()
    def on_btnFW_1_clicked(self):
        global LastPushed
        LastPushed = 'f1'
        self.SeqButton('f1')

    @pyqtSlot()
    def on_btnCW_1_clicked(self):
        global LastPushed
        LastPushed = 'c1'
        self.SeqButton('c1')

    @pyqtSlot()
    def on_btnFW_2_clicked(self):
        global LastPushed
        LastPushed = 'f2'
        self.SeqButton('f2')

    @pyqtSlot()
    def on_btnCW_2_clicked(self):
        global LastPushed
        LastPushed = 'c2'
        self.SeqButton('c2')

    @pyqtSlot()
    def on_btnFW_3_clicked(self):
        global LastPushed
        LastPushed = 'f3'
        self.SeqButton('f3')

    @pyqtSlot()
    def on_btnCW_3_clicked(self):
        global LastPushed
        LastPushed = 'c3'
        self.SeqButton('c3')

    @pyqtSlot()
    def on_btnFW_4_clicked(self):
        global LastPushed
        LastPushed = 'f4'
        self.SeqButton('f4')

    @pyqtSlot()
    def on_btnVDJ_clicked(self):
        global LastPushed
        LastPushed = 'vdj'
        self.SeqButton('vdj')

    @pyqtSlot()
    def on_btnC_clicked(self):
        global LastPushed
        LastPushed = 'c'
        self.SeqButton('c')

    @pyqtSlot()
    def SeqButton_test(self, button):
        global JustMoved
        JustMoved = True
        cursor = self.ui.txtDNASeq.textCursor()
        AAcursor = self.ui.txtAASeq.textCursor()

        format = QTextCharFormat()
        format.setBackground(QBrush(QColor("white")))
        format.setForeground(QBrush(QColor("black")))

        cursor.setPosition(0)
        cursor.setPosition(len(self.ui.txtDNASeq.toPlainText()), QTextCursor.KeepAnchor)
        cursor.mergeCharFormat(format)
        AAcursor.setPosition(0)
        AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
        AAcursor.mergeCharFormat(format)
        JustMoved = False

        StartSel = 0
        EndSel = 0
        if button == 'v' or button == 'd' or button == 'j':
            # clear check first
            self.ui.btnFW_1.setChecked(False)
            self.ui.btnCW_1.setChecked(False)
            self.ui.btnFW_2.setChecked(False)
            self.ui.btnCW_2.setChecked(False)
            self.ui.btnFW_3.setChecked(False)
            self.ui.btnCW_3.setChecked(False)
            self.ui.btnFW_4.setChecked(False)
            self.ui.btnVDJ.setChecked(False)
            self.ui.btnC.setChecked(False)

            if self.ui.btnV.isChecked() and self.ui.btnD.isChecked() and self.ui.btnJ.isChecked():
                self.ui.btnVDJ.setChecked(True)
                self.ui.btnFW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
                self.ui.btnFW_4.setChecked(True)

                StartSel = int(data[67]) - 1
                EndSel = int(data[74])
            elif self.ui.btnV.isChecked() and self.ui.btnJ.isChecked():
                self.ui.btnD.setChecked(True)
                self.ui.btnVDJ.setChecked(True)
                self.ui.btnFW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
                self.ui.btnFW_4.setChecked(True)

                StartSel = int(data[67]) - 1
                EndSel = int(data[74])
            elif self.ui.btnV.isChecked() and self.ui.btnD.isChecked():
                StartSel = int(data[67]) - 1
                EndSel = int(data[70])
            elif self.ui.btnD.isChecked() and self.ui.btnJ.isChecked():
                StartSel = int(data[69]) - 1
                EndSel = int(data[74])
            else:  # then not a combination
                if self.ui.btnV.isChecked():
                    StartSel = int(data[67]) - 1
                    EndSel = int(data[68])
                if self.ui.btnD.isChecked():
                    StartSel = int(data[69]) - 1
                    EndSel = int(data[70])
                if self.ui.btnJ.isChecked():
                    StartSel = int(data[73]) - 1
                    EndSel = int(data[74])
                else:
                    cursor.setPosition(0)

                    JustMoved = True
                    self.ui.txtDNASeq.setTextCursor(cursor)
                    self.ui.txtAASeq.setTextCursor(AAcursor)
                    AAcursor.setPosition(0)
                    AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                    format = QTextCharFormat()
                    format.setBackground(QBrush(QColor("white")))
                    format.setForeground(QBrush(QColor("black")))
                    AAcursor.mergeCharFormat(format)
                    AAcursor.setPosition(0)
                    JustMoved = False
        elif button == 'f1' or button == 'c1' or button == 'f2' or button == 'c2' or button == 'f3' or button == 'c3' or button == 'f4':
            self.ui.btnV.setChecked(False)
            self.ui.btnD.setChecked(False)
            self.ui.btnJ.setChecked(False)
            self.ui.btnC.setChecked(False)
            self.ui.btnVDJ.setChecked(False)

            if self.ui.btnFW_1.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[23]) - 1
                EndSel = int(data[74])
                self.ui.btnV.setChecked(True)
                self.ui.btnD.setChecked(True)
                self.ui.btnJ.setChecked(True)
                self.ui.btnVDJ.setChecked(True)

                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
            # todo need fix this after cdr3 works
            elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[85])
                self.ui.btnV.setChecked(True)
                self.ui.btnD.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
            elif self.ui.btnFW_1.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[51])
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
            elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_2.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[44])
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
            elif self.ui.btnFW_1.isChecked() and self.ui.btnFW_2.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[37])
                self.ui.btnCW_1.setChecked(True)
            elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_1.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[30])
            elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[74])
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
            elif self.ui.btnCW_1.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[85])
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
            elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[51])
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
            elif self.ui.btnCW_1.isChecked() and self.ui.btnCW_2.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[44])
                self.ui.btnFW_2.setChecked(True)
            elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_2.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[37])
            elif self.ui.btnFW_2.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[74])

                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
            elif self.ui.btnFW_2.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[85])
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
            elif self.ui.btnFW_2.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[51])
                self.ui.btnCW_2.setChecked(True)
            elif self.ui.btnFW_2.isChecked() and self.ui.btnCW_2.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[44])
            elif self.ui.btnCW_2.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[43]) - 1
                EndSel = int(data[74])
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
            elif self.ui.btnCW_2.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[43]) - 1
                EndSel = int(data[85])
                self.ui.btnFW_3.setChecked(True)
            elif self.ui.btnCW_2.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[43]) - 1
                EndSel = int(data[51])
            elif self.ui.btnFW_3.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[50]) - 1
                EndSel = int(data[74])

                self.ui.btnCW_3.setChecked(True)
            elif self.ui.btnFW_3.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[50]) - 1
                EndSel = int(data[85])
            elif self.ui.btnCW_3.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[84]) - 1
                EndSel = int(data[74])
            else:
                if self.ui.btnFW_1.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[23])
                if self.ui.btnCW_1.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[30])
                if self.ui.btnFW_2.isChecked():
                    StartSel = int(data[36]) - 1
                    EndSel = int(data[37])
                if self.ui.btnCW_2.isChecked():
                    StartSel = int(data[43]) - 1
                    EndSel = int(data[44])
                if self.ui.btnFW_3.isChecked():
                    StartSel = int(data[50]) - 1
                    EndSel = int(data[51])
                if self.ui.btnCW_3.isChecked():
                    StartSel = int(data[84]) - 1
                    EndSel = int(data[85])
                if self.ui.btnFW_4.isChecked():
                    StartSel = int(data[85]) - 1
                    EndSel = int(data[74])
                else:
                    cursor.setPosition(0)
                    AAcursor.setPosition(0)

                    JustMoved = True
                    self.ui.txtDNASeq.setTextCursor(cursor)
                    self.ui.txtAASeq.setTextCursor(AAcursor)
                    AAcursor.setPosition(0)
                    AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                    format = QTextCharFormat()
                    format.setBackground(QBrush(QColor("white")))
                    format.setForeground(QBrush(QColor("black")))
                    AAcursor.mergeCharFormat(format)
                    AAcursor.setPosition(0)
                    JustMoved = False
        elif button == 'c':
            self.ui.btnFW_1.setChecked(False)
            self.ui.btnCW_1.setChecked(False)
            self.ui.btnFW_2.setChecked(False)
            self.ui.btnCW_2.setChecked(False)
            self.ui.btnFW_3.setChecked(False)
            self.ui.btnCW_3.setChecked(False)
            self.ui.btnFW_4.setChecked(False)
            self.ui.btnV.setChecked(False)
            self.ui.btnD.setChecked(False)
            self.ui.btnJ.setChecked(False)
            self.ui.btnVDJ.setChecked(False)
            if int(data[1]) > int(data[74]):
                StartSel = int(data[74]) + 1
                EndSel = len(data[79])
        elif button == 'vdj':
            if self.ui.btnVDJ.isChecked():
                self.ui.btnFW_1.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
                self.ui.btnFW_4.setChecked(True)
                self.ui.btnV.setChecked(True)
                self.ui.btnD.setChecked(True)
                self.ui.btnJ.setChecked(True)
                self.ui.btnC.setChecked(False)
                StartSel = int(data[67]) - 1
                EndSel = int(data[74])
            else:
                self.ui.btnFW_1.setChecked(False)
                self.ui.btnCW_1.setChecked(False)
                self.ui.btnFW_2.setChecked(False)
                self.ui.btnCW_2.setChecked(False)
                self.ui.btnFW_3.setChecked(False)
                self.ui.btnCW_3.setChecked(False)
                self.ui.btnFW_4.setChecked(False)
                self.ui.btnV.setChecked(False)
                self.ui.btnD.setChecked(False)
                self.ui.btnJ.setChecked(False)
                self.ui.btnC.setChecked(False)
                cursor.setPosition(0)
                AAcursor.setPosition(0)
                self.ui.txtDNASeq.setTextCursor(cursor)
                self.ui.txtAASeq.setTextCursor(AAcursor)
                AAcursor.setPosition(0)
                AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                format = QTextCharFormat()
                format.setBackground(QBrush(QColor("white")))
                format.setForeground(QBrush(QColor("black")))
                AAcursor.mergeCharFormat(format)
                AAcursor.setPosition(0)

        JustMoved = True

        cursor.setPosition(StartSel)
        cursor.setPosition(EndSel, QTextCursor.KeepAnchor)
        format = QTextCharFormat()
        format.setBackground(QBrush(QColor("white")))
        format.setForeground(QBrush(QColor("red")))
        cursor.mergeCharFormat(format)

        try:
            ORF = int(data[105])
        except:
            ORF = 0
        AAStartSel = math.floor(StartSel - ORF / 3)
        AAEndSel = math.floor(EndSel - ORF / 3)
        print(str(StartSel) + ',' + str(EndSel) + ',' + str(AAStartSel) + ',' + str(AAEndSel))

        AAcursor.setPosition(AAStartSel)
        AAcursor.setPosition(AAEndSel, QTextCursor.KeepAnchor)
        format = QTextCharFormat()
        format.setBackground(QBrush(QColor("white")))
        format.setForeground(QBrush(QColor("red")))
        AAcursor.mergeCharFormat(format)
        AAcursor.setPosition(0)

        '''
        self.ui.txtDNASeq.setTextCursor(cursor)
        if self.ui.cboDecorate.currentText() == 'None':
            self.ui.txtAASeq.setTextCursor(AAcursor)
        else:
            # if AAEndSel>0:
            self.ui.txtAASeq.setTextCursor(AAcursor)
            format = QTextCharFormat()
            format.setBackground(QBrush(QColor("white")))
            format.setForeground(QBrush(QColor("red")))
            AAcursor.mergeCharFormat(format)
            AAcursor.setPosition(0)
            self.ui.txtAASeq.setTextCursor(AAcursor)
        '''
        JustMoved = False

    @pyqtSlot()
    def SeqButton(self, button):
        try:
            global JustMoved
            cursor = self.ui.txtDNASeq.textCursor()
            AAcursor = self.ui.txtAASeq.textCursor()
            StartSel = 0
            EndSel = 0
            if button == 'v' or button == 'd' or button == 'j':
                # clear check first
                self.ui.btnFW_1.setChecked(False)
                self.ui.btnCW_1.setChecked(False)
                self.ui.btnFW_2.setChecked(False)
                self.ui.btnCW_2.setChecked(False)
                self.ui.btnFW_3.setChecked(False)
                self.ui.btnCW_3.setChecked(False)
                self.ui.btnFW_4.setChecked(False)
                self.ui.btnVDJ.setChecked(False)
                self.ui.btnC.setChecked(False)

                if self.ui.btnV.isChecked() and self.ui.btnD.isChecked() and self.ui.btnJ.isChecked():
                    self.ui.btnVDJ.setChecked(True)
                    self.ui.btnFW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                    self.ui.btnFW_4.setChecked(True)

                    StartSel = int(data[67]) - 1
                    EndSel = int(data[74])
                elif self.ui.btnV.isChecked() and self.ui.btnJ.isChecked():
                    self.ui.btnD.setChecked(True)
                    self.ui.btnVDJ.setChecked(True)
                    self.ui.btnFW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                    self.ui.btnFW_4.setChecked(True)

                    StartSel = int(data[67]) - 1
                    EndSel = int(data[74])
                elif self.ui.btnV.isChecked() and self.ui.btnD.isChecked():
                    StartSel = int(data[67]) - 1
                    try:
                        EndSel = int(data[70])
                    except:
                        EndSel = int(data[68])
                elif self.ui.btnD.isChecked() and self.ui.btnJ.isChecked():
                    try:
                        StartSel = int(data[69]) - 1
                    except:
                        StartSel = int(data[73]) - 1
                    EndSel = int(data[74])
                else:  # then not a combination
                    if self.ui.btnV.isChecked():
                        StartSel = int(data[67]) - 1
                        EndSel = int(data[68])
                    if self.ui.btnD.isChecked():
                        try:
                            StartSel = int(data[69]) - 1
                            EndSel = int(data[70])
                        except:
                            Msg = 'No D gene for light chain!'
                            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok,
                                                QMessageBox.Ok)
                            self.ui.btnD.setChecked(False)
                            return
                    if self.ui.btnJ.isChecked():
                        StartSel = int(data[73]) - 1
                        EndSel = int(data[74])
                    else:
                        cursor.setPosition(0)

                        JustMoved = True
                        self.ui.txtDNASeq.setTextCursor(cursor)
                        self.ui.txtAASeq.setTextCursor(AAcursor)
                        AAcursor.setPosition(0)
                        AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                        format = QTextCharFormat()
                        format.setFontUnderline(False)
                        AAcursor.mergeCharFormat(format)
                        AAcursor.setPosition(0)
                        JustMoved = False
            elif button == 'f1' or button == 'c1' or button == 'f2' or button == 'c2' or button == 'f3' or button == 'c3' or button == 'f4':
                self.ui.btnV.setChecked(False)
                self.ui.btnD.setChecked(False)
                self.ui.btnJ.setChecked(False)
                self.ui.btnC.setChecked(False)
                self.ui.btnVDJ.setChecked(False)

                if self.ui.btnFW_1.isChecked() and self.ui.btnFW_4.isChecked():
                    StartSel = int(data[23]) - 1
                    EndSel = int(data[74])
                    self.ui.btnV.setChecked(True)
                    self.ui.btnD.setChecked(True)
                    self.ui.btnJ.setChecked(True)
                    self.ui.btnVDJ.setChecked(True)

                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                # todo need fix this after cdr3 works
                elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_3.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[85])
                    self.ui.btnV.setChecked(True)
                    self.ui.btnD.setChecked(True)
                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                elif self.ui.btnFW_1.isChecked() and self.ui.btnFW_3.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[51])
                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_2.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[44])
                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                elif self.ui.btnFW_1.isChecked() and self.ui.btnFW_2.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[37])
                    self.ui.btnCW_1.setChecked(True)
                elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_1.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[30])
                elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_4.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[74])
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                elif self.ui.btnCW_1.isChecked() and self.ui.btnCW_3.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[85])
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_3.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[51])
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                elif self.ui.btnCW_1.isChecked() and self.ui.btnCW_2.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[44])
                    self.ui.btnFW_2.setChecked(True)
                elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_2.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[37])
                elif self.ui.btnFW_2.isChecked() and self.ui.btnFW_4.isChecked():
                    StartSel = int(data[36]) - 1
                    EndSel = int(data[74])

                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                elif self.ui.btnFW_2.isChecked() and self.ui.btnCW_3.isChecked():
                    StartSel = int(data[36]) - 1
                    EndSel = int(data[85])
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                elif self.ui.btnFW_2.isChecked() and self.ui.btnFW_3.isChecked():
                    StartSel = int(data[36]) - 1
                    EndSel = int(data[51])
                    self.ui.btnCW_2.setChecked(True)
                elif self.ui.btnFW_2.isChecked() and self.ui.btnCW_2.isChecked():
                    StartSel = int(data[36]) - 1
                    EndSel = int(data[44])
                elif self.ui.btnCW_2.isChecked() and self.ui.btnFW_4.isChecked():
                    StartSel = int(data[43]) - 1
                    EndSel = int(data[74])
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                elif self.ui.btnCW_2.isChecked() and self.ui.btnCW_3.isChecked():
                    StartSel = int(data[43]) - 1
                    EndSel = int(data[85])
                    self.ui.btnFW_3.setChecked(True)
                elif self.ui.btnCW_2.isChecked() and self.ui.btnFW_3.isChecked():
                    StartSel = int(data[43]) - 1
                    EndSel = int(data[51])
                elif self.ui.btnFW_3.isChecked() and self.ui.btnFW_4.isChecked():
                    StartSel = int(data[50]) - 1
                    EndSel = int(data[74])

                    self.ui.btnCW_3.setChecked(True)
                elif self.ui.btnFW_3.isChecked() and self.ui.btnCW_3.isChecked():
                    StartSel = int(data[50]) - 1
                    EndSel = int(data[85])
                elif self.ui.btnCW_3.isChecked() and self.ui.btnFW_4.isChecked():
                    StartSel = int(data[84]) - 1
                    EndSel = int(data[74])
                else:
                    if self.ui.btnFW_1.isChecked():
                        StartSel = int(data[22]) - 1
                        EndSel = int(data[23])
                    if self.ui.btnCW_1.isChecked():
                        StartSel = int(data[29]) - 1
                        EndSel = int(data[30])
                    if self.ui.btnFW_2.isChecked():
                        StartSel = int(data[36]) - 1
                        EndSel = int(data[37])
                    if self.ui.btnCW_2.isChecked():
                        StartSel = int(data[43]) - 1
                        EndSel = int(data[44])
                    if self.ui.btnFW_3.isChecked():
                        StartSel = int(data[50]) - 1
                        EndSel = int(data[51])
                    if self.ui.btnCW_3.isChecked():
                        StartSel = int(data[84]) - 1
                        EndSel = int(data[85])
                    if self.ui.btnFW_4.isChecked():
                        # we don't have FR4 start and end, here we use end of CDR3 for FR4 position, so don't need to -1
                        StartSel = int(data[85])
                        EndSel = int(data[74])
                    else:
                        cursor.setPosition(0)
                        AAcursor.setPosition(0)

                        JustMoved = True
                        self.ui.txtDNASeq.setTextCursor(cursor)
                        self.ui.txtAASeq.setTextCursor(AAcursor)
                        AAcursor.setPosition(0)
                        AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                        format = QTextCharFormat()
                        format.setFontUnderline(False)
                        AAcursor.mergeCharFormat(format)
                        AAcursor.setPosition(0)
                        JustMoved = False
            elif button == 'c':
                self.ui.btnFW_1.setChecked(False)
                self.ui.btnCW_1.setChecked(False)
                self.ui.btnFW_2.setChecked(False)
                self.ui.btnCW_2.setChecked(False)
                self.ui.btnFW_3.setChecked(False)
                self.ui.btnCW_3.setChecked(False)
                self.ui.btnFW_4.setChecked(False)
                self.ui.btnV.setChecked(False)
                self.ui.btnD.setChecked(False)
                self.ui.btnJ.setChecked(False)
                self.ui.btnVDJ.setChecked(False)
                if self.ui.btnC.isChecked():
                    if int(data[1]) > int(data[74]):
                        # we don't have C region start and end, here we use end of J gene position, so don't need to -1
                        StartSel = int(data[74])
                        EndSel = len(data[79])
                else:
                    StartSel = 0
                    EndSel = 0
            elif button == 'vdj':
                if self.ui.btnVDJ.isChecked():
                    self.ui.btnFW_1.setChecked(True)
                    self.ui.btnCW_1.setChecked(True)
                    self.ui.btnFW_2.setChecked(True)
                    self.ui.btnCW_2.setChecked(True)
                    self.ui.btnFW_3.setChecked(True)
                    self.ui.btnCW_3.setChecked(True)
                    self.ui.btnFW_4.setChecked(True)
                    self.ui.btnV.setChecked(True)
                    self.ui.btnD.setChecked(True)
                    self.ui.btnJ.setChecked(True)
                    self.ui.btnC.setChecked(False)
                    StartSel = int(data[67]) - 1
                    EndSel = int(data[74])
                else:
                    self.ui.btnFW_1.setChecked(False)
                    self.ui.btnCW_1.setChecked(False)
                    self.ui.btnFW_2.setChecked(False)
                    self.ui.btnCW_2.setChecked(False)
                    self.ui.btnFW_3.setChecked(False)
                    self.ui.btnCW_3.setChecked(False)
                    self.ui.btnFW_4.setChecked(False)
                    self.ui.btnV.setChecked(False)
                    self.ui.btnD.setChecked(False)
                    self.ui.btnJ.setChecked(False)
                    self.ui.btnC.setChecked(False)
                    cursor.setPosition(0)
                    AAcursor.setPosition(0)
                    self.ui.txtDNASeq.setTextCursor(cursor)
                    self.ui.txtAASeq.setTextCursor(AAcursor)
                    AAcursor.setPosition(0)
                    AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                    format = QTextCharFormat()
                    format.setFontUnderline(False)
                    AAcursor.mergeCharFormat(format)
                    AAcursor.setPosition(0)

            JustMoved = True
            cursor.setPosition(StartSel)
            if EndSel > len(self.ui.txtDNASeq.toPlainText()):
                cursor.setPosition(len(self.ui.txtDNASeq.toPlainText()), QTextCursor.KeepAnchor)
            else:
                cursor.setPosition(EndSel, QTextCursor.KeepAnchor)

            try:
                ORF = int(data[105])
            except:
                ORF = 0

            if StartSel - ORF > 0:
                AAStartSel = math.floor((StartSel - ORF) / 3)
            else:
                AAStartSel = math.floor(StartSel / 3)
            AAEndSel = math.floor((EndSel - ORF) / 3)

            print(str(StartSel) + ',' + str(EndSel) + ',' + str(AAStartSel) + ',' + str(AAEndSel))

            AAcursor.setPosition(AAStartSel)
            if AAEndSel > len(self.ui.txtDNASeq.toPlainText()):
                AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
            else:
                AAcursor.setPosition(AAEndSel, QTextCursor.KeepAnchor)

            self.ui.txtDNASeq.setTextCursor(cursor)
            if self.ui.cboDecorate.currentText() == 'None':
                self.ui.txtAASeq.setTextCursor(AAcursor)
            else:
                # if AAEndSel>0:
                self.ui.txtAASeq.setTextCursor(AAcursor)
                format = QTextCharFormat()
                format.setFontUnderline(True)
                format.setUnderlineColor(QColor("cyan"))
                format.setUnderlineStyle(QTextCharFormat.WaveUnderline)  # QTextCharFormat('WaveUnderline')
                AAcursor.mergeCharFormat(format)
                AAcursor.setPosition(0)
                self.ui.txtAASeq.setTextCursor(AAcursor)

            JustMoved = False

            # slightly resize window to display the selection, i don't know why the winodw can not display the changes automatically
            size_w = self.size().width()
            size_h = self.size().height()
            offset_pool = [-1, 1]
            offset = offset_pool[random.randint(0, 1)]
            self.resize(size_w + offset, size_h + offset)
        except:
            pass

    @pyqtSlot()
    def SeqButtonold(self, button):
        global JustMoved
        cursor = self.ui.txtDNASeq.textCursor()
        AAcursor = self.ui.txtAASeq.textCursor()
        StartSel = 0
        EndSel = 0
        if button == 'v' or button == 'd' or button == 'j':
            self.ui.btnFW_1.setChecked(False)
            self.ui.btnCW_1.setChecked(False)
            self.ui.btnFW_2.setChecked(False)
            self.ui.btnCW_2.setChecked(False)
            self.ui.btnFW_3.setChecked(False)
            self.ui.btnCW_3.setChecked(False)
            self.ui.btnFW_4.setChecked(False)
            self.ui.btnVDJ.setChecked(False)
            self.ui.btnC.setChecked(False)

            if self.ui.btnV.isChecked() and self.ui.btnD.isChecked() and self.ui.btnJ.isChecked():
                self.ui.btnVDJ.setChecked(True)
                self.ui.btnFW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
                self.ui.btnFW_4.setChecked(True)

                StartSel = int(data[67]) - 1
                EndSel = int(data[74])
            elif self.ui.btnV.isChecked() and self.ui.btnJ.isChecked():
                self.ui.btnD.setChecked(True)
                self.ui.btnVDJ.setChecked(True)
                self.ui.btnFW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
                self.ui.btnFW_4.setChecked(True)

                StartSel = int(data[67]) - 1
                EndSel = int(data[74])



            elif self.ui.btnV.isChecked() and self.ui.btnD.isChecked():
                StartSel = int(data[67]) - 1
                EndSel = int(data[70])

            elif self.ui.btnD.isChecked() and self.ui.btnJ.isChecked():
                StartSel = int(data[69]) - 1
                EndSel = int(data[74])


            else:  # then not a combination
                if self.ui.btnV.isChecked():
                    StartSel = int(data[67]) - 1
                    EndSel = int(data[68])
                if self.ui.btnD.isChecked():
                    StartSel = int(data[69]) - 1
                    EndSel = int(data[70])
                if self.ui.btnJ.isChecked():
                    StartSel = int(data[73]) - 1
                    EndSel = int(data[74])
                else:
                    cursor.setPosition(0)

                    JustMoved = True
                    self.ui.txtDNASeq.setTextCursor(cursor)
                    self.ui.txtAASeq.setTextCursor(AAcursor)
                    AAcursor.setPosition(0)
                    AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                    format = QTextCharFormat()
                    format.setFontUnderline(False)
                    AAcursor.mergeCharFormat(format)
                    AAcursor.setPosition(0)
                    JustMoved = False


        elif button == 'f1' or button == 'c1' or button == 'f2' or button == 'c2' or button == 'f3' or button == 'c3' or button == 'f4':
            self.ui.btnV.setChecked(False)
            self.ui.btnD.setChecked(False)
            self.ui.btnJ.setChecked(False)
            self.ui.btnC.setChecked(False)
            self.ui.btnVDJ.setChecked(False)

            if self.ui.btnFW_1.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[23]) - 1
                EndSel = int(data[74])
                self.ui.btnV.setChecked(True)
                self.ui.btnD.setChecked(True)
                self.ui.btnJ.setChecked(True)
                self.ui.btnVDJ.setChecked(True)

                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)

            # todo need fix this after cdr3 works
            elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[85])
                self.ui.btnV.setChecked(True)
                self.ui.btnD.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)

            # elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_1.isChecked() and self.ui.btnFW_2.isChecked() and self.ui.btnCW_2.isChecked() and self.ui.btnFW_3.isChecked():
            #     StartSel = int(data[23])
            #     EndSel = int(data[51])
            #     self.ui.btnV.setChecked(True)
            elif self.ui.btnFW_1.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[51])
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)


            elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_2.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[44])
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)


            elif self.ui.btnFW_1.isChecked() and self.ui.btnFW_2.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[37])
                self.ui.btnCW_1.setChecked(True)

            elif self.ui.btnFW_1.isChecked() and self.ui.btnCW_1.isChecked():
                StartSel = int(data[22]) - 1
                EndSel = int(data[30])

            elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[74])
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)

            # todo need fix cdr3 to get this work:
            elif self.ui.btnCW_1.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[85])
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)

            elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[51])
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)

            elif self.ui.btnCW_1.isChecked() and self.ui.btnCW_2.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[44])
                self.ui.btnFW_2.setChecked(True)

            elif self.ui.btnCW_1.isChecked() and self.ui.btnFW_2.isChecked():
                StartSel = int(data[29]) - 1
                EndSel = int(data[37])


            elif self.ui.btnFW_2.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[74])

                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)

            # todo need fix cdr3 to get this work:
            elif self.ui.btnFW_2.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[85])
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)

            elif self.ui.btnFW_2.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[51])
                self.ui.btnCW_2.setChecked(True)

            elif self.ui.btnFW_2.isChecked() and self.ui.btnCW_2.isChecked():
                StartSel = int(data[36]) - 1
                EndSel = int(data[44])

            elif self.ui.btnCW_2.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[43]) - 1
                EndSel = int(data[74])
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)

            # todo need fix cdr3 to get this work:
            elif self.ui.btnCW_2.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[43]) - 1
                EndSel = int(data[85])
                self.ui.btnFW_3.setChecked(True)



            elif self.ui.btnCW_2.isChecked() and self.ui.btnFW_3.isChecked():
                StartSel = int(data[43]) - 1
                EndSel = int(data[51])

            elif self.ui.btnFW_3.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[50]) - 1
                EndSel = int(data[74])

                self.ui.btnCW_3.setChecked(True)

            # todo need fix cdr3 to get this work:
            elif self.ui.btnFW_3.isChecked() and self.ui.btnCW_3.isChecked():
                StartSel = int(data[50]) - 1
                EndSel = int(data[85])

            elif self.ui.btnCW_3.isChecked() and self.ui.btnFW_4.isChecked():
                StartSel = int(data[84]) - 1
                EndSel = int(data[74])

            else:
                if self.ui.btnFW_1.isChecked():
                    StartSel = int(data[22]) - 1
                    EndSel = int(data[23])
                if self.ui.btnCW_1.isChecked():
                    StartSel = int(data[29]) - 1
                    EndSel = int(data[30])
                if self.ui.btnFW_2.isChecked():
                    StartSel = int(data[36]) - 1
                    EndSel = int(data[37])
                if self.ui.btnCW_2.isChecked():
                    StartSel = int(data[43]) - 1
                    EndSel = int(data[44])
                if self.ui.btnFW_3.isChecked():
                    StartSel = int(data[50]) - 1
                    EndSel = int(data[51])
                if self.ui.btnCW_3.isChecked():
                    StartSel = int(data[84]) - 1
                    EndSel = int(data[85])
                if self.ui.btnFW_4.isChecked():
                    StartSel = int(data[85]) - 1
                    EndSel = int(data[74])


                else:
                    cursor.setPosition(0)
                    AAcursor.setPosition(0)

                    JustMoved = True
                    self.ui.txtDNASeq.setTextCursor(cursor)
                    self.ui.txtAASeq.setTextCursor(AAcursor)
                    AAcursor.setPosition(0)
                    AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                    format = QTextCharFormat()
                    format.setFontUnderline(False)
                    AAcursor.mergeCharFormat(format)
                    AAcursor.setPosition(0)
                    JustMoved = False


        elif button == 'c':
            self.ui.btnFW_1.setChecked(False)
            self.ui.btnCW_1.setChecked(False)
            self.ui.btnFW_2.setChecked(False)
            self.ui.btnCW_2.setChecked(False)
            self.ui.btnFW_3.setChecked(False)
            self.ui.btnCW_3.setChecked(False)
            self.ui.btnFW_4.setChecked(False)
            self.ui.btnV.setChecked(False)
            self.ui.btnD.setChecked(False)
            self.ui.btnJ.setChecked(False)
            self.ui.btnVDJ.setChecked(False)
            if int(data[1]) > int(data[74]):
                StartSel = int(data[74]) + 1
                EndSel = len(data[79])
        # todo need code foe canstant gene for this button to finish

        elif button == 'vdj':
            if self.ui.btnVDJ.isChecked():
                self.ui.btnFW_1.setChecked(True)
                self.ui.btnCW_1.setChecked(True)
                self.ui.btnFW_2.setChecked(True)
                self.ui.btnCW_2.setChecked(True)
                self.ui.btnFW_3.setChecked(True)
                self.ui.btnCW_3.setChecked(True)
                self.ui.btnFW_4.setChecked(True)
                self.ui.btnV.setChecked(True)
                self.ui.btnD.setChecked(True)
                self.ui.btnJ.setChecked(True)
                self.ui.btnC.setChecked(False)
                StartSel = int(data[67]) - 1
                EndSel = int(data[74])
            else:
                self.ui.btnFW_1.setChecked(False)
                self.ui.btnCW_1.setChecked(False)
                self.ui.btnFW_2.setChecked(False)
                self.ui.btnCW_2.setChecked(False)
                self.ui.btnFW_3.setChecked(False)
                self.ui.btnCW_3.setChecked(False)
                self.ui.btnFW_4.setChecked(False)
                self.ui.btnV.setChecked(False)
                self.ui.btnD.setChecked(False)
                self.ui.btnJ.setChecked(False)
                self.ui.btnC.setChecked(False)
                cursor.setPosition(0)
                AAcursor.setPosition(0)
                self.ui.txtDNASeq.setTextCursor(cursor)
                self.ui.txtAASeq.setTextCursor(AAcursor)
                AAcursor.setPosition(0)
                AAcursor.setPosition(len(self.ui.txtAASeq.toPlainText()), QTextCursor.KeepAnchor)
                format = QTextCharFormat()
                format.setFontUnderline(False)
                AAcursor.mergeCharFormat(format)
                AAcursor.setPosition(0)

        JustMoved = True
        cursor.setPosition(StartSel)
        cursor.setPosition(EndSel, QTextCursor.KeepAnchor)

        try:
            ORF = int(data[105])
        except:
            ORF = 0
        AAStartSel = (StartSel - ORF) / 3
        AAEndSel = (EndSel - ORF) / 3

        AAcursor.setPosition(AAStartSel)
        AAcursor.setPosition(AAEndSel, QTextCursor.KeepAnchor)

        self.ui.txtDNASeq.setTextCursor(cursor)
        if self.ui.cboDecorate.currentText() == 'None':
            self.ui.txtAASeq.setTextCursor(AAcursor)
        else:
            # if AAEndSel>0:
            self.ui.txtAASeq.setTextCursor(AAcursor)
            format = QTextCharFormat()
            format.setFontUnderline(True)
            format.setUnderlineColor(QColor("cyan"))
            format.setUnderlineStyle(QTextCharFormat.WaveUnderline)  # QTextCharFormat('WaveUnderline')
            AAcursor.mergeCharFormat(format)
            AAcursor.setPosition(0)
            self.ui.txtAASeq.setTextCursor(AAcursor)

        JustMoved = False

    @pyqtSlot()
    def get_text_selection(self):
        cursor = self.ui.txtDNASeq.textCursor()
        DNAseq = self.ui.txtDNASeq.toPlainText()
        lenSeq = len(DNAseq)
        return cursor.selectionStart(), cursor.selectionEnd(), lenSeq

    @pyqtSlot()
    def on_btnSearchSeq_clicked(self):
        search = self.ui.txtSearchSeq.toPlainText()
        self.FindSeq(search)

    @pyqtSlot()
    def FindSeq(self, SeqFind):
        FindSeq = SeqFind

        Found = self.ui.txtDNASeq.find(FindSeq)

        if Found == False:
            self.SeqButton('none')
            Found = self.ui.txtAASeq.find(FindSeq)

        if Found == False:
            msg = SeqFind + ' could not be found.'
            buttons = 'OK'
            answer = informationMessage(self, msg, buttons)

        # self.UpdatePositions()

        return Found

    @pyqtSlot()
    def on_txtDNASeq_textChanged(self):
        DNAseq = self.ui.txtDNASeq.toPlainText()
        DataIs = []
        global GLMsg
        global JustMoved
        if self.ui.radioButtonGermView.isChecked():
            return
        if self.ui.btnEditSeq.isChecked():


            if self.ui.radioButtonGermView.isChecked():
                self.on_radioButtonGermView_clicked()
            # self.ui.lblSeq2.setText(msg)
            try:
                frame = int(data[105])
            except:
                frame = 0
            ErMes = 'Amino acid sequence: \n\n'
            AASeq, ErMessage = VGenesSeq.Translator(DNAseq, frame)
            if len(ErMessage) > 0:
                for mess in ErMessage:
                    ErMes += mess + '\n'

            self.ui.lblAAseq.setText(ErMes)
            self.ui.txtAASeq.setPlainText(AASeq)

            if self.ui.cboDecorate.currentText() != "None":
                self.DecoratePeptide()

            self.UpdatePositions()

            self.clearTreeChecks()

            self.AlignSequences('edit')


            self.ui.txtDNASeq.setFocus()

        else:
            if JustMoved == False:
                msg = 'Enter "edit mode" to edit sequence and related fields (mutations, regions, etc.)?'

                buttons = 'OKC'
                answer = questionMessage(self, msg, buttons)
                if answer == 'OK':
                    self.ui.btnEditSeq.setChecked(True)
                    self.on_btnEditSeq_clicked()

                    JustMoved = True

        # self.ui.lblSeq2.setText(msg)
        try:
            frame = int(data[105])
        except:
            frame = 0
        ErMes = 'Amino acid sequence:'

        AASeq, ErMessage = VGenesSeq.Translator(DNAseq, frame)
        if len(ErMessage) > 0:
            for mess in ErMessage:
                ErMes += mess + '\n'

        self.ui.lblAAseq.setText(ErMes)
        self.ui.txtAASeq.setPlainText(AASeq)

        if self.ui.cboDecorate.currentText() != "None":
            self.DecoratePeptide()

        self.UpdatePositions()


    def get_Align_selection(self):
        cursor = self.ui.txtSeqAlignment.textCursor()
        DNAseq = self.ui.txtSeqAlignment.toPlainText()
        lenSeq = len(DNAseq)
        return cursor.selectionStart(), cursor.selectionEnd(), lenSeq

    def on_txtSeqAlignment_cursorPositionChanged(self):
        StartP, EndP, LenSeq = self.get_Align_selection()

        if StartP == EndP:
            lblText = 'Ig BLAST Alignment: position = ' + str(EndP)
        else:
            lblText = 'Ig BLAST Alignment: position = ' + str(StartP) + ' to ' + str(EndP) + ' equaling ' + str(
                EndP - StartP) + ' total nucleotides'

        self.ui.lblAlignment.setText(lblText)

    def on_txtDNASeq_cursorPositionChanged(self):
        # DNAseq = self.ui.txtDNASeq.toPlainText()
        try:
            if JustMoved == False:
                self.ui.btnFW_1.setChecked(False)
                self.ui.btnCW_1.setChecked(False)
                self.ui.btnFW_2.setChecked(False)
                self.ui.btnCW_2.setChecked(False)
                self.ui.btnFW_3.setChecked(False)
                self.ui.btnCW_3.setChecked(False)
                self.ui.btnFW_4.setChecked(False)
                self.ui.btnV.setChecked(False)
                self.ui.btnD.setChecked(False)
                self.ui.btnJ.setChecked(False)
                self.ui.btnC.setChecked(False)
        except:
            # todo need fix this waste
            print('tried4384')

        self.UpdatePositions()

    def UpdatePositions(self):
        StartP, EndP, LenSeq = self.get_text_selection()

        cursor = self.ui.txtDNASeq.textCursor()
        if StartP == EndP:
            lblText = 'DNA Sequence: position = ' + str(EndP) + ' of ' + str(LenSeq) + ' total nucleotides'
        else:
            lblText = 'DNA Sequence: ' + str(StartP + 1) + ' to ' + str(EndP + 1) + ' (' + str(
                EndP - StartP) + ' bases) ' ' selected of ' + str(LenSeq) + ' total nucleotides'

        self.ui.lblDNASeq.setText(lblText)

    @pyqtSlot()
    def on_sbPairLeft_valueChanged(self):

        valueToL = int(self.ui.sbPairLeft.value())
        valueToR = int(self.ui.sbPairRight.value())
        BarCode = data[0]
        BarCode = BarCode[valueToL:]
        BarCode = BarCode[:len(BarCode)- valueToR]
        self.ui.txtPairNames.setText(BarCode)

    # @pyqtSlot()
    def on_sbPairRight_valueChanged(self):

        valueToR = int(self.ui.sbPairRight.value())
        valueToL = int(self.ui.sbPairLeft.value())
        BarCode = data[0]
        BarCode = BarCode[:len(BarCode)- valueToR]
        BarCode = BarCode[valueToL:]
        self.ui.txtPairNames.setText(BarCode)

    @pyqtSlot()
    def on_btnPairRename_clicked(self):
        msg = 'This function will pair Heavy/Light chain sequences, putting a common name in the barcode field so that antibody genes can be synthesized from both. For pairs with common portions of the names (i.e. Patient2C04H and Patient2C04K) use the the left and right spinboxes to truncate names to a common but distinct name (i.e., Patient2C04) for the heavy/light chains, ensuring only that single heavy/light pair will share the truncated name portion. All checked records will be searched to find matched pairs and the barcodes annotated. Continue (if a proper common name is indicated)?'
        buttons = 'YN'
        answer = informationMessage(self, msg, buttons)

        if answer == 'Yes':
            CurrName = self.ui.txtPairNames.toPlainText()
            valueToR = int(self.ui.sbPairRight.value())
            valueToL = int(self.ui.sbPairLeft.value())

            fields = ['SeqName', 'GeneType', 'Blank10']
            SequenceName = data[0]
            SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, SequenceName)
            SQLStatement += ' ORDER BY Blank10'
            DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

            NamedSets = []

            for Seq in DataIs:
                answer = 'Yes'
                Barcode = Seq[2]
                Seqname1 = Seq[0]


                NewBarCode = Seqname1
                NewBarCode = NewBarCode[:len(NewBarCode) - valueToR]
                NewBarCode = NewBarCode[valueToL:]
                search = NewBarCode
                for i in range(0, valueToR):
                    NewBarCode = NewBarCode + '%'
                for i in range(0, valueToL):
                    NewBarCode = '%' + NewBarCode

                SQLStatement = 'SELECT SeqName FROM vgenesDB WHERE SeqName LIKE "'+ NewBarCode + '"'
                HeavyLights = VGenesSQL.RunSQL(DBFilename, SQLStatement)

                fieldsearch = "Blank10"

                for record in HeavyLights:


                    SeqIsNamed = record[0]

                    # self.ui.txtFieldSearch.setPlainText(SeqIsNamed)
                    # self.ui.cboFindField.setCurrentText('Name')
                    # done = self.on_btnFieldSearch_clicked()




                    # fields = ['ID']
                    # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
                    # SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, SeqIsNamed)
                    SQLStatement = 'SELECT ID FROM vgenesDB WHERE SeqName = "'+ SeqIsNamed +'"'

                    WhereStart = SQLStatement.find('WHERE')
                    WhereState = SQLStatement[WhereStart - 1:]  # + ' AND '
                    SQLStatement = 'UPDATE vgenesDB SET ' + fieldsearch + ' = "' + search + '"' + WhereState  # -7.000000' WHERE locId = 173567"
                    # ' WHERE SeqName = "A116_1B04H-2" OR SeqName = "A116_1B04H-3"'
                    foundRecs = VGenesSQL.UpdateMulti(SQLStatement, DBFilename)

                    #model = self.ui.tableView.model()
                    #model.refresh()

    @pyqtSlot()
    def on_btn10xEditPreview_clicked(self):
        global PreviewHTcurrent
        global PreviewCurrentType
        global PreviewHTExp
        LSeqName = ''
        LGeneType = ''
        LVbeg = ''
        LVExp = ''
        LJend = ''
        LJexp = ''
        LCbeg = ''
        LCexp = ''
        LSequence = ''


        self.ui.tabWidget.setCurrentIndex(5)

        fields = ['SeqName', 'GeneType', 'V1', 'J1', 'productive', 'Sequence', 'Vbeg', 'Jend', 'Blank10']
        SequenceName = data[0]
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, SequenceName)
        SQLStatement += ' ORDER BY Blank10'
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)
        JendMuts = []
        ExpectIgG = ' A   S   T   Q \n' + 'GCG TCG ACC AAG'
        ExpectKappa = ' R   T   V   A \n' + 'CGT ACG GTG GCA'
        ExpectLambda = ' G   Q   P   K \n' + 'GGT CAG CCC AAG'

        ExpIgGAA = 'ASTQ'
        ExpCKappaAA = 'RTVA'
        ExpCLambdaAA = 'GQPK'

        # GJseq = []
        # grab last 9 of J gene as going into report and last nine of germline J gene actual
        GermJH1 = '' + ''
        GermJH2 = '' + ''
        GermJH3 = ''+''
        GermJH4 = ''+''
        GermJH5 = ''+''
        GermJH6 = ''+''


        NameList = []
        # for item in fields:
        #     NameList.append(str(self.TransLateFieldtoReal(item, False)))
        CSVOut = 'Sequence name, Sequence \n'

        # preSeq = 'gcaactggtgtacattcc'  # 'CTG CAA CCG GTG TAC ATT CA'

        if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':
            preSeq = 'gcaactggtgtacattcc'  # '
        elif self.ui.cboAbCloningOptions.currentText() == 'Gibson AbVec':
            preSeq = 'atcctttttctagtagcaactgcaaccggtgtacattcc'  # '
        elif self.ui.cboAbCloningOptions.currentText() == 'AbVec classic':
            preSeq = 'gcaaccggtgtacattcc'  # '

        LeaderSeq = ' G   V   H   S \nGGT GTA CAT TCC'



        PreviewHTExp.clear()
        PreviewEntry = ()
        #SeqName 0, HGeneType 1, HLeader 2, HVbeg 3, HVexp 4, HJend 5, HJexp 6, HCbeg 7, HCexp 8, HSequence 9,
        # LGeneType 10, LVbeg 11, LVexp 12, LJend 13, LJexp 14, LCbeg 15, LCexp 16, LSequence 17


        # todo change to app folder
        ErlogFile = os.path.join(temp_folder,'ErLog.txt')  # '/Applications/IgBlast/database/ErLog.txt'  # NoErrors  NoGoodSeqs
        ErLog = 'VGenes input beginning at: ' + time.strftime('%c') + '\n'
        with open(ErlogFile, 'w') as currentFile:  # using with for this automatically closes the file even if you crash
            currentFile.write(ErLog)

        try:
            DBpathname = os.path.join(working_prefix, 'VDJGenes.db')

            (dirname, filename) = os.path.split(DBpathname)
            os.chdir(dirname)

            GetProductive = False
            conn = db.connect(DBpathname)


        except:
            DBpathname = '/Volumes/Promise Pegasus/Dropbox/VGenes/VDJGenes.db'
            (dirname, filename) = os.path.split(DBpathname)
            os.chdir(dirname)

            GetProductive = False
            conn = db.connect(DBpathname)

        #  then need to create a cursor that lets you traverse the database
        cursor = conn.cursor()


        for Seq in DataIs:
            answer = 'Yes'
            Barcode = Seq[8]
            Seqname1 = Seq[0]
            # fields = ['SeqName', 'GeneType', 'V1', 'J1', 'productive', 'Sequence', 'Vbeg', 'GermlineSequence', 'Blank10']
            SQLStatement = 'SELECT SeqName, GeneType, V1, J1, productive, Sequence, Vbeg, GermlineSequence, Blank10, IDEvent, Mutations, Jend FROM vgenesDB WHERE Blank10 = "' + Barcode + '" ORDER BY GeneType'
            SeqClone = VGenesSQL.RunSQL(DBFilename, SQLStatement)


            if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':

                if len(SeqClone) < 2:
                    msg = 'For ' + Seqname1 + ' only a single variable gene was found with this barcode. You need both a heavy and light chain for each antibody'
                    buttons = 'OK'

                    answer = informationMessage(self, msg, buttons)
                    answer = 'no'
                elif len(SeqClone) > 2:
                    msg = 'For ' + Seqname1 + ' has more than one light chain associated with this sequence. Only one each H and L chanin should be designated with each barcode for this report to function.'
                    buttons = 'OK'

                    answer = informationMessage(self, msg, buttons)
                    answer = 'no'

            if answer == 'Yes':
                # SeqName 0, HGeneType 1, HLeader 2, HVbeg 3, HVexp 4, HJend 5, HJexp 6, HCbeg 7, HCexp 8, HSequence 9,
                # LGeneType 10, LVbeg 11, LVexp 12, LJend 13, LJexp 14, LCbeg 15, LCexp 16, LSequence 17
                for Record in SeqClone:
                    done = False
                    answer2 = 'Yes'
                    answer3 = 'Yes'
                    SeqName = Record[0]

                    GeneType = Record[1]
                    Productive = Record[4]
                    Sequence = Record[5]
                    Sequence = Sequence.upper()
                    Sequence = Sequence.replace('-','')
                    Vbeg = int(Record[6])
                    GermSeq = Record[7]
                    JendNumber = int(Record[11])

                    VgeneName = Record[2]
                    JgeneName = Record[3]



                    SqlStatementV = 'SELECT SeqName, Allele, Species, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Human" AND Allele = "' + VgeneName + '"'
                    cursor.execute(SqlStatementV)

                    for row in cursor:
                        GVgene = row[4]
                        VStart = int(row[3])

                    VExp = GVgene[VStart-1:12]


                    VExpAASeq, ErMessage = VGenesSeq.Translator(VExp, 0)
                    VExpDisplay = ' ' + VExpAASeq[0] + '   ' + VExpAASeq[1]  + '   ' + VExpAASeq[2] + '   ' + VExpAASeq[3] + ' \n' + VExp[0:3] + ' ' + VExp[3:6] + ' ' + VExp[6:9] + ' ' + VExp[9:12]

                    # SeqName 0, HGeneType 1, LeaderSeq 2, HVbeg 3, HVexp 4, HJend 5, HJexp 6, HCbeg 7, HCexp 8, HSequence 9,
                    # LGeneType 10, LVbeg 11, LVexp 12, LJend 13, LJexp 14, LCbeg 15, LCexp 16, LSequence 17



                    Vend = Sequence[:12]

                    VendAASeq, ErMessage = VGenesSeq.Translator(Vend, 0)
                    VendDisplay = ' ' + VendAASeq[0] + '   ' + VendAASeq[1] + '   ' + VendAASeq[2] + '   ' + VendAASeq[
                        3] + ' \n' + Vend[0:3] + ' ' + Vend[3:6] + ' ' + Vend[6:9] + ' ' + Vend[9:12]



                    SqlStatementJ = 'SELECT SeqName, Allele, Species, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Human" AND Allele = "' + JgeneName + '"'
                    cursor.execute(SqlStatementJ)
                    # GJseq.clear()

                    for row in cursor:
                        GJgene = row[4]

                    if GeneType == 'Heavy' or GeneType == 'Lambda':
                        if GJgene[len(GJgene) - 1] == 'G':
                            GJgene = GJgene[:len(GJgene) - 1]

                    if GeneType == 'Kappa':
                        if GJgene[len(GJgene) - 1] == 'C':
                            GJgene = GJgene[:len(GJgene) - 1]

                    JExp = GJgene[len(GJgene)-12:len(GJgene)]
                    JExpAASeq, ErMessage = VGenesSeq.Translator(JExp, 0)
                    JExpDisplay = ' ' + JExpAASeq[0] + '   ' + JExpAASeq[1]  + '   ' + JExpAASeq[2] + '   ' + JExpAASeq[3] + ' \n' + JExp[0:3] + ' ' + JExp[3:6] + ' ' + JExp[6:9] + ' ' + JExp[9:12]





                    # todo Figure GL for lambda and kappas and also fix Jend in database...
                    # if GermSeq[len(GermSeq) - 1] == 'G':
                    # 	Jend = len(GermSeq) - 1
                    # else:
                    # 	Jend = len(GermSeq)



                    IDevent = Record[9]
                    Mutations = Record[10]

                    # if Vbeg != 1:
                    #     msg = 'For ' + SeqName + ' the first base is not at position 1 possibly disrupting expression, continue with this sequence?'
                    #     buttons = 'YN'
                    #     answer2 = informationMessage(self, msg, buttons)

                    if Productive == 'No':
                        msg = SeqName + ' is a non-productive rearrangement and may not express, continue with this sequence?'
                        buttons = 'YN'
                        answer3 = informationMessage(self, msg, buttons)
                    JendMut = False
                    if answer2 == 'Yes' and answer3 == 'Yes':
                        # if IDevent == 'Insertion':
                            # msg = SeqName + 'Has an insertion and so needs to be prepared for synthesis by hand and will not be included.'
                            # buttons = 'OK'
                            # Sequence = ''
                        Mutset = Mutations.split(',')
                        for mutation in Mutset:
                            MutDetails = mutation.split('-')
                            for MutD in MutDetails:
                                if MutD == 'Insertion':
                                    Insert = MutDetails[2]
                                    JendNumber += len(Insert)

                            try:
                                if int(MutDetails[1]) > JendNumber -15:
                                    JendMut = True
                            except:
                                print('hmmm')

                        Sequence = Sequence.replace('-', '')
                        Sequence = Sequence[:JendNumber]

                        # SeqName 0, HGeneType 1, LeaderSeq 2, HVbeg 3, HVexp 4, HJend 5, HJexp 6, HCbeg 7, HCexp 8, HSequence 9,
                        # LGeneType 10, LVbeg 11, LVexp 12, LJend 13, LJexp 14, LCbeg 15, LCexp 16, LSequence 17

                        if GeneType == 'Heavy':

                            if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':
                                postSeq = 'gcgtcgaccaagggcc'  # '
                            elif self.ui.cboAbCloningOptions.currentText() == 'Gibson AbVec':
                                postSeq = 'gcgtcgaccaagggcccatcggtcttcc'  # '
                            elif self.ui.cboAbCloningOptions.currentText() == 'AbVec classic':
                                postSeq = 'gcgtcgaccaagg'  # '




                            # JendNumber -= 2
                            Jend = Sequence[JendNumber - 12:]
                            JendNumber2 = JendNumber
                            if JendMut == False:
                                if Jend != JExp:
                                    for i in range(0, 5):
                                        # Sequence = Sequence[:len(Sequence)-1]
                                        JendNumber2 = JendNumber2 - 1
                                        Jend = Sequence[JendNumber2 - 12:JendNumber2]
                                        if Jend == JExp:
                                            Sequence = Sequence[:JendNumber2]
                                            Jend = Sequence[JendNumber2 - 12:]
                                            break


                            JendAASeq, ErMessage = VGenesSeq.Translator(Jend, 0)
                            JendDisplay = ' ' + JendAASeq[0] + '   ' + JendAASeq[1] + '   ' + JendAASeq[2] + '   ' + JendAASeq[3] + ' \n' + Jend[0:3] + ' ' + Jend[3:6] + ' ' + Jend[6:9] + ' ' + Jend[9:12]


                            if len(Sequence) % 3 == 0:
                                HCbeg = ExpectIgG
                            else:
                                HCbeg = 'Out-of-frame'



                            HSeqName = SeqName
                            HGeneType = 'Heavy'
                            HCExp = ExpectIgG
                            HVbeg = VendDisplay
                            HVExp = VExpDisplay
                            HJend = JendDisplay
                            HJexp = JExpDisplay

                            if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':
                                HSequence = Sequence + postSeq
                            elif self.ui.cboAbCloningOptions.currentText() == 'Gibson AbVec':
                                HSequence = preSeq + Sequence + postSeq
                            elif self.ui.cboAbCloningOptions.currentText() == 'AbVec classic':
                                HSequence = preSeq + Sequence + postSeq  # '






                        elif GeneType == 'Kappa':
                            # postSeq = 'cgtacggtggcacagaaccggtgtccattcc'  # CGT ACG gtg gca cag aAC CGG TGTcCATTCC 'gtacggtggctgcaccatctgtctt' # gtacggtggc'   #AA GAC AGA TGG TGC AGC CAC CGT ACG    CGTACGGTGGCTGCACCATCTGTCTT

                            if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':
                                postSeq = 'cgtacggtggcacagaaccggtgtccattcc'  # '
                            elif self.ui.cboAbCloningOptions.currentText() == 'Gibson AbVec':
                                postSeq = 'cgtacggtggctgcaccatctgtctt'  # '
                            elif self.ui.cboAbCloningOptions.currentText() == 'AbVec classic':
                                postSeq = 'cgtacggtggctgc'  # '



                            done = True



                            Jend = Sequence[JendNumber - 12:]
                            JendNumber2 = JendNumber
                            if JendMut == False:
                                if Jend != JExp:
                                    for i in range(0, 5):
                                        # Sequence = Sequence[:len(Sequence)-1]
                                        JendNumber2 = JendNumber2 - 1
                                        Jend = Sequence[JendNumber2 - 12:JendNumber2]
                                        if Jend == JExp:
                                            Sequence = Sequence[:JendNumber2]
                                            Jend = Sequence[JendNumber2 - 12:]
                                            break



                            JendAASeq, ErMessage = VGenesSeq.Translator(Jend, 0)
                            JendDisplay = ' ' + JendAASeq[0] + '   ' + JendAASeq[1] + '   ' + JendAASeq[2] + '   ' + JendAASeq[3] + ' \n' + Jend[0:3] + ' ' + Jend[3:6] + ' ' + Jend[6:9] + ' ' + Jend[9:12]

                            InFrameSeq = len(Sequence)/3

                            if len(Sequence) % 3 == 0:
                                LCbeg = ExpectKappa
                            else:
                                LCbeg = 'Out-of-frame'

                            # SeqName 0, HGeneType 1, LeaderSeq 2, HVbeg 3, HVexp 4, HJend 5, HJexp 6, HCbeg 7, HCexp 8, HSequence 9,
                            # LGeneType 10, LVbeg 11, LVexp 12, LJend 13, LJexp 14, LCbeg 15, LCexp 16, LSequence 17

                            LSeqName = SeqName
                            LGeneType = 'Kappa'
                            LCexp = ExpectKappa
                            LVbeg = VendDisplay
                            LVExp = VExpDisplay
                            LJend = JendDisplay
                            LJexp = JExpDisplay



                            LSequence = preSeq + Sequence + postSeq


                        elif GeneType == 'Lambda':
                            # postSeq = 'ggtcagcccaaggccaaccccactgtcactctgttcccgccctcgaggtggcacagaaccggtgtccattcc'  # 'ggtcagcccaaggctgccccctcggtcactctgttcccrccctcgagtgaggagcttcaagccaaca' #'ggtcagcccaaggctgccccctcggtcactctgttcccaccctcgagtgaggag'   #TG TTG GCT TGA AGC TCC TCA CTC GAG GGY GGG AAC AGA GTG  cactctgttcccrccctcgagtgaggagcttcaagccaaca

                            if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':
                                postSeq = 'ggtcagcccaaggccaaccccactgtcactctgttcccgccctcgaggtggcacagaaccggtgtccattcc'  # '
                            elif self.ui.cboAbCloningOptions.currentText() == 'Gibson AbVec':
                                postSeq = 'ggtcagcccaaggctgccccctcggtcactctgttcccrccctcgagtgaggagcttcaagccaaca'  # '
                            elif self.ui.cboAbCloningOptions.currentText() == 'AbVec classic':
                                postSeq = 'ggtcagcccaaggctgccccctcggtcactctgttcccrccctcgagtgaggagc'  # '



                            Jend = Sequence[JendNumber - 12:]
                            JendNumber2 = JendNumber
                            if JendMut == False:
                                if Jend != JExp:
                                    for i in range(0, 5):
                                        # Sequence = Sequence[:len(Sequence)-1]
                                        JendNumber2 = JendNumber2 - 1
                                        Jend = Sequence[JendNumber2 - 12:JendNumber2]
                                        if Jend == JExp:
                                            Sequence = Sequence[:JendNumber2]
                                            Jend = Sequence[JendNumber2 - 12:]
                                            break



                            JendAASeq, ErMessage = VGenesSeq.Translator(Jend, 0)
                            JendDisplay = ' ' + JendAASeq[0] + '   ' + JendAASeq[1] + '   ' + JendAASeq[2] + '   ' + JendAASeq[3] + ' \n' + Jend[0:3] + ' ' + Jend[3:6] + ' ' + Jend[6:9] + ' ' + Jend[9:12]


                            if len(Sequence) % 3 == 0:
                                LCbeg = ExpectLambda
                            else:
                                LCbeg = 'Out-of-frame'




                            LSeqName = SeqName
                            LGeneType = 'Lambda'
                            LCexp = ExpectLambda
                            LVbeg = VendDisplay
                            LVExp = VExpDisplay
                            LJend = JendDisplay
                            LJexp = JExpDisplay

                            LSequence = preSeq + Sequence + postSeq





            if answer == 'Yes':
                PreviewEntry = (HSeqName, HGeneType, LeaderSeq, HVbeg, HVExp, HJend, HJexp, HCbeg, HCExp, HSequence, LSeqName, LGeneType, LVbeg, LVExp, LJend, LJexp, LCbeg, LCexp, LSequence)
                PreviewHTExp.append(PreviewEntry)

                    # SeqName 0, HGeneType 1, HLeader 2, HVbeg 3, HVexp 4, HJend 5, HJexp 6, HCbeg 7, HCexp 8, HSequence 9,

                    # LSeqName 10, LGeneType 11, LVbeg 12, LVexp 13, LJend 14, LJexp 15, LCbeg 16, LCexp 17, LSequence 18

        #
        PreviewHTcurrent = 0
        PreviewCurrentType = 'H'
        try:
            self.PopulatePreviewHT('forward')
        except:
            Msg = "No more record found!"
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_btn10xEditForward_clicked(self):
        try:
            self.PopulatePreviewHT('forward')
        except:
            Msg = "No more record found!"
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    @pyqtSlot()
    def on_btn10xEditBack_clicked(self):
        try:
            self.PopulatePreviewHT('backward')
        except:
            Msg = "No more record found!"
            QMessageBox.warning(self, 'Warning', Msg, QMessageBox.Ok, QMessageBox.Ok)

    def PopulatePreviewHT(self, direction):
        global PreviewHTcurrent
        global PreviewCurrentType
        global PreviewHTExp

        self.ui.lblVbegOff.setEnabled(False)
        self.ui.lblJendOff.setEnabled(False)
        # PreviewHTcurrent = 0
        # PreviewCurrentType == 'H'
        # PreviewEntry = (
        # HSeqName 0, HGeneType 1, LeaderSeq 2, HVbeg 3, HVExp 4, HJend 5, HJexp 6, HCbeg 7,
        # HCExp 8, HSequence 9, LSeqName 10, LGeneType 11, LVbeg 12,
        # LVExp 13, LJend 14, LJexp 15, LCbeg 16, LCexp 17, LSequence 18)

        NumSeqs = len(PreviewHTExp)

        CurrentRecord = PreviewHTExp[PreviewHTcurrent]


        HSeqName = CurrentRecord[0]
        LSeqName = CurrentRecord[10]
        HGeneType = CurrentRecord[1]
        LGeneType = CurrentRecord[11]

        LeaderSeq = CurrentRecord[2]
        HVBeg = CurrentRecord[3]
        HVExp = CurrentRecord[4]
        HJEnd = CurrentRecord[5]
        HJExp = CurrentRecord[6]
        HCBeg = CurrentRecord[7]
        HCExp = CurrentRecord[8]

        LVBeg = CurrentRecord[12]
        LVExp = CurrentRecord[13]
        LJEnd = CurrentRecord[14]
        LJExp = CurrentRecord[15]
        LCBeg = CurrentRecord[16]
        LCExp = CurrentRecord[17]

        self.ui.txtEditLeader_1.setText(LeaderSeq)
        self.ui.txtLeader_Expected.setText(LeaderSeq)


        if PreviewCurrentType == 'H':

            self.ui.txtFieldSearch.setText(HSeqName)
            self.ui.cboFindField.setCurrentText('Name')
            done = self.on_btnFieldSearch_clicked()

            self.ui.lblSeqName.setText(HSeqName)
            self.ui.lblPrevType.setText(HGeneType)

            self.ui.txtEditVbeg_1.setText(HVBeg)
            self.ui.txtVbeg_Expected.setText(HVExp)

            if HVBeg != HVExp:
                self.ui.lblVbegOff.setEnabled(True)

            self.ui.txtEditJend_1.setText(HJEnd)
            self.ui.txtJendExp.setText(HJExp)

            if HJEnd != HJExp:
                self.ui.lblJendOff.setEnabled(True)

            self.ui.txtEditCend_1.setText(HCBeg)
            self.ui.txtCend_Expected.setText(HCExp)

        elif PreviewCurrentType == 'L':

            self.ui.txtFieldSearch.setText(LSeqName)
            self.ui.cboFindField.setCurrentText('Name')
            done = self.on_btnFieldSearch_clicked()

            self.ui.lblSeqName.setText(LSeqName)
            self.ui.lblPrevType.setText(LGeneType)
            self.ui.txtEditVbeg_1.setText(LVBeg)
            self.ui.txtVbeg_Expected.setText(LVExp)
            if LVBeg != LVExp:
                self.ui.lblVbegOff.setEnabled(True)

            self.ui.txtEditJend_1.setText(LJEnd)
            self.ui.txtJendExp.setText(LJExp)
            if LJEnd != LJExp:
                self.ui.lblJendOff.setEnabled(True)

            self.ui.txtEditCend_1.setText(LCBeg)
            self.ui.txtCend_Expected.setText(LCExp)

        if PreviewCurrentType == 'H':

            PreviewCurrentType = 'L'
        else:
            PreviewCurrentType = 'H'

            if direction == 'forward':
                if PreviewHTcurrent < NumSeqs-1:
                    PreviewHTcurrent += 1

                else:
                    PreviewHTcurrent = 0
            else:
                if PreviewHTcurrent == 0:
                    PreviewHTcurrent = NumSeqs-1

                else:
                    PreviewHTcurrent -= 1

            # Pathname = saveFile(self, 'csv')
            #
            # with open(Pathname, 'w') as currentfile:
            # 	currentfile.write(CSVOut)

    @pyqtSlot()
    def on_btn10xEditFinal_clicked(self):

        global PreviewHTExp

        CSVOut = 'Name,Sequence\n'
        # CurrentRecord = PreviewHTExp[PreviewHTcurrent]

        if self.ui.cboAbCloningOptions.currentText() == 'HT-AbVec':
            for CurrentRecord in PreviewHTExp:
                HSeqName = CurrentRecord[0]
                Hsequence = CurrentRecord[9]
                LSeqName = CurrentRecord[10]
                Lsequence = CurrentRecord[18]
                Sequence = Lsequence + Hsequence

                CSVOut = CSVOut + HSeqName + ',' + Sequence + '\n'

        elif self.ui.cboAbCloningOptions.currentText() == 'Gibson AbVec':

            for CurrentRecord in PreviewHTExp:
                HSeqName = CurrentRecord[0]
                Hsequence = CurrentRecord[9]
                LSeqName = CurrentRecord[10]
                Lsequence = CurrentRecord[18]


                CSVOut = CSVOut + HSeqName + ',' + Hsequence + '\n' + LSeqName + ',' + Lsequence + '\n'
        elif self.ui.cboAbCloningOptions.currentText() == 'AbVec classic':

            for CurrentRecord in PreviewHTExp:
                HSeqName = CurrentRecord[0]
                Hsequence = CurrentRecord[9]
                LSeqName = CurrentRecord[10]
                Lsequence = CurrentRecord[18]


                CSVOut = CSVOut + HSeqName + ',' + Hsequence + '\n' + LSeqName + ',' + Lsequence + '\n'


        Pathname = saveFile(self, 'csv')
        if Pathname == '' or Pathname == None:
            return
        else:
            tmp_path, tmp_file = os.path.split(Pathname)
            if os.access(tmp_path, os.W_OK):
                pass
            else:
                Msg = 'You do not have the write permission of this folder!\n' + tmp_path
                QMessageBox.information(self, 'Information', Msg, QMessageBox.Ok, QMessageBox.Ok)
                return

            with open(Pathname, 'w') as currentfile:
                currentfile.write(CSVOut)


    @pyqtSlot()
    def on_btnEditSeq_clicked(self):
        if self.ui.btnEditSeq.isChecked():
            self.ui.btnEditSeq.setText("Save Changes")
            msg = 'Press button again to save changes'

            self.ui.lblSeq2.setText(msg)

            if self.ui.radioButtonGermView.isChecked():
                self.on_radioButtonGermView_clicked()

            self.clearTreeChecks()
            self.AlignSequences('none')

            msg = 'Results of edits are aligned to the predicted germline in the text editor window. Changes will not be saved until Save Changes is pressed.'
            buttons = 'OK'
            answer = informationMessage(self, msg, buttons)
        else:
            msg = 'Saving changes to the sequence will cause it to be reanlyzed (mutations, regions) but will retain other information (clone, isotype). Continue?'
            buttons = 'OKC'
            answer = questionMessage(self, msg, buttons)
            if answer == 'OK':

                self.UpdateSeqAnalysis()


            self.ui.btnEditSeq.setText("Edit Mode")
            msg = 'Prese "Edit Mode" to edit sequence.'

            self.ui.lblSeq2.setText(msg)



            # todo code to update need update record function in VGenes SQL:

    def UpdateSeqAnalysis(self):
        datalist = []
        #currentRow = self.ui.tableView.currentIndex().row()
        # todo change to app folder
        try:
            filename = os.path.join(working_prefix, 'UpdateRecord.nt')
            # filename = os.path.join(os.path.expanduser('~'), 'Applications', 'VGenes', 'UpdateRecord.nt')
            with open(filename, 'r') as currentfile:
                vv = currentfile
        except:
            filename = os.path.join(working_prefix, 'UpdateRecord.nt')
            file = open(filename,'w')
            file.close()


        sequence = self.ui.txtDNASeq.toPlainText()
        seqname = data[0]
        updateseq = '>' + seqname + '\n' + sequence + '\n'

        with open(filename, 'w') as currentfile:
            currentfile.write(updateseq)

        if filename == None:
            return
        project = self.ui.txtProject.toPlainText()
        group = self.ui.txtGroup.toPlainText()
        subgroup = self.ui.txtSubGroup.toPlainText()
        species = data[78]
        project = project.strip()
        group = group.strip()
        subgroup = subgroup.strip()
        species = species.strip()

        datalist.append(project)
        datalist.append(group)
        datalist.append(subgroup)
        datalist.append(species)
        datalist.append(False)
        datalist.append(0)
        # BlastIsDone = False

        IgBLASTAnalysis = IgBLASTer.IgBLASTit(filename, datalist, False)

        # while BlastIsDone == False:
        #     NotDone  = False
        # todo need to put any other preserved data into IgBLASTAnalysis
        i = 0
        #model = self.ui.tableView.model()
        DataRow = int(data[119])

        for record in IgBLASTAnalysis:
            for item in record:
                FieldName = FieldList[i]
                ItemValue = str(item) #+ ' '
                if i != 119:
                    VGenesSQL.UpdateField(DataRow, ItemValue, FieldName, DBFilename)
                i += 1


        #model.refresh()

        global PreVID
        # NewID = int(data[119])+1
        # PreVID = NewID

        self.updateF(data[119])

    def UpdateMutationAnalysis(self):
        datalist = []
        #currentRow = self.ui.tableView.currentIndex().row()
        # todo change to app folder
        try:
            filename = os.path.join(working_prefix, 'UpdateRecord.nt')
            # filename = os.path.join(os.path.expanduser('~'), 'Applications', 'VGenes', 'UpdateRecord.nt')
            with open(filename, 'r') as currentfile:
                vv = currentfile
        except:
            filename = '/Volumes/Promise Pegasus/Dropbox/VGenes/UpdateRecord.nt'

        # WhichOnes = 'All'
        # if WhichOnes == 'One':
        # 	sequence = self.ui.txtDNASeq.toPlainText()
        # 	seqname = data[0]
        # 	updateseq = '>' + seqname + '\n' + sequence + '\n'
        #
        # 	with open(filename, 'w') as currentfile:
        # 		currentfile.write(updateseq)
        #
        # 	if filename == None:
        # 		return
        # 	project = self.ui.txtProject.toPlainText()
        # 	group = self.ui.txtGroup.toPlainText()
        # 	subgroup = self.ui.txtSubGroup.toPlainText()
        # 	species = data[78]
        # 	project = project.strip()
        # 	group = group.strip()
        # 	subgroup = subgroup.strip()
        # 	species = species.strip()
        #
        # 	datalist.append(project)
        # 	datalist.append(group)
        # 	datalist.append(subgroup)
        # 	datalist.append(species)
        # 	datalist.append(False)
        # # BlastIsDone = False
        #
        # elif WhichOnes == 'All':

        fields = ['SeqName', 'Sequence', 'Project', 'Grouping', 'SubGroup', 'Species', 'ID']
        # checkedProjects, checkedGroups, checkedSubGroups, checkedkids = getTreeChecked()
        SQLStatement = VGenesSQL.MakeSQLStatement(self, fields, data[0])
        DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

        for Seq in DataIs:
            seqname = Seq[0]
            sequence = Seq[1]
            sequence = sequence.replace('\n', '').replace('\r', '')
            sequence = sequence.upper()
            Newline = ''
            for nuc in sequence:
                if nuc == 'N' or nuc == 'A' or nuc == 'T' or nuc == 'G' or nuc == 'C':
                    Newline += nuc
            updateseq = '>' + seqname + '\n' + Newline + '\n'
            with open(filename, 'w') as currentfile:
                currentfile.write(updateseq)

            project = Seq[2]
            group = Seq[3]
            subgroup = Seq[4]
            species  = Seq[5]
            DataRow = Seq[6]


            datalist.append(project)
            datalist.append(group)
            datalist.append(subgroup)
            datalist.append(species)
            datalist.append(False)
            datalist.append(0)




            IgBLASTAnalysis = IgBLASTer.IgBLASTit(filename, datalist, False)


            i = 0
            #model = self.ui.tableView.model()
            # DataRow = int(data[119])

            for record in IgBLASTAnalysis:
                for item in record:
                    FieldName = FieldList[i]
                    ItemValue = str(item)  # + ' '
                    if i == 57 or i == 96 or i == 97 or i == 98:  #only SHM fields
                        VGenesSQL.UpdateField(DataRow, ItemValue, FieldName, DBFilename)

                    i += 1

            #model.refresh()

        self.updateF(data[119])

def reName(ori_name, rep1, rep2, prefix):
    if rep1 == 'contig':
        my_name = re.sub('contig_', rep2, ori_name)
    else:
        my_name = re.sub('clonotype',rep1, ori_name)
        my_name = re.sub('consensus_', rep2, my_name)
    if prefix != '':
        my_name = prefix + '_' + my_name
    return my_name

def IgBlastParserFast(FASTAFile, datalist, signal):
    import os
    # todo change to app folder
    #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
    ErlogFile = os.path.join(temp_folder,  'ErLog.txt')
    ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
    ErLog = 'VGenes input beginning at: ' + time.strftime('%c') + '\n'
    with open(ErlogFile, 'w') as currentFile:  # using with for this automatically closes the file even if you crash
        currentFile.write(ErLog)

    try:
        DBpathname = os.path.join(working_prefix, 'Data', 'VDJGenes.db')
        (dirname, filename) = os.path.split(DBpathname)
        os.chdir(dirname)
        GetProductive = False
        conn = db.connect(DBpathname)
    except:
        Msg = 'VDJ DB connect Error!'
        return Msg

    #  then need to create a cursor that lets you traverse the database
    cursor = conn.cursor()
    DATA = []
    Sequences = {}

    project = datalist[0]
    grouping = datalist[1]
    subgroup = datalist[2]
    species = datalist[3]
    GetProductive = datalist[4]
    MaxNum = int(datalist[5])

    ErLog, TotSeqs = IgBLASTer.ProcessFASTA(FASTAFile, MaxNum)
    workingdir = os.path.join(working_prefix, 'IgBlast')
    workingfilename = os.path.join(working_prefix, 'IgBlast', 'WorkingFile.nt')

    os.chdir(workingdir)
    Sequences.clear()
    now = time.strftime('%c')
    # read input sequence file
    with open(workingfilename, 'r') as currentFile:  #make dictionary of seqs keyed by name
        for FASTAline in currentFile:
            FASTAline = FASTAline.replace('\n', '').replace('\r', '')
            if FASTAline[0] == '>':
                #print(FASTAline)
                SeqNamed = FASTAline[1:]
                SeqNamed = SeqNamed.strip()

            else:
                Sequence = FASTAline
                if Sequence != '':
                    Sequences[SeqNamed] = Sequence
                SeqNamed = ''
                Sequence = ''

    totel_seq = len(Sequences)

    # run IgBlast
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    igblast_out_fmt19 = os.path.join(temp_folder, time_stamp + '_igblast_out_fmt19.csv')
    try:
        start = time.time()
        if species == 'Human':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 3"
            IgBlastOut_fmt3 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
            #BLASTCommandLine = workingdir + " -germline_db_V Human/HumanVGenes.nt -germline_db_J Human/HumanJGenes.nt -germline_db_D Human/HumanDGenes.nt -organism human -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19 > " + igblast_out_fmt19
            #IgBlastOut_fmt19 = os.system(BLASTCommandLine)
            #print(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19"
            IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
        elif species == 'Mouse':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 3"
            IgBlastOut_fmt3 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
            #BLASTCommandLine = workingdir + " -germline_db_V Mouse/MouseVGenes.nt -germline_db_J Mouse/MouseJGenes.nt -germline_db_D Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19 > " + igblast_out_fmt19
            #IgBlastOut_fmt19 = os.system(BLASTCommandLine)
            #print(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19"
            IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
        end = time.time()
        print('Run time for IgBlast: ' + str(end - start))
    except:
        ErLog = 'VGenes running Error!\nCurrent CMD: ' + BLASTCommandLine + '\n'
        with open(ErlogFile, 'a') as currentFile:  # using with for this automatically closes the file even if you crash
            currentFile.write(ErLog)
        return

    start = time.time()
    # parse IgBlast out fmt 19
    line_id = 0
    bad_line = []
    for record in IgBlastOut_fmt19:
        record = record.split('\t')
        if line_id == 0:
            pass
        else:
            try:
                pct = int((line_id + 1) * 100 / totel_seq)
                label = 'Step1:' + str(line_id + 1) + '/' + str(totel_seq)
                signal.emit(pct, label)

                this_data = [''] * 119

                this_data[0] = record[0]
                this_data[1] = str(len(record[1]))

                # save raw sequence into table
                this_data[118] = record[1]

                if record[2] == 'IGH':
                    this_data[2] = 'Heavy'
                elif record[2] == 'IGK':
                    this_data[2] = 'Kappa'
                elif record[2] == 'IGL':
                    this_data[2] = 'Lambda'
                else:
                    this_data[2] = 'Unknown'

                if record[3] == 'F':
                    this_data[12] = 'No'
                else:
                    this_data[12] = 'Yes'

                if record[4] == '':
                    this_data[13] = 'N/A'
                else:
                    if record[4] == 'T':
                        this_data[13] = 'In-frame'
                    elif record[4] == 'F':
                        this_data[13] = 'Out-of-frame'
                    else:
                        this_data[13] = record[4]

                # because there is an extra column (6th column, v_frameshift) in igblast-Win (fmt19) compared to igblastn-Mac, we have to parse results seapreatly
                if system() == 'Windows':
                    if record[6] == '':
                        this_data[14] = 'N/A'
                    else:
                        if record[6] == 'T':
                            this_data[14] = 'Yes'
                        elif record[6] == 'F':
                            this_data[14] = 'No'
                        else:
                            this_data[14] = record[6]

                    if record[7] == 'F':
                        this_data[15] = '+'
                    else:
                        this_data[15] = '-'

                    this_data[59] = record[66]
                    this_data[60] = record[67]
                    this_data[61] = record[70]
                    this_data[62] = record[71]
                    this_data[63] = ''
                    this_data[64] = ''
                    this_data[65] = record[74]
                    this_data[66] = record[75]

                    this_data[67] = record[16]
                    this_data[68] = record[17]
                    this_data[69] = record[18]
                    this_data[70] = record[19]
                    this_data[71] = ''
                    this_data[72] = ''
                    this_data[73] = record[20]
                    this_data[74] = record[21]

                    # identify grouping
                    if project == 'ByFunction':
                        this_data[75] = this_data[2]
                        if this_data[14] == "Yes":
                            this_data[76] = 'Functional'
                        else:
                            this_data[76] = 'Nonfunctional'
                        this_data[77] = this_data[13]
                    else:
                        this_data[75] = project
                        this_data[76] = grouping
                        this_data[77] = subgroup

                    this_data[78] = species
                    # sequence
                    try:
                        vdj_seq = re.sub('-', '', record[12])
                        seq_parts = record[1].split(vdj_seq)
                        this_data[79] = record[12] + seq_parts[1]
                    except:
                        #this_data[79] = record[1][int(record[64]) - 1:]
                        print('sequence potential error')
                        print(record[1])
                        print(record[12])
                        this_data[79] = record[12]
                    this_data[80] = record[13]

                    this_data[86] = "Specificity"
                    this_data[87] = "Subspecificity"
                    this_data[88] = "0"
                    this_data[89] = "0"

                    this_data[93] = now

                    # identify isotype
                    if this_data[2] == 'Heavy':
                        try:
                            IsoSeq = record[1]
                            IsoSeq = IsoSeq[int(record[73]):]
                            IsoSeq = IsoSeq.strip('N')
                            AGCTs = IsoSeq.count('A') + IsoSeq.count('G') + IsoSeq.count('C') + IsoSeq.count('T')
                            if AGCTs > 5:  # todo decide if can determine isotype from < 5 or need more then
                                if species == 'Human':
                                    Isotype = VGenesSeq.CallIsotype(IsoSeq)
                                elif species == 'Mouse':
                                    Isotype = VGenesSeq.CallIsotypeMouse(IsoSeq)
                                else:
                                    Msg = 'Your current species is: ' + species + \
                                          '\nWe do not support this species!'
                                    return Msg
                            else:
                                if len(IsoSeq) > 2:
                                    if IsoSeq[:3] == 'CCT' or IsoSeq == 'CTT':
                                        Isotype = 'IgG'
                                    elif IsoSeq[:3] == 'CAT':
                                        Isotype = 'IgA'
                                    elif IsoSeq[:3] == 'GGA':
                                        Isotype = 'IgM'
                                    elif IsoSeq[:3] == 'CAC':
                                        Isotype = 'IgD'
                                    else:
                                        Isotype = IsoSeq
                                else:
                                    Isotype = 'Unknown'
                        except:
                            Isotype = 'Unknown'
                    else:
                        if this_data[2] == 'Kappa':
                            Isotype = 'Kappa'
                        elif this_data[2] == 'Lambda':
                            Isotype = 'Lambda'
                    this_data[101] = Isotype

                    # import CDR3
                    CDR3_NT = record[46]
                    CDR3_AA = record[47]
                    CDR3_len = len(CDR3_AA)
                    CDR3_MW = VGenesSeq.OtherParam(CDR3_AA, 'AAMW', 0, True)
                    CDR3_pI = VGenesSeq.OtherParam(CDR3_AA, 'AApI', 0, True)

                    this_data[81] = CDR3_NT
                    this_data[82] = CDR3_AA
                    this_data[83] = CDR3_len
                    this_data[99] = str(CDR3_MW)
                    this_data[100] = str(CDR3_pI)
                    try:
                        this_data[84] = str(int(record[88]) - int(record[64]) + 1)
                        this_data[85] = str(int(record[89]) - int(record[64]) + 1)
                    except:
                        this_data[84] = 'NA'
                        this_data[85] = 'NA'

                    # import mutation
                    mAb_seq = record[12]
                    germline_seq = record[13]
                    mut, num_mut = IdentifyMutation(mAb_seq, germline_seq)
                    this_data[96] = str(num_mut)
                    this_data[97] = mut
                else:
                    if record[5] == '':
                        this_data[14] = 'N/A'
                    else:
                        if record[5] == 'T':
                            this_data[14] = 'Yes'
                        elif record[5] == 'F':
                            this_data[14] = 'No'
                        else:
                            this_data[14] = record[5]

                    if record[6] == 'F':
                        this_data[15] = '+'
                    else:
                        this_data[15] = '-'

                    this_data[59] = record[65]
                    this_data[60] = record[66]
                    this_data[61] = record[69]
                    this_data[62] = record[70]
                    this_data[63] = ''
                    this_data[64] = ''
                    this_data[65] = record[73]
                    this_data[66] = record[74]

                    this_data[67] = record[15]
                    this_data[68] = record[16]
                    this_data[69] = record[17]
                    this_data[70] = record[18]
                    this_data[71] = ''
                    this_data[72] = ''
                    this_data[73] = record[19]
                    this_data[74] = record[20]

                    # identify grouping
                    if project == 'ByFunction':
                        this_data[75] = this_data[2]
                        if this_data[14] == "Yes":
                            this_data[76] = 'Functional'
                        else:
                            this_data[76] = 'Nonfunctional'
                        this_data[77] = this_data[13]
                    else:
                        this_data[75] = project
                        this_data[76] = grouping
                        this_data[77] = subgroup

                    this_data[78] = species
                    # sequence
                    try:
                        vdj_seq = re.sub('-', '', record[11])
                        seq_parts = record[1].split(vdj_seq)
                        this_data[79] = record[11] + seq_parts[1]
                    except:
                        #this_data[79] = record[1][int(record[63])-1:]
                        print('sequence potential error')
                        print(record[1])
                        print(record[11])
                        this_data[79] = record[11]
                    this_data[80] = record[12]

                    this_data[86] = "Specificity"
                    this_data[87] = "Subspecificity"
                    this_data[88] = "0"
                    this_data[89] = "0"

                    this_data[93] = now

                    # identify isotype
                    if this_data[2] == 'Heavy':
                        try:
                            IsoSeq = record[1]
                            IsoSeq = IsoSeq[int(record[72]):]

                            IsoSeq = IsoSeq.strip('N')
                            AGCTs = IsoSeq.count('A') + IsoSeq.count('G') + IsoSeq.count('C') + IsoSeq.count('T')
                            if AGCTs > 5:  # todo decide if can determine isotype from < 5 or need more then
                                if species == 'Human':
                                    Isotype = VGenesSeq.CallIsotype(IsoSeq)
                                elif species == 'Mouse':
                                    Isotype = VGenesSeq.CallIsotypeMouse(IsoSeq)
                                else:
                                    Msg = 'Your current species is: ' + species + \
                                          '\nWe do not support this species!'
                                    return Msg
                            else:
                                if len(IsoSeq) > 2:
                                    if IsoSeq[:3] == 'CCT' or IsoSeq == 'CTT':
                                        Isotype = 'IgG'
                                    elif IsoSeq[:3] == 'CAT':
                                        Isotype = 'IgA'
                                    elif IsoSeq[:3] == 'GGA':
                                        Isotype = 'IgM'
                                    elif IsoSeq[:3] == 'CAC':
                                        Isotype = 'IgD'
                                    else:
                                        Isotype = IsoSeq
                                else:
                                    Isotype = 'Unknown'
                        except:
                            Isotype = 'Unknown'
                    else:
                        if this_data[2] == 'Kappa':
                            Isotype = 'Kappa'
                        elif this_data[2] == 'Lambda':
                            Isotype = 'Lambda'
                    this_data[101] = Isotype

                    # import CDR3
                    CDR3_NT = record[45]
                    CDR3_AA = record[46]
                    CDR3_len = len(CDR3_AA)
                    CDR3_MW = VGenesSeq.OtherParam(CDR3_AA, 'AAMW', 0, True)
                    CDR3_pI = VGenesSeq.OtherParam(CDR3_AA, 'AApI', 0, True)

                    this_data[81] = CDR3_NT
                    this_data[82] = CDR3_AA
                    this_data[83] = CDR3_len
                    this_data[99] = str(CDR3_MW)
                    this_data[100] = str(CDR3_pI)
                    try:
                        this_data[84] = str(int(record[87]) - int(record[63]) + 1)
                        this_data[85] = str(int(record[88]) - int(record[63]) + 1)
                    except:
                        this_data[84] = 'NA'
                        this_data[85] = 'NA'

                    # import mutation
                    mAb_seq = record[11]
                    germline_seq = record[12]
                    mut, num_mut = IdentifyMutation(mAb_seq, germline_seq)
                    # V(D)J mutation
                    this_data[96] = str(num_mut)
                    this_data[97] = mut
                DATA.append(this_data)
            except:
                bad_line.append(line_id - 1)
        line_id += 1

    # parse IgBlast out fmt 3
    cur_block = ''
    block_id = 0
    read_tag = False
    for IgLine in IgBlastOut_fmt3:
        line_match = re.findall(r'^Query', IgLine)
        if len(line_match) > 0:
            read_tag = True

            if cur_block != '':
                if block_id in bad_line:
                    block_id += 1
                    cur_block = ''
                    continue
                # progress bar signal
                pct = int((block_id + 1) * 100 / totel_seq)
                label = 'Step2:' + str(block_id + 1) + '/' + str(totel_seq)
                signal.emit(pct, label)

                # import V1,V2,V3,D1,D2,DD3,J1,J2,J3 and V,D,J locus
                ig_match = re.findall('\nIG[^\n]+', cur_block)
                ## import V1,V2,V3,D1,D2,DD3,J1,J2,J3
                v_cur_index = 3
                d_cur_index = 6
                j_cur_index = 9
                for line in ig_match[:len(ig_match) - 1]:
                    m = re.search('IG\S+', line)
                    cur_gene = m.group(0)
                    if cur_gene[3] == 'V':
                        DATA[block_id][v_cur_index] = cur_gene
                        v_cur_index += 1
                    elif cur_gene[3] == 'D':
                        DATA[block_id][d_cur_index] = cur_gene
                        d_cur_index += 1
                    else:
                        DATA[block_id][j_cur_index] = cur_gene
                        j_cur_index += 1
                # V,D,J locus
                m = re.search('IG\S+', DATA[block_id][3])
                try:
                    v_locus = m.group(0)
                    v_locus = re.sub('^IG', '', v_locus)
                    v_locus = re.sub('\*.+', '', v_locus)
                    v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
                    DATA[block_id][90] = v_locus
                except:
                    pass

                m = re.search('IG\S+', DATA[block_id][6])
                try:
                    d_locus = m.group(0)
                    d_locus = re.sub('^IG', '', d_locus)
                    d_locus = re.sub('\*.+', '', d_locus)
                    d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
                    DATA[block_id][92] = d_locus
                except:
                    pass

                m = re.search('IG\S+', DATA[block_id][9])
                try:
                    j_locus = m.group(0)
                    j_locus = re.sub('^IG', '', j_locus)
                    j_locus = re.sub('\*.+', '', j_locus)
                    j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
                    DATA[block_id][91] = j_locus
                except:
                    pass
                
                # import V(D)J junction info
                try:
                    ig_match = re.findall(r'V-\(D\)-J junction.+\n.+', cur_block)
                    junction = ig_match[0]
                    junction = junction.split('\n')[1]
                    junction_list = junction.split('\t')
                    if DATA[block_id][2] == 'Heavy':
                        DATA[block_id][16] = junction_list[0]
                        DATA[block_id][17] = junction_list[1]
                        DATA[block_id][18] = junction_list[2]
                        DATA[block_id][19] = junction_list[3]
                        DATA[block_id][20] = junction_list[4]
                    else:
                        DATA[block_id][16] = junction_list[0]
                        DATA[block_id][21] = junction_list[1]
                        DATA[block_id][20] = junction_list[2]
                except:
                    if DATA[block_id][2] == 'Heavy':
                        DATA[block_id][16] = 'NA'
                        DATA[block_id][17] = 'NA'
                        DATA[block_id][18] = 'NA'
                        DATA[block_id][19] = 'NA'
                        DATA[block_id][20] = 'NA'
                    else:
                        DATA[block_id][16] = 'NA'
                        DATA[block_id][21] = 'NA'
                        DATA[block_id][20] = 'NA'
                
                # import Alignment summary
                try:
                    ig_match = re.findall(r'\nFR1[^\n]+', cur_block)
                    fr1_match = ig_match[0]
                    fr1_match = fr1_match[1:]
                    fr1_match = fr1_match.split('\t')
                    DATA[block_id][22] = 1
                    DATA[block_id][23] = str(int(fr1_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][24] = fr1_match[3]
                    DATA[block_id][25] = fr1_match[4]
                    DATA[block_id][26] = fr1_match[5]
                    DATA[block_id][27] = fr1_match[6]
                    DATA[block_id][28] = fr1_match[7]
                except:
                    print(DATA[block_id][0])
                    DATA[block_id][22] = 'NA'
                    DATA[block_id][23] = 'NA'
                    DATA[block_id][24] = 'NA'
                    DATA[block_id][25] = 'NA'
                    DATA[block_id][26] = 'NA'
                    DATA[block_id][27] = 'NA'
                    DATA[block_id][28] = 'NA'

                try:
                    ig_match = re.findall(r'\nCDR1[^\n]+', cur_block)
                    cdr1_match = ig_match[0]
                    cdr1_match = cdr1_match[1:]
                    cdr1_match = cdr1_match.split('\t')
                    DATA[block_id][29] = str(int(cdr1_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][30] = str(int(cdr1_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][31] = cdr1_match[3]
                    DATA[block_id][32] = cdr1_match[4]
                    DATA[block_id][33] = cdr1_match[5]
                    DATA[block_id][34] = cdr1_match[6]
                    DATA[block_id][35] = cdr1_match[7]
                except:
                    DATA[block_id][29] = 'NA'
                    DATA[block_id][30] = 'NA'
                    DATA[block_id][31] = 'NA'
                    DATA[block_id][32] = 'NA'
                    DATA[block_id][33] = 'NA'
                    DATA[block_id][34] = 'NA'
                    DATA[block_id][35] = 'NA'

                try:
                    ig_match = re.findall(r'\nFR2[^\n]+', cur_block)
                    fr2_match = ig_match[0]
                    fr2_match = fr2_match[1:]
                    fr2_match = fr2_match.split('\t')
                    DATA[block_id][36] = str(int(fr2_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][37] = str(int(fr2_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][38] = fr2_match[3]
                    DATA[block_id][39] = fr2_match[4]
                    DATA[block_id][40] = fr2_match[5]
                    DATA[block_id][41] = fr2_match[6]
                    DATA[block_id][42] = fr2_match[7]
                except:
                    DATA[block_id][36] = 'NA'
                    DATA[block_id][37] = 'NA'
                    DATA[block_id][38] = 'NA'
                    DATA[block_id][39] = 'NA'
                    DATA[block_id][40] = 'NA'
                    DATA[block_id][41] = 'NA'
                    DATA[block_id][42] = 'NA'

                try:
                    ig_match = re.findall(r'\nCDR2[^\n]+', cur_block)
                    cdr2_match = ig_match[0]
                    cdr2_match = cdr2_match[1:]
                    cdr2_match = cdr2_match.split('\t')
                    DATA[block_id][43] = str(int(cdr2_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][44] = str(int(cdr2_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][45] = cdr2_match[3]
                    DATA[block_id][46] = cdr2_match[4]
                    DATA[block_id][47] = cdr2_match[5]
                    DATA[block_id][48] = cdr2_match[6]
                    DATA[block_id][49] = cdr2_match[7]
                except:
                    DATA[block_id][43] = 'NA'
                    DATA[block_id][44] = 'NA'
                    DATA[block_id][45] = 'NA'
                    DATA[block_id][46] = 'NA'
                    DATA[block_id][47] = 'NA'
                    DATA[block_id][48] = 'NA'
                    DATA[block_id][49] = 'NA'

                try:
                    ig_match = re.findall(r'\nFR3[^\n]+', cur_block)
                    fr3_match = ig_match[0]
                    fr3_match = fr3_match[1:]
                    fr3_match = fr3_match.split('\t')
                    DATA[block_id][50] = str(int(fr3_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][51] = str(int(fr3_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][52] = fr3_match[3]
                    DATA[block_id][53] = fr3_match[4]
                    DATA[block_id][54] = fr3_match[5]
                    DATA[block_id][55] = fr3_match[6]
                    DATA[block_id][56] = fr3_match[7]
                except:
                    DATA[block_id][50] = 'NA'
                    DATA[block_id][51] = 'NA'
                    DATA[block_id][52] = 'NA'
                    DATA[block_id][53] = 'NA'
                    DATA[block_id][54] = 'NA'
                    DATA[block_id][55] = 'NA'
                    DATA[block_id][56] = 'NA'

                # import Alignment summary
                try:
                    ig_match = re.findall(r'\nAlignments[\n\S\s]+', cur_block)
                    alignment = ig_match[0]
                    alignment = alignment[1:]
                    alignment = re.sub(r'\n+Lambda[\n\S\s]+','',alignment)
                    DATA[block_id][58] = alignment
                    # mutation in V gene
                    detail_shm_s, detail_shm_nons = MutationalAnalysis(alignment)
                    DATA[block_id][57] = str(len(detail_shm_s) + len(detail_shm_nons))

                    # get ORF info from alignment
                    lines = alignment.split('\n')
                    line_num = 0
                    for line in lines:
                        match = re.match(r'^(\s+)<-+FR1', line)
                        if match:
                            num1 = len(match.group(1))
                            aa_line = lines[line_num + 1]
                            match1 = re.match(r'^\s+', aa_line)
                            num2 = len(match1.group())
                            ORF = num2 - num1 - 1
                            if ORF < 0:
                                ORF = 0
                            DATA[block_id][105] = ORF
                            break
                        line_num += 1
                except:
                    DATA[block_id][58] = 'NA'
                    DATA[block_id][105] = 0

                block_id += 1
            cur_block = ''

        if read_tag:
            cur_block += IgLine
    # process the last block
    if cur_block != '':
        if block_id in bad_line:
            block_id += 1
            cur_block = ''
        else:
            pct = int((block_id + 1) * 100 / totel_seq)
            label = 'Step2:' + str(block_id + 1) + '/' + str(totel_seq)
            signal.emit(pct, label)

            # import V1,V2,V3,D1,D2,DD3,J1,J2,J3 and V,D,J locus
            ig_match = re.findall('\nIG[^\n]+', cur_block)
            ## import V1,V2,V3,D1,D2,DD3,J1,J2,J3
            v_cur_index = 3
            d_cur_index = 6
            j_cur_index = 9
            for line in ig_match[:len(ig_match) - 1]:
                m = re.search('IG\S+', line)
                cur_gene = m.group(0)
                if cur_gene[3] == 'V':
                    DATA[block_id][v_cur_index] = cur_gene
                    v_cur_index += 1
                elif cur_gene[3] == 'D':
                    DATA[block_id][d_cur_index] = cur_gene
                    d_cur_index += 1
                else:
                    DATA[block_id][j_cur_index] = cur_gene
                    j_cur_index += 1
            # V,D,J locus
            m = re.search('IG\S+', DATA[block_id][3])
            try:
                v_locus = m.group(0)
                v_locus = re.sub('^IG', '', v_locus)
                v_locus = re.sub('\*.+', '', v_locus)
                v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
                DATA[block_id][90] = v_locus
            except:
                pass

            m = re.search('IG\S+', DATA[block_id][6])
            try:
                d_locus = m.group(0)
                d_locus = re.sub('^IG', '', d_locus)
                d_locus = re.sub('\*.+', '', d_locus)
                d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
                DATA[block_id][92] = d_locus
            except:
                pass

            m = re.search('IG\S+', DATA[block_id][9])
            try:
                j_locus = m.group(0)
                j_locus = re.sub('^IG', '', j_locus)
                j_locus = re.sub('\*.+', '', j_locus)
                j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
                DATA[block_id][91] = j_locus
            except:
                pass

            # import V(D)J junction info
            ig_match = re.findall(r'V-\(D\)-J junction.+\n.+', cur_block)
            try:
                junction = ig_match[0]
                junction = junction.split('\n')[1]
                junction_list = junction.split('\t')
                if DATA[block_id][2] == 'Heavy':
                    DATA[block_id][16] = junction_list[0]
                    DATA[block_id][17] = junction_list[1]
                    DATA[block_id][18] = junction_list[2]
                    DATA[block_id][19] = junction_list[3]
                    DATA[block_id][20] = junction_list[4]
                else:
                    DATA[block_id][16] = junction_list[0]
                    DATA[block_id][21] = junction_list[1]
                    DATA[block_id][20] = junction_list[2]
            except:
                print(DATA[block_id][0])

            # import Alignment summary
            try:
                ig_match = re.findall(r'\nFR1[^\n]+', cur_block)
                fr1_match = ig_match[0]
                fr1_match = fr1_match[1:]
                fr1_match = fr1_match.split('\t')
                DATA[block_id][22] = 1
                DATA[block_id][23] = str(int(fr1_match[2]) - int(fr1_match[1]) + 1)
                DATA[block_id][24] = fr1_match[3]
                DATA[block_id][25] = fr1_match[4]
                DATA[block_id][26] = fr1_match[5]
                DATA[block_id][27] = fr1_match[6]
                DATA[block_id][28] = fr1_match[7]
            except:
                print(DATA[block_id][0])
            
            try:
                ig_match = re.findall(r'\nCDR1[^\n]+', cur_block)
                cdr1_match = ig_match[0]
                cdr1_match = cdr1_match[1:]
                cdr1_match = cdr1_match.split('\t')
                DATA[block_id][29] = str(int(cdr1_match[1]) - int(fr1_match[1]) + 1)
                DATA[block_id][30] = str(int(cdr1_match[2]) - int(fr1_match[1]) + 1)
                DATA[block_id][31] = cdr1_match[3]
                DATA[block_id][32] = cdr1_match[4]
                DATA[block_id][33] = cdr1_match[5]
                DATA[block_id][34] = cdr1_match[6]
                DATA[block_id][35] = cdr1_match[7]
            except:
                print(DATA[block_id][0])
            
            try:
                ig_match = re.findall(r'\nFR2[^\n]+', cur_block)
                fr2_match = ig_match[0]
                fr2_match = fr2_match[1:]
                fr2_match = fr2_match.split('\t')
                DATA[block_id][36] = str(int(fr2_match[1]) - int(fr1_match[1]) + 1)
                DATA[block_id][37] = str(int(fr2_match[2]) - int(fr1_match[1]) + 1)
                DATA[block_id][38] = fr2_match[3]
                DATA[block_id][39] = fr2_match[4]
                DATA[block_id][40] = fr2_match[5]
                DATA[block_id][41] = fr2_match[6]
                DATA[block_id][42] = fr2_match[7]
            except:
                print(DATA[block_id][0])
            try:
                ig_match = re.findall(r'\nCDR2[^\n]+', cur_block)
                cdr2_match = ig_match[0]
                cdr2_match = cdr2_match[1:]
                cdr2_match = cdr2_match.split('\t')
                DATA[block_id][43] = str(int(cdr2_match[1]) - int(fr1_match[1]) + 1)
                DATA[block_id][44] = str(int(cdr2_match[2]) - int(fr1_match[1]) + 1)
                DATA[block_id][45] = cdr2_match[3]
                DATA[block_id][46] = cdr2_match[4]
                DATA[block_id][47] = cdr2_match[5]
                DATA[block_id][48] = cdr2_match[6]
                DATA[block_id][49] = cdr2_match[7]
            except:
                print(DATA[block_id][0])
            
            try:
                ig_match = re.findall(r'\nFR3[^\n]+', cur_block)
                fr3_match = ig_match[0]
                fr3_match = fr3_match[1:]
                fr3_match = fr3_match.split('\t')
                DATA[block_id][50] = str(int(fr3_match[1]) - int(fr1_match[1]) + 1)
                DATA[block_id][51] = str(int(fr3_match[2]) - int(fr1_match[1]) + 1)
                DATA[block_id][52] = fr3_match[3]
                DATA[block_id][53] = fr3_match[4]
                DATA[block_id][54] = fr3_match[5]
                DATA[block_id][55] = fr3_match[6]
                DATA[block_id][56] = fr3_match[7]
            except:
                print(DATA[block_id][0])

            # import Alignment summary
            try:
                ig_match = re.findall(r'\nAlignments[\n\S\s]+', cur_block)
                alignment = ig_match[0]
                alignment = alignment[1:]
                alignment = re.sub(r'\n+Lambda[\n\S\s]+', '', alignment)
                DATA[block_id][58] = alignment
                # mutation in V gene
                detail_shm_s, detail_shm_nons = MutationalAnalysis(alignment)
                DATA[block_id][57] = str(len(detail_shm_s) + len(detail_shm_nons))
            except:
                print(DATA[block_id][0])

            # get ORF info from alignment
            lines = alignment.split('\n')
            line_num = 0
            for line in lines:
                match = re.match(r'^(\s+)<-+FR1', line)
                if match:
                    num1 = len(match.group(1))
                    aa_line = lines[line_num + 1]
                    match1 = re.match(r'^\s+', aa_line)
                    num2 = len(match1.group())
                    ORF = num2 - num1 - 1
                    if ORF < 0:
                        ORF = 0
                    DATA[block_id][105] = ORF
                    break
                line_num += 1
            block_id += 1

    ErLog = '\nVGenes input ended at: ' + time.strftime('%c')
    with open(ErlogFile2, 'a') as currentFile:  # using with for this automatically closes the file even if you crash
        currentFile.write(ErLog)

    # if productive = TRUE, only keep record with V and J

    if GetProductive == 0:  # only keep productive
        # find record
        del_index = []
        for index in range(len(DATA)):
            if DATA[index][14] != 'Yes':
                del_index.append(index)

        for i in del_index:
            ErLog = DATA[i][0] + ' was not a productive rearrangement\n'
            with open(ErlogFile, 'a') as currentfile:
                currentfile.write(ErLog)

        # delete record
        cnt = 0
        for index in del_index:
            del DATA[index - cnt]
            cnt += 1
    elif GetProductive == 1:    #only keep records have V and J
        # find record
        del_index = []
        for index in range(len(DATA)):
            if DATA[index][90] == '' or DATA[index][91] == '':
                del_index.append(index)

        for i in del_index:
            ErLog = DATA[i][0] + ' missed V or J\n'
            with open(ErlogFile, 'a') as currentfile:
                currentfile.write(ErLog)
        # delete record
        cnt = 0
        for index in del_index:
            del DATA[index - cnt]
            cnt += 1

    end = time.time()
    print('Run time for fast mode: ' + str(end - start))

    return DATA

def IgBlastParserFastTCR(FASTAFile, datalist, signal):
    import os
    # todo change to app folder
    # progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
    ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
    ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
    ErLog = 'VGenes input beginning at: ' + time.strftime('%c') + '\n'
    with open(ErlogFile, 'w') as currentFile:  # using with for this automatically closes the file even if you crash
        currentFile.write(ErLog)

    try:
        DBpathname = os.path.join(working_prefix, 'Data', 'VDJGenes.db')
        (dirname, filename) = os.path.split(DBpathname)
        os.chdir(dirname)
        GetProductive = False
        conn = db.connect(DBpathname)
    except:
        Msg = 'VDJ DB connect Error!'
        return Msg

    #  then need to create a cursor that lets you traverse the database
    cursor = conn.cursor()
    DATA = []
    Sequences = {}

    project = datalist[0]
    grouping = datalist[1]
    subgroup = datalist[2]
    species = datalist[3]
    GetProductive = datalist[4]
    MaxNum = int(datalist[5])

    ErLog, TotSeqs = IgBLASTer.ProcessFASTA(FASTAFile, MaxNum)
    workingdir = os.path.join(working_prefix, 'IgBlast')
    workingfilename = os.path.join(working_prefix, 'IgBlast', 'WorkingFile.nt')

    os.chdir(workingdir)
    Sequences.clear()
    now = time.strftime('%c')
    # read input sequence file
    with open(workingfilename, 'r') as currentFile:  # make dictionary of seqs keyed by name
        for FASTAline in currentFile:
            FASTAline = FASTAline.replace('\n', '').replace('\r', '')
            if FASTAline[0] == '>':
                # print(FASTAline)
                SeqNamed = FASTAline[1:]
                SeqNamed = SeqNamed.strip()

            else:
                Sequence = FASTAline
                if Sequence != '':
                    Sequences[SeqNamed] = Sequence
                SeqNamed = ''
                Sequence = ''

    totel_seq = len(Sequences)

    # run IgBlast
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    igblast_out_fmt19 = os.path.join(temp_folder, time_stamp + '_igblast_out_fmt19.csv')
    try:
        start = time.time()
        if species == 'Human':
            BLASTCommandLine = igblast_path + " -germline_db_V TR/Human/HumanVGenes.nt -germline_db_J TR/Human/HumanJGenes.nt -germline_db_D TR/Human/HumanDGenes.nt -organism human -domain_system imgt -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -ig_seqtype TCR -outfmt 3"
            IgBlastOut_fmt3 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V TR/Human/HumanVGenes.nt -germline_db_J TR/Human/HumanJGenes.nt -germline_db_D TR/Human/HumanDGenes.nt -organism human -domain_system imgt -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -ig_seqtype TCR -outfmt 19"
            IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
        elif species == 'Mouse':
            BLASTCommandLine = igblast_path + " -germline_db_V TR/Mouse/MouseVGenes.nt -germline_db_J TR/Mouse/MouseJGenes.nt -germline_db_D TR/Mouse/MouseDGenes.nt -organism mouse -domain_system imgt -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -ig_seqtype TCR -outfmt 3"
            IgBlastOut_fmt3 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V TR/Mouse/MouseVGenes.nt -germline_db_J TR/Mouse/MouseJGenes.nt -germline_db_D TR/Mouse/MouseDGenes.nt -organism mouse -domain_system imgt -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -ig_seqtype TCR -outfmt 19"
            IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
        end = time.time()
        print('Run time for IgBlast: ' + str(end - start))
    except:
        ErLog = 'VGenes running Error!\nCurrent CMD: ' + BLASTCommandLine + '\n'
        with open(ErlogFile, 'a') as currentFile:  # using with for this automatically closes the file even if you crash
            currentFile.write(ErLog)
        return

    start = time.time()
    # parse IgBlast out fmt 19
    # with open(igblast_out_fmt19, 'r') as IGBLAST_fmt19:
    #	result = csv.reader(IGBLAST_fmt19, delimiter="\t")
    line_id = 0
    bad_line = []
    for record in IgBlastOut_fmt19:
        record = record.split('\t')
        if line_id == 0:
            pass
        else:
            try:
                pct = int((line_id + 1) * 100 / totel_seq)
                label = 'Step1:' + str(line_id + 1) + '/' + str(totel_seq)
                signal.emit(pct, label)

                this_data = [''] * 119

                this_data[0] = record[0]
                this_data[1] = str(len(record[1]))

                # save raw sequence into table
                this_data[118] = record[1]

                if record[2] == 'TRA':
                    this_data[2] = 'Alpha'
                elif record[2] == 'TRB':
                    this_data[2] = 'Beta'
                elif record[2] == 'TRG':
                    this_data[2] = 'Gama'
                elif record[2] == 'TRD':
                    this_data[2] = 'Delta'
                else:
                    this_data[2] = 'Unknown'

                if record[3] == 'F':
                    this_data[12] = 'No'
                else:
                    this_data[12] = 'Yes'

                if record[4] == '':
                    this_data[13] = 'N/A'
                else:
                    if record[4] == 'T':
                        this_data[13] = 'In-frame'
                    elif record[4] == 'F':
                        this_data[13] = 'Out-of-frame'
                    else:
                        this_data[13] = record[4]

                # because there is an extra column (6th column, v_frameshift) in igblast-Win (fmt19) compared to igblastn-Mac, we have to parse results seapreatly
                if system() == 'Windows':
                    if record[6] == '':
                        this_data[14] = 'N/A'
                    else:
                        if record[6] == 'T':
                            this_data[14] = 'Yes'
                        elif record[6] == 'F':
                            this_data[14] = 'No'
                        else:
                            this_data[14] = record[6]

                    if record[7] == 'F':
                        this_data[15] = '+'
                    else:
                        this_data[15] = '-'

                    this_data[59] = record[66]
                    this_data[60] = record[67]
                    this_data[61] = record[70]
                    this_data[62] = record[71]
                    this_data[63] = ''
                    this_data[64] = ''
                    this_data[65] = record[74]
                    this_data[66] = record[75]

                    this_data[67] = record[16]
                    this_data[68] = record[17]
                    this_data[69] = record[18]
                    this_data[70] = record[19]
                    this_data[71] = ''
                    this_data[72] = ''
                    this_data[73] = record[20]
                    this_data[74] = record[21]

                    # identify grouping
                    if project == 'ByFunction':
                        this_data[75] = this_data[2]
                        if this_data[14] == "Yes":
                            this_data[76] = 'Functional'
                        else:
                            this_data[76] = 'Nonfunctional'
                        this_data[77] = this_data[13]
                    else:
                        this_data[75] = project
                        this_data[76] = grouping
                        this_data[77] = subgroup

                    this_data[78] = species
                    # sequence
                    try:
                        vdj_seq = re.sub('-', '', record[12])
                        seq_parts = record[1].split(vdj_seq)
                        this_data[79] = record[12] + seq_parts[1]
                    except:
                        # this_data[79] = record[1][int(record[64]) - 1:]
                        print('sequence potential error')
                        print(record[1])
                        print(record[12])
                        this_data[79] = record[12]
                    this_data[80] = record[13]

                    this_data[86] = "Specificity"
                    this_data[87] = "Subspecificity"
                    this_data[88] = "0"
                    this_data[89] = "0"

                    this_data[93] = now

                    # identify isotype
                    Isotype = 'TCR'
                    this_data[101] = Isotype

                    # import CDR3
                    CDR3_NT = record[46]
                    CDR3_AA = record[47]
                    CDR3_len = len(CDR3_AA)
                    CDR3_MW = VGenesSeq.OtherParam(CDR3_AA, 'AAMW', 0, True)
                    CDR3_pI = VGenesSeq.OtherParam(CDR3_AA, 'AApI', 0, True)

                    this_data[81] = CDR3_NT
                    this_data[82] = CDR3_AA
                    this_data[83] = CDR3_len
                    this_data[99] = str(CDR3_MW)
                    this_data[100] = str(CDR3_pI)
                    try:
                        this_data[84] = str(int(record[88]) - int(record[64]) + 1)
                        this_data[85] = str(int(record[89]) - int(record[64]) + 1)
                    except:
                        this_data[84] = 'NA'
                        this_data[85] = 'NA'

                    # import mutation
                    mAb_seq = record[12]
                    germline_seq = record[13]
                    mut, num_mut = IdentifyMutation(mAb_seq, germline_seq)
                    this_data[57] = str(num_mut)
                    this_data[96] = str(num_mut)
                    this_data[97] = mut
                else:
                    if record[5] == '':
                        this_data[14] = 'N/A'
                    else:
                        if record[5] == 'T':
                            this_data[14] = 'Yes'
                        elif record[5] == 'F':
                            this_data[14] = 'No'
                        else:
                            this_data[14] = record[5]

                    if record[6] == 'F':
                        this_data[15] = '+'
                    else:
                        this_data[15] = '-'

                    this_data[59] = record[65]
                    this_data[60] = record[66]
                    this_data[61] = record[69]
                    this_data[62] = record[70]
                    this_data[63] = ''
                    this_data[64] = ''
                    this_data[65] = record[73]
                    this_data[66] = record[74]

                    this_data[67] = record[15]
                    this_data[68] = record[16]
                    this_data[69] = record[17]
                    this_data[70] = record[18]
                    this_data[71] = ''
                    this_data[72] = ''
                    this_data[73] = record[19]
                    this_data[74] = record[20]

                    # identify grouping
                    if project == 'ByFunction':
                        this_data[75] = this_data[2]
                        if this_data[14] == "Yes":
                            this_data[76] = 'Functional'
                        else:
                            this_data[76] = 'Nonfunctional'
                        this_data[77] = this_data[13]
                    else:
                        this_data[75] = project
                        this_data[76] = grouping
                        this_data[77] = subgroup

                    this_data[78] = species
                    # sequence
                    try:
                        vdj_seq = re.sub('-', '', record[11])
                        seq_parts = record[1].split(vdj_seq)
                        this_data[79] = record[11] + seq_parts[1]
                    except:
                        # this_data[79] = record[1][int(record[63])-1:]
                        print('sequence potential error')
                        print(record[1])
                        print(record[11])
                        this_data[79] = record[11]
                    this_data[80] = record[12]

                    this_data[86] = "Specificity"
                    this_data[87] = "Subspecificity"
                    this_data[88] = "0"
                    this_data[89] = "0"

                    this_data[93] = now

                    # identify isotype
                    Isotype = 'TCR'
                    this_data[101] = Isotype

                    # import CDR3
                    CDR3_NT = record[45]
                    CDR3_AA = record[46]
                    CDR3_len = len(CDR3_AA)
                    CDR3_MW = VGenesSeq.OtherParam(CDR3_AA, 'AAMW', 0, True)
                    CDR3_pI = VGenesSeq.OtherParam(CDR3_AA, 'AApI', 0, True)

                    this_data[81] = CDR3_NT
                    this_data[82] = CDR3_AA
                    this_data[83] = CDR3_len
                    this_data[99] = str(CDR3_MW)
                    this_data[100] = str(CDR3_pI)
                    try:
                        this_data[84] = str(int(record[87]) - int(record[63]) + 1)
                        this_data[85] = str(int(record[88]) - int(record[63]) + 1)
                    except:
                        this_data[84] = 'NA'
                        this_data[85] = 'NA'

                    # import mutation
                    mAb_seq = record[11]
                    germline_seq = record[12]
                    mut, num_mut = IdentifyMutation(mAb_seq, germline_seq)
                    this_data[57] = str(num_mut)
                    this_data[96] = str(num_mut)
                    this_data[97] = mut
                DATA.append(this_data)
            except:
                bad_line.append(line_id - 1)
        line_id += 1

    # parse IgBlast out fmt 3
    cur_block = ''
    block_id = 0
    read_tag = False
    for IgLine in IgBlastOut_fmt3:
        line_match = re.findall(r'^Query', IgLine)
        if len(line_match) > 0:
            read_tag = True

            if cur_block != '':
                if block_id in bad_line:
                    block_id += 1
                    cur_block = ''
                    continue
                # progress bar signal
                pct = int((block_id + 1) * 100 / totel_seq)
                label = 'Step2:' + str(block_id + 1) + '/' + str(totel_seq)
                signal.emit(pct, label)

                # import V1,V2,V3,D1,D2,DD3,J1,J2,J3 and V,D,J locus
                ig_match = re.findall('\nTR[^\n]+', cur_block)
                ## import V1,V2,V3,D1,D2,DD3,J1,J2,J3
                v_cur_index = 3
                d_cur_index = 6
                j_cur_index = 9
                for line in ig_match[:len(ig_match) - 1]:
                    m = re.search('TR\S+', line)
                    cur_gene = m.group(0)
                    if cur_gene[3] == 'V':
                        DATA[block_id][v_cur_index] = cur_gene
                        v_cur_index += 1
                    elif cur_gene[3] == 'D':
                        DATA[block_id][d_cur_index] = cur_gene
                        d_cur_index += 1
                    else:
                        DATA[block_id][j_cur_index] = cur_gene
                        j_cur_index += 1
                # V,D,J locus
                m = re.search('TR\S+', DATA[block_id][3])
                try:
                    v_locus = m.group(0)
                    v_locus = re.sub('^TR', '', v_locus)
                    v_locus = re.sub('\*.+', '', v_locus)
                    v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
                    DATA[block_id][90] = v_locus
                except:
                    pass

                m = re.search('TR\S+', DATA[block_id][6])
                try:
                    d_locus = m.group(0)
                    d_locus = re.sub('^TR', '', d_locus)
                    d_locus = re.sub('\*.+', '', d_locus)
                    d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
                    DATA[block_id][92] = d_locus
                except:
                    pass

                m = re.search('TR\S+', DATA[block_id][9])
                try:
                    j_locus = m.group(0)
                    j_locus = re.sub('^TR', '', j_locus)
                    j_locus = re.sub('\*.+', '', j_locus)
                    j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
                    DATA[block_id][91] = j_locus
                except:
                    pass

                # import V(D)J junction info
                try:
                    ig_match = re.findall(r'V-\(D\)-J junction.+\n.+', cur_block)
                    junction = ig_match[0]
                    junction = junction.split('\n')[1]
                    junction_list = junction.split('\t')
                    if DATA[block_id][2] in ['Beta', 'Delta']:
                        DATA[block_id][16] = junction_list[0]
                        DATA[block_id][17] = junction_list[1]
                        DATA[block_id][18] = junction_list[2]
                        DATA[block_id][19] = junction_list[3]
                        DATA[block_id][20] = junction_list[4]
                    else:
                        DATA[block_id][16] = junction_list[0]
                        DATA[block_id][21] = junction_list[1]
                        DATA[block_id][20] = junction_list[2]
                except:
                    if DATA[block_id][2] in ['Beta', 'Delta']:
                        DATA[block_id][16] = 'NA'
                        DATA[block_id][17] = 'NA'
                        DATA[block_id][18] = 'NA'
                        DATA[block_id][19] = 'NA'
                        DATA[block_id][20] = 'NA'
                    else:
                        DATA[block_id][16] = 'NA'
                        DATA[block_id][21] = 'NA'
                        DATA[block_id][20] = 'NA'

                # import Alignment summary
                try:
                    ig_match = re.findall(r'\nFR1[^\n]+', cur_block)
                    fr1_match = ig_match[0]
                    fr1_match = fr1_match[1:]
                    fr1_match = fr1_match.split('\t')
                    DATA[block_id][22] = 1
                    DATA[block_id][23] = str(int(fr1_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][24] = fr1_match[3]
                    DATA[block_id][25] = fr1_match[4]
                    DATA[block_id][26] = fr1_match[5]
                    DATA[block_id][27] = fr1_match[6]
                    DATA[block_id][28] = fr1_match[7]
                except:
                    print(DATA[block_id][0])
                    DATA[block_id][22] = 'NA'
                    DATA[block_id][23] = 'NA'
                    DATA[block_id][24] = 'NA'
                    DATA[block_id][25] = 'NA'
                    DATA[block_id][26] = 'NA'
                    DATA[block_id][27] = 'NA'
                    DATA[block_id][28] = 'NA'

                try:
                    ig_match = re.findall(r'\nCDR1[^\n]+', cur_block)
                    cdr1_match = ig_match[0]
                    cdr1_match = cdr1_match[1:]
                    cdr1_match = cdr1_match.split('\t')
                    DATA[block_id][29] = str(int(cdr1_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][30] = str(int(cdr1_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][31] = cdr1_match[3]
                    DATA[block_id][32] = cdr1_match[4]
                    DATA[block_id][33] = cdr1_match[5]
                    DATA[block_id][34] = cdr1_match[6]
                    DATA[block_id][35] = cdr1_match[7]
                except:
                    DATA[block_id][29] = 'NA'
                    DATA[block_id][30] = 'NA'
                    DATA[block_id][31] = 'NA'
                    DATA[block_id][32] = 'NA'
                    DATA[block_id][33] = 'NA'
                    DATA[block_id][34] = 'NA'
                    DATA[block_id][35] = 'NA'

                try:
                    ig_match = re.findall(r'\nFR2[^\n]+', cur_block)
                    fr2_match = ig_match[0]
                    fr2_match = fr2_match[1:]
                    fr2_match = fr2_match.split('\t')
                    DATA[block_id][36] = str(int(fr2_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][37] = str(int(fr2_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][38] = fr2_match[3]
                    DATA[block_id][39] = fr2_match[4]
                    DATA[block_id][40] = fr2_match[5]
                    DATA[block_id][41] = fr2_match[6]
                    DATA[block_id][42] = fr2_match[7]
                except:
                    DATA[block_id][36] = 'NA'
                    DATA[block_id][37] = 'NA'
                    DATA[block_id][38] = 'NA'
                    DATA[block_id][39] = 'NA'
                    DATA[block_id][40] = 'NA'
                    DATA[block_id][41] = 'NA'
                    DATA[block_id][42] = 'NA'

                try:
                    ig_match = re.findall(r'\nCDR2[^\n]+', cur_block)
                    cdr2_match = ig_match[0]
                    cdr2_match = cdr2_match[1:]
                    cdr2_match = cdr2_match.split('\t')
                    DATA[block_id][43] = str(int(cdr2_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][44] = str(int(cdr2_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][45] = cdr2_match[3]
                    DATA[block_id][46] = cdr2_match[4]
                    DATA[block_id][47] = cdr2_match[5]
                    DATA[block_id][48] = cdr2_match[6]
                    DATA[block_id][49] = cdr2_match[7]
                except:
                    DATA[block_id][43] = 'NA'
                    DATA[block_id][44] = 'NA'
                    DATA[block_id][45] = 'NA'
                    DATA[block_id][46] = 'NA'
                    DATA[block_id][47] = 'NA'
                    DATA[block_id][48] = 'NA'
                    DATA[block_id][49] = 'NA'

                try:
                    ig_match = re.findall(r'\nFR3[^\n]+', cur_block)
                    fr3_match = ig_match[0]
                    fr3_match = fr3_match[1:]
                    fr3_match = fr3_match.split('\t')
                    DATA[block_id][50] = str(int(fr3_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][51] = str(int(fr3_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][52] = fr3_match[3]
                    DATA[block_id][53] = fr3_match[4]
                    DATA[block_id][54] = fr3_match[5]
                    DATA[block_id][55] = fr3_match[6]
                    DATA[block_id][56] = fr3_match[7]
                except:
                    DATA[block_id][50] = 'NA'
                    DATA[block_id][51] = 'NA'
                    DATA[block_id][52] = 'NA'
                    DATA[block_id][53] = 'NA'
                    DATA[block_id][54] = 'NA'
                    DATA[block_id][55] = 'NA'
                    DATA[block_id][56] = 'NA'

                # import Alignment summary
                try:
                    ig_match = re.findall(r'\nAlignments[\n\S\s]+', cur_block)
                    alignment = ig_match[0]
                    alignment = alignment[1:]
                    alignment = re.sub(r'\n+Lambda[\n\S\s]+', '', alignment)
                    DATA[block_id][58] = alignment

                    # get ORF info from alignment
                    lines = alignment.split('\n')
                    line_num = 0
                    for line in lines:
                        match = re.match(r'^(\s+)<-+FR1', line)
                        if match:
                            num1 = len(match.group(1))
                            aa_line = lines[line_num + 1]
                            match1 = re.match(r'^\s+', aa_line)
                            num2 = len(match1.group())
                            ORF = num2 - num1 - 1
                            if ORF < 0:
                                ORF = 0
                            DATA[block_id][105] = ORF
                            break
                        line_num += 1
                except:
                    DATA[block_id][58] = 'NA'
                    DATA[block_id][105] = 0

                block_id += 1
            cur_block = ''

        if read_tag:
            cur_block += IgLine
    # process the last block
    if cur_block != '':
        if block_id in bad_line:
            block_id += 1
            cur_block = ''
        else:
            pct = int((block_id + 1) * 100 / totel_seq)
            label = 'Step2:' + str(block_id + 1) + '/' + str(totel_seq)
            signal.emit(pct, label)

            # import V1,V2,V3,D1,D2,DD3,J1,J2,J3 and V,D,J locus
            ig_match = re.findall('\nIG[^\n]+', cur_block)
            ## import V1,V2,V3,D1,D2,DD3,J1,J2,J3
            v_cur_index = 3
            d_cur_index = 6
            j_cur_index = 9
            for line in ig_match[:len(ig_match) - 1]:
                m = re.search('TR\S+', line)
                cur_gene = m.group(0)
                if cur_gene[3] == 'V':
                    DATA[block_id][v_cur_index] = cur_gene
                    v_cur_index += 1
                elif cur_gene[3] == 'D':
                    DATA[block_id][d_cur_index] = cur_gene
                    d_cur_index += 1
                else:
                    DATA[block_id][j_cur_index] = cur_gene
                    j_cur_index += 1
            # V,D,J locus
            m = re.search('TR\S+', DATA[block_id][3])
            try:
                v_locus = m.group(0)
                v_locus = re.sub('^TR', '', v_locus)
                v_locus = re.sub('\*.+', '', v_locus)
                v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
                DATA[block_id][90] = v_locus
            except:
                pass

            m = re.search('TR\S+', DATA[block_id][6])
            try:
                d_locus = m.group(0)
                d_locus = re.sub('^TR', '', d_locus)
                d_locus = re.sub('\*.+', '', d_locus)
                d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
                DATA[block_id][92] = d_locus
            except:
                pass

            m = re.search('TR\S+', DATA[block_id][9])
            try:
                j_locus = m.group(0)
                j_locus = re.sub('^TR', '', j_locus)
                j_locus = re.sub('\*.+', '', j_locus)
                j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
                DATA[block_id][91] = j_locus
            except:
                pass

            # import V(D)J junction info
            ig_match = re.findall(r'V-\(D\)-J junction.+\n.+', cur_block)
            junction = ig_match[0]
            junction = junction.split('\n')[1]
            junction_list = junction.split('\t')
            if DATA[block_id][2] in ['Beta', 'Delta']:
                DATA[block_id][16] = junction_list[0]
                DATA[block_id][17] = junction_list[1]
                DATA[block_id][18] = junction_list[2]
                DATA[block_id][19] = junction_list[3]
                DATA[block_id][20] = junction_list[4]
            else:
                DATA[block_id][16] = junction_list[0]
                DATA[block_id][21] = junction_list[1]
                DATA[block_id][20] = junction_list[2]

            # import Alignment summary
            ig_match = re.findall(r'\nFR1[^\n]+', cur_block)
            fr1_match = ig_match[0]
            fr1_match = fr1_match[1:]
            fr1_match = fr1_match.split('\t')
            DATA[block_id][22] = 1
            DATA[block_id][23] = str(int(fr1_match[2]) - int(fr1_match[1]) + 1)
            DATA[block_id][24] = fr1_match[3]
            DATA[block_id][25] = fr1_match[4]
            DATA[block_id][26] = fr1_match[5]
            DATA[block_id][27] = fr1_match[6]
            DATA[block_id][28] = fr1_match[7]

            ig_match = re.findall(r'\nCDR1[^\n]+', cur_block)
            cdr1_match = ig_match[0]
            cdr1_match = cdr1_match[1:]
            cdr1_match = cdr1_match.split('\t')
            DATA[block_id][29] = str(int(cdr1_match[1]) - int(fr1_match[1]) + 1)
            DATA[block_id][30] = str(int(cdr1_match[2]) - int(fr1_match[1]) + 1)
            DATA[block_id][31] = cdr1_match[3]
            DATA[block_id][32] = cdr1_match[4]
            DATA[block_id][33] = cdr1_match[5]
            DATA[block_id][34] = cdr1_match[6]
            DATA[block_id][35] = cdr1_match[7]

            ig_match = re.findall(r'\nFR2[^\n]+', cur_block)
            fr2_match = ig_match[0]
            fr2_match = fr2_match[1:]
            fr2_match = fr2_match.split('\t')
            DATA[block_id][36] = str(int(fr2_match[1]) - int(fr1_match[1]) + 1)
            DATA[block_id][37] = str(int(fr2_match[2]) - int(fr1_match[1]) + 1)
            DATA[block_id][38] = fr2_match[3]
            DATA[block_id][39] = fr2_match[4]
            DATA[block_id][40] = fr2_match[5]
            DATA[block_id][41] = fr2_match[6]
            DATA[block_id][42] = fr2_match[7]

            ig_match = re.findall(r'\nCDR2[^\n]+', cur_block)
            cdr2_match = ig_match[0]
            cdr2_match = cdr2_match[1:]
            cdr2_match = cdr2_match.split('\t')
            DATA[block_id][43] = str(int(cdr2_match[1]) - int(fr1_match[1]) + 1)
            DATA[block_id][44] = str(int(cdr2_match[2]) - int(fr1_match[1]) + 1)
            DATA[block_id][45] = cdr2_match[3]
            DATA[block_id][46] = cdr2_match[4]
            DATA[block_id][47] = cdr2_match[5]
            DATA[block_id][48] = cdr2_match[6]
            DATA[block_id][49] = cdr2_match[7]

            ig_match = re.findall(r'\nFR3[^\n]+', cur_block)
            fr3_match = ig_match[0]
            fr3_match = fr3_match[1:]
            fr3_match = fr3_match.split('\t')
            DATA[block_id][50] = str(int(fr3_match[1]) - int(fr1_match[1]) + 1)
            DATA[block_id][51] = str(int(fr3_match[2]) - int(fr1_match[1]) + 1)
            DATA[block_id][52] = fr3_match[3]
            DATA[block_id][53] = fr3_match[4]
            DATA[block_id][54] = fr3_match[5]
            DATA[block_id][55] = fr3_match[6]
            DATA[block_id][56] = fr3_match[7]

            # import Alignment summary
            ig_match = re.findall(r'\nAlignments[\n\S\s]+', cur_block)
            alignment = ig_match[0]
            alignment = alignment[1:]
            alignment = re.sub(r'\n+Lambda[\n\S\s]+', '', alignment)
            DATA[block_id][58] = alignment

            # get ORF info from alignment
            lines = alignment.split('\n')
            line_num = 0
            for line in lines:
                match = re.match(r'^(\s+)<-+FR1', line)
                if match:
                    num1 = len(match.group(1))
                    aa_line = lines[line_num + 1]
                    match1 = re.match(r'^\s+', aa_line)
                    num2 = len(match1.group())
                    ORF = num2 - num1 - 1
                    if ORF < 0:
                        ORF = 0
                    DATA[block_id][105] = ORF
                    break
                line_num += 1
            block_id += 1

    ErLog = '\nVGenes input ended at: ' + time.strftime('%c')
    with open(ErlogFile2, 'a') as currentFile:  # using with for this automatically closes the file even if you crash
        currentFile.write(ErLog)

    # if productive = TRUE, only keep record with V and J

    if GetProductive == 0:  # only keep productive
        # find record
        del_index = []
        for index in range(len(DATA)):
            if DATA[index][14] != 'Yes':
                del_index.append(index)

        for i in del_index:
            ErLog = DATA[i][0] + ' was not a productive rearrangement\n'
            with open(ErlogFile, 'a') as currentfile:
                currentfile.write(ErLog)

        # delete record
        cnt = 0
        for index in del_index:
            del DATA[index - cnt]
            cnt += 1
    elif GetProductive == 1:  # only keep records have V and J
        # find record
        del_index = []
        for index in range(len(DATA)):
            if DATA[index][90] == '' or DATA[index][91] == '':
                del_index.append(index)

        for i in del_index:
            ErLog = DATA[i][0] + ' missed V or J\n'
            with open(ErlogFile, 'a') as currentfile:
                currentfile.write(ErLog)
        # delete record
        cnt = 0
        for index in del_index:
            del DATA[index - cnt]
            cnt += 1

    end = time.time()
    print('Run time for fast mode: ' + str(end - start))

    return DATA

def IgBlastParserFastOld(FASTAFile, datalist, signal):
    import os
    # todo change to app folder
    # progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')
    ErlogFile = os.path.join(temp_folder, 'ErLog.txt')
    ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
    ErLog = 'VGenes input beginning at: ' + time.strftime('%c') + '\n'
    with open(ErlogFile, 'w') as currentFile:  # using with for this automatically closes the file even if you crash
        currentFile.write(ErLog)

    try:
        DBpathname = os.path.join(working_prefix, 'Data', 'VDJGenes.db')
        (dirname, filename) = os.path.split(DBpathname)
        os.chdir(dirname)
        GetProductive = False
        conn = db.connect(DBpathname)
    except:
        Msg = 'VDJ DB connect Error!'
        return Msg

    #  then need to create a cursor that lets you traverse the database
    cursor = conn.cursor()
    DATA = []
    Sequences = {}

    project = datalist[0]
    grouping = datalist[1]
    subgroup = datalist[2]
    species = datalist[3]
    GetProductive = datalist[4]
    MaxNum = int(datalist[5])

    ErLog, TotSeqs = IgBLASTer.ProcessFASTA(FASTAFile, MaxNum)
    workingdir = os.path.join(working_prefix, 'IgBlast')
    workingfilename = os.path.join(working_prefix, 'IgBlast', 'WorkingFile.nt')

    os.chdir(workingdir)
    Sequences.clear()
    now = time.strftime('%c')
    # read input sequence file
    with open(workingfilename, 'r') as currentFile:  # make dictionary of seqs keyed by name
        for FASTAline in currentFile:
            FASTAline = FASTAline.replace('\n', '').replace('\r', '')
            if FASTAline[0] == '>':
                # print(FASTAline)
                SeqNamed = FASTAline[1:]
                SeqNamed = SeqNamed.strip()

            else:
                Sequence = FASTAline
                if Sequence != '':
                    Sequences[SeqNamed] = Sequence
                SeqNamed = ''
                Sequence = ''

    totel_seq = len(Sequences)

    # run IgBlast
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    igblast_out_fmt19 = os.path.join(temp_folder, time_stamp + '_igblast_out_fmt19.csv')
    try:
        start = time.time()
        if species == 'Human':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 3"
            IgBlastOut_fmt3 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
            # BLASTCommandLine = workingdir + " -germline_db_V Human/HumanVGenes.nt -germline_db_J Human/HumanJGenes.nt -germline_db_D Human/HumanDGenes.nt -organism human -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19 > " + igblast_out_fmt19
            # IgBlastOut_fmt19 = os.system(BLASTCommandLine)
            # print(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Human/HumanVGenes.nt -germline_db_J IG/Human/HumanJGenes.nt -germline_db_D IG/Human/HumanDGenes.nt -organism human -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/human_gl.aux -show_translation -outfmt 19"
            IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
        elif species == 'Mouse':
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 3"
            IgBlastOut_fmt3 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
            # BLASTCommandLine = workingdir + " -germline_db_V Mouse/MouseVGenes.nt -germline_db_J Mouse/MouseJGenes.nt -germline_db_D Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19 > " + igblast_out_fmt19
            # IgBlastOut_fmt19 = os.system(BLASTCommandLine)
            # print(BLASTCommandLine)
            BLASTCommandLine = igblast_path + " -germline_db_V IG/Mouse/MouseVGenes.nt -germline_db_J IG/Mouse/MouseJGenes.nt -germline_db_D IG/Mouse/MouseDGenes.nt -organism mouse -domain_system kabat -query WorkingFile.nt -auxiliary_data optional_file/mouse_gl.aux -show_translation -outfmt 19"
            IgBlastOut_fmt19 = os.popen(BLASTCommandLine)
            print(BLASTCommandLine)
        end = time.time()
        print('Run time for IgBlast: ' + str(end - start))
    except:
        ErLog = 'VGenes running Error!\nCurrent CMD: ' + BLASTCommandLine + '\n'
        with open(ErlogFile, 'a') as currentFile:  # using with for this automatically closes the file even if you crash
            currentFile.write(ErLog)
        return

    start = time.time()
    # parse IgBlast out fmt 19
    # with open(igblast_out_fmt19, 'r') as IGBLAST_fmt19:
    #	result = csv.reader(IGBLAST_fmt19, delimiter="\t")
    line_id = 0
    for record in IgBlastOut_fmt19:
        record = record.split('\t')
        if line_id == 0:
            pass
        else:
            '''
            file_handle = open(progressBarFile, 'w')
            progress = str(int((line_id + 1) * 50 / totel_seq))
            file_handle.write(progress)
            file_handle.write(',Step1:' + str(line_id + 1) + '/' + str(totel_seq))
            file_handle.close()
            '''

            pct = int((line_id + 1) * 100 / totel_seq)
            label = 'Step1:' + str(line_id + 1) + '/' + str(totel_seq)
            signal.emit(pct, label)

            this_data = [''] * 119

            this_data[0] = record[0]
            this_data[1] = str(len(record[1]))
            if record[2] == 'IGH':
                this_data[2] = 'Heavy'
            elif record[2] == 'IGK':
                this_data[2] = 'Kappa'
            elif record[2] == 'IGL':
                this_data[2] = 'Lambda'
            else:
                this_data[2] = 'Unknown'

            if record[3] == 'F':
                this_data[12] = 'No'
            else:
                this_data[12] = 'Yes'

            if record[4] == '':
                this_data[13] = 'N/A'
            else:
                if record[4] == 'T':
                    this_data[13] = 'In-frame'
                elif record[4] == 'F':
                    this_data[13] = 'Out-of-frame'
                else:
                    this_data[13] = record[4]

            if record[5] == '':
                this_data[14] = 'N/A'
            else:
                if record[5] == 'T':
                    this_data[14] = 'Yes'
                elif record[5] == 'F':
                    this_data[14] = 'No'
                else:
                    this_data[14] = record[4]

            if record[6] == 'F':
                this_data[15] = '+'
            else:
                this_data[15] = '-'

            this_data[59] = record[65]
            this_data[60] = record[66]
            this_data[61] = record[69]
            this_data[62] = record[70]
            this_data[63] = ''
            this_data[64] = ''
            this_data[65] = record[73]
            this_data[66] = record[74]

            this_data[67] = record[15]
            this_data[68] = record[16]
            this_data[69] = record[17]
            this_data[70] = record[18]
            this_data[71] = ''
            this_data[72] = ''
            this_data[73] = record[19]
            this_data[74] = record[20]

            # identify grouping
            if project == 'ByFunction':
                this_data[75] = this_data[2]
                if this_data[14] == "Yes":
                    this_data[76] = 'Functional'
                else:
                    this_data[76] = 'Nonfunctional'
                this_data[77] = this_data[13]
            else:
                this_data[75] = project
                this_data[76] = grouping
                this_data[77] = subgroup

            this_data[78] = species
            # sequence
            vdj_seq = re.sub('-', '', record[11])
            seq_parts = record[1].split(vdj_seq)
            try:
                this_data[79] = record[11] + seq_parts[1]
            except:
                print('sequence potential error')
                print(record[1])
                print(record[11])
                this_data[79] = record[11]
            this_data[80] = record[12]

            this_data[86] = "Specificity"
            this_data[87] = "Subspecificity"
            this_data[88] = "0"
            this_data[89] = "0"

            this_data[93] = now

            # identify isotype
            if this_data[2] == 'Heavy':
                IsoSeq = record[1]
                IsoSeq = IsoSeq[int(record[72]):]
                try:
                    IsoSeq = IsoSeq.strip('N')
                    AGCTs = IsoSeq.count('A') + IsoSeq.count('G') + IsoSeq.count('C') + IsoSeq.count('T')
                    if AGCTs > 5:  # todo decide if can determine isotype from < 5 or need more then
                        if species == 'Human':
                            Isotype = VGenesSeq.CallIsotype(IsoSeq)
                        elif species == 'Mouse':
                            Isotype = VGenesSeq.CallIsotypeMouse(IsoSeq)
                        else:
                            Msg = 'Your current species is: ' + species + \
                                  '\nWe do not support this species!'
                            return Msg
                    else:
                        if len(IsoSeq) > 2:
                            if IsoSeq[:3] == 'CCT' or IsoSeq == 'CTT':
                                Isotype = 'IgG'
                            elif IsoSeq[:3] == 'CAT':
                                Isotype = 'IgA'
                            elif IsoSeq[:3] == 'GGA':
                                Isotype = 'IgM'
                            elif IsoSeq[:3] == 'CAC':
                                Isotype = 'IgD'
                            else:
                                Isotype = IsoSeq
                        else:
                            Isotype = 'Unknown'
                except:
                    Isotype = 'Unknown'
            else:
                if this_data[2] == 'Kappa':
                    Isotype = 'Kappa'
                elif this_data[2] == 'Lambda':
                    Isotype = 'Lambda'
            this_data[101] = Isotype

            # import CDR3
            try:
                JGeneName = record[10].split(',')[0]
                CDR3_start = int(record[84]) + 1
                if species == 'Human':
                    CDR3_end = int(record[71]) + JHuman[JGeneName]
                else:
                    CDR3_end = int(record[71]) + JMouse[JGeneName]
                CDR3_NT = record[1]
                CDR3_NT = CDR3_NT[CDR3_start - 1:CDR3_end]
                CDR3_AA, msg = Translator(CDR3_NT, 0)
                CDR3_len = len(CDR3_AA)
                CDR3_MW = VGenesSeq.OtherParam(CDR3_AA, 'AAMW', 0, True)
                CDR3_pI = VGenesSeq.OtherParam(CDR3_AA, 'AApI', 0, True)

                this_data[81] = CDR3_NT
                this_data[82] = CDR3_AA
                this_data[83] = CDR3_len
                this_data[84] = str(CDR3_start - int(record[63]))
                this_data[85] = str(CDR3_end - int(record[63]))
                this_data[99] = str(CDR3_MW)
                this_data[100] = str(CDR3_pI)
            except:
                print(record[0])

            # import mutation
            mAb_seq = record[11]
            germline_seq = record[12]
            mut, num_mut = IdentifyMutation(mAb_seq, germline_seq)
            this_data[57] = str(num_mut)
            this_data[96] = str(num_mut)
            this_data[97] = mut

            DATA.append(this_data)
        line_id += 1

    # parse IgBlast out fmt 3
    cur_block = ''
    block_id = 0
    read_tag = False
    for IgLine in IgBlastOut_fmt3:
        line_match = re.findall(r'^Query', IgLine)
        if len(line_match) > 0:
            read_tag = True

            if cur_block != '':
                '''
                file_handle = open(progressBarFile, 'w')
                progress = str(50 + int((block_id + 1) * 50 / totel_seq))
                file_handle.write(progress)
                file_handle.write(',Step2:' + str(block_id + 1) + '/' + str(totel_seq))
                file_handle.close()
                '''

                pct = int((block_id + 1) * 100 / totel_seq)
                label = 'Step2:' + str(block_id + 1) + '/' + str(totel_seq)
                signal.emit(pct, label)

                # import V1,V2,V3,D1,D2,DD3,J1,J2,J3 and V,D,J locus
                ig_match = re.findall('\nIG[^\n]+', cur_block)
                ## import V1,V2,V3,D1,D2,DD3,J1,J2,J3
                v_cur_index = 3
                d_cur_index = 6
                j_cur_index = 9
                for line in ig_match[:len(ig_match) - 1]:
                    m = re.search('IG\S+', line)
                    cur_gene = m.group(0)
                    if cur_gene[3] == 'V':
                        DATA[block_id][v_cur_index] = cur_gene
                        v_cur_index += 1
                    elif cur_gene[3] == 'D':
                        DATA[block_id][d_cur_index] = cur_gene
                        d_cur_index += 1
                    else:
                        DATA[block_id][j_cur_index] = cur_gene
                        j_cur_index += 1
                # V,D,J locus
                m = re.search('IG\S+', DATA[block_id][3])
                try:
                    v_locus = m.group(0)
                    v_locus = re.sub('^IG', '', v_locus)
                    v_locus = re.sub('\*.+', '', v_locus)
                    v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
                    DATA[block_id][90] = v_locus
                except:
                    pass

                m = re.search('IG\S+', DATA[block_id][6])
                try:
                    d_locus = m.group(0)
                    d_locus = re.sub('^IG', '', d_locus)
                    d_locus = re.sub('\*.+', '', d_locus)
                    d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
                    DATA[block_id][92] = d_locus
                except:
                    pass

                m = re.search('IG\S+', DATA[block_id][9])
                try:
                    j_locus = m.group(0)
                    j_locus = re.sub('^IG', '', j_locus)
                    j_locus = re.sub('\*.+', '', j_locus)
                    j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
                    DATA[block_id][91] = j_locus
                except:
                    pass

                # import V(D)J junction info
                ig_match = re.findall(r'V-\(D\)-J junction.+\n.+', cur_block)
                junction = ig_match[0]
                junction = junction.split('\n')[1]
                junction_list = junction.split('\t')
                if DATA[block_id][2] == 'Heavy':
                    DATA[block_id][16] = junction_list[0]
                    DATA[block_id][17] = junction_list[1]
                    DATA[block_id][18] = junction_list[2]
                    DATA[block_id][19] = junction_list[3]
                    DATA[block_id][20] = junction_list[4]
                else:
                    DATA[block_id][16] = junction_list[0]
                    DATA[block_id][21] = junction_list[1]
                    DATA[block_id][20] = junction_list[2]

                # import Alignment summary
                try:
                    ig_match = re.findall(r'\nFR1[^\n]+', cur_block)
                    fr1_match = ig_match[0]
                    fr1_match = fr1_match[1:]
                    fr1_match = fr1_match.split('\t')
                    DATA[block_id][22] = 1
                    DATA[block_id][23] = str(int(fr1_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][24] = fr1_match[3]
                    DATA[block_id][25] = fr1_match[4]
                    DATA[block_id][26] = fr1_match[5]
                    DATA[block_id][27] = fr1_match[6]
                    DATA[block_id][28] = fr1_match[7]
                except:
                    print(DATA[block_id][0])
                    DATA[block_id][22] = 'NA'
                    DATA[block_id][23] = 'NA'
                    DATA[block_id][24] = 'NA'
                    DATA[block_id][25] = 'NA'
                    DATA[block_id][26] = 'NA'
                    DATA[block_id][27] = 'NA'
                    DATA[block_id][28] = 'NA'

                try:
                    ig_match = re.findall(r'\nCDR1[^\n]+', cur_block)
                    cdr1_match = ig_match[0]
                    cdr1_match = cdr1_match[1:]
                    cdr1_match = cdr1_match.split('\t')
                    DATA[block_id][29] = str(int(cdr1_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][30] = str(int(cdr1_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][31] = cdr1_match[3]
                    DATA[block_id][32] = cdr1_match[4]
                    DATA[block_id][33] = cdr1_match[5]
                    DATA[block_id][34] = cdr1_match[6]
                    DATA[block_id][35] = cdr1_match[7]
                except:
                    DATA[block_id][29] = 'NA'
                    DATA[block_id][30] = 'NA'
                    DATA[block_id][31] = 'NA'
                    DATA[block_id][32] = 'NA'
                    DATA[block_id][33] = 'NA'
                    DATA[block_id][34] = 'NA'
                    DATA[block_id][35] = 'NA'

                try:
                    ig_match = re.findall(r'\nFR2[^\n]+', cur_block)
                    fr2_match = ig_match[0]
                    fr2_match = fr2_match[1:]
                    fr2_match = fr2_match.split('\t')
                    DATA[block_id][36] = str(int(fr2_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][37] = str(int(fr2_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][38] = fr2_match[3]
                    DATA[block_id][39] = fr2_match[4]
                    DATA[block_id][40] = fr2_match[5]
                    DATA[block_id][41] = fr2_match[6]
                    DATA[block_id][42] = fr2_match[7]
                except:
                    DATA[block_id][36] = 'NA'
                    DATA[block_id][37] = 'NA'
                    DATA[block_id][38] = 'NA'
                    DATA[block_id][39] = 'NA'
                    DATA[block_id][40] = 'NA'
                    DATA[block_id][41] = 'NA'
                    DATA[block_id][42] = 'NA'

                try:
                    ig_match = re.findall(r'\nCDR2[^\n]+', cur_block)
                    cdr2_match = ig_match[0]
                    cdr2_match = cdr2_match[1:]
                    cdr2_match = cdr2_match.split('\t')
                    DATA[block_id][43] = str(int(cdr2_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][44] = str(int(cdr2_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][45] = cdr2_match[3]
                    DATA[block_id][46] = cdr2_match[4]
                    DATA[block_id][47] = cdr2_match[5]
                    DATA[block_id][48] = cdr2_match[6]
                    DATA[block_id][49] = cdr2_match[7]
                except:
                    DATA[block_id][43] = 'NA'
                    DATA[block_id][44] = 'NA'
                    DATA[block_id][45] = 'NA'
                    DATA[block_id][46] = 'NA'
                    DATA[block_id][47] = 'NA'
                    DATA[block_id][48] = 'NA'
                    DATA[block_id][49] = 'NA'

                try:
                    ig_match = re.findall(r'\nFR3[^\n]+', cur_block)
                    fr3_match = ig_match[0]
                    fr3_match = fr3_match[1:]
                    fr3_match = fr3_match.split('\t')
                    DATA[block_id][50] = str(int(fr3_match[1]) - int(fr1_match[1]) + 1)
                    DATA[block_id][51] = str(int(fr3_match[2]) - int(fr1_match[1]) + 1)
                    DATA[block_id][52] = fr3_match[3]
                    DATA[block_id][53] = fr3_match[4]
                    DATA[block_id][54] = fr3_match[5]
                    DATA[block_id][55] = fr3_match[6]
                    DATA[block_id][56] = fr3_match[7]
                except:
                    DATA[block_id][50] = 'NA'
                    DATA[block_id][51] = 'NA'
                    DATA[block_id][52] = 'NA'
                    DATA[block_id][53] = 'NA'
                    DATA[block_id][54] = 'NA'
                    DATA[block_id][55] = 'NA'
                    DATA[block_id][56] = 'NA'

                # import Alignment summary
                ig_match = re.findall(r'\nAlignments[\n\S\s]+', cur_block)
                alignment = ig_match[0]
                alignment = alignment[1:]
                alignment = re.sub(r'\n+Lambda[\n\S\s]+', '', alignment)
                DATA[block_id][58] = alignment

                # get ORF info from alignment
                lines = alignment.split('\n')
                line_num = 0
                for line in lines:
                    match = re.match(r'^(\s+)<-+FR1', line)
                    if match:
                        num1 = len(match.group(1))
                        aa_line = lines[line_num + 1]
                        match1 = re.match(r'^\s+', aa_line)
                        num2 = len(match1.group())
                        ORF = num2 - num1 - 1
                        if ORF < 0:
                            ORF = 0
                        DATA[block_id][105] = ORF
                        break
                    line_num += 1

                block_id += 1

            cur_block = ''

        if read_tag:
            cur_block += IgLine

    if cur_block != '':
        '''
        file_handle = open(progressBarFile, 'w')
        progress = str(50 + int((block_id + 1) * 50 / totel_seq))
        file_handle.write(progress)
        file_handle.write(',Step2:' + str(block_id + 1) + '/' + str(totel_seq))
        file_handle.close()
        '''
        pct = int((block_id + 1) * 100 / totel_seq)
        label = 'Step2:' + str(block_id + 1) + '/' + str(totel_seq)
        signal.emit(pct, label)

        # import V1,V2,V3,D1,D2,DD3,J1,J2,J3 and V,D,J locus
        ig_match = re.findall('\nIG[^\n]+', cur_block)
        ## import V1,V2,V3,D1,D2,DD3,J1,J2,J3
        v_cur_index = 3
        d_cur_index = 6
        j_cur_index = 9
        for line in ig_match[:len(ig_match) - 1]:
            m = re.search('IG\S+', line)
            cur_gene = m.group(0)
            if cur_gene[3] == 'V':
                DATA[block_id][v_cur_index] = cur_gene
                v_cur_index += 1
            elif cur_gene[3] == 'D':
                DATA[block_id][d_cur_index] = cur_gene
                d_cur_index += 1
            else:
                DATA[block_id][j_cur_index] = cur_gene
                j_cur_index += 1
        # V,D,J locus
        m = re.search('IG\S+', DATA[block_id][3])
        try:
            v_locus = m.group(0)
            v_locus = re.sub('^IG', '', v_locus)
            v_locus = re.sub('\*.+', '', v_locus)
            v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
            DATA[block_id][90] = v_locus
        except:
            pass

        m = re.search('IG\S+', DATA[block_id][6])
        try:
            d_locus = m.group(0)
            d_locus = re.sub('^IG', '', d_locus)
            d_locus = re.sub('\*.+', '', d_locus)
            d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
            DATA[block_id][92] = d_locus
        except:
            pass

        m = re.search('IG\S+', DATA[block_id][9])
        try:
            j_locus = m.group(0)
            j_locus = re.sub('^IG', '', j_locus)
            j_locus = re.sub('\*.+', '', j_locus)
            j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
            DATA[block_id][91] = j_locus
        except:
            pass

        # import V(D)J junction info
        ig_match = re.findall(r'V-\(D\)-J junction.+\n.+', cur_block)
        junction = ig_match[0]
        junction = junction.split('\n')[1]
        junction_list = junction.split('\t')
        if DATA[block_id][2] == 'Heavy':
            DATA[block_id][16] = junction_list[0]
            DATA[block_id][17] = junction_list[1]
            DATA[block_id][18] = junction_list[2]
            DATA[block_id][19] = junction_list[3]
            DATA[block_id][20] = junction_list[4]
        else:
            DATA[block_id][16] = junction_list[0]
            DATA[block_id][21] = junction_list[1]
            DATA[block_id][20] = junction_list[2]

        # import Alignment summary
        ig_match = re.findall(r'\nFR1[^\n]+', cur_block)
        fr1_match = ig_match[0]
        fr1_match = fr1_match[1:]
        fr1_match = fr1_match.split('\t')
        DATA[block_id][22] = 1
        DATA[block_id][23] = str(int(fr1_match[2]) - int(fr1_match[1]) + 1)
        DATA[block_id][24] = fr1_match[3]
        DATA[block_id][25] = fr1_match[4]
        DATA[block_id][26] = fr1_match[5]
        DATA[block_id][27] = fr1_match[6]
        DATA[block_id][28] = fr1_match[7]

        ig_match = re.findall(r'\nCDR1[^\n]+', cur_block)
        cdr1_match = ig_match[0]
        cdr1_match = cdr1_match[1:]
        cdr1_match = cdr1_match.split('\t')
        DATA[block_id][29] = str(int(cdr1_match[1]) - int(fr1_match[1]) + 1)
        DATA[block_id][30] = str(int(cdr1_match[2]) - int(fr1_match[1]) + 1)
        DATA[block_id][31] = cdr1_match[3]
        DATA[block_id][32] = cdr1_match[4]
        DATA[block_id][33] = cdr1_match[5]
        DATA[block_id][34] = cdr1_match[6]
        DATA[block_id][35] = cdr1_match[7]

        ig_match = re.findall(r'\nFR2[^\n]+', cur_block)
        fr2_match = ig_match[0]
        fr2_match = fr2_match[1:]
        fr2_match = fr2_match.split('\t')
        DATA[block_id][36] = str(int(fr2_match[1]) - int(fr1_match[1]) + 1)
        DATA[block_id][37] = str(int(fr2_match[2]) - int(fr1_match[1]) + 1)
        DATA[block_id][38] = fr2_match[3]
        DATA[block_id][39] = fr2_match[4]
        DATA[block_id][40] = fr2_match[5]
        DATA[block_id][41] = fr2_match[6]
        DATA[block_id][42] = fr2_match[7]

        ig_match = re.findall(r'\nCDR2[^\n]+', cur_block)
        cdr2_match = ig_match[0]
        cdr2_match = cdr2_match[1:]
        cdr2_match = cdr2_match.split('\t')
        DATA[block_id][43] = str(int(cdr2_match[1]) - int(fr1_match[1]) + 1)
        DATA[block_id][44] = str(int(cdr2_match[2]) - int(fr1_match[1]) + 1)
        DATA[block_id][45] = cdr2_match[3]
        DATA[block_id][46] = cdr2_match[4]
        DATA[block_id][47] = cdr2_match[5]
        DATA[block_id][48] = cdr2_match[6]
        DATA[block_id][49] = cdr2_match[7]

        ig_match = re.findall(r'\nFR3[^\n]+', cur_block)
        fr3_match = ig_match[0]
        fr3_match = fr3_match[1:]
        fr3_match = fr3_match.split('\t')
        DATA[block_id][50] = str(int(fr3_match[1]) - int(fr1_match[1]) + 1)
        DATA[block_id][51] = str(int(fr3_match[2]) - int(fr1_match[1]) + 1)
        DATA[block_id][52] = fr3_match[3]
        DATA[block_id][53] = fr3_match[4]
        DATA[block_id][54] = fr3_match[5]
        DATA[block_id][55] = fr3_match[6]
        DATA[block_id][56] = fr3_match[7]

        # import Alignment summary
        ig_match = re.findall(r'\nAlignments[\n\S\s]+', cur_block)
        alignment = ig_match[0]
        alignment = alignment[1:]
        alignment = re.sub(r'\n+Lambda[\n\S\s]+', '', alignment)
        DATA[block_id][58] = alignment

        # get ORF info from alignment
        lines = alignment.split('\n')
        line_num = 0
        for line in lines:
            match = re.match(r'^(\s+)<-+FR1', line)
            if match:
                num1 = len(match.group(1))
                aa_line = lines[line_num + 1]
                match1 = re.match(r'^\s+', aa_line)
                num2 = len(match1.group())
                ORF = num2 - num1 - 1
                if ORF < 0:
                    ORF = 0
                DATA[block_id][105] = ORF
                break
            line_num += 1
        block_id += 1

    ErLog = '\nVGenes input ended at: ' + time.strftime('%c')
    with open(ErlogFile2, 'a') as currentFile:  # using with for this automatically closes the file even if you crash
        currentFile.write(ErLog)

    # if productive = TRUE, only keep record with V and J

    if GetProductive == 0:  # only keep productive
        # find record
        del_index = []
        for index in range(len(DATA)):
            if DATA[index][14] != 'Yes':
                del_index.append(index)

        for i in del_index:
            ErLog = DATA[i][0] + ' was not a productive rearrangement\n'
            with open(ErlogFile, 'a') as currentfile:
                currentfile.write(ErLog)

        # delete record
        cnt = 0
        for index in del_index:
            del DATA[index - cnt]
            cnt += 1
    elif GetProductive == 1:  # only keep V and J
        # find record
        del_index = []
        for index in range(len(DATA)):
            if DATA[index][90] == '' or DATA[index][91] == '':
                del_index.append(index)

        for i in del_index:
            ErLog = DATA[i][0] + ' missed V or J\n'
            with open(ErlogFile, 'a') as currentfile:
                currentfile.write(ErLog)
        # delete record
        cnt = 0
        for index in del_index:
            del DATA[index - cnt]
            cnt += 1

    end = time.time()
    print('Run time for fast mode: ' + str(end - start))

    return DATA

def isotypeTranslation(input):
    if input[2] == 'H':
        isotype = 'Ig' + input[3:]
    elif input[2] == 'L':
        isotype = 'Lambda'
    elif input[2] == 'K':
        isotype = 'Kappa'
    else:
        isotype = 'Unknown'

    return isotype

def IMGTparser(IMGT_out, data_list, signal):
    #progressBarFile = os.path.join(temp_folder, 'progressBarFile.txt')

    DBpathname = os.path.join(working_prefix, 'Data', 'VDJGenes.db')
    conn = db.connect(DBpathname)
    cursor = conn.cursor()

    # Extract IMGT files from txz package
    temp_dir, files = extractIMGT(IMGT_out)

    project = data_list[0]
    grouping = data_list[1]
    subgroup = data_list[2]

    now = time.strftime('%c')
    DATA = []
    raw_seq = []
    # Parse
    with open(files['summary'], 'r') as summary, \
            open(files['gapped-nt'], 'r') as gapped, \
            open(files['ntseq'], 'r') as ntseq, \
            open(files['junction'], 'r') as junction, \
            open(files['para'], 'r') as para, \
            open(files['8V-mut'], 'r') as vmut, \
            open(files['aaseq'], 'r') as aaseq, \
            open(files['junction'], 'r') as junction:

        # read species
        result = para.readlines()
        spe = result[3]
        spe = re.sub('Species\t','',spe)
        spe = re.sub('\t', '', spe)
        spe = re.sub('\n', '', spe)
        
        if spe == "Homo sapiens":
            spe = 'Human'
        elif spe == '':
            spe = 'Mouse'
        else:
            Msg = 'Your species\n' + spe + 'is not supported! Only support Human and Mouse!'
            return Msg

        # read records from summary file
        result = csv.reader(summary, delimiter="\t")
        line_id = 0
        for record in result:
            if line_id == 0:
                pass
            else:
                this_data = [''] * 119

                this_data[0] = record[1]
                this_data[1] = record[27]
                this_data[13] = record[19]
                if record[2] == 'productive':
                    this_data[14] = 'Yes'
                else:
                    this_data[14] = 'No'
                this_data[15] = record[20]
                #this_data[79] = record[24]
                this_data[78] = spe
                this_data[93] = now

                v_str = record[3]
                v_genes = v_str.split('or ')
                index = 3
                for ele in v_genes:
                    m = re.search('IG\S+', ele)
                    try:
                        this_data[index] = m.group(0)
                    except:
                        this_data[index] = ele
                    index += 1

                d_str = record[11]
                d_genes = d_str.split('or ')
                index = 6
                for ele in d_genes:
                    m = re.search('IG\S+', ele)
                    try:
                        this_data[index] = m.group(0)
                    except:
                        this_data[index] = ele
                    index += 1

                j_str = record[7]
                j_genes = j_str.split('or ')
                index = 9
                for ele in j_genes:
                    m = re.search('IG\S+', ele)
                    try:
                        this_data[index] = m.group(0)
                    except:
                        this_data[index] = ele
                    index += 1

                m = re.search('IG\S+', this_data[3])
                try:
                    v_locus = m.group(0)
                    v_locus = re.sub('^IG','',v_locus)
                    v_locus = re.sub('\*.+', '', v_locus)
                    v_locus = v_locus[1] + v_locus[0] + v_locus[2:]
                    this_data[90] = v_locus
                except:
                    pass

                m = re.search('IG\S+', this_data[6])
                try:
                    d_locus = m.group(0)
                    d_locus = re.sub('^IG', '', d_locus)
                    d_locus = re.sub('\*.+', '', d_locus)
                    d_locus = d_locus[1] + d_locus[0] + d_locus[2:]
                    this_data[92] = d_locus
                except:
                    pass

                m = re.search('IG\S+', this_data[9])
                try:
                    j_locus = m.group(0)
                    j_locus = re.sub('^IG', '', j_locus)
                    j_locus = re.sub('\*.+', '', j_locus)
                    j_locus = j_locus[1] + j_locus[0] + j_locus[2:]
                    this_data[91] = j_locus
                except:
                    pass

                # identify gene type
                GeneType = 'Lambda'
                if v_locus[:2] == 'VH':
                    GeneType = 'Heavy'
                elif v_locus[:2] == 'VK':
                    GeneType = 'Kappa'
                this_data[2] = GeneType

                # identify grouping
                if project == 'ByFunction':
                    this_data[75] = GeneType
                    if this_data[14] == "Yes":
                        this_data[76] = 'Functional'
                    else:
                        this_data[76] = 'Nonfunctional'
                    this_data[77] = this_data[13]
                else:
                    this_data[75] = project
                    this_data[76] = grouping
                    this_data[77] = subgroup

                # clone and rank
                this_data[86] = 'Specificity'
                this_data[87] = 'Subspecificity'
                this_data[88] = '0'
                this_data[89] = '0'

                DATA.append(this_data)
                raw_seq.append(record[24].upper())
            line_id += 1

        '''
        file_handle = open(progressBarFile, 'w')
        progress = str(int(20))
        file_handle.write(progress)
        file_handle.write(',Summary file processed')
        file_handle.close()
        '''

        pct = 20
        label = 'Summary file processed:' + str(1) + '/' + str(5)
        signal.emit(pct, label)

        # read records from junction file
        result = csv.reader(junction, delimiter="\t")
        line_id = 0
        for record in result:
            if line_id == 0:
                pass
            else:
                if len(record) > 73:
                    DATA[line_id - 1][99] = record[71]
                    DATA[line_id - 1][100] = record[72]

                    DATA[line_id - 1][16] = record[9].upper()
                    DATA[line_id - 1][17] = record[12].upper()
                    DATA[line_id - 1][18] = record[14].upper()
                    DATA[line_id - 1][19] = record[19].upper()
                    DATA[line_id - 1][20] = record[29].upper()
                    DATA[line_id - 1][21] = record[11].upper()

                    # make Germline sequence
                    if record[6] == 'in-frame':
                        if spe == 'Human':
                            SqlStatementV = 'SELECT SeqName, Allele, Species, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Human" AND Allele = "' + DATA[line_id - 1][3] + '"'
                            SqlStatementD = 'SELECT SeqName, Allele, Species, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Human" AND Allele = "' + DATA[line_id - 1][6] + '"'
                            SqlStatementJ = 'SELECT SeqName, Allele, Species, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Human" AND Allele = "' + DATA[line_id - 1][9] + '"'
                        elif spe == 'Mouse':
                            SqlStatementV = 'SELECT SeqName, Allele, Strain, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Mouse" AND Allele = "' + DATA[line_id - 1][3] + '"'
                            SqlStatementD = 'SELECT SeqName, Allele, Strain, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Mouse" AND Allele = "' + DATA[line_id - 1][6] + '"'
                            SqlStatementJ = 'SELECT SeqName, Allele, Strain, CodingStartNucleotide, Sequence, IMGTSequence FROM GermLineDB WHERE Species = "Mouse" AND Allele = "' + DATA[line_id - 1][9] + '"'

                        if DATA[line_id - 1][2] == 'Heavy':
                            # V gene
                            Germline_Vseq = []
                            cursor.execute(SqlStatementV)
                            for row in cursor:
                                for column in row:
                                    Germline_Vseq.append(column)

                            # D gene
                            Germline_Dseq = []
                            cursor.execute(SqlStatementD)
                            for row in cursor:
                                for column in row:
                                    Germline_Dseq.append(column)

                            # J gene
                            Germline_Jseq = []
                            cursor.execute(SqlStatementJ)
                            for row in cursor:
                                for column in row:
                                    Germline_Jseq.append(column)

                            Germline_seq = Germline_Vseq[4] + record[12].upper() + Germline_Dseq[4] + record[19].upper() + Germline_Jseq[4]  # V + D1 + D + D2 + J

                            Germline_Vbeg = 1
                            Germline_Vend = len(Germline_Vseq[4])
                            offset = Germline_Vend
                            if record[12] != '':
                                Germline_D1beg = offset + 1
                                Germline_D1end = offset + len(record[12])
                                offset = Germline_D1end
                            else:
                                Germline_D1beg = 0
                                Germline_D1end = 0

                            if Germline_Dseq[4] != '':
                                offset = offset + len(Germline_Dseq[4])

                            if record[19] != '':
                                Germline_D2beg = offset + 1
                                Germline_D2end = offset + len(record[19])
                                offset = Germline_D2end
                            else:
                                Germline_D2beg = ''
                                Germline_D2end = ''

                            Germline_Jbeg = offset + 1
                            Germline_Jend = offset + len(Germline_Jseq[4])

                            DATA[line_id - 1][80] = Germline_seq
                            DATA[line_id - 1][59] = str(Germline_Vbeg)
                            DATA[line_id - 1][60] = str(Germline_Vend)
                            DATA[line_id - 1][61] = str(Germline_D1beg)
                            DATA[line_id - 1][62] = str(Germline_D1end)
                            DATA[line_id - 1][63] = str(Germline_D2beg)
                            DATA[line_id - 1][64] = str(Germline_D2end)
                            DATA[line_id - 1][65] = str(Germline_Jbeg)
                            DATA[line_id - 1][66] = str(Germline_Jend)
                        else:
                            # V gene
                            Germline_Vseq = []
                            cursor.execute(SqlStatementV)
                            for row in cursor:
                                for column in row:
                                    Germline_Vseq.append(column)

                            # J gene
                            Germline_Jseq = []
                            cursor.execute(SqlStatementJ)
                            for row in cursor:
                                for column in row:
                                    Germline_Jseq.append(column)

                            Germline_seq = Germline_Vseq[4] + record[11].upper() + Germline_Jseq[4]  # V + N + J

                            Germline_Vbeg = 1
                            Germline_Vend = len(Germline_Vseq[4])
                            if record[11] != '':
                                offset = Germline_Vend + len(record[11])
                            else:
                                offset = Germline_Vend
                            Germline_D1beg = 0
                            Germline_D1end = 0
                            Germline_D2beg = ''
                            Germline_D2end = ''

                            Germline_Jbeg = offset + 1
                            Germline_Jend = offset + len(Germline_Jseq[4])

                            DATA[line_id - 1][80] = Germline_seq
                            DATA[line_id - 1][59] = str(Germline_Vbeg)
                            DATA[line_id - 1][60] = str(Germline_Vend)
                            DATA[line_id - 1][61] = str(Germline_D1beg)
                            DATA[line_id - 1][62] = str(Germline_D1end)
                            DATA[line_id - 1][63] = str(Germline_D2beg)
                            DATA[line_id - 1][64] = str(Germline_D2end)
                            DATA[line_id - 1][65] = str(Germline_Jbeg)
                            DATA[line_id - 1][66] = str(Germline_Jend)
            line_id += 1
        '''
        file_handle = open(progressBarFile, 'w')
        progress = str(int(40))
        file_handle.write(progress)
        file_handle.write(',Junction file processed')
        file_handle.close()
        '''
        pct = 40
        label = 'Junction file processed:' + str(2) + '/' + str(5)
        signal.emit(pct, label)

        # read records from ntseq file
        result = csv.reader(ntseq, delimiter="\t")
        line_id = 0
        for record in result:
            if line_id == 0:
                pass
            else:
                DATA[line_id-1][22] = record[48]
                DATA[line_id-1][23] = record[49]
                DATA[line_id-1][24] = str(int(record[49]) - int(record[48]) + 1)
                DATA[line_id-1][29] = record[50]
                DATA[line_id-1][30] = record[51]
                DATA[line_id-1][31] = str(int(record[51]) - int(record[50]) + 1)
                DATA[line_id-1][36] = record[52]
                DATA[line_id-1][37] = record[53]
                DATA[line_id-1][38] = str(int(record[53]) - int(record[52]) + 1)
                DATA[line_id-1][43] = record[54]
                DATA[line_id-1][44] = record[55]
                DATA[line_id-1][45] = str(int(record[55]) - int(record[54]) + 1)
                DATA[line_id-1][50] = record[56]
                DATA[line_id-1][51] = record[57]
                DATA[line_id-1][52] = str(int(record[57]) - int(record[56]) + 1)

                DATA[line_id-1][67] = record[46]
                DATA[line_id-1][68] = record[47]
                DATA[line_id-1][71] = record[90]
                DATA[line_id-1][72] = record[91]
                DATA[line_id-1][73] = record[110]
                DATA[line_id-1][74] = record[111]
                if DATA[line_id-1][2] == 'Heavy':
                    DATA[line_id-1][79] = record[6].upper()
                    DATA[line_id - 1][69] = record[76]
                    DATA[line_id - 1][70] = record[77]
                else:
                    DATA[line_id - 1][79] = record[7].upper()
                    DATA[line_id - 1][69] = record[82]
                    DATA[line_id - 1][70] = record[83]
                DATA[line_id-1][81] = record[14].upper()
                DATA[line_id-1][84] = record[58]
                DATA[line_id-1][85] = record[59]

                GeneType = DATA[line_id-1][2]
                Sequence = DATA[line_id-1][79]

                aa_seq,_msg = Translator(DATA[line_id - 1][79], 0)
                if '*' in aa_seq:
                    DATA[line_id - 1][12] = 'Yes'
                else:
                    DATA[line_id - 1][12] = 'No'

                # identify isotype
                if GeneType == 'Heavy':
                    IsoSeq = raw_seq[line_id-1].split(Sequence)
                    try:
                        IsoSeq = IsoSeq[1]
                        # print(SeqName)
                        IsoSeq = IsoSeq.strip('N')
                        AGCTs = IsoSeq.count('A') + IsoSeq.count('G') + IsoSeq.count('C') + IsoSeq.count('T')
                        if AGCTs > 5:  # todo decide if can determine isotype from < 5 or need more then
                            if spe == 'Human':
                                Isotype = VGenesSeq.CallIsotype(IsoSeq)
                            elif spe == 'Mouse':
                                Isotype = VGenesSeq.CallIsotypeMouse(IsoSeq)
                            else:
                                Msg = 'Your current species is: ' + spe + \
                                      '\nWe do not support this species!'
                                return Msg
                        else:
                            if len(IsoSeq) > 2:
                                if IsoSeq[:3] == 'CCT' or IsoSeq == 'CTT':
                                    Isotype = 'IgG'
                                elif IsoSeq[:3] == 'CAT':
                                    Isotype = 'IgA'
                                elif IsoSeq[:3] == 'GGA':
                                    Isotype = 'IgM'
                                elif IsoSeq[:3] == 'CAC':
                                    Isotype = 'IgD'
                                else:
                                    Isotype = IsoSeq
                            else:
                                Isotype = 'Unknown'
                    except:
                        Isotype = 'Unknown'
                else:
                    if GeneType == 'Kappa':
                        Isotype = 'Kappa'
                    elif GeneType == 'Lambda':
                        Isotype = 'Lambda'
                DATA[line_id - 1][101] = Isotype

            line_id += 1
        '''
        file_handle = open(progressBarFile, 'w')
        progress = str(int(60))
        file_handle.write(progress)
        file_handle.write(',NT-sequence file processed')
        file_handle.close()
        '''

        pct = 60
        label = 'NT-sequence file processed:' + str(3) + '/' + str(5)
        signal.emit(pct, label)

        # read records from 8-v-mutattion file
        result = csv.reader(vmut, delimiter="\t")
        line_id = 0
        for record in result:
            if line_id == 0:
                pass
            else:
                record[22] = re.sub('\s.+', '', record[22])
                record[23] = re.sub('\s.+', '', record[23])
                record[24] = re.sub('\s.+', '', record[24])
                record[40] = re.sub('\s.+', '', record[40])
                record[41] = re.sub('\s.+', '', record[41])
                record[42] = re.sub('\s.+', '', record[42])
                record[58] = re.sub('\s.+', '', record[58])
                record[59] = re.sub('\s.+', '', record[59])
                record[60] = re.sub('\s.+', '', record[60])
                record[76] = re.sub('\s.+', '', record[76])
                record[77] = re.sub('\s.+', '', record[77])
                record[78] = re.sub('\s.+', '', record[78])
                record[94] = re.sub('\s.+', '', record[94])
                record[95] = re.sub('\s.+', '', record[95])
                record[96] = re.sub('\s.+', '', record[96])

                DATA[line_id-1][25] = record[24]
                DATA[line_id-1][26] = record[25]
                DATA[line_id-1][27] = str(int(record[22]) - int(record[23]))
                DATA[line_id-1][28] = str(round(int(record[24])/int(record[22])*100,2))
                DATA[line_id-1][32] = record[42]
                DATA[line_id-1][33] = record[43]
                DATA[line_id-1][34] = str(int(record[40]) - int(record[41]))
                DATA[line_id-1][35] = str(round(int(record[42]) / int(record[40]) * 100, 2))
                DATA[line_id-1][39] = record[60]
                DATA[line_id-1][40] = record[61]
                DATA[line_id-1][41] = str(int(record[58]) - int(record[59]))
                DATA[line_id-1][42] = str(round(int(record[60]) / int(record[58]) * 100, 2))
                DATA[line_id-1][46] = record[78]
                DATA[line_id-1][47] = record[79]
                DATA[line_id-1][48] = str(int(record[76]) - int(record[77]))
                DATA[line_id-1][49] = str(round(int(record[78]) / int(record[76]) * 100, 2))
                DATA[line_id-1][53] = record[96]
                DATA[line_id-1][54] = record[97]
                DATA[line_id-1][55] = str(int(record[94]) - int(record[95]))
                DATA[line_id-1][56] = str(round(int(record[96]) / int(record[94]) * 100, 2))
                DATA[line_id-1][57] = re.sub('\s.+','',record[7])
                DATA[line_id-1][96] = re.sub('\s.+','',record[7])
            line_id += 1

        '''
        file_handle = open(progressBarFile, 'w')
        progress = str(int(80))
        file_handle.write(progress)
        file_handle.write(',Mutation file processed')
        file_handle.close()
        '''

        pct = 80
        label = 'NT-sequence file processed:' + str(4) + '/' + str(5)
        signal.emit(pct, label)

        # read records from aa-seq file
        result = csv.reader(aaseq, delimiter="\t")
        line_id = 0
        for record in result:
            if line_id == 0:
                pass
            else:
                DATA[line_id-1][82] = record[14]
                DATA[line_id-1][83] = str(len(record[14]))
            line_id += 1

        '''
        file_handle = open(progressBarFile, 'w')
        progress = str(int(100))
        file_handle.write(progress)
        file_handle.write(',AA-sequence file processed')
        file_handle.close()
        '''

        pct = 100
        label = 'AA-sequence file processed:' + str(5) + '/' + str(5)
        signal.emit(pct, label)

    # Remove IMGT temporary directory
    temp_dir.cleanup()

    return DATA

def IdentifyMutation(mAb_seq, germline_seq):
    mut_list = []
    if len(mAb_seq) == len(germline_seq):
        for i in range(len(mAb_seq)):
            pos = i + 1
            if mAb_seq[i] != germline_seq[i]:
                if mAb_seq[i] in 'ATCG' and germline_seq[i] in 'ATCG':
                    cur_mut = germline_seq[i] + '-' + str(pos) + '-' + mAb_seq[i]
                    mut_list.append(cur_mut)
    num_mut = len(mut_list)
    mut = ','.join(mut_list)
    return mut, num_mut

def extractIMGT(imgt_output):
    """
    Extract necessary files from IMGT/HighV-QUEST results. This function is imported from change-o.

    Arguments:
      imgt_output : zipped file or unzipped folder output by IMGT/HighV-QUEST.

    Returns:
      tuple : (temporary directory handle, dictionary with names of extracted IMGT files).
    """
    # Map of IMGT file names
    imgt_names = ('11_Parameters', '1_Summary', '2_IMGT-gapped', '3_Nt-sequences', '4_IMGT-gapped', '5_AA', '6_Junction',
                  '7_V-REGION-mutation', '8_V-REGION-nt-mutation', '9_V-REGION-AA-change')
    imgt_keys = ('para', 'summary', 'gapped-nt', 'ntseq', 'gapped-aa', 'aaseq', 'junction',
                 '7-v-mutation-aa-table', '8V-mut','9-v-mutation-aa')

    # Open temporary directory and intialize return dictionary
    temp_dir = TemporaryDirectory()

    # Zip input
    if zipfile.is_zipfile(imgt_output):
        imgt_zip = zipfile.ZipFile(imgt_output, 'r')
        # Extract required files
        imgt_files = sorted([n for n in imgt_zip.namelist() \
                             if os.path.basename(n).startswith(imgt_names)])
        imgt_zip.extractall(temp_dir.name, imgt_files)
        # Define file dictionary
        imgt_dict = {k: os.path.join(temp_dir.name, f) for k, f in zip_longest(imgt_keys, imgt_files)}
    # Folder input
    elif os.path.isdir(imgt_output):
        folder_files = []
        for root, dirs, files in os.walk(imgt_output):
            folder_files.extend([os.path.join(os.path.abspath(root), f) for f in files])
        # Define file dictionary
        imgt_files = sorted([n for n in folder_files \
                             if os.path.basename(n).startswith(imgt_names)])
        imgt_dict = {k: f for k, f in zip_longest(imgt_keys, imgt_files)}
    # Tarball input
    elif tarfile.is_tarfile(imgt_output):
        imgt_tar = tarfile.open(imgt_output, 'r')
        # Extract required files
        imgt_files = sorted([n for n in imgt_tar.getnames() \
                             if os.path.basename(n).startswith(imgt_names)])
        imgt_tar.extractall(temp_dir.name, [imgt_tar.getmember(n) for n in imgt_files])
        # Define file dictionary
        imgt_dict = {k: os.path.join(temp_dir.name, f) for k, f in zip_longest(imgt_keys, imgt_files)}
    else:
        printError('Unsupported IGMT output file. Must be either a zipped file (.zip), LZMA compressed tarfile (.txz) or a folder.')

    # Check extraction for errors
    if len(imgt_dict) != len(imgt_names):
        printError('Extra files or missing necessary file IMGT output %s.' % imgt_output)

    return temp_dir, imgt_dict

def AlignSequencesHTML(DataSet, template):
    # import tempfile
    import os
    global GLMsg
    global working_prefix
    global clustal_path
    global temp_folder
    global VGenesTextWindows
    global muscle_path

    # align selected sequences (AA) using muscle
    all = dict()
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    outfilename = os.path.join(temp_folder, "out-" + time_stamp + ".fas")
    aafilename = os.path.join(temp_folder, "in-" + time_stamp + ".fas")
    if len(DataSet) == 1:
        SeqName = DataSet[0][0].replace('\n', '').replace('\r', '')
        SeqName = SeqName.strip()
        NTseq = DataSet[0][1]
        AAseq, ErMessage = VGenesSeq.Translator(NTseq, 0)
        all[SeqName] = [NTseq, AAseq]

        out_handle = open(outfilename,'w')
        out_handle.write('>' + SeqName + '\n')
        out_handle.write(AAseq)
        out_handle.close()
    else:
        aa_handle = open(aafilename,'w')
        for record in DataSet:
            SeqName = record[0].replace('\n', '').replace('\r', '')
            SeqName = SeqName.strip()
            NTseq = record[1]
            # sequence check for NT seq
            pattern = re.compile(r'[^ATCGUatcgu]')
            cur_strange = pattern.findall(NTseq)
            cur_strange = list(set(cur_strange))
            if len(cur_strange) > 0:
                ErrMsg = "Warning! We find Unlawful nucleotide: " + ','.join(cur_strange) + '\nfrom \n' + SeqName + \
                         '\nPlease remove those Unlawful nucleotide!'
                #return ErrMsg

            AAseq, ErMessage = VGenesSeq.Translator(NTseq, 0)
            AAseq = AAseq.replace('*','X').replace('~','Z').replace('.','J')
            all[SeqName] = [NTseq, AAseq]
            aa_handle.write('>' + SeqName + '\n')
            aa_handle.write(AAseq + '\n')
        aa_handle.close()

        cmd = muscle_path
        cmd += " -in " + aafilename + " -out " + outfilename
        try:
            os.system(cmd)
        except:
            ErrMsg = 'Warning! Fail to run muscle! Check your muscle path!'
            return ErrMsg

    # read alignment file, make alignment NT and AA sequences
    SeqName = ''
    AAseq = ''
    if os.path.isfile(outfilename):
        currentfile = open(outfilename, 'r')
        lines = currentfile.readlines()
        for line in lines:
            Readline = line.replace('\n', '').replace('\r', '')
            Readline = Readline.strip()
            if Readline[0] == '>':
                if SeqName != '':
                    AAseq, NTseq = BuildNTalignment(AAseq, all[SeqName][0])
                    all[SeqName] = [NTseq, AAseq]
                SeqName = Readline[1:]
                AAseq = ''
            else:
                AAseq += Readline
        AAseq, NTseq = BuildNTalignment(AAseq, all[SeqName][0])
        all[SeqName] = [NTseq, AAseq]
    else:
        return

    #if os.path.exists(outfilename):
    #	os.remove(outfilename)
    #if os.path.exists(aafilename):
    #	os.remove(aafilename)

    # generate consnesus sequences (AA and NT)
    if len(all) == 1:
        for key in all:
            consensusDNA = all[key][0]
            consensusAA = all[key][1]
    else:
        firstOne = all[SeqName]
        seqlen = len(firstOne[0])

        consensusDNA = ''
        tester = ''

        for i in range(seqlen):
            tester = ''
            Cnuc = ''
            for key in all:
                try:
                    seq = all[key][0]
                    tester += seq[i]
                except:
                    ErrMsg = 'Warning! Find sequence error in ' + key + ', please check your sequence!'
                    return ErrMsg

            frequencies = [(c, tester.count(c)) for c in set(tester)]
            Cnuc = max(frequencies, key=lambda x: x[1])[0]
            consensusDNA += Cnuc


        consensusAA = ''
        firstOne = all[SeqName]
        seqlen = len(firstOne[1])
        for i in range(seqlen):
            tester = ''
            Caa = ''
            for key in all:
                seq = all[key][1]
                tester += seq[i]

            frequencies = [(c, tester.count(c)) for c in set(tester)]
            Caa = max(frequencies, key=lambda x: x[1])[0]
            consensusAA += Caa

    # align consensus AA sequence with template to generate H1 and H3 numbering
    compact_consensusAA = consensusAA.replace(' ', '')

    # make header HTML
    pos_aa_data = [list(range(1,len(compact_consensusAA)+1)),list(range(1,len(compact_consensusAA)+1))]
    div_pos_aa = MakeDivPosAA('line line_pos_aa', 'Position AA:', 'Original AA position: ', pos_aa_data)
    div_con_aa = MakeDivAA('line con_aa', 'Template AA:', compact_consensusAA)
    pos_nt_data = [list(range(1, len(consensusDNA) + 1)), list(range(1, len(consensusDNA) + 1))]
    div_pos_nt = MakeDivPosNT('line line_pos_nt', 'Position NT:', 'Original NT position: ', pos_nt_data)
    div_con_nt = MakeDivNT('line con_nt', 'Template NT:', consensusDNA)

    # initial and open HTML file
    width_aa = 14 * len(compact_consensusAA)
    width_nt = 40 * len(compact_consensusAA)
    CSSdata = '<style type="text/css">.seq_div {width: ' + str(width_nt) + 'px;}</style>\n'
    JSdata = '<script type="text/javascript">\n'
    JSdata += 'var seq_width = [' + str(width_nt) + ',' + str(width_aa) + '];\n'
    JSdata += '$( document ).ready(function() { $(".seq_div").css({"width": seq_width[0]+"px"})});\n'
    JSdata += '</script>\n'

    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    out_html_file = os.path.join(temp_folder, time_stamp + '.html')
    if template == '':
        header_file = os.path.join(working_prefix, 'Data', 'template.html')
    else:
        header_file = os.path.join(working_prefix, 'Data', template + '.html')
    shutil.copyfile(header_file, out_html_file)
    out_file_handle = open(out_html_file, 'a')

    JSdata += '<script type="text/javascript">\n'
    JSdata += 'var data = {\n'
    JSarray = []
    JStext = '"Seq0":["Consensus","' + compact_consensusAA + '","' + consensusDNA + '"]'
    JSarray.append(JStext)

    Optiondata = '<script type="text/javascript">\n'
    Optiondata += '$("#option").append("<option value =\'Seq0\'>Consensus Sequence</option>");\n'

    name_div = '<div class="name_div">\n'
    seq_div = '<div class = "seq_div">\n'
    # write header section
    name_div += div_pos_aa[0] + '\n'
    seq_div += div_pos_aa[1] + '\n'
    name_div += div_con_aa[0] + '\n'
    seq_div += div_con_aa[1] + '\n'
    name_div += div_pos_nt[0] + '\n'
    seq_div += div_pos_nt[1] + '\n'
    name_div += div_con_nt[0] + '\n'
    seq_div += div_con_nt[1] + '\n'
    # make sequence section HTML
    i = 1
    for key in all:
        seq_nick_name = 'Seq' + str(i)

        seq_nt = all[key][0]
        seq_aa = all[key][1]
        con_nt = MakeConSeq(seq_nt, consensusDNA)
        con_aa = MakeConSeq(seq_aa, compact_consensusAA)

        if key[0:2] == "GL":
            div_aa = MakeDivAA('line line_aa gl ' + seq_nick_name, key, seq_aa)
            div_aa_mut = MakeDivAA('line line_con_aa gl ' + seq_nick_name, key, con_aa)
            div_nt = MakeDivNT('line line_nt gl ' + seq_nick_name, key, seq_nt)
            div_nt_mut = MakeDivNT('line line_con_nt gl ' + seq_nick_name, key, con_nt)
        else:
            div_aa = MakeDivAA('line line_aa ' + seq_nick_name, key, seq_aa)
            div_aa_mut = MakeDivAA('line line_con_aa ' + seq_nick_name, key, con_aa)
            div_nt = MakeDivNT('line line_nt ' + seq_nick_name, key, seq_nt)
            div_nt_mut = MakeDivNT('line line_con_nt ' + seq_nick_name, key, con_nt)
        # write sequence section
        name_div += div_aa[0] + '\n'
        seq_div += div_aa[1] + '\n'
        name_div += div_aa_mut[0] + '\n'
        seq_div += div_aa_mut[1] + '\n'
        name_div += div_nt[0] + '\n'
        seq_div += div_nt[1] + '\n'
        name_div += div_nt_mut[0] + '\n'
        seq_div += div_nt_mut[1] + '\n'

        JStext = '"' + seq_nick_name + '":["' + key + '","' + seq_aa + '","' + seq_nt + '"]'
        JSarray.append(JStext)
        Optiondata += '$("#option").append("<option value =\'' + seq_nick_name + '\'>' + key + '</option>");\n'
        i += 1

    JSdata += ',\n'.join(JSarray)
    JSdata += '\n}\n</script>\n'
    Optiondata += '</script>\n'

    name_div += '</div>\n'
    seq_div += '</div>\n'

    out_file_handle.write(JSdata)
    out_file_handle.write(Optiondata)
    out_file_handle.write('<div class="box">')
    out_file_handle.write(name_div)
    out_file_handle.write(seq_div)
    out_file_handle.write('\n</div>\n</body>\n</html>')
    out_file_handle.close()
    return out_html_file

def MakeConSeq(seq, con):
    for i in range(len(con)):
        if seq[i] == con[i]:
            seq = seq[:i] + '.' + seq[i+1:]
    return seq

def SparseSeq(seq):
    tmp = list(seq)
    seq = ' ' + '  '.join(tmp) + ' '
    return seq

def BuildNTalignment(aa, nt):
    pos = 0
    new_nt = ''
    for i in range(len(aa)):
        cur_aa = aa[i]
        if cur_aa == '-':
            new_nt += '---'
        elif cur_aa == 'X':
            new_nt += nt[pos:pos + 3]
            aa = aa[:i] + '*' + aa[i+1:]
            pos = pos + 3
        elif cur_aa == 'Z':
            nt_add = nt[pos:] + '-'*(3 - len(nt[pos:]))
            if len(nt_add) > 3:
                nt_add = nt_add[0:3]
            new_nt += nt_add
            aa = aa[:i] + '~' + aa[i+1:]
            pos = pos + 3
        elif cur_aa == 'J':
            new_nt += nt[pos:pos + 3]
            pos = pos + 3
        else:
            new_nt += nt[pos:pos + 3]
            pos = pos + 3
    a = 1
    return aa, new_nt

def SequenceCheck(sequence, type):
    Msg = 'none'
    if type == 'aa':
        pattern = re.compile(r'[^ILVFMCAGPTSYWQNHEDKR]')
    else:
        pattern = re.compile(r'[^ATCUG]')

    strange_residues = re.findall(pattern, sequence)

    if len(strange_residues) > 0:
        Msg = ','.join(strange_residues)

    return Msg

def ReverseDNA(sequense):
    result = ''
    for i in range(len(sequense)):
        result += DNADict[sequense[i]]
    result = ''.join(reversed(result))
    return result

def Translator(Sequence, frame):
        # Translate sequence into a list of codons
    CodonList = [ ]
    for x in range(frame, len(Sequence), 3):
            CodonList.append(Sequence[x:x+3])
    # For each codon, translate it into amino acid, and create a list
    ProteinSeq = [ ]
    for codon in CodonList:
        if codon in CodonDict:
            ProteinSeq.append(CodonDict[codon])
        else:
            ProteinSeq.append('~')

    AASeq = ''.join(ProteinSeq)

    # print("Translated in frame %d: %s (%.1f Da)" % ((frame+1), ''.join(ProteinSeq), sum(ProteinWeight)))
    # Check position of stop codon, making sure it's at the end, and the only one
    XCount = 0
    UCount = 0
    for acid in ProteinSeq:
        if acid == "*":
            XCount += 1
    for acid in ProteinSeq:
        if acid == "~":
            UCount += 1
    ErMessage = []
    # ErMessage.append()
    if XCount > 0:
        if XCount == 1:
            ErMes =  'WARNING: '+ str(XCount) + ' stop codon was found (marked as "*")!'
        else:
            ErMes =  'WARNING: '+ str(XCount) + ' stop codons found (marked as "*")!'
        ErMessage.append(ErMes)
    if UCount > 0:
        # todo this doesn't label errors properly
        AASeq2 = AASeq.replace ('.', '')
        ErMes = 'Codon errors (marked as "~"): '
        if len(Sequence) % 3 != 0 and UCount == 1:
            ErMes += 'Incomplete codon at end.'
            ErMessage.append(ErMes)
            return AASeq, ErMessage

        elif UCount == 1:

            if AASeq2[0] == '~':
                ErMes += 'The first codon is incomplete.'
                ErMessage.append(ErMes)
                return AASeq, ErMessage

            else:
                ErMes += '1 codon error internally.'
                ErMessage.append(ErMes)
                return AASeq, ErMessage

        elif UCount > 1:


            if AASeq2[0] == '~':
                ErMes += 'The first codon is incomplete. '
                ErMessage.append(ErMes)
                UCount -= 1

            if len(Sequence) % 3 != 0:
                if UCount > 1:
                    ErMes += '1 incomplete on end and '
                    if UCount-1 > 1:
                        ErMes += str(UCount-1) + ' others with errors internally.'
                    elif UCount - 1 == 1:
                        ErMes += '1 other with errors internally.'
                else:
                    ErMes += '1 incomplete on end.'

            else:
                ErMes += str(UCount) + ' errors within the sequence.'
        ErMessage.append(ErMes)

    return AASeq, ErMessage

def AA2NT(sequence, dic):
    nt_seq = ''
    for i in range(len(sequence)):
        nt_seq += dic[sequence[i]]

    return nt_seq

def checkOverlap(x1,y1,x2,y2):
    a = range(x1,y1+1)
    b = range(x2,y2+1)
    inter = set(a).intersection(set(b))

    if len(inter) > 0:
        return True
    else:
        return False

def MakeDivNT(class_name, line_name, data):
    div_name = 	'<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    count = 0
    for i in range(len(data)):
        if count == 0:
            div_seq += '<span class="unit_pack">'
        elif count%3 == 0:
            div_seq += '</span><span class="unit_pack">'
        div_seq += '<span class="unit">' + data[i] + '</span>'
        count += 1
    div_seq += '</span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeDivNTDonor(class_name, line_name, data, ori_seq, donor_region):
    div_name = 	'<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    cur_pos = 1
    for i in range(len(data)):
        if i == 0:
            count = int(i/3)
            if ori_seq[count] == "-":
                div_seq += '<span class="unit_pack">'
            else:
                if cur_pos in donor_region:
                    div_seq += '<span class="unit_pack donor">'
                else:
                    div_seq += '<span class="unit_pack">'
                cur_pos += 1
        elif i%3 == 0:
            count = int(i / 3)
            if ori_seq[count] == "-":
                div_seq += '</span><span class="unit_pack">'
            else:
                if cur_pos in donor_region:
                    div_seq += '</span><span class="unit_pack donor">'
                else:
                    div_seq += '</span><span class="unit_pack">'
                cur_pos += 1

        div_seq += '<span class="unit">' + data[i] + '</span>'
    div_seq += '</span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeDivAA(class_name, line_name, data):
    div_name = '<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    for i in range(len(data)):
        div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + data[i] + '</span><span class="insert">&nbsp;</span></span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeDivAADonor(class_name, line_name, data, ori_seq, donor_region):
    div_name = '<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    cur_pos = 1
    for i in range(len(data)):
        if ori_seq[i] == "-":
            div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + \
                       data[i] + '</span><span class="insert">&nbsp;</span></span>'
        else:
            if cur_pos in donor_region:
                div_seq += '<span class="unit_pack donor"><span class="insert">&nbsp;</span><span class="unit">' + \
                       data[i] + '</span><span class="insert">&nbsp;</span></span>'
            else:
                div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + \
                           data[i] + '</span><span class="insert">&nbsp;</span></span>'
            cur_pos += 1

    div_seq += '</div>'

    return div_name, div_seq

def MakeDivPosAA(class_name, line_name, tip_text, data):
    div_name = '<div class="' + class_name + '">'
    div_name += '<span class="name">' + line_name + '</span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + '">'
    for i in range(len(data[0])):
        if data[0][i] != '-':
            if int(data[0][i]) % 5 == 0:
                div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + str(data[0][i]) + \
                               '<span class ="unit_tip">' + tip_text + str(data[1][i]) + \
                               '</span></span><span class="insert">&nbsp;</span></span>'
            else:
                div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + '.' + \
                               '<span class ="unit_tip">' + tip_text + str(data[1][i]) + \
                               '</span></span><span class="insert">&nbsp;</span></span>'
        else:
            div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + str(data[0][i]) + \
                           '<span class ="unit_tip">' + tip_text + str(data[1][i]) + \
                           '</span></span><span class="insert">&nbsp;</span></span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeDivH1N3(class_name, line_name, tip_text, data):
    div_name = '<div class="' + class_name + '">'
    div_name += '<span class="name">' + line_name + '</span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + '">'
    for i in range(len(data)):
        if data[i][2] == '':
            if data[i][0] != '-':
                if int(data[i][0]) % 5.0 == 0:
                    div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + str(data[i][0]) + \
                                   '<span class ="unit_tip">' + tip_text + str(data[i][1]) + \
                                   '</span></span><span class="insert">&nbsp;</span></span>'
                else:
                    div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + '.' + \
                                   '<span class ="unit_tip">' + tip_text + str(data[i][1]) + \
                                   '</span></span><span class="insert">&nbsp;</span></span>'
            else:
                div_seq += '<span class="unit_pack"><span class="insert">&nbsp;</span><span class="unit">' + str(data[i][0]) + \
                               '<span class ="unit_tip">' + tip_text + str(data[i][1]) + \
                               '</span></span><span class="insert">&nbsp;</span></span>'
        else:
            if data[i][0] != '-':
                if int(data[i][0]) % 5.0 == 0:
                    div_seq += '<span class="unit_pack"><span class="insert ' + data[i][2] + '">&nbsp;</span><span class="unit ' + \
                                   data[i][2] + '">' + str(data[i][0]) + \
                                   '<span class ="unit_tip">' + tip_text + str(data[i][1]) + \
                                   '</span></span><span class="insert ' + data[i][2] + '">&nbsp;</span></span>'
                else:
                    div_seq += '<span class="unit_pack"><span class="insert ' + data[i][2] + '">&nbsp;</span><span class="unit ' + \
                                   data[i][2] + '">' + '.' + \
                                   '<span class ="unit_tip">' + tip_text + str(data[i][1]) + \
                                   '</span></span><span class="insert ' + data[i][2] + '">&nbsp;</span></span>'
            else:
                div_seq += '<span class="unit_pack"><span class="insert ' + data[i][2] + '">&nbsp;</span><span class="unit ' + \
                               data[i][2] + '">' + str(data[i][0]) + \
                               '<span class ="unit_tip">' + tip_text + str(data[i][1]) + \
                               '</span></span><span class="insert ' + data[i][2] + '">&nbsp;</span></span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeDivPosNT(class_name, line_name, tip_text, data):
    div_name = '<div class="' + class_name + '">'
    div_name += '<span class="name">' + line_name + '</span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + '">'
    count = 0
    for i in range(len(data[0])):
        if count == 0:
            div_seq += '<span class="unit_pack">'
            if data[0][i] % 5.0 == 0:
                div_seq += '<span class="unit">' + str(data[0][i]) + '<span class ="unit_tip">' + tip_text + \
                               str(data[1][i]) + ' - ' + str(int(data[1][i]) + 2) +  '</span></span>'
            else:
                div_seq += '<span class="unit">' + '.' + '<span class ="unit_tip">' + tip_text + str(data[1][i]) + \
                           ' - ' + str(int(data[1][i]) + 2) +  '</span></span>'
        elif count % 3 == 0:
            div_seq += '</span><span class="unit_pack">'
            if data[0][i] % 5.0 == 0:
                div_seq += '<span class="unit">' + str(data[0][i]) + '<span class ="unit_tip">' + tip_text + \
                               str(data[1][i])  + ' - ' + str(int(data[1][i]) + 2) +  '</span></span>'
            else:
                div_seq += '<span class="unit">' + '.' + '<span class ="unit_tip">' + tip_text + str(data[1][i]) + \
                           ' - ' + str(int(data[1][i]) + 2) +  '</span></span>'
        else:
            if data[0][i] % 5.0 == 0:
                div_seq += '<span class="unit">' + str(data[0][i]) + '</span>'
            else:
                div_seq += '<span class="unit">' + '.' + '</span>'
        count += 1
    div_seq += '</span>'
    div_seq += '</div>'
    return div_name, div_seq

def MakeSeqWithInseetion(class_name,id,AAseq,info):
    start_dict = {}
    end_dict = {}
    if len(info) > 0:
        for ele in info:
            start_dict[info[ele][0]] = ele
            end_dict[info[ele][1]] = ele

    div_seq = '<div class="' + class_name + '" id="' + id + '">'
    i = 0
    for aa in AAseq:
        pos = i + 1
        if end_dict.__contains__(pos):
            div_seq += '<span class="unit">' + aa + '</span>'
            div_seq += '<span class="insertion" style="margin-top: 10px;">' + info[end_dict[pos]][2] + '</span>'
            div_seq += '</span>'
            i += 1
            continue
        if start_dict.__contains__(pos):
            div_seq += '<span class="replace" id="' + str(start_dict[pos]) + '" title="' + info[start_dict[pos]][4] + '">'
            div_seq += '<span class="unit">' + aa + '</span>'
            i += 1
            continue
        div_seq += '<span class="unit">' + aa + '</span>'
        i += 1
    div_seq += '</div>'

    return div_seq

def AlignSequencesHTMLBCR(DataSet, template):
    #######################################
    # input DataSet format
    # 0: SeqName
    # 1: Sequence
    # 2: FR1From
    # 3: FR1To
    # 4: CDR1From
    # 5: CDR1To
    # 6: FR2From
    # 7: FR2To
    # 8: CDR2From
    # 9: CDR2To
    # 10: FR3From
    # 11: FR3To
    # 12: CDR3From
    # 13: CDR3To
    # 14: Jend
    # 15: GermlineSequence
    # 16: ORF
    #######################################

    # import tempfile
    import os
    TupData = ()
    global GLMsg
    global working_prefix
    global clustal_path
    global temp_folder
    global VGenesTextWindows
    global muscle_path

    ErrMsg = 'OK'

    # align selected sequences (AA) using muscle
    all = dict()
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    outfilename = os.path.join(temp_folder, "out-" + time_stamp + ".fas")
    aafilename = os.path.join(temp_folder, "in-" + time_stamp + ".fas")

    aa_handle = open(aafilename,'w')
    for record in DataSet:
        SeqName = record[0].replace('\n', '').replace('\r', '')
        SeqName = SeqName.strip()
        NTseq = record[1]
        try:
            ORF = int(DataSet[0][16])
        except:
            ORF = 0

        # sequence check for NT seq
        pattern = re.compile(r'[^ATCGUatcgu]')
        cur_strange = pattern.findall(NTseq)
        cur_strange = list(set(cur_strange))
        if len(cur_strange) > 0:
            ErrMsg = "We find Unlawful nucleotide: " + ','.join(cur_strange) + '\nfrom \n' + SeqName
            #return ErrMsg

        AAseq, ErMessage = Translator(NTseq, ORF)
        AAseq = AAseq.replace('*','X').replace('~','Z').replace('.','J')
        all[SeqName] = [NTseq[ORF:], AAseq]
        aa_handle.write('>' + SeqName + '\n')
        aa_handle.write(AAseq + '\n')

        # add predicted germline sequence
        GLseq = record[15]
        SeqName = "GL_" + SeqName
        AAseqGL, ErMessage = Translator(GLseq, 0)
        AAseqGL = AAseqGL.replace('*', 'X').replace('~', 'Z').replace('.', 'J')
        all[SeqName] = [GLseq, AAseqGL]
        aa_handle.write('>' + SeqName + '\n')
        aa_handle.write(AAseqGL + '\n')
    aa_handle.close()

    if system() == 'Windows':
        cmd = muscle_path
        cmd += " -in " + aafilename + " -out " + outfilename
    elif system() == 'Darwin':
        cmd = muscle_path
        cmd += " -in " + aafilename + " -out " + outfilename
    elif system() == 'Linux':
        cmd = muscle_path
        cmd += " -in " + aafilename + " -out " + outfilename
    else:
        cmd = ''
    try:
        os.system(cmd)
    except:
        ErrMsg = 'We failed to run muscle! Check your muscle path!'
        return ErrMsg, ''

    # read alignment file, make alignment NT and AA sequences
    SeqName = ''
    AAseq = ''
    if os.path.isfile(outfilename):
        currentfile = open(outfilename, 'r')
        lines = currentfile.readlines()
        for line in lines:
            Readline = line.replace('\n', '').replace('\r', '')
            Readline = Readline.strip()
            if Readline[0] == '>':
                if SeqName != '':
                    AAseq, NTseq = BuildNTalignment(AAseq, all[SeqName][0])
                    all[SeqName] = [NTseq, AAseq]
                SeqName = Readline[1:]
                AAseq = ''
            else:
                AAseq += Readline
        AAseq, NTseq = BuildNTalignment(AAseq, all[SeqName][0])
        all[SeqName] = [NTseq, AAseq]
    else:
        ErrMsg = 'We failed to run muscle! Check your muscle path!'
        return ErrMsg, ''

    # generate consnesus sequences (AA and NT), without counting GL sequences
    if len(all) == 1:
        for key in all:
            consensusDNA = all[key][0]
            consensusAA = all[key][1]

        conserveDNA = [1] * len(consensusDNA)
        conserveAA = [1] * len(consensusAA)
    else:
        firstOne = all[SeqName]
        seqlen = len(firstOne[0])

        consensusDNA = ''
        conserveDNA = []
        for i in range(seqlen):
            tester = ''
            for key in all:
                if key[0:3] == "GL_":
                    continue    # skip all GL sequence for consensus sequence and sequence conservation counting

                try:
                    seq = all[key][0]
                    tester += seq[i]
                except:
                    Msg = 'We find sequence error in ' + key + ', please check your sequence!'
                    return Msg

            frequencies = [(c, tester.count(c)) for c in set(tester)]
            Cnuc = max(frequencies, key=lambda x: x[1])
            conserveDNA.append(Cnuc[1]/len(tester))
            consensusDNA += Cnuc[0]


        consensusAA = ''
        conserveAA = []
        firstOne = all[SeqName]
        seqlen = len(firstOne[1])
        for i in range(seqlen):
            tester = ''
            for key in all:
                if key[0:3] == "GL_":
                    continue    # skip all GL sequence for consensus sequence and sequence conservation counting
                seq = all[key][1]
                tester += seq[i]

            frequencies = [(c, tester.count(c)) for c in set(tester)]
            Caa = max(frequencies, key=lambda x: x[1])
            conserveAA.append(Caa[1]/len(tester))
            consensusAA += Caa[0]

    # align consensus AA sequence with template to generate H1 and H3 numbering
    compact_consensusAA = consensusAA.replace(' ', '')

    # identify BCR V(D)J structure
    vdj_structure = []
    ruler_records = DataSet[0]
    ruler_name = ruler_records[0]
    ruler_original_AA, ErrMsg1 = Translator(all[ruler_name][0], 0)
    ruler_aligned_AA = all[ruler_name][1]
    # range
    FWR1_end = int(ruler_records[3]) / 3
    CDR1_end = int(ruler_records[5]) / 3
    FWR2_end = int(ruler_records[7]) / 3
    CDR2_end = int(ruler_records[9]) / 3
    FWR3_end = int(ruler_records[11]) / 3
    CDR3_end = int(ruler_records[13]) / 3

    cur_pos_map2original_pos = 0
    last = 'fwr1'
    for i in range(len(ruler_aligned_AA)):
        cur_str = compact_consensusAA[i]
        if cur_str == '-':
            vdj_structure.append(last)
        else:
            if cur_pos_map2original_pos < FWR1_end:
                vdj_structure.append('fwr1')
                last = 'fwr1'
            elif cur_pos_map2original_pos < CDR1_end:
                vdj_structure.append('cdr1')
                last = 'cdr1'
            elif cur_pos_map2original_pos < FWR2_end:
                vdj_structure.append('fwr2')
                last = 'fwr2'
            elif cur_pos_map2original_pos < CDR2_end:
                vdj_structure.append('cdr2')
                last = 'cdr2'
            elif cur_pos_map2original_pos < FWR3_end:
                vdj_structure.append('fwr3')
                last = 'fwr3'
            elif cur_pos_map2original_pos < CDR3_end:
                vdj_structure.append('cdr3')
                last = 'cdr3'
            else:
                vdj_structure.append('fwr4')
                last = 'fwr4'
            cur_pos_map2original_pos += 1

    # make legend HTML
    legend_html = ''
    '''
    ## H1 numbering:
    legend_html += '\t<span class="name" style="margin-left:12px;">H1 highlight region:</span>\n'
    for epitope in H1_epitope_list:
        epitope_name = EpitopesAnnotateH1[epitope]
        str_len = len(epitope_name)*5 + 30
        legend_html += '\t<span class="unit_long ' \
                       + epitope + '" style="width: ' \
                       + str(str_len) + 'px">' \
                       + epitope_name + '</span>\n'
    legend_html += '\t<br>\n'
    ## H3 numbering:
    legend_html += '\t<span class="name" style="margin-left:12px;">H3 highlight region:</span>\n'
    for epitope in H3_epitope_list:
        epitope_name = EpitopesAnnotateH3[epitope]
        str_len = len(epitope_name) * 5 + 30
        legend_html += '\t<span class="unit_long ' \
                       + epitope + '" style="width: ' \
                       + str(str_len) + 'px">' \
                       + epitope_name + '</span>\n'
    legend_html += '\t<br>\n'
    ## N gly-site
    legend_html += '\t<span class="name" style="margin-left:12px;">Potential N-Gly site:</span>\n'
    legend_html += '\t<span class="unit_long NGlyPattern">N-X-S/T</span>\n'
    legend_html += '</div>\n'
    '''

    # make header HTML
    pos_aa_data = [list(range(1,len(compact_consensusAA)+1)),list(range(1,len(compact_consensusAA)+1))]
    div_pos_aa = MakeDivPosAA('line line_pos_aa', 'Position AA:', 'Original AA position: ', pos_aa_data)
    div_con_aa = MakeDivAA('line con_aa', 'Template AA:', compact_consensusAA)
    pos_nt_data = [list(range(1, len(consensusDNA) + 1)), list(range(1, len(consensusDNA) + 1))]
    div_pos_nt = MakeDivPosNT('line line_pos_nt', 'Position NT:', 'Original NT position: ', pos_nt_data)
    div_con_nt = MakeDivNT('line con_nt', 'Template NT:', consensusDNA)
    # SEQ CONSERVE
    if template == '':
        div_seqcon_score_aa = MakeConDivAA('line line_pos_aa', 'AA conservation:', conserveAA)
        div_seqcon_score_nt = MakeConDivNT('line line_pos_nt', 'NT conservation:', conserveDNA)
        div_bcr_section = MakeBCRSection('line line_pos_bcr', 'V(D)J structure:', vdj_structure)

    # initial and open HTML file
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    out_html_file = os.path.join(temp_folder, time_stamp + '.html')
    if template == '':
        header_file = os.path.join(working_prefix, 'Data', 'template.html')
    else:
        header_file = os.path.join(working_prefix, 'Data', template + '.html')
    shutil.copyfile(header_file, out_html_file)
    out_file_handle = open(out_html_file, 'a')

    width_aa = 14 * len(compact_consensusAA)
    width_nt = 40 * len(compact_consensusAA)
    CSSdata = '<style type="text/css">.seq_div {width: ' + str(width_nt) + 'px;}</style>\n'
    JSdata = '<script type="text/javascript">\n'
    JSdata += 'var seq_width = [' + str(width_nt) + ',' + str(width_aa) + '];\n'
    JSdata += 'var data = {\n'
    JSarray = []
    JStext = '"Seq0":["Consensus","' + compact_consensusAA + '","' + consensusDNA + '"]'
    JSarray.append(JStext)

    Optiondata = '<script type="text/javascript">\n'
    Optiondata += '$("#option").append("<option value =\'Seq0\'>Consensus Sequence</option>");\n'

    name_div = '<div class="name_div">\n'
    seq_div = '<div class = "seq_div">\n'
    # write header section
    name_div += div_pos_aa[0] + '\n'
    seq_div += div_pos_aa[1] + '\n'
    name_div += div_con_aa[0] + '\n'
    seq_div += div_con_aa[1] + '\n'
    name_div += div_pos_nt[0] + '\n'
    seq_div += div_pos_nt[1] + '\n'
    name_div += div_con_nt[0] + '\n'
    seq_div += div_con_nt[1] + '\n'
    if template == '':
        name_div += div_seqcon_score_aa[0] + '\n'
        seq_div += div_seqcon_score_aa[1] + '\n'
        name_div += div_seqcon_score_nt[0] + '\n'
        seq_div += div_seqcon_score_nt[1] + '\n'
        name_div += div_bcr_section[0] + '\n'
        seq_div += div_bcr_section[1] + '\n'
    # make sequence section HTML
    i = 1
    for key in all:
        seq_nick_name = 'Seq' + str(i)
        seq_nt = all[key][0]
        seq_aa = all[key][1]

        # output sequence info to JS
        JStext = '"' + seq_nick_name + '":["' + key + '","' + seq_aa + '","' + seq_nt + '"]'
        JSarray.append(JStext)
        Optiondata += '$("#option").append("<option value =\'' + seq_nick_name + '\'>' + key + '</option>");\n'

        if key[0:3] == "GL_":
            pass    # we don't add GL seuqences in the alignment, but we keep them in the template list
        else:
            con_nt = MakeConSeq(seq_nt, consensusDNA)
            con_aa = MakeConSeq(seq_aa, compact_consensusAA)

            div_aa = MakeDivAA('line line_aa ' + seq_nick_name, key, seq_aa)
            div_aa_mut = MakeDivAA('line line_con_aa ' + seq_nick_name, key, con_aa)
            div_nt = MakeDivNT('line line_nt ' + seq_nick_name, key, seq_nt)
            div_nt_mut = MakeDivNT('line line_con_nt ' + seq_nick_name, key, con_nt)
            # write sequence section
            name_div += div_aa[0] + '\n'
            seq_div += div_aa[1] + '\n'
            name_div += div_aa_mut[0] + '\n'
            seq_div += div_aa_mut[1] + '\n'
            name_div += div_nt[0] + '\n'
            seq_div += div_nt[1] + '\n'
            name_div += div_nt_mut[0] + '\n'
            seq_div += div_nt_mut[1] + '\n'

        i += 1

    JSdata += ',\n'.join(JSarray)
    JSdata += '\n}\n</script>\n'
    Optiondata += '</script>\n'

    name_div += '</div>\n'
    seq_div += '</div>\n'

    out_file_handle.write(legend_html)
    out_file_handle.write(CSSdata)
    out_file_handle.write(JSdata)
    out_file_handle.write(Optiondata)
    out_file_handle.write('<div class="box">')
    out_file_handle.write(name_div)
    out_file_handle.write(seq_div)
    out_file_handle.write('\n</div>\n</body>\n</html>')
    out_file_handle.close()
    return ErrMsg, out_html_file

def pct2color(data):
    if data == 1:
        color_group = 'con_lvl1'
    elif data >= 0.75:
        color_group = 'con_lvl2'
    elif data >= 0.5:
        color_group = 'con_lvl3'
    elif data >= 0.25:
        color_group = 'con_lvl4'
    else:
        color_group = 'con_lvl5'

    return color_group

def AlignSeqMuscle(data, muscle_path, temp_folder):
    # write data into file
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    outfilename = os.path.join(temp_folder, "out-" + time_stamp + ".fas")
    infilename = os.path.join(temp_folder, "in-" + time_stamp + ".fas")

    # align by muscle
    file_handle = open(infilename, 'w')
    for record in data:
        SeqName = record[0].replace('\n', '').replace('\r', '')
        SeqName = SeqName.strip()
        NTseq = record[1]
        file_handle.write('>' + SeqName + '\n')
        file_handle.write(NTseq + '\n')
    file_handle.close()

    if system() == 'Windows':
        cmd = muscle_path
        cmd += " -in " + infilename + " -out " + outfilename
    elif system() == 'Darwin':
        cmd = muscle_path
        cmd += " -in " + infilename + " -out " + outfilename
    elif system() == 'Linux':
        cmd = muscle_path
        cmd += " -in " + infilename + " -out " + outfilename
    else:
        cmd = ''
    try:
        os.system(cmd)
    except:
        return 'error'

    # read alignment
    Alignment = []
    if os.path.isfile(outfilename):
        currentfile = open(outfilename, 'r')
        lines = currentfile.readlines()
        SeqName = ''
        Seq = ''
        for line in lines:
            Readline = line.replace('\n', '').replace('\r', '')
            Readline = Readline.strip()
            if Readline[0] == '>':
                if SeqName != '':
                    each = (SeqName, Seq)
                    Alignment.append(each)
                SeqName = Readline[1:]
                Seq = ''
            else:
                Seq += Readline
        each = (SeqName, Seq)
        Alignment.append(each)
    else:
        return

    # return results
    return Alignment

def AlignSequencesHTMLAID(AIDres, DataSet):
    #######################################
    # input AIDres format
    # 0: NT
    # 1: MUTE TYPE
    # 2: CT TYPE
    # 3: RS score
    # 4: Mut index
    # 5: TENDA
    # 6: TENDG
    # 7: TENDC
    # 8: TENDT
    #
    # input DataSet format
    # 0: SeqName
    # 1: Sequence
    # 2: FR1From
    # 3: FR1To
    # 4: CDR1From
    # 5: CDR1To
    # 6: FR2From
    # 7: FR2To
    # 8: CDR2From
    # 9: CDR2To
    # 10: FR3From
    # 11: FR3To
    # 12: CDR3From
    # 13: CDR3To
    # 14: Jend
    # 15: GermlineSequence
    # 16: ORF
    #######################################

    # import tempfile
    import os
    TupData = ()
    global GLMsg
    global working_prefix
    global clustal_path
    global temp_folder
    global VGenesTextWindows
    global muscle_path

    SeqName = DataSet[0][0].replace('\n', '').replace('\r', '')
    SeqName = SeqName.strip()
    NTseq = DataSet[0][1]
    try:
        ORF = int(DataSet[0][16])
    except:
        ORF = 0

    # sequence check for NT seq
    pattern = re.compile(r'[^ATCGUatcgu]')
    cur_strange = pattern.findall(NTseq)
    cur_strange = list(set(cur_strange))
    if len(cur_strange) > 0:
        ErrMsg = "We find Unlawful nucleotide: " + ','.join(cur_strange) + '\nfrom \n' + SeqName + \
                 '\nPlease remove those Unlawful nucleotide!'
        return ErrMsg

    AAseq, ErMessage = Translator(NTseq, ORF)
    compact_consensusAA = AAseq
    consensusDNA = NTseq[ORF:]

    # identify BCR V(D)J structure
    vdj_structure = []
    ruler_records = DataSet[0]
    ruler_name = ruler_records[0]
    ruler_aligned_AA = AAseq
    # range
    FWR1_end = int(ruler_records[3]) / 3
    CDR1_end = int(ruler_records[5]) / 3
    FWR2_end = int(ruler_records[7]) / 3
    CDR2_end = int(ruler_records[9]) / 3
    FWR3_end = int(ruler_records[11]) / 3
    CDR3_end = int(ruler_records[13]) / 3

    cur_pos_map2original_pos = 0
    last = 'fwr1'
    for i in range(len(ruler_aligned_AA)):
        cur_str = compact_consensusAA[i]
        if cur_str == '-':
            vdj_structure.append(last)
        else:
            if cur_pos_map2original_pos < FWR1_end:
                vdj_structure.append('fwr1')
                last = 'fwr1'
            elif cur_pos_map2original_pos < CDR1_end:
                vdj_structure.append('cdr1')
                last = 'cdr1'
            elif cur_pos_map2original_pos < FWR2_end:
                vdj_structure.append('fwr2')
                last = 'fwr2'
            elif cur_pos_map2original_pos < CDR2_end:
                vdj_structure.append('cdr2')
                last = 'cdr2'
            elif cur_pos_map2original_pos < FWR3_end:
                vdj_structure.append('fwr3')
                last = 'fwr3'
            elif cur_pos_map2original_pos < CDR3_end:
                vdj_structure.append('cdr3')
                last = 'cdr3'
            else:
                vdj_structure.append('fwr4')
                last = 'fwr4'
            cur_pos_map2original_pos += 1

    # make legend HTML
    legend_html = ''
    # make header HTML
    pos_aa_data = [list(range(1,len(compact_consensusAA)+1)),list(range(1,len(compact_consensusAA)+1))]
    div_pos_aa = MakeDivPosAA('line line_pos_aa', 'Position AA:', 'Original AA position: ', pos_aa_data)
    div_con_aa = MakeDivAA('line con_aa', 'Template AA:', compact_consensusAA)
    pos_nt_data = [list(range(1, len(consensusDNA) + 1)), list(range(1, len(consensusDNA) + 1))]
    div_pos_nt = MakeDivPosNT('line line_pos_nt', 'Position NT:', 'Original NT position: ', pos_nt_data)
    div_con_nt = MakeDivNT('line con_nt', 'Template NT:', consensusDNA)
    div_bcr_section = MakeBCRSection('line line_pos_bcr', 'V(D)J structure:', vdj_structure)

    # initial and open HTML file
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    out_html_file = os.path.join(temp_folder, time_stamp + '.html')
    header_file = os.path.join(working_prefix, 'Data', 'templateAID.html')
    shutil.copyfile(header_file, out_html_file)
    out_file_handle = open(out_html_file, 'a')

    width_aa = 14 * len(compact_consensusAA)
    width_nt = 40 * len(compact_consensusAA)
    CSSdata = '<style type="text/css">.seq_div {width: ' + str(width_nt) + 'px;}</style>\n'
    JSdata = '<script type="text/javascript">\n'
    JSdata += 'var seq_width = [' + str(width_nt) + ',' + str(width_aa) + '];\n'
    JSdata += '\n</script>\n'

    name_div = '<div class="name_div">\n'
    seq_div = '<div class = "seq_div">\n'
    # write header section
    name_div += div_pos_aa[0] + '\n'
    seq_div += div_pos_aa[1] + '\n'
    name_div += div_con_aa[0] + '\n'
    seq_div += div_con_aa[1] + '\n'
    name_div += div_pos_nt[0] + '\n'
    seq_div += div_pos_nt[1] + '\n'
    name_div += div_con_nt[0] + '\n'
    seq_div += div_con_nt[1] + '\n'
    name_div += div_bcr_section[0] + '\n'
    seq_div += div_bcr_section[1] + '\n'

    # make sequence section HTML
    div_aa = MakeDivAA('line line_aa', SeqName + ' (AA)', compact_consensusAA)
    div_nt = MakeDivNT('line line_nt', SeqName + ' (NT)', consensusDNA)
    name_div += div_aa[0] + '\n'
    seq_div += div_aa[1] + '\n'
    name_div += div_nt[0] + '\n'
    seq_div += div_nt[1] + '\n'

    # make AID label and scoring HTML
    mute_type_data = [ele[1] for ele in AIDres]
    mute_type_data = mute_type_data[ORF:]
    mute_type_div = MakeAIDLabel('line line_nt', 'Mute Type', mute_type_data)

    ct_type_data = [ele[2] for ele in AIDres]
    ct_type_data = ct_type_data[ORF:]
    ct_type_div = MakeAIDLabel('line line_nt', 'CT Type', ct_type_data)

    rs_score_data = [ele[3] for ele in AIDres]
    rs_score_data = rs_score_data[ORF:]
    rs_score_div = MakeAIDBlosum('line line_nt', 'RS Score', rs_score_data)

    mut_index_data = [ele[4] for ele in AIDres]
    mut_index_data = mut_index_data[ORF:]
    mut_index_div = MakeAIDGradient('line line_nt', 'Mute Index', mut_index_data)

    tend_a_data = [ele[5] for ele in AIDres]
    tend_a_data = tend_a_data[ORF:]
    tend_a_div = MakeAIDGradient('line line_nt', 'TENDA', tend_a_data)

    tend_g_data = [ele[6] for ele in AIDres]
    tend_g_data = tend_g_data[ORF:]
    tend_g_div = MakeAIDGradient('line line_nt', 'TENDG', tend_g_data)

    tend_c_data = [ele[7] for ele in AIDres]
    tend_c_data = tend_c_data[ORF:]
    tend_c_div = MakeAIDGradient('line line_nt', 'TENDC', tend_c_data)

    tend_t_data = [ele[8] for ele in AIDres]
    tend_t_data = tend_t_data[ORF:]
    tend_t_div = MakeAIDGradient('line line_nt', 'TENDT', tend_t_data)

    name_div += mute_type_div[0] + '\n' + ct_type_div[0] + '\n' + rs_score_div[0] + '\n' + mut_index_div[0] + '\n' + tend_a_div[0] + '\n' + tend_g_div[0] + '\n' + tend_c_div[0] + '\n' + tend_t_div[0] + '\n'
    seq_div += mute_type_div[1] + '\n' + ct_type_div[1] + '\n' + rs_score_div[1] + '\n' + mut_index_div[1] + '\n' + tend_a_div[1] + '\n' + tend_g_div[1] + '\n' + tend_c_div[1] + '\n' + tend_t_div[1] + '\n'

    name_div += '</div>\n'
    seq_div += '</div>\n'

    out_file_handle.write(legend_html)
    out_file_handle.write(CSSdata)
    out_file_handle.write(JSdata)
    out_file_handle.write('<div class="box">')
    out_file_handle.write(name_div)
    out_file_handle.write(seq_div)
    out_file_handle.write('\n</div>\n</body>\n</html>')
    out_file_handle.close()
    return out_html_file

def MakeAIDLabel(class_name, line_name, data):
    div_name = 	'<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    count = 0
    for i in range(len(data)):
        if count == 0:
            div_seq += '<span class="unit_pack">'
        elif count%3 == 0:
            div_seq += '</span><span class="unit_pack">'
        div_seq += '<span class="unit ' + data[i] + '">&nbsp;</span>'
        count += 1
    div_seq += '</span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeAIDBlosum(class_name, line_name, data):
    div_name = 	'<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    count = 0
    for i in range(len(data)):
        if count == 0:
            div_seq += '<span class="unit_pack">'
        elif count%3 == 0:
            div_seq += '</span><span class="unit_pack">'
        div_seq += '<span class="unit ' + blosum2color(data[i]) + '">&nbsp;</span>'
        count += 1
    div_seq += '</span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeAIDGradient(class_name, line_name, data):
    div_name = 	'<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    count = 0
    for i in range(len(data)):
        if count == 0:
            div_seq += '<span class="unit_pack">'
        elif count%3 == 0:
            div_seq += '</span><span class="unit_pack">'
        div_seq += '<span class="unit ' + gradient2color(data[i]) + '">&nbsp;</span>'
        count += 1
    div_seq += '</span>'
    div_seq += '</div>'

    return div_name, div_seq

def gradient2color(data):
    data = data/6

    if data >= 0.8:
        color_group = 'con_lvl1'
    elif data >= 0.6:
        color_group = 'con_lvl2'
    elif data >= 0.4:
        color_group = 'con_lvl3'
    elif data >= 0.2:
        color_group = 'con_lvl4'
    else:
        color_group = 'con_lvl5'

    return color_group

def blosum2color(data):
    try:
        data = int(data) + 6
        color_group = 'blosum' + str(data)
    except:
        color_group = ''

    return color_group

def SequenceIdentity(seq1, seq2):
    long = len(seq1)
    score = 0
    for i in range(long):
        if seq1[i] == seq2[i]:
            score += 1

    identy = score/long*100
    return identy

def pctLabelFormatter(params):
    return params.value + '%'

def MakeConDivNT(class_name, line_name, data):
    div_name = 	'<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    count = 0
    for i in range(len(data)):
        if count == 0:
            div_seq += '<span class="unit_pack">'
        elif count%3 == 0:
            div_seq += '</span><span class="unit_pack">'
        div_seq += '<span class="unit ' + pct2color(data[i]) + '">&nbsp;</span>'
        count += 1
    div_seq += '</span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeConDivAA(class_name, line_name, data):
    div_name = '<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' +  line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    for i in range(len(data)):
        div_seq += '<span class="unit_pack"><span class="insert ' + pct2color(data[i]) + '">&nbsp;</span><span class="unit ' + pct2color(data[i]) + '">&nbsp;</span><span class="insert ' + pct2color(data[i]) + '">&nbsp;</span></span>'
    div_seq += '</div>'

    return div_name, div_seq

def MakeBCRSection(class_name, line_name, data):
    div_name = '<div class="' + class_name + ' 1">'
    div_name += '<span class="name">' + line_name + '<span class ="name_tip">' + line_name + '</span></span>'
    div_name += '</div>'
    div_seq = '<div class="' + class_name + ' 2">'
    for i in range(len(data)):
        div_seq += '<span class="unit_pack"><span class="insert ' + data[i] + \
                   '">&nbsp;</span><span class="unit ' + data[i] + \
                   '">&nbsp;</span><span class="insert ' + data[i] + \
                   '">&nbsp;</span></span>'
    div_seq += '</div>'

    return div_name, div_seq

def heatmap(data, row_labels, col_labels, ax=None,
            cbar_kw={}, cbarlabel="",lab_size=4, **kwargs):
    """
    This function is adopted from matplotlib website
    Create a heatmap from a numpy array and two lists of labels.

    Parameters
    ----------
    data
        A 2D numpy array of shape (N, M).
    row_labels
        A list or array of length N with the labels for the rows.
    col_labels
        A list or array of length M with the labels for the columns.
    ax
        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
        not provided, use current axes or create a new one.  Optional.
    cbar_kw
        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
    cbarlabel
        The label for the colorbar.  Optional.
    **kwargs
        All other arguments are forwarded to `imshow`.
    """

    if not ax:
        ax = plt.gca()

    # Plot the heatmap
    im = ax.imshow(data, **kwargs)

    # Create colorbar
    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom",size=lab_size)
    cbar.ax.tick_params(labelsize=lab_size)

    # We want to show all ticks...
    ax.set_xticks(numpy.arange(data.shape[1]))
    ax.set_yticks(numpy.arange(data.shape[0]))
    # ... and label them with the respective list entries.
    ax.set_xticklabels(col_labels)
    ax.set_yticklabels(row_labels)

    # Let the horizontal axes labeling appear on top.
    ax.tick_params(top=True, bottom=False,
                   labeltop=True, labelbottom=False,labelsize=lab_size)

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=-90, ha="right",va='center',
             rotation_mode="anchor", fontsize=lab_size)
    plt.setp(ax.get_yticklabels(),  fontsize=lab_size)

    # Turn spines off and create white grid.
    #for edge, spine in ax.spines.items():
    #   spine.set_visible(False)

    ax.set_xticks(numpy.arange(data.shape[1]+1)-.5, minor=True)
    ax.set_yticks(numpy.arange(data.shape[0]+1)-.5, minor=True)
    ax.grid(which="minor", color="k", linestyle='-', linewidth=0.1)
    ax.tick_params(which="minor", bottom=False, left=False)

    return im, cbar

def heatmapNox(data, row_labels, col_labels, ax=None,
            cbar_kw={}, cbarlabel="",lab_size=4, **kwargs):
    """
    This function is adopted from matplotlib website
    Create a heatmap from a numpy array and two lists of labels.

    Parameters
    ----------
    data
        A 2D numpy array of shape (N, M).
    row_labels
        A list or array of length N with the labels for the rows.
    col_labels
        A list or array of length M with the labels for the columns.
    ax
        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
        not provided, use current axes or create a new one.  Optional.
    cbar_kw
        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
    cbarlabel
        The label for the colorbar.  Optional.
    **kwargs
        All other arguments are forwarded to `imshow`.
    """

    if not ax:
        ax = plt.gca()

    # Plot the heatmap
    im = ax.imshow(data, **kwargs)

    # Create colorbar
    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom",size=lab_size)
    cbar.ax.tick_params(labelsize=lab_size)

    # We want to show all ticks...
    ax.set_yticks(numpy.arange(data.shape[0]))
    # ... and label them with the respective list entries.
    ax.set_yticklabels(row_labels)

    # Let the horizontal axes labeling appear on top.
    ax.tick_params(top=True, bottom=False,
                   labeltop=True, labelbottom=False,labelsize=lab_size)

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=-90, ha="right",va='center',
             rotation_mode="anchor", fontsize=lab_size)
    plt.setp(ax.get_yticklabels(),  fontsize=lab_size)

    # Turn spines off and create white grid.
    #for edge, spine in ax.spines.items():
    #   spine.set_visible(False)

    ax.set_xticks(numpy.arange(data.shape[1]+1)-.5, minor=True)
    ax.set_yticks(numpy.arange(data.shape[0]+1)-.5, minor=True)
    #ax.grid(which="minor", color="k", linestyle='-', linewidth=0.1)
    ax.tick_params(which="minor", bottom=False, left=False)

    return im, cbar

def annotate_heatmap(im, data=None, valfmt="{x:.2f}",
                     textcolors=["black", "white"],
                     threshold=None, value2show=0, **textkw):
    """
    This function is adopted from matplotlib website
    A function to annotate a heatmap.

    Parameters
    ----------
    im
        The AxesImage to be labeled.
    data
        Data used to annotate.  If None, the image's data is used.  Optional.
    valfmt
        The format of the annotations inside the heatmap.  This should either
        use the string format method, e.g. "$ {x:.2f}", or be a
        `matplotlib.ticker.Formatter`.  Optional.
    textcolors
        A list or array of two color specifications.  The first is used for
        values below a threshold, the second for those above.  Optional.
    threshold
        Value in data units according to which the colors from textcolors are
        applied.  If None (the default) uses the middle of the colormap as
        separation.  Optional.
    **kwargs
        All other arguments are forwarded to each call to `text` used to create
        the text labels.
    """

    if not isinstance(data, (list, numpy.ndarray)):
        data = im.get_array()

    # Normalize the threshold to the images color range.
    if threshold is not None:
        threshold = im.norm(threshold)
    else:
        threshold = im.norm(data.max())/2.

    # Set default alignment to center, but allow it to be
    # overwritten by textkw.
    kw = dict(horizontalalignment="center",
              verticalalignment="center")
    kw.update(textkw)

    # Get the formatter in case a string is supplied
    if isinstance(valfmt, str):
        valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)

    # Loop over the data and create a `Text` for each "pixel".
    # Change the text's color depending on the data.
    texts = []
    for i in range(data.shape[0]):
        for j in range(data.shape[1]):
            if data[i,j] > value2show:
                kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
                text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)
                texts.append(text)

    return texts

def MakeSankey(DataIn, field_str):
    fields = field_str.split(',')
    sankey_links = []
    for i in range(len(fields)-1):
        field1 = fields[i]
        field2 = fields[i+1]
        
        cur_data = [record[i:i+2] for record in DataIn]

        df = pd.DataFrame(cur_data, columns=['A', 'B'])
        gp = df.groupby(by=['A', 'B'])
        newdf = gp.size()
        newdf = newdf.reset_index(name='times')

        for index in range(len(newdf)):
            cur_a = field1 + '_' + newdf['A'][index]
            cur_b = field2 + '_' + newdf['B'][index]
            cur_count = int(newdf['times'][index].astype(numpy.int32))
            sankey_links.append({"source": cur_a, "target": cur_b,  "value": cur_count})
    
    return sankey_links

def ReadFasta(file):
    res = []
    with open(file, 'r') as currentfile:
        seq_name = ''
        seq_str = ''
        for line in currentfile:
            line = line.replace('\n', '')
            if len(line) > 0:
                if line[0] == '>':
                    if seq_name == '':
                        pass
                    else:
                        tup = (seq_name, seq_str)
                        res.append(tup)
                    seq_name = line = line.replace('>', '')
                    seq_str = ''
                else:
                    seq_str += line
        tup = (seq_name, seq_str)
        res.append(tup)

    return res

# get row count from a text file
def wc_count(file_name):
    import subprocess
    out = subprocess.getoutput("wc -l %s" % file_name)
    return int(out.split()[0])

# calculate AA Similarity based on BLOSUM62 matrix
def AASimilarity(AA):
    # Proc Natl Acad Sci U S A. 1992 Nov 15;89(22):10915-9.
    # Amino acid substitution matrices from protein blocks.
    # Henikoff S1, Henikoff JG.
    # Based on above reference and the BLOSUM62 similarity indices
    # BLOSUM62 = {}
    ExScore = ''
    try:
        if AA in BLOSUM62:
            ExScore = BLOSUM62[AA]
        else:
            AA = AA[1]+ AA[0]
            ExScore = BLOSUM62[AA]
    except:
            ExScore = ''
    return ExScore

# calculate consensus
def CalConsensus(inputlist):
    try:
        consensusSeq = ''
        seqLen = len(inputlist[0])
        for i in range(seqLen):
            curStr = []
            for seq in inputlist:
                if seq[i] == '-':
                    pass
                else:
                    curStr.append(seq[i])
            if len(curStr) > 0:
                maxStr = max(curStr, key=curStr.count)
            else:
                maxStr = '-'
            consensusSeq += maxStr
        return consensusSeq
    except:
        return "bad"

# AID targeting
def MutMap(Sequence):
#     goal to identify RGYW, WRCY, WA, TW, coldspots, and Pol-eta hs and cs, plus C-to-T targeting
# to optimally remove targetting under constraints of using codons at physiological frequencies
# can decinstruct a sequence and make every possible variant then choose least and most evolved
# can use to look at effects of mutation on changing substrate
# for aged study, what are the consequences of relying on memory cells to much?
    features = []
    Sequence = Sequence.upper()
    i=0
    j=1
    scores = ()
    for base in range(0, len(Sequence)-2):

        MutType = ''
        CTType = ''
        RScore = ''

        if j == 1:
            codon = Sequence[base:base+3]
            AA = Translator(codon, 0)
        Nuc = Sequence[base]
        if Nuc == 'C' and base >1 and base < len(Sequence)-1:
            if (Sequence[base-2] == 'A' or Sequence[base-2] == 'T') and (Sequence[base-1] == 'A' or Sequence[base-1] == 'G') and (Sequence[base+1] == 'C' or Sequence[base+1] == 'T'):
                MutType = 'WRCY'
            elif (Sequence[base-2] == 'A' or Sequence[base-2] == 'T') and (Sequence[base-1] == 'A' or Sequence[base-1] == 'G')and not (Sequence[base+1] == 'C' or Sequence[base+1] == 'T'):
                MutType = 'WRC'
            elif ((Sequence[base-2] == 'G' or Sequence[base-2] == 'C') and (Sequence[base-1] == 'C' or Sequence[base-1] == 'T')) or Sequence[base-2:base] == 'TTC' or Sequence[base-2:base] == 'CAC' or Sequence[base-2:base] == 'GGC' or Sequence[base-2:base] == 'GAC':
                MutType = 'AID-CS'
            else:
                MutType = "Neutral"
        if Nuc == 'C':
            if j == 1:
                CkCodon = 'T' + codon[1:]
            elif j ==2:
                try:
                    CkCodon = codon[0] + 'T' + codon[2]
                except:
                    print('stop')
            elif j == 3:
                CkCodon = codon[0:1] + 'T'
            CkAA = Translator(CkCodon, 0)
            if AA[0] != CkAA[0]:
                if CkAA[0] != '*':
                    CTType = 'missense'
                    RScore = AASimilarity(AA[0]+CkAA[0])  #gets the BLOSUM62 score for conservation liklihood
                else:
                    CTType = 'nonsense'
            else:
                CTType = 'silent'

        if Nuc == 'G' and base >0 and base < len(Sequence)-2:
            if (Sequence[base-1] == 'G' or Sequence[base-1] == 'A') and (Sequence[base+1] == 'C' or Sequence[base+1] == 'T') and (Sequence[base+2] == 'A' or Sequence[base+2] == 'T'):
                MutType = 'WRCY'
            elif (Sequence[base+1] == 'C' or Sequence[base+1] == 'T') and (Sequence[base+2] == 'A' or Sequence[base+2] == 'T'):
                MutType = 'WRC'
            elif ((Sequence[base+1] == 'G' or Sequence[base+1] == 'A') and (Sequence[base+2] == 'C' or Sequence[base+2] == 'G')) or Sequence[base:base+2] == 'GAA' or Sequence[base:base+2] == 'GTG' or Sequence[base:base+2] == 'GCC' or Sequence[base:base+2] == 'GTC':
                MutType = 'AID-CS'
            else:
                MutType = "Neutral"
        if Nuc == 'G':
            if j == 1:
                CkCodon = 'A' + codon[1:]
            elif j ==2:
                CkCodon = codon[0] + 'A' + codon[2]
            elif j == 3:
                CkCodon = codon[0:1] + 'A'
            CkAA = Translator(CkCodon, 0)
            if AA[0] != CkAA[0]:
                if CkAA[0] != '*':
                    CTType = 'missense'
                    RScore = AASimilarity(AA[0]+CkAA[0])  #gets the BLOSUM62 score for conservation liklihood, negative is less, + is likly
                else:
                    CTType = 'nonsense'
            else:
                CTType = 'silent'

        if Nuc == 'A'and base >0:  #WA
            if (Sequence[base-1] == 'A' or Sequence[base-1] == 'T'):
                MutType = 'WA'
            else:
                MutType = 'Neutral'

        if Nuc == 'A':
            if j == 1:
                CkCodon = 'G' + codon[1:]
            elif j ==2:
                CkCodon = codon[0] + 'G' + codon[2]
            elif j == 3:
                CkCodon = codon[0:1] + 'G'
            CkAA = Translator(CkCodon, 0)
            if AA[0] != CkAA[0]:
                if CkAA[0] != '*':
                    CTType = 'missense'
                    RScore = AASimilarity(AA[0]+CkAA[0])  #gets the BLOSUM62 score for conservation liklihood, negative is less, + is likly
                else:
                    CTType = 'nonsense'
            else:
                CTType = 'silent'

        if Nuc == 'T'and base < len(Sequence)-1:  #WA
            if (Sequence[base+1] == 'A' or Sequence[base+1] == 'T'):
                MutType = 'TW'
            else:
                MutType = 'Neutral'

        if Nuc == 'T':
            if j == 1:
                CkCodon = 'C' + codon[1:]
            elif j ==2:
                CkCodon = codon[0] + 'C' + codon[2]
            elif j == 3:
                CkCodon = codon[0:1] + 'C'
            CkAA = Translator(CkCodon, 0)
            if AA[0] != CkAA[0]:
                if CkAA[0] != '*':
                    CTType = 'missense'
                    RScore = AASimilarity(AA[0]+CkAA[0])  #gets the BLOSUM62 score for conservation liklihood, negative is less, + is likly
                else:
                    CTType = 'nonsense'
            else:
                CTType = 'silent'

        NMut = Nuc+MutType
        TENDA, TENDG, TENDC, TENDT, MutIndex = 0,0,0,0,0

        if NMut in Mutability:
            MutIndex = Mutability[NMut]

        if NMut == 'CWRCY':
            TENDA = MutTendency['CAWRCY']
            TENDG = MutTendency['CGWRCY']
            TENDT = MutTendency['CTWRCY']
            TENDC = 0
        elif NMut == 'CWRC':
            TENDA = MutTendency['CAWRC']
            TENDG = MutTendency['CGWRC']
            TENDT = MutTendency['CTWRC']
            TENDC = 0
        elif NMut == 'CAID-CS':
            TENDA = MutTendency['CAAID-CS']
            TENDG = MutTendency['CGAID-CS']
            TENDT = MutTendency['CTAID-CS']
            TENDC = 0
        elif NMut == 'CNeutral':
            TENDA = MutTendency['CANeutral']
            TENDG = MutTendency['CGNeutral']
            TENDT = MutTendency['CTNeutral']
            TENDC = 0
        elif NMut == 'GWRCY':
            TENDA = MutTendency['GAWRCY']
            TENDG = 0
            TENDT = MutTendency['GTWRCY']
            TENDC = MutTendency['GCWRCY']
        elif NMut == 'GWRC':
            TENDA = MutTendency['GAWRC']
            TENDG = 0
            TENDT = MutTendency['GTWRC']
            TENDC = MutTendency['GCWRC']
        elif NMut == 'GAID-CS':
            TENDA = MutTendency['GAAID-CS']
            TENDG = 0
            TENDT = MutTendency['GTAID-CS']
            TENDC = MutTendency['GCAID-CS']
        elif NMut == 'GWRC':
            TENDA = MutTendency['GANeutral']
            TENDG = 0
            TENDT = MutTendency['GTNeutral']
            TENDC = MutTendency['GCNeutral']
        elif NMut == 'AWA':
            TENDA = 0
            TENDG = MutTendency['AGWA']
            TENDT = MutTendency['ATWA']
            TENDC = MutTendency['ACWA']
        elif NMut == 'ANeutral':
            TENDA = 0
            TENDG = MutTendency['AGNeutral']
            TENDT = MutTendency['ATNeutral']
            TENDC = MutTendency['ACNeutral']
        elif NMut == 'TTW':
            TENDA = MutTendency['TATW']
            TENDG = MutTendency['TGTW']
            TENDT = 0
            TENDC = MutTendency['TCTW']
        elif NMut == 'TNeutral':
            TENDA = MutTendency['TANeutral']
            TENDG = MutTendency['TGNeutral']
            TENDT = 0
            TENDC = MutTendency['TCNeutral']

        scores = (Nuc, MutType, CTType, RScore, MutIndex, TENDA, TENDG, TENDC, TENDT)
        #Nuc, obvious
        # MutType, whether in a hot, cold, or neutral for AID or Pol-eta
        # CTType, whether if C to T or G to A mutation would be silent (not verified code yet)
        # RScore, when scoring mutations oif it is a conservative amino acid change based on Blosum62
        # MutIndex, this is the empirical frequency of mutations determined from analyzing a million sequences if in hotspot, coldspot, etc
        # TENDA, similar to MutIndex but it's tendency for the current base to become an A based on empirical
        # TENDG, similar to MutIndex but it's tendency for the current base to become a G based on empirical
        # TENDC, similar to MutIndex but it's tendency for the current base to become a C based on empirical
        # TENDT similar to MutIndex but it's tendency for the current base to become a T based on empirical

        features.append(scores)
        if j <3:
            j+=1
        else:
            j=1
        # i+=1

    return features

# function for cookie sampling
def CookieSampling(mode, pf, size, data, rows, cols, signal):
    from pyclustering.cluster.kmedoids import kmedoids
    from pyclustering.cluster.center_initializer import kmeans_plusplus_initializer
    # test progress bar and downstream functions
    '''
    time.sleep(1)
    signal.emit(20, 'Step 1')
    time.sleep(1)
    signal.emit(40, 'Step 2')
    time.sleep(1)
    signal.emit(60, 'Step 3')
    time.sleep(1)
    signal.emit(80, 'Step 4')
    time.sleep(1)

    if pf == "":
        res = [i[0] for i in data]
        res = random.sample(res, int(len(res)/2))
    else:
        res = [i[0] for i in data[0]]
    return True,res
    '''
    # pre-process, validate data type
    current_progress = 1
    signal.emit(current_progress, 'Validating your input data and types...')
    process_step = int(20/len(cols))

    # convert data into pandas data frame
    DataMatrix = pd.DataFrame(data, index = rows, columns = [i[0] for i in cols])

    for field in cols:
        current_progress = current_progress + process_step
        signal.emit(current_progress, 'Validating your input data and types for ' + field[0] + ' ...')
        if field[1] == 'Num':
            try:
                DataMatrix[field[0]] = DataMatrix[field[0]].astype(float)
            except:
                ErrMsg = 'Field ' + field[0] + ' is not numerical!'
                return False, ErrMsg
        else:
            try:
                DataMatrix[field[0]] = DataMatrix[field[0]].astype(str)
            except:
                ErrMsg = 'Field ' + field[0] + ' is not Char!'
                return False, ErrMsg

    # data clean

    # step 1, data normalization
    for field in cols:
        current_progress = current_progress + process_step
        signal.emit(current_progress, 'Normalizing your input data for ' + field[0] + ' ...')
        if field[1] == 'Num':
            max = DataMatrix[field[0]].max()
            min = DataMatrix[field[0]].min()
            ratio = max - min
            DataMatrix[field[0]] = DataMatrix[field[0]].map(lambda x: (x-min)/ratio)

    # step 2, distance calculation
    '''
    from pyclustering.cluster.kmedoids import kmedoids
    from pyclustering.cluster.center_initializer import kmeans_plusplus_initializer
    from pyclustering.cluster import cluster_visualizer
    from pyclustering.utils import read_sample
    from pyclustering.samples.definitions import FCPS_SAMPLES
    from pyclustering.utils import calculate_distance_matrix
    sample = read_sample(FCPS_SAMPLES.SAMPLE_TWO_DIAMONDS)

    # Initialize initial medoids using K-Means++ algorithm
    initial_medoids = kmeans_plusplus_initializer(sample, 2).initialize(return_index=True)
    DistMatrix = calculate_distance_matrix(sample)
    DistMatrix = pd.DataFrame(DistMatrix)
    # Create instance of K-Medoids (PAM) algorithm.
    kmedoids_instance = kmedoids(DistMatrix, initial_medoids, data_type='distance_matrix')

    # Run cluster analysis and obtain results.
    kmedoids_instance.process()
    clusters = kmedoids_instance.get_clusters()
    medoids = kmedoids_instance.get_medoids()
    '''
    signal.emit(current_progress + process_step, 'Calculating distance ...')
    DistMatrix = CookieDistance(DataMatrix, [i[1] for i in cols])

    # step 3, sampling
    medoids_index = []
    current_progress = 60
    signal.emit(current_progress, 'Sampling ...')
    # none-PF mode
    if pf == "":
        ## Initialize initial medoids using K-Means++ algorithm
        initial_medoids = kmeans_plusplus_initializer(DistMatrix, size).initialize(return_index=True)
        ## create K-Medoids algorithm for processing distance matrix instead of points
        kmedoids_instance = kmedoids(DistMatrix, initial_medoids, data_type='distance_matrix')
        ## run cluster analysis and obtain results
        kmedoids_instance.process()
        medoids_index = kmedoids_instance.get_medoids()
    # PF mode
    else:
        for subindex in pf[1].values():
            if size < len(subindex):
                SubDistMatrix = DistMatrix.iloc[subindex, subindex]
                ## Initialize initial medoids using K-Means++ algorithm
                initial_medoids = kmeans_plusplus_initializer(SubDistMatrix, size).initialize(return_index=True)
                ## create K-Medoids algorithm for processing distance matrix instead of points
                kmedoids_instance = kmedoids(SubDistMatrix, initial_medoids, data_type='distance_matrix')
                ## run cluster analysis and obtain results
                try:
                    kmedoids_instance.process()
                    submedoids = kmedoids_instance.get_medoids()
                except:
                    submedoids = initial_medoids
                medoids_index = medoids_index + [subindex[i] for i in submedoids]
            else:
                medoids_index = medoids_index + subindex

    # step 4, handle important factor
    current_progress = 80
    signal.emit(current_progress, 'Handling important factors ...')
    
    col_idx = 0
    for col in cols:
        if col[2] == True:
            # levels of this factor in original dataset
            ori_levels = DataMatrix[col[0]].unique()
            # levels of this factor in sampling results
            sample_levels = DataMatrix.iloc[medoids_index, col_idx].unique()

            # if important factor has not been fully picked
            if len(sample_levels) < len(ori_levels):
                missed_levels = list(set(ori_levels).difference(set(sample_levels)))
                if len(missed_levels) > 0:
                    for miss_level in missed_levels:
                        # get indexes of all rows have this miss_level
                        #miss_level_index = DataMatrix[DataMatrix[col[0]].isin([miss_level])].index.tolist()
                        miss_level_index = find_value_location(DataMatrix[col[0]].tolist(), miss_level)
                        # get distance of miss_level rows against all picked samples
                        CurDistMtx = DistMatrix.iloc[miss_level_index, medoids_index]
                        # pick the one with largest sum of distance
                        Row_sum = CurDistMtx.apply(lambda x: x.sum(), axis=1)
                        pickID = Row_sum.idxmax()
                        #realPickID = miss_level_index[pickID]
                        # update medoids_index list
                        medoids_index.append(pickID)
        col_idx += 1
    # step 5, return results
    SamplingRes = [rows[i] for i in medoids_index]
    return True, SamplingRes

def CookieDistance(dataMtx, type):
    # seaprate char and num
    char_index = find_value_location(type, 'Char')
    num_index = find_value_location(type, 'Num')

    if len(char_index) > 0:
        char_dataMtx = dataMtx.iloc[:, char_index]
    if len(num_index) > 0:
        num_dataMtx = dataMtx.iloc[:, num_index]

    # calculate distance
    DistMtx = pd.DataFrame(numpy.full((len(dataMtx), len(dataMtx)),0))
    for i in range(len(dataMtx)-1):
        for j in range(1, len(dataMtx)):
            comp_vector = []
            # for char part
            if len(char_index) > 0:
                char_vector_i = list(char_dataMtx.iloc[i, :])
                char_vector_j = list(char_dataMtx.iloc[j, :])
                for iter in range(len(char_index)):
                    if char_vector_i[iter] == char_vector_j[iter]:
                        comp_vector.append(0)
                    else:
                        comp_vector.append(1)
                
            # for num part
            if len(num_index) > 0:
                num_vector_i = list(num_dataMtx.iloc[i, :])
                num_vector_j = list(num_dataMtx.iloc[j, :])
                for iter in range(len(num_index)):
                    res = abs(num_vector_i[iter] - num_vector_j[iter])
                    comp_vector.append(res)

            # get distance
            DistMtx.iloc[i, j] = numpy.linalg.norm(comp_vector)
            DistMtx.iloc[j, i] = DistMtx.iloc[i, j]

    # return results
    return DistMtx

def CalculateProteinScoreDiff(A, B, GapCode):
    if len(A) == len(B):
        score = 0
        maxDiff = 0
        GapCount = 0
        for i in range(len(A)):
            if A[i] == GapCode or B[i] == GapCode:
                GapCount += 1
            else:
                curDiff = abs(A[i] - B[i])
                score += curDiff
                if curDiff > maxDiff:
                    maxDiff = curDiff
        score += maxDiff * GapCount
    else:
        score = -1

    return score

def find_value_location(lst,value):
    result = [i for i in range(len(lst)) if value==lst[i]]
    return result

def dataReshape(data):
    df = pd.DataFrame(data, columns=['HC', 'LC'])
    HC_names = df['HC'].unique()
    LC_names = df['LC'].unique()
    HC_names = HC_names.tolist()
    LC_names = LC_names.tolist()
    All_names = HC_names + LC_names
    Matrix = pd.DataFrame(0, index=All_names, columns=All_names)

    gp = df.groupby(by=['HC', 'LC'])
    newdf = gp.size()
    newdf = newdf.reset_index(name='times')

    for index in range(len(newdf)):
        cur_a = newdf['HC'][index]
        cur_b = newdf['LC'][index]
        cur_count = newdf['times'][index]
        Matrix[cur_a][cur_b] = cur_count
        Matrix[cur_b][cur_a] = cur_count

    train_data = numpy.array(Matrix)
    Matrix_list = train_data.tolist()

    return All_names, Matrix_list, HC_names, LC_names

def SortBySubList(sub_li, index):
    # reverse = None (Sorts in Ascending order)
    # key is set to sort using second element of
    # sublist lambda has been used
    return (sorted(sub_li, key=lambda x: x[index]))

def proteinFunction(DBFilename, SeqNames, option, windowSize, highLight):
    # step 1: fetch data
    fields = ['SeqName', 'Sequence', 'GermlineSequence', 'CDR3Length', 'CDR1From', 'CDR1To', 'CDR2From', 'CDR2To',
              'CDR3beg', 'CDR3end', 'Mutations', 'IDEvent', 'ID', 'Species', 'Jend', 'Blank7']

    SQLStatement = 'SELECT SeqName, Sequence, GermlineSequence, CDR3Length, CDR1From, CDR1To, CDR2From, CDR2To, CDR3beg, CDR3end, Mutations, IDEvent, ID, Species, Jend, Blank7 FROM vgenesDB'
    WhereStatement = ' WHERE SeqName IN ("' + '","'.join(SeqNames.keys()) + '")'
    SQLStatement += WhereStatement
    DataIs = VGenesSQL.RunSQL(DBFilename, SQLStatement)

    ## filter out bad sequences
    FilterDataIs = []
    badNumber = 0
    ErlogFile2 = os.path.join(temp_folder, 'ErLog2.txt')
    with open(ErlogFile2, 'w') as currentFile:
        for record in DataIs:
            try:
                tmpRes = int(record[4]) + int(record[5]) + int(record[6]) + int(record[7]) + int(record[8])
                record_list = list(record)
                record_list.append(SeqNames[record[0]])
                FilterDataIs.append(record_list)
            except:
                errMsg = 'Sequence ' + record[0] + ' is incomplete and has been removed from current analysis!\n'
                currentFile.write(errMsg)
                badNumber += 1

    # Step 2: make sequences, scores, details
    CDR1beg = 0
    CDR1end = 0
    CDR2beg = 0
    CDR2end = 0
    CDR3beg = 0
    CDR3end = 0
    CDR1len = 0
    CDR2len = 0
    CDR3len = 0
    FW1len = 0
    FW2len = 0
    FW3len = 0
    FW4len = 0

    NameLength = 0
    SeqLength = 0
    SeqArray = []
    AllSeqs = []

    FilterDataIs = SortBySubList(FilterDataIs, 16)
    # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,
    for item in FilterDataIs:
        SeqArray.clear()
        SeqName = item[0]
        SeqArray.append(SeqName)

        # make CDR1beg, CDR1end, just 3 Cs and NameLength
        DNASeq = item[1]
        GDNAseq = item[2]
        mutations = item[10]
        IDEvents = item[11]

        try:
            ORF = int(item[15])
        except:
            ORF = 0

        # unfixed version
        AASeq, ErMessage = VGenesSeq.Translator(DNASeq, ORF)

        if IDEvents == 'Insertion' or IDEvents == 'Both':
            mutate = mutations
            mutations = mutate.split(',')
            for mut in mutations:
                if mut[:9] == 'Insertion':
                    Ievent = mut
                    Iparts = Ievent.split('-')
                    AddAt = int(Iparts[1])
                    SeqToAdd = Iparts[2]
                    GDNAseq = GDNAseq[:AddAt] + SeqToAdd + GDNAseq[AddAt:]

        GAASeq, ErMessage = VGenesSeq.Translator(GDNAseq, ORF)

        if int(item[4]) == 0 or int(item[5]) == 0 or int(item[6]) == 0 or int(item[7]) == 0 or int(item[8]) == 0:
            GCDRs = IgBLASTer.GetGLCDRs(GDNAseq, item[13])

        if int(item[4]) != 0:
            SeqArray.append(int((int(item[4]) - 1) / 3))  # 'c1b'
        else:
            SeqArray.append(int((int(GCDRs[2]) - 1) / 3))

        if int(item[5]) != 0:
            SeqArray.append(int((int(item[5])) / 3))  # c1e
        else:
            SeqArray.append(int(int(GCDRs[3]) / 3))

        if int(item[6]) != 0:
            SeqArray.append(int((int(item[6]) - 1) / 3))
        else:
            SeqArray.append(int((int(GCDRs[6]) - 1) / 3))

        if int(item[7]) != 0:
            SeqArray.append(int((int(item[7])) / 3))
        else:
            SeqArray.append(int(int(GCDRs[7]) / 3))

        if int(item[8]) != 0:
            SeqArray.append(int((int(item[8])) / 3))
        else:
            SeqArray.append(int(int(GCDRs[9]) / 3))

        if int(item[9]) != 0:
            SeqArray.append(int((int(item[9])) / 3))
        else:
            SeqArray.append(len(GAASeq))

        if int(item[9]) != 0:
            Jend = int(int(item[14]) / 3)
            SeqArray.append(Jend)
        else:
            SeqArray.append(len(GAASeq))
        # SeqArray has: SeqName, CDR1beg, CDR1end, CDR2beg, CDR2end, CDR3beg, CDR3end,

        CDR1beg = int(SeqArray[1])
        CDR1end = int(SeqArray[2])
        CDR2beg = int(SeqArray[3])
        CDR2end = int(SeqArray[4])
        CDR3beg = int(SeqArray[5])
        CDR3end = int(SeqArray[6])

        if len(SeqName) > NameLength: NameLength = len(SeqName)

        if len(AASeq) > len(GAASeq):
            LenTo = len(GAASeq)
            AASeq = AASeq[:LenTo]
        else:
            LenTo = len(AASeq)

        SeqArray.append(AASeq)  # place original sequence without bad germ and seq regions for alignment

        for i in range(0, LenTo - 1):  # first replace bad codons with germline codons
            if AASeq[i] == GAASeq[i]:
                if AASeq[i] == '.' or AASeq[i] == '~':
                    AASeq = AASeq[:i] + AASeq[i + 1:] + '.'
                    GAASeq = GAASeq[:i] + GAASeq[i + 1:] + '.'

        for i in range(0, LenTo - 1):
            if AASeq[i] != GAASeq[i]:
                if AASeq[i] == '.' or AASeq[i] == '~' or AASeq[i] == '*':
                    AASeq = AASeq[:i] + GAASeq[i] + AASeq[i + 1:]

        AASeq = AASeq.replace('~', '').replace('.', '')

        if len(AASeq) > SeqLength: SeqLength = len(AASeq)

        if CDR1beg > FW1len: FW1len = CDR1beg
        if (CDR1end - CDR1beg) > CDR1len: CDR1len = (CDR1end - CDR1beg)
        if (CDR2beg - CDR1end) > FW2len: FW2len = (CDR2beg - CDR1end)
        if (CDR2end - CDR2beg) > CDR2len: CDR2len = (CDR2end - CDR2beg)
        if (CDR3beg - CDR2end) > FW3len: FW3len = (CDR3beg - CDR2end)
        if (CDR3end - CDR3beg) > CDR3len: CDR3len = (CDR3end - CDR3beg)
        if (Jend - CDR3end) > FW4len: FW4len = (Jend - CDR3end)

        if option == 'Hydrophobicity':
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophobicity', windowSize, True)
            PhobScale = (-4.5, 4.5)  # based on tests paramators
            SeqArray.append(ColorMap)
        else:
            SeqArray.append('None')

        if option == 'Hydrophilicity':
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Hydrophilicity', windowSize, True)
            PhilScale = (-3.4, 3.0)  # based on tests paramators
            SeqArray.append(ColorMap)
        else:
            SeqArray.append('None')

        if option == 'Flexibility':
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Flexibility', windowSize, True)
            FlexScale = (0.904, 1.102)  # based on tests paramators
            SeqArray.append(ColorMap)
        else:
            SeqArray.append('None')

        if option == 'Surface':
            ColorMap = VGenesSeq.OtherParam(AASeq, 'Surface', windowSize, True)
            SurfScale = (0.394, 1.545)  # based on tests paramators
            SeqArray.append(ColorMap)
        else:
            SeqArray.append('None')

        if option == 'MapAApI':
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapAApI', windowSize, True)
            pIScale = (0, 14)  # based on tests paramators
            SeqArray.append(ColorMap)
        else:
            SeqArray.append('None')

        if option == 'MapInstability':
            ColorMap = VGenesSeq.OtherParam(AASeq, 'MapInstability', windowSize, True)
            # for this need to scale relatively but so that anything>40 is in the red  as 40+ = unstable
            if ColorMap != 0:
                Highest = max(ColorMap)
                Lowest = min(ColorMap)
                maxi = ((40 - Lowest) / 8) * 11
                InsScale = (Lowest, maxi)  # based on tests paramators
            else:
                InsScale = (0, 1)
            SeqArray.append(ColorMap)
        else:
            SeqArray.append('None')

        AllSeqs.append(tuple(SeqArray))

    # Step 3: Make HTML viewers from current data
    ## copy protein viewer template
    time_stamp = time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime())
    out_html_file = os.path.join(temp_folder, time_stamp + '.html')
    header_file = os.path.join(working_prefix, 'Data', 'template_ProteinViewer.html')
    shutil.copyfile(header_file, out_html_file)

    html_content = '<ul class = "seq_container" style="margin-top: 40px; padding-top: 10px;">\n'
    ## make HTML for each report type
    if option == 'Hydrophobicity':
        html_content += '<li>\n<h3 class="title0" >Hydrophobicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 9, PhobScale, highLight)
        html_content += '</li>\n\n'

    if option == 'Hydrophilicity':
        html_content += '<li>\n<h3 class="title0" >Hydrophilicity</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 10, PhilScale, highLight)
        html_content += '</li>\n\n'

    if option == 'Flexibility':
        html_content += '<li>\n<h3 class="title0" >Flexibility</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 11, FlexScale, highLight)
        html_content += '</li>\n\n'

    if option == 'Surface':
        html_content += '<li>\n<h3 class="title0" >Surface liklihood</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 12, SurfScale, highLight)
        html_content += '</li>\n\n'

    if option == 'MapAApI':
        html_content += '<li>\n<h3 class="title0" >Isoelectric point (pI)</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 13, pIScale, highLight)
        html_content += '</li>\n\n'

    if option == 'MapInstability':
        html_content += '<li>\n<h3 class="title0" >Instability</h3>\n'
        html_content += makeProteinHTML(AllSeqs, 14, InsScale, highLight)
        html_content += '</li>\n\n'

    html_content += '</ul>\n</body>\n</html>\n'
    ## write content to HTML file
    out_file_handle = open(out_html_file, 'a')
    out_file_handle.write(html_content)
    out_file_handle.close()

    # return data
    return out_html_file, badNumber, ErlogFile2

def makeProteinHTML(dataArray, index, scale, highLight):
    scaleMin = scale[0]
    scaleMax = scale[1]
    scaleRange = scaleMax - scaleMin
    scaleIncreament = scaleRange / 11

    out_str = '<div class="reportBox" >\n'
    
    # Seq Name
    out_str += '<div class="virtcalBox">\n<p class="centerText name_section">Sequence Name</p>\n'
    for record in dataArray:
        if record[0] in highLight:
            out_str += '<p style="color:red;">' + record[0] + '</p>\n'
        else:
            out_str += '<p>' + record[0] + '</p>\n'
    out_str += '</div>\n'

    # FWR1
    out_str += '<div class="virtcalBox">\n<p class="centerText fwr_section">FWR1</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(0, record[1]):
            cur_aa = record[8][sub_index]
            # first 2 AAs and last 2 AAs don't have score, set color to neutral
            try:
                if sub_index < 2:
                    color = 'col6'
                elif sub_index > len(record[index]) - 1:
                    color = 'col6'
                else:
                        colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                        if colorLevel > 11:
                            colorLevel = 11
                        color = 'col' + str(colorLevel)
            except:
                color = 'col6'
            out_str += '<span class="' + color + '">' + cur_aa + '</span>'
        out_str += '</p>\n'
    out_str += '</div>\n'

    # CDR1
    out_str += '<div class="virtcalBox">\n<p class="centerText cdr_section">CDR1</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(record[1], record[2]):
            cur_aa = record[8][sub_index]
            # first 2 AAs and last 2 AAs don't have score, set color to neutral
            try:
                if sub_index < 2:
                    color = 'col6'
                elif sub_index > len(record[index]) - 1:
                    color = 'col6'
                else:
                    colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                    if colorLevel > 11:
                        colorLevel = 11
                    color = 'col' + str(colorLevel)
            except:
                color = 'col6'
            out_str += '<span class="' + color + '">' + cur_aa + '</span>'
        out_str += '</p>\n'
    out_str += '</div>\n'

    # FWR2
    out_str += '<div class="virtcalBox">\n<p class="centerText fwr_section">FWR2</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(record[2], record[3]):
            cur_aa = record[8][sub_index]
            # first 2 AAs and last 2 AAs don't have score, set color to neutral
            try:
                if sub_index < 2:
                    color = 'col6'
                elif sub_index > len(record[index]) - 1:
                    color = 'col6'
                else:
                    colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                    if colorLevel > 11:
                        colorLevel = 11
                    color = 'col' + str(colorLevel)
            except:
                color = 'col6'
            out_str += '<span class="' + color + '">' + cur_aa + '</span>'
        out_str += '</p>\n'
    out_str += '</div>\n'

    # CDR2
    out_str += '<div class="virtcalBox">\n<p class="centerText cdr_section">CDR2</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(record[3], record[4]):
            cur_aa = record[8][sub_index]
            # first 2 AAs and last 2 AAs don't have score, set color to neutral
            try:
                if sub_index < 2:
                    color = 'col6'
                elif sub_index > len(record[index]) - 1:
                    color = 'col6'
                else:
                    colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                    if colorLevel > 11:
                        colorLevel = 11
                    color = 'col' + str(colorLevel)
            except:
                color = 'col6'
            out_str += '<span class="' + color + '">' + cur_aa + '</span>'
    out_str += '</p>\n'
    out_str += '</div>\n'

    # FWR3
    out_str += '<div class="virtcalBox">\n<p class="centerText fwr_section">FWR3</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(record[4], record[5]):
            cur_aa = record[8][sub_index]
            # first 2 AAs and last 2 AAs don't have score, set color to neutral
            try:
                if sub_index < 2:
                    color = 'col6'
                elif sub_index > len(record[index]) - 1:
                    color = 'col6'
                else:
                    colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                    if colorLevel > 11:
                        colorLevel = 11
                    color = 'col' + str(colorLevel)
            except:
                color = 'col6'
            out_str += '<span class="' + color + '">' + cur_aa + '</span>'
        out_str += '</p>\n'
    out_str += '</div>\n'

    # CDR3
    out_str += '<div class="virtcalBox">\n<p class="centerText cdr_section">CDR3</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(record[5], record[6]):
            cur_aa = record[8][sub_index]
            # first 2 AAs and last 2 AAs don't have score, set color to neutral
            try:
                if sub_index < 2:
                    color = 'col6'
                elif sub_index > len(record[index]) - 1:
                    color = 'col6'
                else:
                    colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                    if colorLevel > 11:
                        colorLevel = 11
                    color = 'col' + str(colorLevel)
            except:
                color = 'col6'
            out_str += '<span class="' + color + '">' + cur_aa + '</span>'
        out_str += '</p>\n'
    out_str += '</div>\n'

    # FWR4
    out_str += '<div class="virtcalBox">\n<p class="centerText fwr_section">FWR4</p>\n'
    for record in dataArray:
        out_str += '<p>'
        for sub_index in range(record[6], record[7]):
            try:
                cur_aa = record[8][sub_index]
                # first 2 AAs and last 2 AAs don't have score, set color to neutral
                try:
                    if sub_index < 2:
                        color = 'col6'
                    elif sub_index > len(record[index]) - 1:
                        color = 'col6'
                    else:
                        colorLevel = math.ceil((record[index][sub_index] - scaleMin) / scaleIncreament)
                        if colorLevel > 11:
                            colorLevel = 11
                        color = 'col' + str(colorLevel)
                except:
                    color = 'col6'
                out_str += '<span class="' + color + '">' + cur_aa + '</span>'
            except:
                pass
        out_str += '</p>\n'
    out_str += '</div>\n'

    out_str += '</div>\n'
    return out_str

def parseChangeOoutput(file):
    name_index = 0
    clone_index = 48
    line_index = 0
    Err = 0
    ErrMsg = 'Please double check your input file, make sure it is the ourput of ChangeO DefineClones.py!\n'
    Result = []
    cloneIDs = []
    # read file
    with open(file, 'r') as readfile:
        for line in readfile:
            line = re.sub(r'[\r\n]', '', line)
            if line_index == 0:
                tmp_list = line.split('\t')
                try:
                    name_index = tmp_list.index('sequence_id')
                except:
                    ErrMsg += "Can not find sequence_id information from your file!\n"
                    Err = 1
                try:
                    clone_index = tmp_list.index('clone_id')
                except:
                    ErrMsg += "Can not find clone_id information from your file!\n"
                    Err = 1
                if Err == 1:
                    break
            else:
                tmp_list = line.split('\t')
                Result.append([tmp_list[name_index], tmp_list[clone_index]])
                cloneIDs.append(tmp_list[clone_index])
            
            line_index += 1
    # return results
    if Err == 1:
        return Err, ErrMsg
    else:
        cloneDict = Counter(cloneIDs)
        for record in Result:
            if cloneDict[record[1]] < 2:
                record[1] = '0'
        return Err, Result

def logoColorSchemeAA(colorOption):
    protein_alphabet = Alphabet('ACDEFGHIKLMNOPQRSTUVWYBJZX*-adefghiklmnopqrstuvwybjzx', [])
    if colorOption == 'Hydrophobicity':
        colorscheme = 'default'
    elif colorOption == 'Chemistry':
        baserules = [
            SymbolColor("GSTYC", "green", "polar"),
            SymbolColor("NQ", "purple", "neutral"),
            SymbolColor("KRH", "blue", "basic"),
            SymbolColor("DE", "red", "acidic"),
            SymbolColor("PAWFLIMV", "black", "hydrophobic")
        ]
        colorscheme = ColorScheme(baserules, alphabet=protein_alphabet)
    elif colorOption == 'Charge':
        baserules = [
            SymbolColor("KRH", "blue", "Positive"),
            SymbolColor("DE", "red", "Negative"),
            SymbolColor("ACFGILMNOPQSTUVWYBJZX", "black", "others")
        ]
        colorscheme = ColorScheme(baserules, alphabet=protein_alphabet)
    elif colorOption == 'Monochrome':
        baserules = [
            SymbolColor("ACDEFGHIKLMNOPQRSTUVWYBJZX", "black", "all")
        ]
        colorscheme = ColorScheme(baserules, alphabet=protein_alphabet)
    else:
        colorscheme = 'default'

    return colorscheme

def logoColorSchemeNT(colorOption):
    nucleotide_alphabet = Alphabet('ACGTURYSWKMBDHVN.-acgturyswkmbdhvn', [])
    if colorOption == 'Base Pairing':
        colorscheme = 'default'
    elif colorOption == 'Classic':
        baserules = [
            SymbolColor("G", "orange", "G"),
            SymbolColor("TU", "red", "TU"),
            SymbolColor("C", "blue", "C"),
            SymbolColor("A", "green", "A"),
        ]
        colorscheme = ColorScheme(baserules, alphabet=nucleotide_alphabet)
    elif colorOption == 'Monochrome':
        baserules = [
            SymbolColor("ACGTURYSWKMBDHVN", "black", "all")
        ]
        colorscheme = ColorScheme(baserules, alphabet=nucleotide_alphabet)
    else:
        colorscheme = 'default'

    return colorscheme

def MutationalAnalysis(input):
    # initialize variable
    LineRegion = ''
    LineQueryAA = ''
    LineQueryNT = ''
    LineGermlineNT = ''
    LineGermlineAA = ''

    # fetch correct information
    Lines = input.split("\n")
    i = 0
    for line in Lines:
        if line == '':
            tmp_region = Lines[i + 1]
            str, end = re.search(r'\S+', tmp_region).span()

            LineRegion += Lines[i + 1][str:end]
            LineQueryAA += Lines[i + 2][str:end]
            LineQueryNT += Lines[i + 3][str:end]
            LineGermlineNT += Lines[i + 4][str:end]
            LineGermlineAA += Lines[i + 5][str:end]

            if re.search(r'FR3-+>', LineRegion):
                break
        i += 1

    # regions
    FR1_region = re.search(r'<-+FR1-+>', LineRegion).span()
    FR2_region = re.search(r'<-+FR2-+>', LineRegion).span()
    FR3_region = re.search(r'<-+FR3-+>', LineRegion).span()
    CDR1_region = re.search(r'<-+CDR1-+>', LineRegion).span()
    CDR2_region = re.search(r'<-+CDR2-+>', LineRegion).span()

    region_list = ['FR1'] * (FR1_region[1] - FR1_region[0]) + \
                  ['CDR1'] * (CDR1_region[1] - CDR1_region[0]) + \
                  ['FR2'] * (FR2_region[1] - FR2_region[0]) + \
                  ['CDR2'] * (CDR2_region[1] - CDR2_region[0]) + \
                  ['FR3'] * (FR3_region[1] - FR3_region[0])

    MutDetail_S = []
    MutDetail_N = []
    for i in range(len(LineRegion)):
        if LineGermlineNT[i] != '.' and LineGermlineNT[i] != '-':
            pos_nt = i + 1
            germline_nt = LineGermlineNT[i]
            query_nt = LineQueryNT[i]
            start_codon = i - 1
            if start_codon < 0:
                start_codon = 0
            end_codon = i + 1
            germline_aa = LineGermlineAA[start_codon:end_codon]
            query_aa = LineQueryAA[start_codon:end_codon]
            germline_aa = re.sub(' ', '', germline_aa)
            query_aa = re.sub(' ', '', query_aa)
            if i < len(region_list):
                region = region_list[i]
            else:
                region = 'Other'
            str_aa = LineQueryAA[0:pos_nt + 1]
            str_aa = re.sub(' ', '', str_aa)
            pos_aa = len(str_aa)

            if germline_aa == query_aa:
                mut_type = 'synonymous'
                record = [pos_nt, germline_nt, query_nt, pos_aa, germline_aa, query_aa, mut_type, region]
                MutDetail_S.append(record)
            else:
                mut_type = 'Nonsynonymous'
                record = [pos_nt, germline_nt, query_nt, pos_aa, germline_aa, query_aa, mut_type, region]
                MutDetail_N.append(record)

    # res = LineRegion + "\n" + \
    #      LineQueryAA + "\n" + \
    #      LineQueryNT + "\n" + \
    #      LineGermlineNT + "\n" + \
    #      LineGermlineAA

    return MutDetail_S, MutDetail_N

def checkATCG(sequence):
    if len(sequence) > 0:
        residue = re.sub(r'[ATCG]','',sequence)
        if len(residue) > 0:
            return False
        else:
            return True
    else:
        return False

async def get_json_data(url: str) -> dict:
    async with ClientSession(connector=TCPConnector(ssl=False)) as session:
        async with session.get(url=url) as response:
            return await response.json()

Mutability = {'CWRCY':5.328476052, 'CWRC':1.615976588, 'CAID-CS':0.878356004, 'CNeutral':1.080514212,
                'GWRCY':3.75544955, 'GWRC':4.626183008, 'GAID-CS':0.725579452, 'GNeutral':1.512267645,
                'AWA':3.897581991, 'ANeutral':2.518229922, 'TTW':2.646667088, 'TNeutral':0.889080601}
MutTendency = {'CTWRCY':3.419071313, 'CTWRC':0.870149852, 'CTAID-CS':0.350768348, 'CTNeutral':0.72123155,
               'CGWRCY':0.022854755, 'CGWRC':0.031806369, 'CGAID-CS':0.201546946, 'CGNeutral':0.225848265,
               'CAWRCY':0.00152365, 'CAWRC':0.048097436, 'CAAID-CS':0.152787026, 'CANeutral':0.157784404,
                'GTWRCY':0.092268681, 'GTWRC':2.371327585, 'GTAID-CS':0.145110857, 'GTNeutral':0.188034032,
                'GCWRCY':0.241181924, 'GCWRC':0.573265113, 'GCAID-CS':0.073120796, 'GCNeutral':0.178289758,
                'GAWRCY':4.103190461, 'GAWRC':3.620687502, 'GAAID-CS':0.216648625, 'GANeutral':0.801415762,
                'ATWA':0.730736321, 'ATNeutral':0.273391661, 'TATW':0.275989829, 'TANeutral':0.163184205,
                'AGWA':2.383833337, 'AGNeutral':1.502258807, 'TGTW':0.425101597, 'TGNeutral':0.194067827,
                'ACWA':1.090225932, 'ACNeutral':0.608828997, 'TCTW':1.549320198, 'TCNeutral':0.409848594}

BLOSUM62 = {'AA':4,'AR':-1, 'AN':-2, 'AD':-2, 'AC':0,'AQ':-1, 'AE':-1,
'AG':0, 'AH':-2,'AI':-1, 'AL':-1, 'AK':-1, 'AM':-1,'AF':-2,
'AP':-1, 'AS':1,'AT':0,'AW':-3, 'AY':-2, 'AV':0,'RR':4,
'RN':0, 'RD':-2, 'RC':-3,'RQ':1, 'RE':0,'RG':-2, 'RH':0,
'RI':-3, 'RL':-2, 'RK':2, 'RM':-1,'RF':-3,'RP':-2, 'RS':-1,
'RT':-1,'RW':-3, 'RY':-2, 'RV':-3,'NN':6, 'ND':1, 'NC':-3,
'NQ':0, 'NE':0,'NG':0, 'NH':1,'NI':-3, 'NL':-3, 'NK':0, 'NM':-2,
'NF':-3,'NP':-2, 'NS':1,'NT':0,'NW':-4, 'NY':-2, 'NV':-3,'DD':6,
'DC':-3,'DQ':0, 'DE':2,'DG':-1, 'DH':-1,'DI':-3, 'DL':-4, 'DK':-1,
'DM':-3,'DF':-3,'DP':-1, 'DS':0,'DT':-1,'DW':-4, 'DY':-3, 'DV':-3,
'CC':9,'CQ':-3, 'CE':-4,'CG':-3, 'CH':-3,'CI':-1, 'CL':-1, 'CK':-3,
'CM':-1,'CF':-2,'CP':-3, 'CS':-1,'CT':-1,'CW':-2, 'CY':-2, 'CV':-1,
'QQ':5, 'QE':2,'QG':-2, 'QH':0,'QI':-3, 'QL':-2, 'QK':1, 'QM':0,
'QF':-3,'QP':-1, 'QS':0,'QT':-1,'QW':-2, 'QY':-1, 'QV':-2,'EE':5,
'EG':-2, 'EH':0,'EI':-3, 'EL':-3, 'EK':1, 'EM':-2,'EF':-3,'EP':-1,
'ES':0,'ET':-1,'EW':-3, 'EY':-2, 'EV':-2,'GG':6, 'GH':-2,'GI':-4, 'GL':-4,
'GK':-2, 'GM':-3,'GF':-3,'GP':-2, 'GS':0,'GT':-2,'GW':-2, 'GY':-3, 'GV':-3,
'HH':8,'HI':-3, 'HL':-3, 'HK':-1, 'HM':-2,'HF':-1,'HP':-2, 'HS':-1,'HT':-2,
'HW':-2, 'HY':2, 'HV':-3,'II':4, 'IL':2, 'IK':-3, 'IM':1,'IF':0,'IP':-3,
'IS':-2,'IT':-1,'IW':-3, 'IY':-1, 'IV':3,'LL':4, 'LK':-2, 'LM':2,'LF':0,
'LP':-3, 'LS':-2,'LT':-1,'LW':-2, 'LY':-1, 'LV':1,'KK':5, 'KM':-1,'KF':-3,
'KP':-1, 'KS':0,'KT':-1,'KW':-3, 'KY':-2, 'KV':-2,'MM':5,'MF':0,'MP':-2,
'MS':-1,'MT':-1,'MW':-1, 'MY':-1, 'MV':1,'FF':6,'FP':-4, 'FS':-2,'FT':-2,
'FW':1, 'FY':3, 'FV':-1,'PP':7, 'PS':-1,'PT':-1,'PW':-4, 'PY':-3, 'PV':-2,
'SS':4,'ST':1,'SW':-3, 'SY':-2, 'SV':-2,'TT':5,'TW':-2, 'TY':-2, 'TV':0,
'WW':11, 'WY':2, 'WV':3,'YY':7, 'YV':-1, 'VV':5}

DNADict = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}

CodonDict={'ATT':'I',   'ATC':'I',  'ATA':'I',  'CTT':'L',  'CTC':'L',
'CTA':'L',  'CTG':'L',  'TTA':'L',  'TTG':'L',  'GTT':'V',  'GTC':'V',
'GTA':'V',  'GTG':'V',  'TTT':'F',  'TTC':'F',  'ATG':'M',  'TGT':'C',
'TGC':'C',  'GCT':'A',  'GCC':'A',  'GCA':'A',  'GCG':'A',  'GGT':'G',
'GGC':'G',  'GGA':'G',  'GGG':'G',  'CCT':'P',  'CCC':'P',  'CCA':'P',
'CCG':'P',  'ACT':'T',  'ACC':'T',  'ACA':'T',  'ACG':'T',  'TCT':'S',
'TCC':'S',  'TCA':'S',  'TCG':'S',  'AGT':'S',  'AGC':'S',  'TAT':'Y',
'TAC':'Y',  'TGG':'W',  'CAA':'Q',  'CAG':'Q',  'AAT':'N',  'AAC':'N',
'CAT':'H',  'CAC':'H',  'GAA':'E',  'GAG':'E',  'GAT':'D',  'GAC':'D',
'AAA':'K',  'AAG':'K',  'CGT':'R',  'CGC':'R',  'CGA':'R',  'CGG':'R',
'AGA':'R',  'AGG':'R',  'TAA':'*',  'TAG':'*',  'TGA':'*',  '...':'.',
'NNN':'.'}

AACodonDict={'I':'ATT','L':'CTT','V':'GTT','F':'TTT','M':'ATG','C':'TGT',
             'A':'GCT','G':'GGT','P':'CCT','T':'ACT','S':'TCT','Y':'TAT',
             'W':'TGG','Q':'CAA','N':'AAT','H':'CAT','E':'GAA','D':'GAT',
             'K':'AAA','R':'CGT'}

# Dictionaries indicating 1st nucleotide after the CDR3 ends in each J gene
JHuman = {'IGKJ1*01':8, 'IGKJ2*01':9, 'IGKJ2*02':8, 'IGKJ2*03':8,
          'IGKJ2*04':9, 'IGKJ3*01':8, 'IGKJ4*01':8, 'IGKJ4*02':8,
          'IGKJ5*01':8, 'IGHJ1*01':18, 'IGHJ2*01':19, 'IGHJ3*01':16,
          'IGHJ3*02':16, 'IGHJ4*01':14, 'IGHJ4*02':14, 'IGHJ4*03':14,
          'IGHJ5*01':17, 'IGHJ5*02':17, 'IGHJ6*01':29, 'IGHJ6*02':29,
          'IGHJ6*03':29,    'IGHJ6*04':29, 'IGLJ1*01':8, 'IGLJ2*01':8,
          'IGLJ3*01':8, 'IGLJ3*02':8, 'IGLJ4*01':8, 'IGLJ5*01':8,
          'IGLJ5*02':8, 'IGLJ6*01':8, 'IGLJ7*01':8, 'IGLJ7*02':8}

JMouse = {'IGKJ1*01':8, 'IGKJ1*02':7, 'IGKJ2*01':9, 'IGKJ2*02':9,
          'IGKJ2*03':9, 'IGKJ3*01':8, 'IGKJ3*02':8, 'IGKJ4*01':8,
          'IGKJ4*02':8, 'IGKJ5*01':8, 'IGHJ1*01':19, 'IGHJ1*02':19,
          'IGHJ1*03':19, 'IGHJ2*01':14, 'IGHJ2*02':14, 'IGHJ2*03':12,
          'IGHJ3*01':14, 'IGHJ3*02':14, 'IGHJ4*01':20}

if __name__ == '__main__':
    import sys

    QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling)
    QCoreApplication.setAttribute(Qt.AA_UseHighDpiPixmaps)

    app = QtWidgets.QApplication(sys.argv)
    if system() == 'Windows':
        app.setStyle('Fusion')

    # dark theme
    '''
    app.setStyle('Fusion')
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.WindowText, Qt.white)
    palette.setColor(QPalette.Base, QColor(15, 15, 15))
    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    palette.setColor(QPalette.ToolTipBase, Qt.white)
    palette.setColor(QPalette.ToolTipText, Qt.white)
    palette.setColor(QPalette.Text, Qt.white)
    palette.setColor(QPalette.Button, QColor(53, 53, 53))
    palette.setColor(QPalette.ButtonText, Qt.white)
    palette.setColor(QPalette.BrightText, Qt.red)

    palette.setColor(QPalette.Highlight, QColor(142, 45, 197).lighter())
    palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(palette)
    '''
    Vgenes = VGenesForm()

    Vgenes.ApplicationStarted()
    sys.exit(app.exec_())
